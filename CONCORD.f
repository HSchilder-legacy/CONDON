      MODULE foo
      INTERFACE
      SUBROUTINE SUGANK(JACOMB,NOSIMI
     1,FKWERT,FLWERT,FMWERT,FNWERT,GMAT
     1,EIWERT,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC
     2,DIFLOW,DIFMAX !for SUGANO, but not used
     2,EI2VAL,ZE2MAN
     3,CFDMMM,KOMBIN,MOROUT,NRSTOR,NURTMQ !NURTMP not needed
     4,ND252,ND2828
     5,JAABLT,TESLAS,KENNNG
     7,EIWECU,FMATCU,GMATCU,KOMBIC,JTRANS,N63504
C
     8,EIVECT,EIVECU
     8,EI1VAL,EICVAL
     8,NRVAL,NRVALC)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/JC3V/ZWEI12
      INTEGER ZOMBIN,ZOMBIC
C     1,ZNRVAL,ZNRVAC
      DOUBLE PRECISION EIWERT(252) !<->ALLOCATE (EIWERT(ND2002)) IN SUSC
     1,DIRECZ(3)
     2,EI2VAL(*),ZE2MAN(*)
     5,EIWECU(252),FIWERT(252),FIWECU(252)
      DOUBLE PRECISION EI1VAL(252),EICVAL(252)
      COMPLEX*16 CPXMAT(ND2828,ND2828)
     1,CFDMMM(ND2828,*),FMAT(ND252,ND252,5)
     1,GMAT(ND252,ND252,3),TEMPPR,TEMPPI,TEMPMR,TEMPMI,FAKMAT
     2,ZGFMAT,ZGGMAT,ZFMATC,ZGMATC
     2,FMATCU(252,252,3),GMATCU(252,252,3)
     3,FFMAT(252,252,3),FGMAT(252,252,3)
     3,FMATTU(252,252,3),GMATTU(252,252,3),FCFMAT,GCGMAT
     4,EIVECC(ND2828,ND2828)
      COMPLEX*16 EIVECT(252,252),EIVECU(252,252)
C     1,EIVEZG,EIVEZU
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,MIST14(7)
      COMMON/MIRROV/FACZ,FACXY
C
      END SUBROUTINE SUGANK !in INTERFACE
C
      SUBROUTINE KOMBII(KENNNG,
     1EI2VAL,ZE2MAN,NRVAL,EI1VAL,ZE1MAN,KOMBIN,
     2EICVAL,ZECMAN,NRVALC,KOMBIC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      DIMENSION EI1VAL(252),EI2VAL(*),EICVAL(252)
      DIMENSION ZE1MAN(252),ZE2MAN(*),ZECMAN(252)
      INTEGER ZOMBIN,ZOMBIC,ZNRVAL,ZNRVAC
      COMMON/ALLGEM/MOROUT,MORTEX,MIST(7)
      COMMON/VALQ/NRVALQ
C
      END SUBROUTINE KOMBII !in INTERFACE
C
      END INTERFACE
CEND MODULE foo
      END MODULE foo
      PROGRAM CONCORD
 1920 FORMAT(
     1' PROGRAM CONCORD written in STANDARD FORTRAN 95.',/,
     2' Copyright 2013 Helmut SCHILDER, Fachhochschule Aachen Germany.',
     3/,' PROGRAM CONCORD is free software, covered by the GNU General P
     4ublic License,',/,' and you are welcome to change it and/or distri
     5bute copies of it',/,' under certain conditions.',/,
     6' Type "show copying" to see the conditions.',/,
     7' There is absolutely no warranty for PROGRAM CONCORD.  Type "show
     8 warranty" for details.',/,' Type "show more" to see some hints.'
     9,/,' Scientific use of computational results or program code shoul
     4d include the citation:',/,
     5' Helmut Schilder: PROGRAM CONCORD, Fachhochschule Aachen 2013.'
     6,/,' RETURN to start calculation, type "9" to stop.')
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   "ABOUT THIS PROGRAM" SEE BELOW 1298 FORMAT(... AND 1297 FORMAT(...!
C   Instead of RETURN (to start) or "9": Type "show more" to see some hints
C (enables OUTPUT OF MORE TEXT as with MORTEX=2, but no calculation starts)!
C   FOR MORE OUTPUT OF MORE TEXT DURING A CALCULATON: PUT IN MORTEX=2!
C   MANY "TESTS" ARE INCORPORATED! ESPECIALLY NEW IS "NOSIMI" - "NO (EXTRA)
C     SIMILARITY TRANSFORMATION" - WITH NOSIMI=1 AS THE (OLD) STANDARD!
C   FOR NOSIMI=0 THE MAGN. FIELD IS INCLUDED NOT "WITH", BUT "BEFORE"
C     HEISENBERG COUPLING (FOR THE LETTER: INCLUDED IN GMAT ALREADY)!
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(J20=44)
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      COMMON/CROVER/VLSTNG(44)
      COMMON/RRF/RACAHB,RACAHC,FKSIDA
      COMMON/RF/RACAKB(9),FKSIDK(9)
      COMMON/FINTE/FINT(4,13),FKSIWI(13)
      COMMON/QBQVQQ/QB,QV
      COMMON/QQQQQQ/QQ
      COMMON/MOWDAT/NOWDAT
      COMMON/XMAT12/
     1WERT12(252),FMAT12(252,252,3),GMAT12(252,252,3),KENNNG,KOMBIN
      CHARACTER QTEXT1(60)
      CHARACTER*13 QTEXT0
      CHARACTER*15 DATEI,QMPC
      CHARACTER*50 QUIVAR,QUIVAQ
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,VIER=4.0D0
     1,VPREZ6=1.0D6/(4.D0*3.1415926D0))
      DIMENSION FINTEG(4),RACAHB(9,5,3),RACAHC(9,5,3),FKSIDA(9,5,3)
     1,REDFAZ(3),DIRECZ(3),SIGMA0(601),FKSIU(3),FINTEU(3,2)
C**   THERE ARE 23 DIFFERENT POSSIBILITIES OF INPUT OF (MAX.27) B-VALUES
C     ("MASKE")! (STANDARD: SYMMETRIES DOWN TO ORTHO-RHOMBIC - NO 5-FOLD AXES -
C     IN ADDITION, WITH SPECIAL INPUT: ANY SYMMETRY INCLUDING NO SYMMETRY (C1))
C     LIT.: HANDBOOK ON THE PHYSICS AND CHEMISTRY OF RARE EARTHS VOL.23
C     CHAPTER 155. 1996 ELSEVIER SCIENCE B.V.
      DIMENSION IGROUP(23,4),MASKE(11,19),KMASKE(20),MINPLS(3)
     1,MASKED(23,4),MULMUD(9),MULMUP(5)
     2,LGROUP(5,8),LOLUMM(8)
      COMPLEX*16 FMAT12,GMAT12
      COMMON/MAINPR/ZETA,FINTEG,REDFAZ,DIRECZ,SIGMA0
     1,JASTRU,KLWERT,NREL,NGROUP,KMASKE !FOR BLOCKDATA WWWWWW ONLY!
      DATA FKSIU/2113.D0,1926.D0,1748.D0/
      DATA JACHI0,NEUORB,KLICK7/0,0,0/
      DATA MINPLS/1,1,1/
      DATA FINTEU/76557.D0,50078.D0,36429.D0,71278.D0,46251.D0,33423.D0/
C**   DATA INBWWW/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/ ... (..BWW..) AND
C     DATA NDATAM: SEE COMMON WWWWWW!
      DATA MULMUD/10,21,28,25,6,25,28,21,10/
      DATA MULMUP/6,9,4,9,6/
      DATA IGROUP
C**   S EL. - KLWERT=0, KLWER1=1 (19TH COLUMN OF MASKE, ALL ZEROS,
C     I.E NO B-VALUES NO MATTER WHICH POINT GROUP IS GIVEN):
     1/19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
     1,19,19,19
C**   P EL. - KLWERT=1, KLWER1=2 (ONLY THREE CLASSES OF POINT GROUPS):
     2,18,17,17,17,17,17,17,17,17,17,18,17,17,17,18,17,17,17,17,18
     2,19,19,19
C**   D EL. - KLWERT=2, KLWER1=3 (11TH COLUMN IDENTICAL 10TH COLUMN!):
     3,9,10,12,11,10,11,12,13,11,11,9,13,12,10,9,13,12,10,11,16
     3,14,15,19
C**   F EL. - KLWERT=3, KLWER1=4:
     4,1,2,4,3,2,3,4,5,3,3,1,5,4,2,1,5,4,2,3,8
     4,6,7,19/
      DATA LGROUP
     1/1,11,15,0,0
     2,2,5,14,18,0
     3,4,6,9,10,19
     4,3,7,13,17,0
     5,8,12,16,0,0
     6,21,0,0,0,0
     7,22,0,0,0,0
     8,20,0,0,0,0/
      DATA LOLUMM
     1/3,4,5,4,3,1,1,1/
      DATA MASKE
C - F EL.:
     1/1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1
     3,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0
     5,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0
     7,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1
C - D EL.:
     1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
     3,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0
     5,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
     7,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
C - P EL.:
     9,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
C - S EL. AND FREE ION (SPH(ERICAL) <=> MASKE(,19)): (ALL =0 <=> NO B-VALUES A PPEAR!)
     1,0,0,0,0,0,0,0,0,0,0,0/
C**   MASKED <=> NUMBER OF DIRECTION(S), FOR WHICH CHI IS CALCULATED,
C     IF IOPT1=1 (NRDIRE =1, =2 OR =3) (DIMENSION OF MASKED = 23,4 <=> NGROUP,KLWER1)!
C**   FOR IOPT1.EQ.2 CHI WILL BE STORED IN CHI1(1) (MONOMER) OR IN CHI2(1)!
      DATA MASKED
C**   FIRST LINE S EL., THEN P, D AND F EL.!
     1/1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1
     3,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1
     4,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1/
C
      OPEN(11,ERR=4581,FILE='fort.11',STATUS='NEW')
      OPEN(7,ERR=4581,FILE='fort.7',STATUS='NEW')
      OPEN(77,ERR=4577,FILE='OLDf7.DAT',STATUS='OLD')
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      LMN=0
 1921 CONTINUE
      WRITE(*,1920)
      WRITE(11,1920)
      IF(LMN.EQ.0)THEN
      READ(77,'(A13)',ERR=5588,END=3801)QTEXT0
      WRITE(*,5599)
      WRITE(11,5599)
 5599 FORMAT(
     1' ATTENTION: (PART OF) INPUT COMES FROM FILE OLDf7.DAT!')
      GOTO 4801
      ENDIF
 3801 READ(*,'(A13)',ERR=1921,END=4576)QTEXT0
      LMN=1
 4801 IF(QTEXT0(1:1).EQ.'9')THEN
      STOP
      ELSE IF(QTEXT0(1:6).EQ.'show c')THEN
      CALL SHOWC
      GOTO 1921
      ELSE IF(QTEXT0(1:6).EQ.'show w')THEN
      CALL SHOWW
      GOTO 1921
      ELSE IF(QTEXT0(1:6).EQ.'show m')THEN
      CALL SHOWM
      GOTO 1921
      ENDIF
CKR: Jan.2007 - "QTEXT0(1:1):%"!
C CKR INTRODUCED TO MARK CHANGES FROM CONDOK("COMPLEX") TO CONDOR!
C CRD INTRODUCED TO MARK CHANGES FROM CONDOR("REVISED") TO CONCORD("HERE")!
CKR      WRITE(7,1922)QTEXT0(1:1)
      WRITE(7,1922)
 1922 FORMAT(1X,' "HERE CONCORD"')
C
      WRITE(*,1298)
      WRITE(11,1298)
 1298 FORMAT(
     1/,' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF ATOMS OR'
     1,' IONS',/,' WITH NS**N, NP**N, ND**N OR NF**N ELECTRONIC'
     2,' CONFIGURATION.',/)
CKR     ,' AND WITH 4F**N ELECTRONIC CONFIGURATION',
CKR     3' WITH SPECIFIC GROUND TERM (2S+1)L,',/,' I.E. FOR THE CASE 4F**N'
CKR     4,' THERE ARE TWO ESSENTIALLY DIFFERENT ROUTINES.',/)
C
      WRITE(11,3321)
 3320 WRITE(*,3321)
 3321 FORMAT(' INPUT 3 DIGITS: L VALUE OF 1 EL.(0..3), FOR MORE',
     1' OUTPUT',/,' OF INTERMEDIATE VALUES (1), OF MORE TEX',
     2'T (1 OR 2),')
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3802)KLWERT,MOROUT,MORTEX
      GOTO 4802
      ENDIF
 3802 READ(*,'(3I1)',ERR=3320,END=4576)KLWERT,MOROUT,MORTEX
      LMN=1
 4802 IF(KLWERT.GT.3)KLWERT=3
      WRITE(7,3322)KLWERT,MOROUT,MORTEX
 3322 FORMAT(3I1,' =KLWERT,MOROUT,MORTEX')
      WRITE(*,3323)KLWERT,MOROUT,MORTEX
      WRITE(11,3323)KLWERT,MOROUT,MORTEX
 3323 FORMAT(I2,2I1,' =KLWERT,MOROUT,MORTEX!!!!!!!!!')
      IF(MOROUT.GT.1)MOROUT=1
      IF(MORTEX.GT.0)THEN
      WRITE(*,6232)
      WRITE(11,6232)
 6232 FORMAT(' "3 DIGITS" MEANS "FORTRAN FORMAT 3I1".'
     1,/,' !!!!!!!!! MEANS "ALSO TO FILE fort.7".')
      ENDIF
      IF(MOROUT.NE.0.OR.MORTEX.GT.0)THEN
      WRITE(*,6233)MOROUT,MORTEX
      WRITE(11,6233)MOROUT,MORTEX
 6233 FORMAT(
     1/,' RESULTING VALUES FOR MOROUT,MORTEX:',2I2,/)
      ENDIF
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,0,-1)
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,11)
      KLWER1=KLWERT+1
C
CRD      JAWIGN=0
      IF(KLWERT.EQ.3)THEN
CKR 8323 FORMAT(' "CONDORD": JAWIGN ALWAYS => 0!')
CKR      IF(JAWIGN.EQ.0)THEN
      WRITE(*,1289)
      WRITE(11,1289)
 1289 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF F BLOCK'
     2,' ATOMS OR IONS',/,' WITH NF**N ELECTRONIC CONFIGURATION,'
     3,' SIMILAR TO D BLOCK ATOMS OR IONS!',/)
CKR      ENDIF
      ELSE IF(KLWERT.EQ.2)THEN
      WRITE(*,1297)
      WRITE(11,1297)
 1297 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF D BLOCK'
     1,' ATOMS OR IONS',/,' WITH ND**N ELECTRONIC CONFIGURATION:'
     1,' THE ATOMS OR IONS WILL BE LISTED,',/,' IF ONE CHOOSES DATA'
     1,' FOR RACAH PARAMETERS AND SPIN-ORBIT COUPLING CONSTANTS',/
     1,' FROM THE BOOK BY GRIFFITH LATER ON.',/)
      ENDIF
CKR   ENDIF BEFORE FOR "IF(KLWERT.EQ.3)THEN - ELSE IF(KLWERT.EQ.2)"!:
C**   ENDIF BEFORE FOR "IF(KLWERT.EQ.2)"!:
C** BREAK OF ALL IF's!
      WRITE(11,768)
 7689 WRITE(*,768)
  768 FORMAT(' THERE'
     1,' ARE 23 DIFFERENT POSSIBILITIES OF INPUT OF (POINT) GROUPS:',
     2/,' D2H,D3H,D4H,D5H,D6H,D-INF-H,D2D,D3D,D4D,D6D',/,' D2,D3,D4',
     3',D6,C2V,C3V,C4V,C6V,C-INF-V,C1,CUB(I),CUB(II),O(3)',/,' INPUT ',
     4'IN I2 THE (CONSECUTIVE) NUMBER (0 => 21 <=> CUB-4FOLD ROT.AXIS)')
      IF(MORTEX.GT.0)THEN
      WRITE(*,769)
      WRITE(11,769)
  769 FORMAT(/,' C-INF-V MEANS: AXIAL WITH VERTICAL PLANES;',
CKR     1' ??? MEANS: "ALL B-VALUES"',/,' ((MORE THAN) "REAL" PART OF C3)')
     1' C1 MEANS: "ALL B-VALUES"',/)
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3804)NGROUP
      GOTO 4804
      ENDIF
 3804 READ(*,'(I2)',ERR=7689,END=4576)NGROUP
      LMN=1
 4804 IF(NGROUP.LT.1.OR.NGROUP.GT.23)NGROUP=21
      WRITE(7,771)NGROUP
  771 FORMAT(I2,' =NGROUP (POINT GROUP)')
      WRITE(*,772)NGROUP
      WRITE(11,772)NGROUP
  772 FORMAT(I3,' =NGROUP (POINT GROUP)!!!!!!!!!')
      IF(NGROUP.EQ.3.OR.NGROUP.EQ.8.OR.NGROUP.EQ.21.OR.NGROUP.EQ.22)THEN
      WRITE(*,770)
      WRITE(11,770)
  770 FORMAT(' SOME USEFUL HINTS FOR THE GROUP CHOSEN: CHOOSE "MORTEX"')
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,1221)
      WRITE(11,1221)
 1221 FORMAT(/,
     1' B40=21.DQ FOR CUB(I); NEG. B40 FOR CUB(I), IF 4-FOLD COORD.;',
     1/,' FOR THE TETRAG. CASE, B44=SQRT(5./14.)*B40 => CUB(I), IF ',
     2'B20=0 (FOR D EL.;',/,' B64=-SQRT(3.5)*B60);',/,' FOR THE TRIG. CA
     3SE, B43=-SQRT(10./7.)*B40 => CUB(II), IF B20=0 (FOR D EL.;',/,' B6
     43=SQRT(210.)*B60/24., B66=SQRT(231.)*B60/24.)',/,' (IT IS THEN B40
     5-CUB(II)=-(2/3)*B40-CUB(I) (FOR D EL.; B60-CUB(II)=',/,' (16/9)*B6
     60-CUB(I)!)',/)
      ENDIF
      KOLUMN=IGROUP(NGROUP,KLWER1)
      DO 759 I=1,11
      KMASKE(I)=0
      IF(MASKE(I,KOLUMN).EQ.0)KMASKE(I)=1
  759 CONTINUE
C**   IN ADDITION THERE ARE SOME FIXED B-VALUES IN CUBIC SYMMETRY!
C**   PRE-OCCUPATION (REMAINS NEARLY ALWAYS):
      NRDIRE=MASKED(NGROUP,KLWER1)
C**   NRDIRE = No. OF DIRECTIONS CONCERNED
      WRITE(*,760)
      WRITE(11,760)
  760 FORMAT(' FROM THE FOLLOWING LIST OF POSSIBLE B-VALUES THOSE'
     1,' MARKED WITH 1 ARE EXCLUDED:',/
     2,' B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66 ',
     3/,' B21 ,B41 ,B61 ,B65 ,B21'',B22'',B41'',B42'',B43'',B44'',B61'''
     4,/,' B62'',B63'',B64'',B65'',B66''')
      WRITE(*,'(11I5)')(KMASKE(I),I=1,11)
      WRITE(11,'(11I5)')(KMASKE(I),I=1,11)
      IF(NGROUP.NE.20)THEN
      WRITE(*,9112)
      WRITE(11,9112)
 9112 FORMAT('    1    1    1    1    1    1    1    1    1    1    1',
     1/,'    1    1    1    1    1')
      ELSE IF(NGROUP.EQ.20)THEN
      IF(KLWERT.EQ.3)THEN
      WRITE(*,9110)
      WRITE(11,9110)
 9110 FORMAT('    0    0    0    0    0    0    0    0    0    0    0',
     1/,'    0    0    0    0    0')
      ELSE IF(KLWERT.EQ.2)THEN
      WRITE(*,9109)
      WRITE(11,9109)
 9109 FORMAT('    0    0    1    1    0    0    0    0    0    0    1',
     1/,'    1    1    1    1    1')
      ENDIF
      ENDIF
C
      IF(KLWERT.EQ.1)THEN
      IF(MORTEX.GT.0)THEN
      WRITE(*,1222)
      WRITE(11,1222)
      WRITE(*,1224)
      WRITE(11,1224)
      WRITE(*,1225)
      WRITE(11,1225)
      ELSE IF(MORTEX.EQ.0)THEN
      IF(KOLUMN.EQ.17)THEN
      WRITE(*,1222)
      WRITE(11,1222)
 1222 FORMAT(' EQUIVALENT ARE: 2..10, 12..14, 16..19')
      ELSE IF(KOLUMN.EQ.18)THEN
      WRITE(*,1224)
      WRITE(11,1224)
 1224 FORMAT(' EQUIVALENT ARE: 1, 11, 15, 20')
      ELSE IF(KOLUMN.EQ.19)THEN
      WRITE(*,1225)
      WRITE(11,1225)
 1225 FORMAT(' EQUIVALENT ARE: 21, 22, 23')
      ENDIF
      ENDIF
      ELSE IF(KLWERT.GT.1)THEN
      IF(KOLUMN.NE.19)THEN
      KOLUMM=KOLUMN
      IF(KLWERT.EQ.2)KOLUMM=KOLUMM-8
      IF(MORTEX.GT.0)THEN
      DO 1226 J=1,8
      WRITE(*,1223)(LGROUP(I,J),I=1,LOLUMM(J))
      WRITE(11,1223)(LGROUP(I,J),I=1,LOLUMM(J))
 1226 CONTINUE
      ELSE IF(MORTEX.EQ.0)THEN
      WRITE(*,1223)(LGROUP(I,KOLUMM),I=1,LOLUMM(KOLUMM))
      WRITE(11,1223)(LGROUP(I,KOLUMM),I=1,LOLUMM(KOLUMM))
 1223 FORMAT(' EQUIVALENT ARE:',5I3)
      ENDIF
      ENDIF
      ENDIF
C** BREAK OF ALL IF'S!
CRD      JAVANV=0 !removed
CKR      IOPT1=0 !see pingPONG!
      IOPT1=1
      IOPT2=0
      IOPT3=0
CRD      IOPT4=1
      WRITE(*,706)NRDIRE
      WRITE(11,706)NRDIRE
  706 FORMAT(' DIRECTION(S) CONCERNED AND TO BE CALCULATED, IF IOPT1=1:'
     1,I2)
C
      WRITE(11,650)
 6501 WRITE(*,650)
  650 FORMAT(/,' INPUT IN 3I1 IOPT2,IOPT1,KENNNG:',/,
     1' IOPT2=0...2 FOR (SINGLE) ION/ (SYMM.)DIMER/ "pingPONG".'
     1,/,' IOPT1=1 OR 2  FOR DIRECTION(S) OF FIELD, =1 FOR MEAN V',
     2'ALUE OF CHI,',/,' CHI CALCULATED FOR 1,2 OR 3 DIRECTION(S) ACCORD
     3ING TO POINT GROUP.',/,' DIRECTION AT WILL: IOPT1=2. IOPT1=0 =>',/
     4,' WRITE(13) AND STOP "pingPONG": NO MAGN. FIELD APPLIED AS YET.',
     6/,' "DIRECTIONS CONCERNED" 1:1:1 MAY BE SIMULATED USING IOPT1=2!',
     7/,' KENNNG=1 OR 2 for pingPONG (if concerned, else 0)!')
      IF(MORTEX.GT.0)THEN
      WRITE(11,651)
      WRITE(*,651)
  651 FORMAT(/,' MORTEX:',/,
     1' IF(IOPT2.LE.1)KENNNG=0: no pingPONG, MONOMER or symmetr. DIMER!'
     1,/,' KENNNG sets the POINTERS, 0 for symmetr. DIMER,',/,
     1' not 0 else, the number (1 or 2) is indeed not relevant to dimer'
     2,'s!',/,' IF(IOPT2.EQ.2.AND.KENNNG.EQ.0)KENNNG=1: pingPONG with'
     3,/,' KENNNG=1 or =2: 0=>1, OR PUT IN (KENNNG=)2!'
     4,/,' IF(IOPT1.EQ.0.AND.IOPT2.LE.1)STOP ''IOPT1=0,IOPT2.LE.1''',/)
      ENDIF
C
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3807)IOPT2,IOPT1,KENNNG
      GOTO 4807
      ENDIF
 3807 READ(*,'(3I1)',ERR=6501,END=4576)IOPT2,IOPT1,KENNNG
      LMN=1
 4807 IF(IOPT1.GT.2)IOPT1=2
CCC      IF(IOPT1.EQ.0): 'START of pingPONG'
      IF(IOPT1.EQ.0.AND.IOPT2.LE.1)STOP 'IOPT1=0,IOPT2.LE.1'
      IF(IOPT2.GT.2)IOPT2=2
      IF(KENNNG.GT.2)KENNNG=2
      IF(IOPT2.LE.1)KENNNG=0 !no pingPONG: MONOMER or symmetrical DIMER
      IF(IOPT2.EQ.2.AND.KENNNG.EQ.0)KENNNG=1 !pingPONG, KENNNG=1 or =2
      WRITE(7,653)IOPT2,IOPT1,KENNNG
  653 FORMAT(3I1,' =IOPT2,IOPT1,KENNNG')
      WRITE(*,654)IOPT2,IOPT1,KENNNG
      WRITE(11,654)IOPT2,IOPT1,KENNNG
  654 FORMAT(I2,2I1,' =IOPT2,IOPT1,KENNNG!!!!!!!!!')
      IF(IOPT1.EQ.2)THEN
C**   ZXY DIRECTIONS:
      WRITE(11,4711)
 1147 WRITE(*,4711)
 4711 FORMAT(/,
     1' INPUT 3 DIRECTIONCOS**2 (Z,X,Y) IN 3E8.0 (INCL. FACT. AT WILL)',
     2/,' (A SIGN IS TRANSFERRED TO THE RESP. ROOT OF THE SQUARE!)',
     3/,' PUT IN 0. 0. 0. ("RETURN") FOR OPTION "SIMULTANEOUSLY",',
     4/,' ACCORDING TO LOWDAT IN CHIINP.DAT (0<=>246, 1<=>357).',
     5/,' 246/357 in CHIINP.DAT -> STOP ''LOWDAT>1 for NOWDAT=0'',',
     6/,' if not "RETURN"! - 0. 0. 0. ("RETURN") -> 1. 1. 1. for 0/1',
     7/,' in CHIINP.DAT.')
      IF(LMN.EQ.0)THEN
      READ(77,1146,ERR=5588,END=3808)(DIRECZ(I),I=1,3)
      GOTO 4808
      ENDIF
 3808 READ(*,1146,ERR=1147,END=4576)(DIRECZ(I),I=1,3)
      LMN=1
 4808 WRITE(*,1146)(DIRECZ(I),I=1,3)
      WRITE(11,1146)(DIRECZ(I),I=1,3)
      WRITE(7,1146)(DIRECZ(I),I=1,3)
 1146 FORMAT(3D8.2)
      IF(DIRECZ(1).EQ.ZERO.AND.DIRECZ(2).EQ.ZERO.AND.DIRECZ(3).EQ.ZERO)
     1THEN
      NOWDAT=1
      ELSE
      DO 7411 I=1,3
      IF(DIRECZ(I).LT.ZERO)THEN
      MINPLS(I)=-1
      DIRECZ(I)=DABS(DIRECZ(I))
      ENDIF
 7411 CONTINUE
      ENDIF !IF(IOPT1.EQ.2)THEN
      WRITE(*,1246)(DIRECZ(I),I=1,3)
      WRITE(11,1246)(DIRECZ(I),I=1,3)
 1246 FORMAT(' 3 DIRECTIONCOS**2 (Z,X,Y) INCL. FACT. AT WILL =',3D16.8)
      IF(MINPLS(1).LT.0.OR.MINPLS(2).LT.0.OR.MINPLS(3).LT.0)THEN
      WRITE(*,7413)(MINPLS(I),I=1,3)
      WRITE(11,7413)(MINPLS(I),I=1,3)
 7413 FORMAT(' 3 SIGNS OF THE DIRECTIONCOS ITSELF ARE:',3I3)
      ENDIF
      FNENN=DIRECZ(1)+DIRECZ(2)+DIRECZ(3)
      IF(FNENN.NE.ZERO)THEN
      DIRECZ(1)=DBLE(MINPLS(1))*DSQRT(DIRECZ(1)/FNENN)
      DIRECZ(2)=DBLE(MINPLS(2))*DSQRT(DIRECZ(2)/FNENN)
      DIRECZ(3)=DBLE(MINPLS(3))*DSQRT(DIRECZ(3)/FNENN)
      ENDIF
      VLSTNG(1)=DIRECZ(1)
      VLSTNG(2)=DIRECZ(2)
      VLSTNG(3)=DIRECZ(3)
      ENDIF
C**   BREAK OF ALL IFS!
C***********************************************************************
      WRITE(11,391)
   10 WRITE(*,391)
  391 FORMAT(/,' WHERE ARE THE VALUES FOR: "TO BE FITTED YES(0)/NO(1)",'
     1,/,' TEMP. IN K, CHI-MEASURED IN SI, SIGMA, FIELD IN TESLA?',
     2/,' "RETURN" FOR CHIINP.DAT; H OR h FOR "H ATOM" <=> NO INPUT'
     1,' HERE.',/,' INPUT OF 888 FOR "STOP"!',/,
     2' (HINT: 1(!) FIELD IN CHIINP.DAT = ZERO => "CHANGE OF FIELDS"!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3811)DATEI
      GOTO 4811
      ENDIF
 3811 READ(*,'(A15)',ERR=29,END=4576)DATEI
      LMN=1
 4811 IF(DATEI.EQ.'               ')DATEI='CHIINP.DAT     '
      WRITE(7,301)DATEI
  301 FORMAT(A15,' (OF CHI ..)')
      WRITE(*,30)DATEI
      WRITE(11,30)DATEI
   30 FORMAT(/,' NAME READ IN WAS:',1X,A15,'!!!!!!!!!')
      IF(DATEI.EQ.'888            ')STOP '888'
      QUIVAR='(I1,F7.2,3D17.6)'
      IF(DATEI.EQ.'H              '.OR
     1.DATEI.EQ.'h              ')THEN
C**   FOR HYDROGEN (MU-EFF./MU-BOHR=SQRT(3.0)):
      NDATA=71
      NDATAS=1
      WRITE(11,3929)
 3930 WRITE(*,3929)
 3929 FORMAT(
     1' HOW MANY DIFFERENT TEMPERATURES? INPUT IN I3 (0 OR >92 =>92)',
     2/,' (<0 =>92, BUT ABS(INPUT) =>START OF NDATA)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3812)NDATA
      GOTO 4812
      ENDIF
 3812 READ(*,'(I3)',ERR=3930,END=4576)NDATA
      LMN=1
 4812 NDATAS=1
      NDATAN=NDATA
      IF(NDATA.LT.0)NDATAS=-NDATA
      IF(NDATAS.GT.92)NDATAS=92
      IF(NDATA.LE.0.OR.NDATA.GT.92)NDATA=92
      WRITE(7,3931)NDATAN
 3931 FORMAT(I3,' =NDATA (OF H-ATOM)')
      WRITE(*,3932)NDATAN
      WRITE(11,3932)NDATAN
 3932 FORMAT(I4,' =NDATA (OF H-ATOM)!!!!!!!!!')
      DO 3012 I=1,NDATA
      CHIMEA(I)=3.0D0/(797.730D0**2*TEMPIK(I))
 3012 CONTINUE
      NDATA=NDATA+1-NDATAS
      NDATAP=NDATA
      DO 3013 I=1,NDATA
      TEMPIK(I)=TEMPIK(I+NDATAS-1)
      CHIMEA(I)=CHIMEA(I+NDATAS-1)
 3013 CONTINUE
      GOTO 3030
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,392)
      WRITE(11,392)
  392 FORMAT(' THERE IS NO NEED TO FIT ANY VALUES! THE STANDARD'
     1,' INPUT HERE IS CHI',/,' IN SI UNIT M**3/MOL. THE INDIVIDUAL'
     2,' STANDARD DEVIATIONS SIGMA CANNOT BE ZERO'
     3,/,' AND ARE E.G. SET TO ONE. FIRST LINE MUST BE TEXT!')
      ENDIF
      WRITE(11,221)
 2212 WRITE(*,221)
  221 FORMAT(' "RETURN",'
     1,' IF FORMAT(I1,F7.2,3D17.6), OR INPUT "FORMAT" IN A50')
      IF(LMN.EQ.0)THEN
      READ(77,'(A50)',ERR=5588,END=3813)QUIVAQ
      GOTO 4813
      ENDIF
 3813 READ(*,'(A50)',ERR=2212,END=4576)QUIVAQ
      LMN=1
 4813 IF(QUIVAQ.NE.'                  ')QUIVAR=QUIVAQ
      WRITE(7,'(A50)')QUIVAR
      WRITE(*,5050)QUIVAR
      WRITE(11,5050)QUIVAR
 5050 FORMAT(1H ,A50,'!!!!!!!!!')
      OPEN(14,ERR=31,FILE=DATEI,STATUS='OLD')
      GOTO 35
   29 WRITE(*,3305)
      WRITE(11,3305)
 3305 FORMAT(' ERROR WHILE READING!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 10
   31 WRITE(*,3306)
      WRITE(11,3306)
 3306 FORMAT(' DATA FILE NOT FOUND')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 10
   32 WRITE(*,3307)
      WRITE(11,3307)
 3307 FORMAT(' ERROR(S) IN DATA FILE')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 10
   35 CONTINUE
C
      N=1
      NMIN=0
      READ(14,63,ERR=32)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,'HEADER:',1X,60A1)
C
   50 CONTINUE
      IF(N.GT.601)STOP '.GT.601'
      READ(14,QUIVAR,END=70,ERR=32)
     1LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
      IF(LOWDAT(N).GT.7)STOP '.GT.7'
      IF(LOWDAT(N).EQ.0.AND.TEMPIK(N).EQ.ZERO.AND.CHIMEA(N).EQ.ZERO
     1.AND.SIGMA0(N).EQ.ZERO.AND.TESDAT(N).EQ.ZERO)GOTO 70 !END OF INPUT
      IF(MOD(LOWDAT(N),2).EQ.0)NMIN=NMIN+1
      N=N+1
      GOTO 50
C**   MAXIMUM OF DATA READ IN:
   70 NDATAP=N-1
      IF(NDATAP.LE.0)STOP 'NO DATA'
      IF(NOWDAT.EQ.0)THEN
      DO 7750 I=1,NDATAP
      IF(LOWDAT(I).GT.1)STOP 'LOWDAT>1 for NOWDAT=0: STOP'
 7750 CONTINUE
      ENDIF
C**   TO BE FITTED (MAY BE 0!):
      NDATA=NMIN
      CLOSE(14)
C
 3030 CONTINUE
      WRITE(*,6588)
      WRITE(11,6588)
 6588 FORMAT(' HERE THE FIRST MAX. 3 ROWS OF VALUES ("NOT", TEMPIK, CHI,
     1 SIGMA, FIELD)')
      IDREI=3
      IF(NDATAP.LT.3)IDREI=NDATAP
      DO 2022 I=1,IDREI
      WRITE(*,QUIVAR)LOWDAT(I),TEMPIK(I),CHIMEA(I),SIGMA0(I),TESDAT(I)
      WRITE(11,QUIVAR)LOWDAT(I),TEMPIK(I),CHIMEA(I),SIGMA0(I),TESDAT(I)
 2022 CONTINUE
C
   75 IF(MORTEX.GE.0)THEN
      IF(NDATAP.GT.3)THEN
      IF(KLICK7.EQ.0)WRITE(11,7575)
      WRITE(*,7575)
 7575 FORMAT(' NO FURTHER VALUES TO FILE 11 AND/OR TERMINAL (0), VALUES 
CRD     1(ONLY) TO',/,' FILE 11 (1), TO FILE 11 & TERMINAL (2), (ONLY) TO T
     1TO FILE 11 & TERMINAL (>0)?')
CRD     2ERMINAL (3)?')
      ELSE
      IF(KLICK7.EQ.0)WRITE(11,7567)
      WRITE(*,7567)
 7567 FORMAT(' PUT IN ANY DIGIT!')
      ENDIF
      KLICK7=1
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3814)JANO
      GOTO 4814
      ENDIF
 3814 READ(*,'(I1)',ERR=75,END=4576)JANO
      LMN=1
 4814 WRITE(7,7574)JANO
 7574 FORMAT(I1,' =JANO(OUTPUT)')
      WRITE(*,7573)JANO
      WRITE(11,7573)JANO
 7573 FORMAT(I2,' =JANO(OUTPUT)!!!!!!!!!')
      IF(NDATAP.LE.3)JANO=0
      IF(JANO.EQ.0)GOTO 7576
      DO 7577 N=4,NDATAP
CRD      IF(JANO.EQ.2.OR.JANO.EQ.3)
      IF(JANO.GT.0)THEN
      WRITE(*,QUIVAR)LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
CRD      IF(JANO.EQ.1.OR.JANO.EQ.2)
      WRITE(11,QUIVAR)LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
      ENDIF
 7577 CONTINUE
      ENDIF
 7576 CONTINUE
C
      JAFELD=1
      SUMSIG=ZERO
      NOSIGM=0
      DO 7578 I=1,NDATAP
      IF(TESDAT(I).EQ.ZERO.AND.TEMPIK(I).GT.ZERO)JAFELD=0
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7578
C
      IF(SIGMA0(I).LE.ZERO)THEN
      IF(NOSIGM.EQ.0)THEN
      WRITE(*,7558)
      WRITE(11,7558)
 7558 FORMAT(' (SIGMA.LE.ZERO) => SIGMA =ONE!')
      ENDIF
      NOSIGM=1
      SIGMA0(I)=ONE
      ENDIF
      SUMSIG=SUMSIG+ONE/SIGMA0(I)**2
C
 7578 CONTINUE
      IF(NDATA.EQ.0)SUMSIG=ONE
      IF(NDATA.NE.0)SUMSIG=DSQRT(SUMSIG/DBLE(NDATA))
C**   SUMSIG NOW =ONE, IF ALL SIGMA =ONE! - NOW NORMALIZATION OF SIGMA!:
      DO 7579 I=1,NDATAP
      SIGMA(I)=ZERO
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7579
      SIGMA(I)=SIGMA0(I)*SUMSIG
 7579 CONTINUE
C**   NO COMPUTATION POSSIBLE WITHOUT MAGNETIC FIELD!:
      IF(JAFELD.EQ.0)THEN
      WRITE(11,7597)JAFELD
 7598 WRITE(*,7597)JAFELD
 7597 FORMAT(' THE MAGNETIC FIELD: MUST BE (IF 0) OR MAY BE (IF 1) CHANG
     1ED:',I2,/,' INPUT IN E14.6 (ONE AND THE SAME FOR ALL CASES) FIELD 
     2IN TESLA')
      IF(LMN.EQ.0)THEN
      READ(77,'(D14.6)',ERR=5588,END=3815)TESLAN
      GOTO 4815
      ENDIF
 3815 READ(*,'(D14.6)',ERR=7598,END=4576)TESLAN
      LMN=1
 4815 WRITE(*,7599)TESLAN
      WRITE(11,7599)TESLAN
      WRITE(7,7599)TESLAN
 7599 FORMAT(D14.6,' =TESLAN')
      IF(TESLAN.EQ.ZERO)THEN
      WRITE(*,7600)
      WRITE(11,7600)
 7600 FORMAT(' FIELD(S) NOT CHANGED!')
      ELSE
      JAFELD=1
      DO 7587 I=1,NDATAP
      TESDAT(I)=TESLAN
 7587 CONTINUE
      VLSTNG(5)=TESLAN
      ENDIF
      ENDIF
      IF(JAFELD.EQ.0)STOP 'NOFELD'
C**   BREAK OF ALL IFS!
C-----------------------------------------------------------------------
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,
     1' IS THE NAME OF THE NEXT FILE BWYBIN.DAT IN FORMAT(I2,D16.8)?',
     2/,' "RETURN" OR GIVE ITS NAME! (8 => STOP, H OR h "NO INPUT FROM F
     3ILE")')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3816)QMPC
      GOTO 4816
      ENDIF
 3816 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4816 IF(QMPC.EQ.'               ')QMPC='BWYBIN.DAT     '
      WRITE(7,5163)QMPC
 5163 FORMAT(A15,' (BWYBIN)')
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,' (BWYBIN)!!!!!!!!!')
      IF(QMPC.EQ.'8              ')STOP '8'
      IF(QMPC.EQ.'h              '.OR.
     1QMPC.EQ.'H              ')THEN
      WRITE(11,5162)
      WRITE(*,5162)
 5162 FORMAT(' h OR H FOR H ATOM OR TESTS: ZERO''s ONLY!')
      GOTO 3338
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,5160)
      WRITE(11,5160)
 5160 FORMAT(/,' EACH ROW OF THIS FILE (FIRST ROW MUST BE TEXT!):'
     1,/,' "TO BE FITTED YES(01)/NO(00)" (THERE IS NO NEED TO FIT'
     1,' ANY COEFFICIENTS!),',/,' AND COEFF. OF LIG. FIELD (WYBOURNE C',
     2'OEFFICIENTS)',/
     3,' 11 SUCH COEFF. PLUS 9 FURTHER ROWS (B20,B22,',/,' B40,B42,B43,'
     4,'B44,B60,B62,B63,B64,B66+J,LAM,THET,CHI0,F,...) ARE NEEDED!'
     5,/,' (09/08 INSTEAD OF 01/00 AS SPECIAL OPTION FOR B43,B44,B63,B64
     6,B66: ',/,' INPUT MEANS "FACTOR" IN E.G. B44=B40*SQRT(5./14.)*FACT
     7OR,',/
     7,' FOR B21,B22,B41,B42,B61,B62,B65 E.G. B21=B21*(FACTOR=B42).)',/
     8,' ADDITIONAL INPUT FOR No.20("C1"): B21,B41,B61,B65,',/
     9,' B21'',B22'',B41'',B42'',B43'',B44'','
     5,/,' B61'',B62'',B63'',B64'',B65'',B66''')
      WRITE(*,5159)
      WRITE(11,5159)
 5159 FORMAT(' J <=> HEISENBERG COUPLING IN A (SYMMETRICAL) DIMER'
     2,/,' LAM <=> MOLECULAR FIELD PARAMETER'
     3,/,' THET <=> THETA OF CURIE WEISS LAW - removed!'
     4,/,' CHI0 <=> CHI DIAMAGNETIC',
     5/,' F <=> CORR. OF WEIGHT OF SAMPLE MEASURED CHI COMES FROM'
CKR     6',/,' MOLF <=> PARAMETER OF MOLECULAR FIELD THEORY OF WEISS'
CKR     6,/,' (FIELD WILL BE ITERATED UNTIL CONVERGENCE HAS ACHIEVED)',/
CKR     7,' MIX/CROSSOVR <=> A MIXTURE OF SINGLE ION AND DIMER OR',/
CKR     7,' DENOMINATOR OF "SPIN CROSSOVER" (ONLY D EL.!),',/
CKR     8,' ENTHALPY <=> ENTHALPY FOR "SPIN CROSSOVER",',/
CKR     9,' ENTROPY <=> ENTROPY FOR "SPIN CROSSOVER".')
     6,/,' 6 AND 7 AND 8 AND 9 NOT USED ANYMORE!')
      ENDIF
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(' CRYSTAL FIELD PARAMETERS ETC. ARE READ IN FROM ',A15)
      OPEN(14,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(14,63,ERR=33)(QTEXT1(I),I=1,60)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
      DO 8581 N=1,J20
      READ(14,61,END=3330,ERR=33)INBWWW(N),BWWWIN(N)
   61 FORMAT(1X,I1,D16.8)
 8581 CONTINUE
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(' THE VALUES READ IN ARE:')
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
      IF((INBWWW(I).GE.8).AND.(QB(I).EQ.QV(I)))INBWWW(I)=INBWWW(I)-8
 1511 CONTINUE
      WRITE(*,6161)(INBWWW(I),BWWWIN(I),QQ(I),I=1,44)
      WRITE(11,6161)(INBWWW(I),BWWWIN(I),QQ(I),I=1,44)
 6161 FORMAT(3(I3,D16.8,1X,A5))
      INBWWW(14)=0 !THETA
      BWWWIN(14)=0
      DO 1245 I=17,20 !no INPUT possible
      INBWWW(I)=0
      BWWWIN(I)=ZERO
 1245 CONTINUE
      IF(NGROUP.NE.20)THEN
      DO 1244 I=21,24 !B21,B41,B61,B66
      INBWWW(I)=0
      BWWWIN(I)=ZERO
 1244 CONTINUE
      DO 1247 I=30,41 !B21',...,B66'
      INBWWW(I)=0
      BWWWIN(I)=ZERO
 1247 CONTINUE
      DO 1248 I=43,44 !no INPUT possible, may become JJ?
      INBWWW(I)=0
      BWWWIN(I)=ZERO
 1248 CONTINUE
      ENDIF
      CLOSE(14)
 3338 CONTINUE
CKR      IF(NDATA.EQ.0)THEN
CKR 3344 FORMAT(' NDATA=0 => INBWWW(I)=0/=8? INPUT YES(0)/NO IN I1!')
CKR      ENDIF
      GOTO 3334
 3330 WRITE(*,3300)
      WRITE(11,3300)
 3300 FORMAT(' ERROR: END OF DATA FILE!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3331 WRITE(*,3301)
      WRITE(11,3301)
 3301 FORMAT(' ERROR WHILE READING!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3332 WRITE(*,3302)
      WRITE(11,3302)
 3302 FORMAT(' DATA FILE NOT FOUND')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
   33 WRITE(*,3303)
      WRITE(11,3303)
 3303 FORMAT(' ERROR IN DATA FILE!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3334 CONTINUE
C**   BREAK OF ALL IFS!
C
C**   BWWWIN(12:J20) <=> (12) FKWERT (HEISENBERG COUPLING IN A SYMM. DIMER),
C     (13) LAMBDA (MOLECULARFIELD PARAMETER),
C     (14) THETA (OF CURIE-WEISS LAW) - removed,
C     (15) CHI-0 ("CHI DIAMAGNETIC"),
C     (16) CORR. OF WEIGHT OF THE SAMPLE, WHERE MEASURED CHI COMES FROM,
CKR     AND(!)
CKR     (17) LAMBDA FOR "MOL(ECULAR)F(IE)LD" AND
CKR     (18) WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF DIMER AND SINGLE ION
CKR     OR DENOMINATOR OF "SPIN CROSSOVER" (ONLY D EL.!)!
CKR     (19) AND (20): ENTHALPY AND ENTROPY FOR (18)!
C
CKR      IF(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO)THEN
CKR      IF(IOPT2.EQ.0)THEN
CKR2      IF(KLWERT.EQ.2)THEN
CKR  716 FORMAT(' IOPT2=0.AND.(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO): SPIN
CKR     1 CROSSOVER",',/,' NOT COMPATIBLE WITH ANY OF THE PARAMETERS 12...17
CKR2      ELSE IF(KLWERT.NE.2)THEN
CKR  715 FORMAT(' WARNING: IOPT2=0, THEREFORE BWWW(18) BECOMES ZERO',
CKR     1' AND MUST NOT',/,' BE FITTED): "NO MIXTURE WITHOUT ANY DIMER"!')
C**   KMASKE(18)=1
CKR2      ENDIF
CKR      ELSE IF(IOPT2.NE.0)THEN
CKR  717 FORMAT(' IOPT2>0.AND.(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO):',/
CKR     1,' "A MIXTURE OF DIMER AND SINGLE ION"!')
CKR      MIXTUR=1
CKR      ENDIF
CKR      ELSE
CKR      IF(IOPT2.NE.0)KMASKE(18)=0
CKR      ENDIF
C
      IF(BWWWIN(16).EQ.ZERO)THEN
      BWWWIN(16)=ONE
      WRITE(*,1313)
      WRITE(11,1313)
 1313 FORMAT(' CORR. FACTOR OF CHI-MEAS. IS ZERO, BUT BECOMES ONE!')
      ENDIF
C**   (13), (14) AND (17) ARE NOT COMPATIBLE!:
CKR 1314 FORMAT(' "THETA" INSTED OF MOLECULARFIELD PARAMETER, WHICH LATTER'
CKR     1,' BECOMES ZERO!')
C
CKR 1315 FORMAT(' "THETA" BECOMES ZERO, BECAUSE "MOL(ECULAR)F(IE)LD"!')
C
CKR 1316 FORMAT(' MOLECULARFIELD PARAMETER BECOMES ZERO, BECAUSE'
CKR     1,' "MOL(ECULAR)F(IE)LD"!')
C
C**   (15) AND (17) ARE NOT COMPATIBLE!:
CKR 1317 FORMAT(' "MOL(ECULAR)F(IE)LD": CHI0 THEREFORE BECOMES ZERO!')
C
      IF(IOPT2.EQ.0.AND.(((BWWWIN(12).NE.ZERO).OR.(INBWWW(12).NE.0).AND.
     1KMASKE(12).EQ.0)))THEN
      WRITE(*,761)
      WRITE(11,761)
  761 FORMAT(' WARNING: IOPT2=0, THEREFORE BWWW(12) BECOMES ZERO',
     1' (AND MUST NOT',/,' BE FITTED: "NOT A DIMER" CANNOT BE COUPLED!')
      KMASKE(12)=1
      ENDIF
C
C**   SPECIAL FITS / SPECIAL CONDITIONS? (I.E. 13: LAMB, 15: CHI-0, 16: F):
      IF((INBWWW(15).NE.0.OR.BWWWIN(15).NE.ZERO).AND.KMASKE(15).EQ.0)
     1JACHI0=1
CRD      IF(JACHI0.NE.0.OR.((INBWWW(13).NE.0.OR.BWWWIN(13).NE.ZERO).AND.
CRD     1KMASKE(13).EQ.0).OR.((INBWWW(16).NE.0.OR.BWWWIN(16).NE.ONE).AND.
CRD     2KMASKE(16).EQ.0))JAFFAK=1
C
      IF(KLWERT.LE.1)JASTRU=0
      IF(KLWERT.GT.1)THEN
      WRITE(11,6788)
 6787 WRITE(*,6788)
 6788 FORMAT(' INPUT IN I1 YES/NO(0): CALL OF STR00 (Point Charge'
     1,' Electrostatic Model PCEM)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3818)JASTRU
      GOTO 4818
      ENDIF
 3818 READ(*,'(I1)',ERR=6787,END=4576)JASTRU
      LMN=1
 4818 IF(JASTRU.NE.0)JASTRU=2
      WRITE(7,6786)JASTRU
 6786 FORMAT(I1,' =JASTRU(cture)')
      WRITE(*,6768)JASTRU
      WRITE(11,6768)JASTRU
 6768 FORMAT(I2,' =JASTRU(cture)!!!!!!!!!')
      ENDIF
C**   NOW CHANGE TO STBWWW AND IBWWW; KMASKE IS USED!:
CKR   (17 AND 18 AND 19 AND 20 NOT USED ANYMORE!: SEE DATA WWWWWW!)
COMMENT: BWWWIN ONLY(!) USED HERE IN CONCORD ITSELF! (STBWWW(I)=BWWWIN(I))
CO:   IBWWW(I)=INBWWW(I) OR IBWWW(I)=INBWWW(I)-10: IBWWW AND INBWWW ARE USED!
      DO 762 I=1,20
      IF(KMASKE(I).EQ.0)THEN
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
C**   THE NEXT LINE FOR THE CASE THAT E.G. B44 IS GIVEN AS B40*FACTOR!:
CO:    ("FITTED" <=> IABS(INBWWW())=1)
      IF(I.LE.11
     1.AND.INBWWW(I).GE.8)IBWWW(I)=INBWWW(I)-10
      ENDIF
  762 CONTINUE
      IF(KMASKE(16).NE.0)STBWWW(16)=ONE
      DO 7631 I=21,J20
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
      IF(I.LE.24.AND.INBWWW(I).GE.8)IBWWW(I)=INBWWW(I)-10
      IF(KLWERT.EQ.2.AND.I.EQ.28.AND.INBWWW(I).GE.8)IBWWW(I)=
     1INBWWW(I)-10 !F(3) for d-el.
 7631 CONTINUE
      IF(JASTRU.NE.0)THEN !ATTENTION: IF(JASTRU.NE.0)THEN
      IF(JASTRU.GT.1)THEN
      STBWWW(1)=ZERO
      IBWWW(1)=0
      ENDIF
      DO 7622 I=JASTRU,4
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
 7622 CONTINUE
      DO 7623 I=5,11
      STBWWW(I)=ZERO
      IBWWW(I)=0
 7623 CONTINUE
      DO 7624 I=21,44 !B21...B66'...JJ?
      STBWWW(I)=ZERO
      IBWWW(I)=0
 7624 CONTINUE
      ENDIF !IF(JASTRU.NE.0)THEN
C
      IF(MORTEX.NE.0)THEN
      WRITE(11,1151)
 1116 WRITE(*,1151)
 1151 FORMAT(/,
     1' THERE IS ONLY ONE POSSIBILITY FOR A LEAST SQUARE FIT:',
     2/,' THE MEASURED VALUES AND THE CALCULATED VALUES ARE BOTH',
     3/,' DIVIDED BY THE MEASURED VALUES, AND THE RESULT',
     4/,' FOR THE QUALITY OF THE FIT IS IN %!')
      ENDIF
C
C**   IOPT3 IS 0 HERE, BUT MAY BECOME 1 (I.E. .NE.0)!
C     (IOPT31=-2*IOPT3+4=4 OR 2 <=> CHI( ,IOPT31, ))
      IF(JACHI0.EQ.0)THEN
      IF(MORTEX.GE.0)THEN
      WRITE(11,1134)
      WRITE(*,1134)
 1134 FORMAT(/,' BECAUSE CHI-0 IS NOT CONCERNED, IOPT3 REMAINS 0 <=> FIT
     1TING IS BASED ON',/,' UNCORRECTED MEASURED CHI!',/
     5,' WARNING!: CHI0 SHOULD BE ZERO AND/OR SHOULD NOT BE FITTED!')
      ENDIF
      ELSE IF(JACHI0.NE.0)THEN
      WRITE(11,1153)
 1135 WRITE(*,1153)
 1153 FORMAT(/,
     1' CHI-0, AN ADDITIVE CONSTANT TO CHI IN SI UNITS, IS NOT ZERO',/
     2,' AND/OR WILL BE FITTED! THERE IS AN OPTION IOPT3 (=0 AS A STAN'
     3,'DARD):',/,' INPUT 1, IF FITTING SHALL NOT BE BASED ON '
     4,'UNCORRECTED MEASURED CHI!',/
     5,' WARNING!: CHI0 SHOULD BE ZERO AND/OR SHOULD NOT BE FITTED!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3820)IOPT3
      GOTO 4820
      ENDIF
 3820 READ(*,'(I1)',ERR=1135,END=4576)IOPT3
      LMN=1
 4820 IF(IOPT3.NE.0)IOPT3=1
      WRITE(7,1319)IOPT3
 1319 FORMAT(I1,' =IOPT3 ("CHI-0")')
      WRITE(*,1318)IOPT3
      WRITE(11,1318)IOPT3
 1318 FORMAT(I2,' =IOPT3 ("CHI-0")!!!!!!!!!')
      ENDIF
C
CKR      IF(MOLFLD.NE.0)THEN
CKR     1' IOPT3 BECOMES 0, BECAUSE "MOL(ECULAR)F(IE)LD" (JACHI0=0)!')
CKR      ENDIF
C
C**   IOPT4 IS 1 HERE, BUT MAY BECOME 2 OR 3 OR 4!:%%%
C...
C***********************************************************************
      IF(KLWERT.EQ.0)THEN
      NREL=1
      WRITE(11,1165)
 1164 WRITE(*,1165)
 1165 FORMAT(' ONE S EL.! IF "NONE", INPUT 2 IN I1! ("RETURN" => 1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3823)NONE
      GOTO 4823
      ENDIF
 3823 READ(*,'(I1)',ERR=1164,END=4576)NONE
      LMN=1
 4823 IF(NONE.EQ.0)NONE=1
      WRITE(7,1133)NONE
 1133 FORMAT(I1,' =NONE (S EL.)')
      WRITE(*,1132)NONE
      WRITE(11,1132)NONE
 1132 FORMAT(I2,' =NONE (S EL.)!!!!!!!!!')
      IF(NONE.GE.2)NREL=0
      GOTO 9999
      ENDIF
C
      IF(KLWERT.EQ.1)THEN
      WRITE(11,2130)
 1138 WRITE(*,2130)
 2130 FORMAT(' INPUT IN I1 NUMBER OF P EL.; 0 OR .GT.5 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3824)NREL
      GOTO 4824
      ENDIF
 3824 READ(*,'(I1)',ERR=1138,END=4576)NREL
      LMN=1
 4824 IF(NREL.EQ.0.OR.NREL.GT.5)NREL=1
      WRITE(7,2103)NREL
 2103 FORMAT(I1,' = No.OF P EL.')
      WRITE(11,1119)NREL
 4140 WRITE(*,1119)NREL
 1119 FORMAT(' THE NUMBER OF P ELECTRONS IS =',I3,'!!!!!!!!!')
      IF(NREL.EQ.1.OR.NREL.EQ.5)THEN
      WRITE(*,4141)
      WRITE(11,4141)
 4141 FORMAT(' ZETA FOR BOR (ONE P ELECTRON!) IS 2.6(?) CM**-1'
     1,/,' INPUT IN D16.8 ZETA!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3825)ZETA
      GOTO 4825
      ENDIF
 3825 READ(*,'(D16.8)',ERR=4140,END=4576)ZETA
      LMN=1
 4825 WRITE(7,2104)ZETA
 2104 FORMAT(D16.8,' =ZETA')
      WRITE(*,2104)ZETA
      WRITE(11,2104)ZETA
      VLSTNG(11)=ZETA
      ELSE
      WRITE(11,1120)
 1139 WRITE(*,1120)
 1120 FORMAT(' MORE THEN 1 (<6) P EL.: INPUT IN 2D16.8 F-INTEG. AND ZETA
     1! E.G. FROM CONDON/SHORTLEY,',/,' P.274/275/301, FOR GE/SN/PB/AS/S
     2B/BI/TE F(**2);ZETA: 25423.;880.1',/,' /22965.;2097.3/23038.;7294.
     3/30250.;1500./26250.;3400./24750.;10100./30675.;4203.')
      IF(MORTEX.GT.0)THEN
      WRITE(*,3025)
      WRITE(11,3025)
 3025 FORMAT(
     1' F(INDEX 2 BELOW) = F(**2)/25. FOR P EL.; ZETA FOR ONE(!) P EL.')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(2D16.8)',ERR=5588,END=3826)FIN,ZETA
      GOTO 4826
      ENDIF
 3826 READ(*,'(2D16.8)',ERR=1139,END=4576)FIN,ZETA
      LMN=1
 4826 WRITE(7,2105)FIN,ZETA
 2105 FORMAT(2D16.8,' =FIN,ZETA')
      WRITE(*,2105)FIN,ZETA
      WRITE(11,2105)FIN,ZETA
      FINTEG(2)=FIN
      VLSTNG(8)=FIN
      VLSTNG(11)=ZETA
      ENDIF
      GOTO 8889
      ENDIF
C
      IF(KLWERT.NE.2)GOTO 6666
C
C      
      WRITE(11,9119)
 8201 WRITE(*,9119)
 9119 FORMAT(' INPUT IN I1 NUMBER OF D EL.; 0 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3827)NREL
      GOTO 4827
      ENDIF
 3827 READ(*,'(I1)',ERR=8201,END=4576)NREL
      LMN=1
 4827 IF(NREL.EQ.0.OR.NREL.GT.9)NREL=1
      WRITE(7,2106)NREL
 2106 FORMAT(I1,' = No.OF D EL.')
      WRITE(*,1110)NREL
      WRITE(11,1110)NREL
 1110 FORMAT(' THE NUMBER OF D ELECTRONS IS =',I3,'!!!!!!!!!')
C
      JANOC=0
      WRITE(11,2131)
 8202 WRITE(*,2131)
 2131 FORMAT(' INPUT IN I1 YES/NO(0), IF DATA FROM KOENIG/KREMER, I.E. '
     1,'DIFFERENT ZETA,',/,' AND RACAHC WILL BECOME =4.*RACAHB!'
     2,' - STANDARD: 0<=>GRIFFITH')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3828)JANOC
      GOTO 4828
      ENDIF
 3828 READ(*,'(I1)',ERR=8202,END=4576)JANOC
      LMN=1
 4828 WRITE(7,2107)JANOC
 2107 FORMAT(I1,' =JANOC ("RACAHC=4*B")')
      WRITE(*,2710)JANOC
      WRITE(11,2710)JANOC
 2710 FORMAT(I2,' =JANOC ("RACAHC=4*B")!!!!!!!!!')
      RACAHP=RACAKB(NREL)
      RACAHQ=VIER*RACAHP
      ZETA=FKSIDK(NREL)
      IF(JANOC.NE.0)THEN
      WRITE(*,2123)
      WRITE(11,2123)
 2123 FORMAT(
     1' DATA FROM KOENIG/KREMER (RACAHC=4.*RACAHB) HAVE BEEN CHOSEN!')
      ELSE
      WRITE(11,2132)
 8203 WRITE(*,2132)
 2132 FORMAT(
     1' DATA FROM GRIFFITH INCL. RACAHC AND COUPL.-CONST. HAVE BEEN'
     1,' CHOSEN!',/,' INPUT IN 2I1 CHARGE OF THE ION (0=ATOM, >4=>4)'
     1,' AND',/,' 1ST, 2ND, 3RD TRANS.-SERIES (0=>1, >3=>3)!')
C**   IN THE FOLLOWING: LDG=CHARGE AND NRSR=No.OF TRANS.-SERIES; BOTH
C     FOR GRIFFITH ONLY:
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3829)LDG,NRSR
      GOTO 4829
      ENDIF
 3829 READ(*,'(2I1)',ERR=8203,END=4576)LDG,NRSR
      LMN=1
 4829 CONTINUE
      WRITE(7,2108)LDG,NRSR
 2108 FORMAT(2I1,' =LDG(CHARGE),NRSR(TRANS-SER)')
      IF(LDG.GT.4)LDG=4
      IF(NRSR.EQ.0)NRSR=1
      IF(NRSR.GT.3)NRSR=3
      WRITE(*,3232)LDG,NRSR
      WRITE(11,3232)LDG,NRSR
 3232 FORMAT(' CHARGE OF THE ION (0=ATOM) AND No.OF TRANS.-SERIES=',2I2,
     1'!!!!!!!!!')
C
      IF(LDG.GE.1.AND.NRSR.EQ.3)THEN
      WRITE(*,2133)
      WRITE(11,2133)
 2133 FORMAT(
     1' ((CHARGE.GE.1).AND.(3RD TRANS.-SERIES)): WITH GRIFFITH-DATA'
     1,/,' POSSIBLE ARE ONLY RE3+, BUT WITH DATA OF RE+-0,'
     1,/,' AND HF1+, THE LAST ONE WITH S ORB.**2!')
      ENDIF
C
      IF(LDG.EQ.0)THEN
      IF(NRSR.EQ.1)WRITE(*,2136)
      IF(NRSR.EQ.1)WRITE(11,2136)
 2136 FORMAT(' SC TI  V %% MN FE CO %% %%; ALL WITH S ORB.**2')
      IF(NRSR.EQ.2)WRITE(*,2137)
      IF(NRSR.EQ.2)WRITE(11,2137)
 2137 FORMAT('  Y ZR %% %% %% %% %% %% %%; ALL WITH S ORB.**2')
      IF(NRSR.EQ.3)WRITE(*,2138)
      IF(NRSR.EQ.3)WRITE(11,2138)
 2138 FORMAT(' LU %% TA  W RE %% %% %% %%; ALL WITH S ORB.**2')
      ENDIF
C
      IF(LDG.EQ.1)THEN
      IF(NRSR.EQ.1)WRITE(*,2139)
      IF(NRSR.EQ.1)WRITE(11,2139)
 2139 FORMAT(' %% %% %%  V CR %% %% CO NI; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2140)
      IF(NRSR.EQ.2)WRITE(11,2140)
 2140 FORMAT(' %% %% %% NB MO %% RU RH %%; ALL WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.2)THEN
      IF(NRSR.EQ.1)WRITE(*,2151)
      IF(NRSR.EQ.1)WRITE(11,2151)
 2151 FORMAT(' SC TI  V CR MN FE CO NI CU; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2152)
      IF(NRSR.EQ.2)WRITE(11,2152)
 2152 FORMAT('  Y ZR NB %% %% %% RH PD %%; ALL WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.3)THEN
      IF(NRSR.EQ.1)WRITE(*,2153)
      IF(NRSR.EQ.1)WRITE(11,2153)
 2153 FORMAT(' TI  V CR MN %% %% %% %% %%; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2154)
      IF(NRSR.EQ.2)WRITE(11,2154)
 2154 FORMAT(' NB %% %% %% %% %% %% %% %%; WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.4)THEN
      IF(NRSR.EQ.1)WRITE(*,2155)
      IF(NRSR.EQ.1)WRITE(11,2155)
 2155 FORMAT('  V CR %% FE %% %% %% %% %%; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2156)
      IF(NRSR.EQ.2)WRITE(11,2156)
 2156 FORMAT(' %% %% %% %% %% %% %% %% %%; NOTHING IS THERE!')
      ENDIF
C
      LDG1=LDG+1
      IF(FKSIDA(NREL,LDG1,NRSR).EQ.ZERO)THEN
      WRITE(*,2134)
      WRITE(11,2134)
 2134 FORMAT(' GRIFFITH-DATA NOT'
     1,' AVAILABLE: DATA FROM KOENIG/KREMER, I.E. RACAHC=4.*RACAHB!')
      ELSE
      WRITE(*,2135)
      WRITE(11,2135)
 2135 FORMAT(
     1' DATA FROM GRIFFITH ARE USED INCL. RACAHC AND COUPL.-CONST.!')
      RACAHP=RACAHB(NREL,LDG1,NRSR)
      RACAHQ=RACAHC(NREL,LDG1,NRSR)
      ZETA=FKSIDA(NREL,LDG1,NRSR)
      ENDIF
C**   THE FOLLOWING ENDIF BELONGS TO "IF(JANOC.NE.0)THEN ... ELSE ..."!:
      ENDIF
C
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
C**   IN PRACTICE RACAHA AND FINTEG(1)=F(**0) ARE BOTH ZERO (SHIFT ONLY)!
C     - FORMULA: RACAHA=F(**0)-49.*F(**4)/441.
C
      NEURAH=0
      IF(NREL.EQ.1)THEN
      WRITE(11,9121)
 9204 WRITE(*,9121)
 9121 FORMAT(' RACAHB RESP. RACAHC ARE AND REMAIN ZERO!',/,' BECAUSE '
     2,'ANY CHANGE IS NOT POSSIBLE, INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3830)NEURAH
      GOTO 4830
      ENDIF
 3830 READ(*,'(I1)',ERR=9204,END=4576)NEURAH
      LMN=1
 4830 NEURAH=0
      WRITE(7,2109)NEURAH
      WRITE(*,2100)NEURAH
      WRITE(11,2100)NEURAH
      ENDIF
      IF(NREL.NE.1)THEN
C**   THE RACAH-PARAMETERS MAY BE CHANGED!:
      WRITE(11,2121)RACAHP,RACAHQ
 8204 WRITE(*,2121)RACAHP,RACAHQ
 2121 FORMAT(' INPUT IN I1'
     1,' YES/NO(0), IF NEW-INPUT OF RACAHB RESP. RACAHC - STANDARD: 0',
     2/,' (THESE ARE = ',2D16.8,')',
     3/,' (HINT: LIGANDS MAY BE IMPORTANT, TOO!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3831)NEURAH
      GOTO 4831
      ENDIF
 3831 READ(*,'(I1)',ERR=8204,END=4576)NEURAH
      LMN=1
 4831 WRITE(7,2109)NEURAH
 2109 FORMAT(I1,' =NEURAH(NEW RACAH)')
      WRITE(*,2100)NEURAH
      WRITE(11,2100)NEURAH
 2100 FORMAT(I2,' =NEURAH(NEW RACAH)!!!!!!!!!')
      ENDIF
      IF(NEURAH.NE.0)THEN
      WRITE(11,2113)
 8205 WRITE(*,2113)
 2113 FORMAT(
     1' INPUT NEW RACAHB AND C (IF REQ.) IN 1 RESP. 2 ROWS IN E16.8')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3832)RACAHP
      GOTO 4832
      ENDIF
 3832 READ(*,'(D16.8)',ERR=8205,END=4576)RACAHP
      LMN=1
 4832 WRITE(7,2110)RACAHP
 2110 FORMAT(D16.8,' =RACAHP')
      WRITE(*,2110)RACAHP
      WRITE(11,2110)RACAHP
      IF(JANOC.EQ.0)THEN
      GOTO 8207
 8206 WRITE(*,8208)
 8208 FORMAT(' INPUT RACAHC!:')
 8207 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3833)RACAHQ
      GOTO 4833
      ENDIF
 3833 READ(*,'(D16.8)',ERR=8206,END=4576)RACAHQ
      LMN=1
 4833 WRITE(7,2111)RACAHQ
 2111 FORMAT(D16.8,' =RACAHQ')
      WRITE(*,2111)RACAHQ
      WRITE(11,2111)RACAHQ
      ELSE
      RACAHQ=VIER*RACAHP
      ENDIF
      ENDIF
      VLSTNG(6)=RACAHP
      VLSTNG(7)=RACAHQ
C**   CALCULATION OF THE F'S:
      FINTEG(3)=(RACAHQ/35.0D0)*441.0D0
CF1   FINTEG(1)=RACAHA+49.D0*FINTEG(3)/441.D0
C**   FINTEG(1)=F(**0) (OR INDEX 0 BELOW: IS THE SAME THING!)
C     =49.*F(**4)/441.=49.*F-(INDEX 4 BELOW)
      FINTEG(2)=(RACAHP+5.D0*FINTEG(3)/441.D0)*49.0D0
C**   FINTEG(2)=F(**2)
C**   FINTEG(3)=F(**4)!
C**   FINTEG(4)=F(**6) - FOR F EL.!
C**   RACAHC IS OR IS NOT (THEN: RACAHC=FOUR*RACAHB) USED!
      IF(MOROUT.NE.0)THEN
      WRITE(*,3168)
      WRITE(11,3168)
 3168 FORMAT(/,' F-INTEG(RAL),I=2,3:')
      WRITE(*,'(2D16.8)')(FINTEG(I),I=2,3)
      WRITE(11,'(2D16.8)')(FINTEG(I),I=2,3)
      ENDIF
C
      IF(JANOC.EQ.0.AND.NREL.EQ.1)THEN
      WRITE(11,9122)
 9205 WRITE(*,9122)
 9122 FORMAT(' INPUT OF NEW F''S IS NOT POSSIBLE! INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3834)NEUEFS
      GOTO 4834
      ENDIF
 3834 READ(*,'(I1)',ERR=9205,END=4576)NEUEFS
      LMN=1
 4834 NEUEFS=0
      WRITE(7,2112)NEUEFS
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
      ENDIF
      IF(JANOC.EQ.0.AND.NREL.NE.1)THEN
C**   IN THE FOLLOWING THE POSSIBILITY FOR DIRECT INPUT OF
C     THE F'S-(TO THE KTH) OF CONDON/SHORTLEY (FINTEG(1)=F(**0)!):
      WRITE(11,21)
 8209 WRITE(*,21)
   21 FORMAT(' DIRECT INPUT OF NEW F''S IN I1 YES/NO(0); (OR THESE'
     1,/,' ARE QUASI PREOCC./THOSE OF BEFORE)! - STANDARD: 0 (9=STOP)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3835)NEUEFS
      GOTO 4835
      ENDIF
 3835 READ(*,'(I1)',ERR=8209,END=4576)NEUEFS
      LMN=1
 4835 WRITE(7,2112)NEUEFS
 2112 FORMAT(I1,' =NEUEFS(NEW F''S)')
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
 2101 FORMAT(I2,' =NEUEFS(NEW F''S)!!!!!!!!!')
      IF(NEUEFS.EQ.9)STOP 'END-9'
      IF(NEUEFS.NE.0)THEN
      WRITE(11,211)
 8210 WRITE(*,211)
  211 FORMAT(' INPUT (ONE ROW EACH!) IN E16.8. F(**2) AND F(**4)')
CF1   READ(*,'(D16.8)')FIN
CF1   FINTEG(1)=FIN (NOT USED!)
C**   ATTENTION: FINTEG(3)=F(**4)!
      IF(MORTEX.GT.0)THEN
      WRITE(*,2118)
      WRITE(11,2118)
 2118 FORMAT(
     1' F(INDEX 2 (4) BELOW) = F(**2 (**4))/49. (/441.) FOR D EL.!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3836)FIN
      GOTO 4836
      ENDIF
 3836 READ(*,'(D16.8)',ERR=8210,END=4576)FIN
      LMN=1
 4836 WRITE(*,2270)FIN
      WRITE(7,2270)FIN
 2270 FORMAT(D16.8,' =FIN(TEGRAL)')
      FINTEG(2)=FIN
      GOTO 8212
 8211 WRITE(*,8213)
 8213 FORMAT(' INPUT 2ND ROW!:')
 8212 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3837)FIN
      GOTO 4837
      ENDIF
 3837 READ(*,'(D16.8)',ERR=8211,END=4576)FIN
      LMN=1
 4837 WRITE(*,2270)FIN
      WRITE(7,2270)FIN
      FINTEG(3)=FIN
      WRITE(*,'(2D16.8)')(FINTEG(I),I=2,3)
      WRITE(11,'(2D16.8)')(FINTEG(I),I=2,3)
      ENDIF
      VLSTNG(8)=FINTEG(2)
      VLSTNG(10)=FINTEG(3)
      ENDIF
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.NE.2)GOTO"!:
 6666 CONTINUE
      IF(KLWERT.NE.3)GOTO 7777
      WRITE(11,9118)
 8214 WRITE(*,9118)
 9118 FORMAT(/,' INPUT IN I2 NUMBER OF F EL.; .LT.1 OR .GT.13 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3838)NREL
      GOTO 4838
      ENDIF
 3838 READ(*,'(I2)',ERR=8214,END=4576)NREL
      LMN=1
 4838 IF(NREL.LE.0.OR.NREL.GT.13)NREL=1
      WRITE(7,9117)NREL
 9117 FORMAT(I2,' = No.OF F EL.')
      WRITE(*,1111)NREL
      WRITE(11,1111)NREL
 1111 FORMAT(' THE NUMBER OF F ELECTRONS IS =',I4,'!!!!!!!!!')
      IF(NREL.EQ.1.OR.NREL.EQ.13)THEN
      WRITE(11,9122)
 9250 WRITE(*,9122)
C9122 FORMAT(' INPUT OF NEW F''S IS NOT POSSIBLE! INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3934)NEUEFS
      GOTO 4934
      ENDIF
 3934 READ(*,'(I1)',ERR=9250,END=4576)NEUEFS
      LMN=1
 4934 NEUEFS=0
      WRITE(7,2112)NEUEFS
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
      ENDIF
C**   JAWIGN.NE.0 <=> SUBROUTINE (WIGNER-)ECKART RUNS: (JAWIGN=0 HERE!)
      IF(NREL.EQ.1.OR.NREL.EQ.13)GOTO 6678
CF1   FINTEG(1)=ZERO
      DO 3100 I=2,4
      FINTEG(I)=FINT(I,NREL)
 3100 CONTINUE
C
      WRITE(11,112)(FINTEG(I),I=2,4)
 8215 WRITE(*,112)(FINTEG(I),I=2,4)
  112 FORMAT(/,' (FINTEG(I),I=2,4):',3D14.6
     1,/,' INPUT IN I1 YES/NO(0): "OTHER"')
      WRITE(*,4121)
      WRITE(11,4121)
 4121 FORMAT(
     1' IF 5F EL. (NOT 4F EL.!): YOU OUGHT TO CHOOSE "YES(1): OTHER"!',
     2/,' DATA FOR U(4+), U(3+): CHOOSE "YES(2)"!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,1121)
      WRITE(11,1121)
 1121 FORMAT(' THE DATA STORED HERE ARE SUFFICIENTLY GOOD FOR'
     1,' MAGNETOCHEM.,',/,' BUT NOT FOR LIGAND FIELDS IN GENERAL!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3839)JANO
      GOTO 4839
      ENDIF
 3839 READ(*,'(I1)',ERR=8215,END=4576)JANO
      LMN=1
 4839 IF(JANO.GT.2)JANO=2
      WRITE(7,2271)JANO
 2271 FORMAT(I1,' =JANO(FINTEG)')
      WRITE(*,2207)JANO
      WRITE(11,2207)JANO
 2207 FORMAT(I2,' =JANO(FINTEG)!!!!!!!!!')
      IF(JANO.GT.1)THEN
      FINTEG(2)=FINTEU(1,NREL-1)
      FINTEG(3)=FINTEU(2,NREL-1)
      FINTEG(4)=FINTEU(3,NREL-1)
      WRITE(11,2217)(FINTEG(I),I=2,4)
 8251 WRITE(*,2217)(FINTEG(I),I=2,4)
 2217 FORMAT(' (FINTEG(I),I=2,4) =',3D16.8,
     1/,' (THEOR. RELATIVISTIC VALUES FOR FREE IONS! LESS 40, 30, 20% (F
     2INTEG(2,3,4))',/,' FOR EXP.VAL.: INPUT OF NEW VALUES YES/NO(0)?)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3840)JANO
      GOTO 4840
      ENDIF
 3840 READ(*,'(I1)',ERR=8251,END=4576)JANO
      LMN=1
 4840 IF(JANO.GT.1)JANO=1
      WRITE(7,2271)JANO
      WRITE(*,2207)JANO
      WRITE(11,2207)JANO
      ENDIF
      IF(JANO.EQ.1)THEN
      WRITE(*,113)
      WRITE(11,113)
  113 FORMAT(
     1' INPUT IN D14.6 (FINTEG(I),I=2,4) -  F(**2)...! - ONE ROW EACH!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,1089)
      WRITE(11,1089)
 1089 FORMAT(
     1' F(INDICES 2,4,6 BELOW) = F(**2,4,6)/(225.,1089.,184041./25.)'
     1,' FOR F EL.!')
      ENDIF
      DO 3101 I=2,4
 8216 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,114,ERR=5588,END=3841)FINTEG(I)
      GOTO 4841
      ENDIF
 3841 READ(*,114,ERR=8216,END=4576)FINTEG(I)
      LMN=1
 4841 WRITE(*,114)FINTEG(I)
      WRITE(7,114)FINTEG(I)
      WRITE(11,114)FINTEG(I)
  114 FORMAT(D14.6)
 3101 CONTINUE
      ENDIF
CKR 6677 CONTINUE
      VLSTNG(8)=FINTEG(2)
      VLSTNG(9)=FINTEG(3)
      VLSTNG(10)=FINTEG(4)
 6678 CONTINUE
      ZETA=FKSIWI(NREL)
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.NE.3)GOTO"!: 
 7777 CONTINUE
C
      WRITE(11,1199)ZETA
 8217 WRITE(*,1199)ZETA
      WRITE(11,41)
      WRITE(*,41)
   41 FORMAT(' INPUT IN I1 ',
     1'YES/NO(0): NEW (POS.!) SPIN-ORBIT COUPL.-CONST. FOR 1 ELECTRON.')
      IF(KLWERT.EQ.3)THEN
      WRITE(*,4112)
      WRITE(11,4112)
 4112 FORMAT(
     1' IF 5F EL. (NOT 4F EL.!): YOU OUGHT TO CHOOSE "YES(1): OTHER"!',
     2/,' DATA FOR U(5+), U(4+), U(3+): CHOOSE "YES(2)"!')
CKR      ELSE
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3842)NEUKSI
      GOTO 4842
      ENDIF
 3842 READ(*,'(I1)',ERR=8217,END=4576)NEUKSI
      LMN=1
 4842 IF(NEUKSI.GT.2)NEUKSI=2
      WRITE(7,2272)NEUKSI
 2272 FORMAT(I1,' =NEUKSI(NEW ZETA)')
      WRITE(*,2227)NEUKSI
      WRITE(11,2227)NEUKSI
 2227 FORMAT(I2,' =NEUKSI(NEW ZETA)!!!!!!!!!')
C**   ZETA: (POS.!) SPIN-ORBIT COUPL.-CONST. FOR ONE ELECTRON!
      IF(NEUKSI.GT.1)THEN
      ZETA=FKSIU(NREL)
      WRITE(*,1199)ZETA
      WRITE(11,1199)ZETA
C1199 FORMAT: SEE BELOW!
      ENDIF
      IF(NEUKSI.EQ.1)THEN
C
      WRITE(11,4111)
 8218 WRITE(*,4111)
 4111 FORMAT(' INPUT'
     1,' IN E12.4 (POS.!) COUPL.-CONST. ZETA FOR ONE ELECTRON,',/
     1,' (A POSS. ORB.-RED.-FACTOR IS POSS.(!) TO BE TAKEN INTO ACCOUNT'
     1,/,' HERE TOO, IN AS MUCH AS THE CONST. HAS TO BE REDUCED!)')
C
CKR 4118 FORMAT(' FOR THE SPEC. ROUTINE WIGNER/ECKART: A POSS. INPUT IS 1.0
CKR     1E6 ("TEST")')
      IF(LMN.EQ.0)THEN
      READ(77,'(D12.4)',ERR=5588,END=3843)FKSII
      GOTO 4843
      ENDIF
 3843 READ(*,'(D12.4)',ERR=8218,END=4576)FKSII
      LMN=1
 4843 ZETA=DABS(FKSII)
      WRITE(7,2273)FKSII
 2273 FORMAT(D12.4,' =FKSII(=ZETA)')
      WRITE(*,1200)FKSII
      WRITE(11,1200)FKSII
 1200 FORMAT(D12.4,' =FKSII(=ZETA)!!!!!!!!!')
      WRITE(*,1199)ZETA
      WRITE(11,1199)ZETA
 1199 FORMAT(/,' THE '
     1,'(POS.!) COUPL.-CONST. ZETA (1(!) EL.) IS =',D13.4)
C
      ENDIF
      VLSTNG(11)=ZETA
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.EQ.1)THEN"! 
 8889 CONTINUE
C
C**   FOR ALL SORTS OF ELECTRONS EXCEPT S EL., BUT ONLY TEST, IF 4F EL.:
C     (SEE DATA!:)
C     DO 4100 I=1,3
C4100 REDFAZ(I)=ONE
      IF(KLWERT.EQ.3)THEN
      WRITE(*,8899)
      WRITE(11,8899)
 8899 FORMAT(/,' F EL.:'
     1,' ORB.-RED.-FACTOR(S) OTHER THEN ONE ONLY AS A TEST, IF 4F EL.!')
      ENDIF
      WRITE(11,410)
 8219 WRITE(*,410)
  410 FORMAT(
     1/,' INPUT IN I1 YES/NO(0): ORB.-RED.-FACTOR(S) OTHER THAN ONE')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3844)NEUORB
      GOTO 4844
      ENDIF
 3844 READ(*,'(I1)',ERR=8219,END=4576)NEUORB
      LMN=1
 4844 WRITE(7,2274)NEUORB
 2274 FORMAT(I1,' =NEUORB(ORB.-RED.-F.)')
      WRITE(*,2244)NEUORB
      WRITE(11,2244)NEUORB
 2244 FORMAT(I2,' =NEUORB(ORB.-RED.-F.)!!!!!!!!!')
      IF(NEUORB.NE.0)THEN
      WRITE(*,4101)NRDIRE
 4101 FORMAT(' INPUT (ONE'
     1,' ROW EACH!)',I2,' ORB.-RED.-FACTOR(S) (ZERO>=ONE) IN F12.8')
      DO 4102 I=1,NRDIRE
 8220 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(F12.8)',ERR=5588,END=3845)REDFA
      GOTO 4845
      ENDIF
 3845 READ(*,'(F12.8)',ERR=8220,END=4576)REDFA
      LMN=1
 4845 WRITE(*,2275)REDFA
      WRITE(7,2275)REDFA
 2275 FORMAT(F12.8,' =RED.FA(CT)')
      IF(REDFA.NE.ZERO)REDFAZ(I)=REDFA
 4102 CONTINUE
C**   NOTE: IOPT1=2 <=> 1 DIRECTION, A LINEAR COMBINATION OF UP TO
C     3 DIRECTIONS, IS INVOLVED. THE POINT GROUP, HOWEVER, REMAINS!
C     (CKR: IOPT1=3 CANCELED!)
      IF(NRDIRE.EQ.2)REDFAZ(3)=REDFAZ(2)
      IF(NRDIRE.EQ.1)THEN
      REDFAZ(2)=REDFAZ(1)
      REDFAZ(3)=REDFAZ(1)
      ENDIF
      WRITE(*,4103)(REDFAZ(I),I=1,3)
      WRITE(11,4103)(REDFAZ(I),I=1,3)
 4103 FORMAT(' (THREE) ORB.-RED.-FACTORS =',3F13.8)
C
      ENDIF
C
C**   THE FOLLOWING CONTINUE BELONG TO
C     "IF(KLWERT.EQ.0)THEN NREL=1 GOTO"!:
      IF(REDFAZ(1).NE.ONE)VLSTNG(12)=REDFAZ(1)
      IF(REDFAZ(2).NE.ONE)VLSTNG(13)=REDFAZ(2)
      IF(REDFAZ(3).NE.ONE)VLSTNG(14)=REDFAZ(3)
 9999 CONTINUE
      NRVALJ=1
      IF(NREL.EQ.1)NRVALJ=2
      IF(KLWERT.EQ.1)NRVALJ=MULMUP(NREL)
      IF(KLWERT.EQ.2)NRVALJ=MULMUD(NREL)
      IF(KLWERT.EQ.3)NRVALJ=JMULTI(NREL)
      CALL SHORTL(JASTRU,KLWERT,NREL,KMASKE,NGROUP
     1,ZETA,FINTEG,REDFAZ,DIRECZ,SIGMA0)
C
C**   SUBROUTINE SHORTL WILL CALL SUSFIT (NOT SUSC), THE FITTING
C     ROUTINE! THERE IS NO RETURN FROM SUSFIT TO SHORTL!
C     THERE IS NO RETURN FROM SHORTL TO CONCORD!
 4576 CALL FINISH
 5588 CALL FINISI
 4577 WRITE(*,4578)
      WRITE(11,4578)
 4578 FORMAT(' (NEW, EMPTY INPUT FILE OLDf7.DAT OPENED!)')
      OPEN(77,ERR=4581,FILE='OLDf7.DAT',STATUS='NEW')
      LMN=1
      GOTO 1921
 4581 STOP 'STOP: fort...->FORT...'
CEND CONCORD
      END
      SUBROUTINE FINISH
C 4576 CALL FINISH - READ(*,... - END=4576
      WRITE(*,1)
      WRITE(11,1)
    1 FORMAT(' END OF FILE OF INPUT FILE: STOP')
      STOP 'STOPSH'
      END
      SUBROUTINE FINISI
C 5588 CALL FINISI - READ(77,... - ERR=5588
      WRITE(*,1)
      WRITE(11,1)
    1 FORMAT(' ERROR IN FILE OLDf7.DAT: STOP')
      STOP 'STOPSI'
      END
      SUBROUTINE SHORTL(JASTRU,KLWERT,NREL,KMASKE,NGROUP
     1,FKSI,FINTEG,REDFAZ,DIRECZ,SIGMA0)
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/ALLGEM/MOROUT,MORTEX,MIST(7)
      SAVE
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,12)
      NPOIN3=0
      IF(KLWERT.EQ.3)THEN
      IF(NREL.EQ.7)NPOIN3=3
      IF(NREL.EQ.6.OR.NREL.EQ.8)NPOIN3=2
      IF(NREL.EQ.5.OR.NREL.EQ.9)NPOIN3=1
      ENDIF
      ND2002=1110
      IF(NPOIN3.EQ.1)ND2002=2002
      IF(NPOIN3.EQ.2)ND2002=3003
      IF(NPOIN3.EQ.3)ND2002=3432
      WRITE(*,6622)NREL,KLWERT,ND2002
      WRITE(11,6622)NREL,KLWERT,ND2002
 6622 FORMAT(' IN SHORTL: NREL, KLWERT, ND2002=',2I2,I6
     1,/,' SHORTL CALLS SUSFIT (NO RETURN)')
C
COMMENT: AN INTERFACE (No.1) IS HERE!:
CO:      THERE IS NO RETURN FROM SUSFIT TO SHORTL!
CO:      BWWWIN AND STBWWW=BWWWIN BEFORE! NO BWWWIN NOW, BUT STBWWW!
      CALL SUSFIT(JASTRU,NGROUP,SIGMA0
     1,DIRECZ
     4,NREL,KLWERT
     6,ND2002 !NEW
     6,KMASKE
     7,REDFAZ
     7,FINTEG,FKSI)
C
      RETURN
CEND SHORTL
      END
      SUBROUTINE SUSFIT(
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   THIS ROUTINE IS CALLED BY SUBROUTINE SHORTL (NO RETURN TO
C     SHORTL) AND IS THE FIRST ROUTINE WHICH WILL REALLY RUN AFTER
C     STARTING WITH CONCORD!
C     FIRSTLY SUBROUTINE LEVSQX IS CALLED TO CALCULATE CHI WITH HELP OF
C     THE PARAMETERS, WHICH WERE READ IN, AND SQX AS A MEASURE FOR THE
C     QUALITY OF A FIT, EVEN WHEN NO FIT IS MADE, AND DEFINED AS
C     SQX=SQRT(SUM((1-CHIBER/CHIGEM)**2)/NDATA) (CALCULATED AND MEASURED
C     CHI ARE COMPARED).
C     (E.G. WYBOURNE) PARAMETERS MAY BE FITTED SO AS TO MINIMIZE SQX,
C     USING THE LEVENBERG-MARQUARDT METHOD IN SUBROUTINES (LEVSQX),
C     LEVMAR AND LEVDER. IF FITTING IS DONE, SUSFIT CALLS LEVMAR,
C     WHICH CALLS LEVDER AND GAUSS.
C     THE MAX. (AND MIN.) NUMBER OF ITERATIONS IS PUT IN, AND SUSFIT
C     DECIDES FOR CONVERGENCE OF A FIT.
C     TO THE VERY END, E.G. AFTER CONVERGENCE, BUT MAY BE BEFORE,
C     SUBROUTINE RES(ULT)T(A)BL/ES) IS CALLED TO GIVE THE RESULTS
C     IN FORM OF TABLES!
C     RETURN TO SUBROUTINE SUSFIT FROM RESTBL CAN BE CHOSEN!
     1JASTRU,NGROUP,SIGMA0
     1,DIRECZ
     4,NREL,KLWERT
     6,ND2002
     6,KMASKE
     7,REDFAZ
     7,FINTEG,FKSI)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(J20=44)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      COMMON/QBQVQQ/QB,QV
      COMMON/QQQQQQ/QQ
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
C
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,FMONE=-ONE)
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(J20),CHIFIX
     1,CFOSXJ,NOTONE,JAMIST
C
      DIMENSION LIST(J20),ALPHAM(J20,J20),ALPHA(J20,J20),SIGMA0(601)
     1,BETA(J20),BETAM(J20),ABLCHM(J20,601),CHIBER(601),DELCHI(601)
     1,CHIFIX(601,4)
     2,SIG2I(601),CHIGEM(601),ISR(3),ISS(3),KMASKE(20)
      SAVE
      DATA ITMIN,ITMAX,ISR,ISSSSS,ISS,JUMPTO,NOSUCC
     1/0,0,0,0,0,0,0,0,0,0,0/
      DATA CHISQQ,OMEGA/ZERO,ZERO/
C
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,13)
      LAUFNR=0
   55 MFIT=0
      II=J20+1
      DO 11 I=1,J20
      IF(IABS(IBWWW(I)).EQ.1)THEN
      MFIT=MFIT+1
      LIST(MFIT)=I
      ELSE
      II=II-1
      LIST(II)=I
      ENDIF
   11 CONTINUE
C
      WRITE(*,15)MFIT
      WRITE(11,15)MFIT
   15 FORMAT(/,
     1' MFIT, I.E. No. OF PARAMETERS ACTUALLY BEEN ADJUSTED, =',I3)
C
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
C
      JASTOP=0
      LOWER0=1
C**   LAST ROW FOR INITIALIZATION IN SUBROUTINES LEVSQX AND LEVMAR!
   25 CONTINUE
      IF(MFIT.EQ.0.OR.NDATA.EQ.0)THEN
      WRITE(11,2933)
 5010 WRITE(*,2933)
 2933 FORMAT(/,' PUT IN ANY TWO NUMBERS IN (I5,I3) OR "RETURN"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I5,I3)',ERR=5588,END=6438)IITMAX,IITMIN
      GOTO 6448
      ENDIF
 6438 READ(*,'(I5,I3)',ERR=5010,END=4576)IITMAX,IITMIN
      LMN=1
 6448 IITMAX=0
      IITMIN=0
      WRITE(7,2272)IITMAX,IITMIN
      WRITE(*,2722)IITMAX,IITMIN
      WRITE(11,2722)IITMAX,IITMIN
C
C - 25 LINES REMOVED: "STOP INSTEAD OF FURTHER INPUT"
      ELSE IF(MFIT.NE.0.AND.NDATA.NE.0)THEN
      WRITE(11,293)LAUFNR,ITMAX,ITMIN
 1005 WRITE(*,293)LAUFNR,ITMAX,ITMIN
  293 FORMAT(/,' THERE IS No. OF ITERATION =',I6,/,
     1' INPUT IN I5,I3 MAX. AND MIN. NUMBER OF (FURTHER) ITERATIONS!:',/
     2,' (ITER.COUNT',I6,I4,', INPUT MAY BE NEG. FOR "FURTHER" ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I5,I3)',ERR=5588,END=3864)IITMAX,IITMIN
      GOTO 4864
      ENDIF
 3864 READ(*,'(I5,I3)',ERR=1005,END=4576)IITMAX,IITMIN
      LMN=1
 4864 WRITE(7,2272)IITMAX,IITMIN
 2272 FORMAT(I5,I3,' =IITMAX,IITMIN')
      WRITE(*,2722)IITMAX,IITMIN
      WRITE(11,2722)IITMAX,IITMIN
 2722 FORMAT(I6,I4,' =IITMAX,IITMIN!!!!!!!!!')
      ITMIN=ITMIN+IITMIN
      ITMAX=ITMAX+IITMAX
      ITMAX=IABS(ITMAX)
      ITMIN=IABS(ITMIN)
      IF(ITMIN.GT.ITMAX)ITMIN=ITMAX
      IF(ITMIN.NE.IITMIN.OR.ITMAX.NE.IITMAX)THEN
      WRITE(*,'(I6,I4)')ITMAX,ITMIN
      WRITE(11,'(I6,I4)')ITMAX,ITMIN
      ENDIF
      ENDIF
C - 34 LINES REMOVED: "STOP INSTEAD OF FURTHER INPUT"
      IF(JUMPTO.NE.0)GOTO 2155
C**   INITIALIZATION FOR SUBROUTINES LEVSQX AND LEVMAR SEE ABOVE!
    5 CONTINUE
      CHISQO=CHISQQ
C**   AND NOW THE LEVENBERG-MARQUARDT METHOD IN SUBROUTINES LEVSQX, LEVMAR
C     AND LEVDER. FIRSTLY LEVSQX HERE TO CALCULATE SQX, WHICH WILL BE NEEDED
C     IN ANY CASE, LEVENBERG-MARQUARDT MAY BE APPLIED OR NOT!:
      CALL LEVSQX(NOSUCC,
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     1,GMAT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM,EIVECV
     1,LMAT
     7,DBLMAT,FINTEG,FKSI
     8,LOWER0,OMEGA,LIST,ALPHA,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,NOTONE,LAUFNR)
C
      SXR=CHISQQ-CHISQO
      IF(NDATA.EQ.0)GOTO 1202
      IF(NDATAM.EQ.0)THEN
      WRITE(11,1206)OMEGA
 1205 WRITE(*,1206)OMEGA
 1206 FORMAT(' AT TIME THERE ARE NO MORE DATA (OMEGA=',D10.2,')!'
     1,' INPUT 0/RETURN!',/)
      GOTO 1202
      ENDIF
      SMIN=DSQRT(CHISQ/NDATAM)
      SMINN=DSQRT(CHISQQ/NDATAM)
      SXRABS=DABS(SXR)
      KLEINR=0
      IF(SXRABS.LT.0.000001D0)KLEINR=1
      ISX=1+MOD(LAUFNR,3)
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED
C     BY THE SECOND
      ISR(ISX)=KLEINR
      NOCONV=0
C**   ... MEANS "CONVERGENCE OR NOT"!
      IF(LAUFNR.LT.ITMIN)NOCONV=1
      IF(OMEGA.GT.0.1D10)GOTO 877
      IF(ISR(1).EQ.1.AND.ISR(2).EQ.1.AND.ISR(3).EQ.1)GOTO 877
      DIFMIN=(SMINN-SMIN)/SMIN
C**   DIFMIN CANNOT BE NEGATIV, BUT ZERO!
      IF(DIFMIN.NE.ZERO)THEN
      KLEINS=0
      ISSSSS=ISSSSS+1
      ISY=1+MOD(ISSSSS,3)
      IF(DIFMIN.LE.0.00001D0)KLEINS=1
      ISS(ISY)=KLEINS
      ENDIF
      IF(ISS(1).NE.1.OR.ISS(2).NE.1.OR.ISS(3).NE.1)NOCONV=1
C
   44 FORMAT(
     1/,' AFTER',I5,'TH ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
    4 FORMAT(/,' AFTER',I5,'TH ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  144 FORMAT(
     1/,' AFTER',I5,'ST ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   14 FORMAT(/,' AFTER',I5,'ST ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  244 FORMAT(
     1/,' AFTER',I5,'ND ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   24 FORMAT(/,' AFTER',I5,'ND ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  344 FORMAT(
     1/,' AFTER',I5,'RD ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   34 FORMAT(/,' AFTER',I5,'RD ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
 1515 FORMAT(' LIST(I), BWYB(LIST(I))=',/,(5(I3,D16.8)))
 4444 FORMAT(' LIST(I), BWYB(LIST(I))=',4(I3,D12.4),/
     1,(6(I3,D12.4)))
  444 FORMAT(' LIST(I), BWYB(LIST(I))=',4(I3,D12.4),/
     1,(8(I3,D12.4)))
C
  877 IF(JASUCC.NE.0)THEN
      SQXFIX=SMIN
      IF(LAUFNR.EQ.0.OR.LAUFNR.GT.3)THEN
      WRITE(11,44)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,44)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.1)THEN
      WRITE(11,144)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,144)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.2)THEN
      WRITE(11,244)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,244)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.3)THEN
      WRITE(11,344)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,344)LAUFNR,OMEGA,SMIN,SXR
      ENDIF
      ELSE !IF(JASUCC.NE.0)THEN
      IF(LAUFNR.EQ.0.OR.LAUFNR.GT.3)THEN
      WRITE(11,4)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,4)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.1)THEN
      WRITE(11,14)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,14)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.2)THEN
      WRITE(11,24)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,24)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.3)THEN
      WRITE(11,34)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,34)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ENDIF
      ENDIF !IF(JASUCC.NE.0)THEN-ELSE
      IF(NOCONV.EQ.0.OR.LAUFNR.EQ.ITMAX)THEN
      WRITE(11,1712)(IBWWW(I),I=1,44)
      WRITE(*,1712)(IBWWW(I),I=1,44)
 1712 FORMAT(/,' "FITTED"=+-1; -2/-1<=>8/9 IN INPUT FILE: ',(20I2))
      WRITE(11,1515)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      WRITE(*,1515)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,1721)LAUFNR,SMIN
      WRITE(9,1721)LAUFNR,SMIN
 1721 FORMAT(' NOCONV.EQ.0.OR.LAUFNR.EQ.ITMAX,',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,44)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWWXX(I),QB(I),I=1,44)
      CLOSE(8)
      CLOSE(9)
      ELSE
C     ... IF(NOCONV.NE.0.AND.LAUFNR.NE.ITMAX)THEN
C     HERE NOT THE SAME PRECISION FOR BWNULL!:
      IF(LAUFNR.EQ.1)THEN
      WRITE(11,8779)
      WRITE(*,8779)
 8779 FORMAT(' IN ADDITION TO THE FOLLOWING PARAMETERS, WHICH ARE THE FI
     1XED ONES FOR',/,' "FIX.NE.SQX", THE TRIAL PARAMETERS, IF DIFF., AR
     2E GIVEN, BUT MAX. 8 TIMES!')
      ENDIF
      WRITE(11,444)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      WRITE(*,4444)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,1722)LAUFNR,SMIN
      WRITE(9,1722)LAUFNR,SMIN
 1722 FORMAT(' NOCONV.NE.0.AND.LAUFNR.NE.ITMAX,',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,44)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWWXX(I),QB(I),I=1,44)
      CLOSE(8)
      CLOSE(9)
      ENDIF
      IF(NOCONV.NE.0)THEN
      WRITE(11,8001)CFMSFX,CFOSFX,CFOSXJ
      WRITE(*,8001)CFMSFX,CFOSFX,CFOSXJ
 8001 FORMAT(' CFMS, "CFOS/ CFOSJ" =',3D12.3)
      ELSE IF(NOCONV.EQ.0)THEN
      WRITE(11,8002)DIFLOW,CFOS,CFOSJ
      WRITE(*,8002)DIFLOW,CFOS,CFOSJ
 8002 FORMAT(/,' CRYSTAL FIELD MIN. SPLIT. (CFMS) AND EIGENVALUE OF THE 
     1LEVEL "No. OF VAL.',/,' (NRVAL)", WHICH MAY BE THE CRYSTAL FIELD O
     2VER ALL SPLITTING (CFOS),',/,' AND CFOSJ (<=> NRVALJ) = ',3D12.3)
      WRITE(11,2156)LAUFNR,ITMIN,ITMAX,SXR,DIFMIN
      WRITE(*,2156)LAUFNR,ITMIN,ITMAX,SXR,DIFMIN
 2156 FORMAT(
     1/,' CONV.MAY BE TOO SLOW: ITER/IT-MIN/IT.-MAX.=',2I4,I6
     1,/,' SXR (=(SQX**2-(SQX**2-BEFORE))*NRDATA)=',D9.2,/
     1,' DIFMIN (=(SQX-FIX)/(SQX, IF"BETTER")-ONE, "ELSE"=ZERO)=',D9.2)
C     IF(JASTOP.EQ.2)THEN !JASTOP=0
C ...
C     ENDIF
C     IF(JASTOP.EQ.0)GOTO 1202 !JASTOP=0
      GOTO 1202
C      JASTOQ=0
C      GOTO 1300
      ENDIF
      IF((SMIN.NE.SMINN.AND.LAUFNR.LT.9.AND.LAUFNR.NE.0)
     1.OR.(SMIN.NE.SMINN.AND.NOSUCC.NE.0.AND.LAUFNR.NE.0)
     1)THEN
      WRITE(11,41)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
      WRITE(*,4441)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
   41 FORMAT(
     1' LI(I),BTRIAL(LI(I))=',4(I3,D12.4),/,(8(I3,D12.4)))
 4441 FORMAT(
     1' LI(I),BTRIAL(LI(I))=',4(I3,D12.4),/,(6(I3,D12.4)))
      WRITE(11,8001)DIFLOW,CFOS,CFOSJ
      WRITE(*,8001)DIFLOW,CFOS,CFOSJ
      ENDIF
C
      IF(LAUFNR.EQ.ITMAX)THEN
      WRITE(11,6)LAUFNR,ITMAX
      WRITE(*,6)LAUFNR,ITMAX
    6 FORMAT(' (LAUFNR.EQ.ITMAX): LAUFNR, ITMAX=',2I6)
C     IF(JASTOP.EQ.2)THEN !JASTOP=0
C...   13 LINES REMOVED!
C     ENDIF
C     IF(JASTOP.EQ.0)GOTO 1202 !JASTOP=0
      GOTO 1202
C     JASTOQ=0
C     GOTO 1300
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LAUFNR.EQ.ITMAX)THEN"!
 2155 CONTINUE
      JUMPTO=0
      IF(LAUFNR.LT.ITMAX.AND.MFIT.NE.0)THEN
C**   AND NOW THE LEVENBERG-MARQUARDT METHOD ITSELF (SUBROUTINES LEVSQX, LEVMAR
C     AND LEVDER). HERE THE SECOND ONE, LEVMAR, WHICH MAKES A NEW PROPOSAL OF
C     PARAMETERS FOR A HOPEFULLY "BETTER" SQX!:
      CALL LEVMAR(NOSUCC,
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     1,GMAT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM,EIVECV
     1,LMAT
     7,DBLMAT,FINTEG,FKSI
     8,LOWER0,OMEGA,LIST,ALPHAM,ALPHA,BETA,BETAM,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,LAUFNR,ITMIN,ITMAX)
C
      IF(OMEGA.GT.0.1D10)THEN
      NOCONV=0
      GOTO 877
      ENDIF
      GOTO 5
      ENDIF
C
 1202 CONTINUE
      WRITE(11,1302)
 1301 WRITE(*,1302)
 1302 FORMAT(/,
     1' INPUT 0/RETURN FOR TABLES OF OUTPUT, 1 TO CONTINUE, >1: STOP!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3867)JASTOQ
      GOTO 4867
      ENDIF
 3867 READ(*,'(I1)',ERR=1301,END=4576)JASTOQ
      LMN=1
 4867 WRITE(7,2275)JASTOQ
 2275 FORMAT(I1,' =JASTOQ(2=STOP)')
      WRITE(11,2752)JASTOQ
      WRITE(*,2752)JASTOQ
 2752 FORMAT(I2,' =JASTOQ(2=STOP)!!!!!!!!!')
      IF(JASTOQ.GT.1)THEN
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2177)LAUFNR,SMIN
      WRITE(9,2177)LAUFNR,SMIN
 2177 FORMAT(' JASTOQ.GT.1 (STOP JASTOQ),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,44)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWWXX(I),QB(I),I=1,44)
      WRITE(7,2177)LAUFNR,SMIN
      STOP 'JASTOQ'
      ENDIF
 1300 IF(JASTOQ.EQ.0)THEN
C     => "TABLES OF OUTPUT ( SUBROUTINE RESult TaBLes)"!
C**   ONLY NRVAL OF THE FOLLOWING VARIABLES IN BRACES WILL BE USED (USED
C     ARE THE FIXED VARIABLES IN COMMON/FIX/ FROM LEVSQX - THESE HERE ARE
C     DUMMYS)!:
      CALL RESTBL(NOCONV,JASUCC
     1,NRVAL,JASTOP,LAUFNR,NRVALJ,NREL,KLWERT,KASSUM
     2,NRTEMP)
      ENDIF
C**   NOW FOR "FURTHER INPUT"!:
      WRITE(11,1303)NDATAP,NDATA,NDATAM,ITMAX,ITMIN
 1203 WRITE(*,1303)NDATAP,NDATA,NDATAM,ITMAX,ITMIN
 1303 FORMAT(' NDATAP, NDATA, NDATAM =',3I4,/,' IF THERE ARE (STILL)'
     1,' DATA TO FIT, YOU MAY CONTINUE WITH MORE ITER.:',/,' INPUT'
     2,' 0/RETURN TO DO SO! ITMAX, ITMIN =',I6,I3)
      WRITE(11,1330)MFIT,OMEGA,OMEGA/3.0D0
      WRITE(*,1330)MFIT,OMEGA,OMEGA/3.0D0
CRD 1330 FORMAT(' (I.E. INPUT 1 TO CHANGE PARAMETERS (OR 0, IF MFIT=0)!)',
CRD   ... etc.
 1330 FORMAT(
     1' MFIT, OMEGA ,OMEGA/3.0D0 =',I3,2D10.2) 
CRD   ... 10 LINES DELETED! 
      IF(MFIT.NE.0)THEN
CRD 1313 FORMAT(' INPUT IN I1 YES/NO(0): "NEW INITIALIZATION"!') !"GOTO 25"!
CRD   ... 24 LINES DELETED!
      WRITE(11,1331)
 1332 WRITE(*,1331)
 1331 FORMAT(' PUT IN A NEW VALUE OF OMEGA (IN E10.2, ZERO'
     1,' <=> OLD VALUE RESP. 0.1),',/,' AND OF NOSUCC!',
     2' OMEGA NOT ZERO <-> (FIND OUT CONVERG. AS WITH) NEWSTART!',/
     3,' (PUT IN (OLD VALUE)/3.0 FOR CONTINUATION WITH NOSUCC=0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(D10.2,I1)',ERR=5588,END=3870)OOMEGA,NOSUCC
      GOTO 4870
      ENDIF
 3870 READ(*,'(D10.2,I1)',ERR=1332,END=4576)OOMEGA,NOSUCC
      LMN=1
 4870 CONTINUE
      WRITE(7,2277)OOMEGA,NOSUCC
 2277 FORMAT(D10.2,I1,' =OOMEGA,NOSUCC')
      WRITE(*,7722)OOMEGA,NOSUCC
      WRITE(11,7722)OOMEGA,NOSUCC
 7722 FORMAT(D10.2,I2,' =OOMEGA,NOSUCC')
      IF(OOMEGA.NE.ZERO)THEN !NEWSTART FOR NOCONV!
      OMEGA=DABS(OOMEGA)
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      ENDIF
      IF(OOMEGA.EQ.ZERO)OOMEGA=OMEGA
      IF(OOMEGA.EQ.ZERO)OOMEGA=0.1D0
      JUMPTO=1
      GOTO 25
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(MFIT.NE.0)THEN"!
CRD   ... 306 LINES DELETED!
C
C**   NO RETURN (TO SHORTL)! - STOP HERE IN SUSFIT OR IN RESTBL!
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUSFIT
      END
      SUBROUTINE LEVMAR(NOSUCC,
C     To apply the LEVenbergMARquardt method!
C**   CALLED BY SUBROUTINE SUSFIT! - CALLS LEVDER, IF THERE WAS "SUCCESS"
C     IN SUBROUTINE LEVSQX, RESPECTIVELY ALWAYS FOR THE FIRST ITERATION.
C     (LEVDER WIL CALL SUSC, THE ROUTINE WHICH EVALUATES THE DERIVATIVES
C     OF THE FITTING FUNCTION (THE SUSCEPTIBILITY)). THIS SUBROUTINE HERE
C     NEEDS GAUSS TO SOLVE A SYSTEM OF LINEAR EQUATIONS AND TO MAKE
C     A PROPOSAL FOR NEW PARAMETERS.
C     TO ALTER LINEARIZED FITTING MATRIX, BY AUGMENTING DIAGONAL ELEMENTS,
C     AN INPUT OF OMEGA, A PARAMETER OF LEVENBERG/MARQUARDT, IS
C     REQUIRED. BECAUSE A PROPOSAL FOR OMEGA CANNOT BE MADE,
C     A SPECIAL TEST IS ENABLED, IF "NOSUCC.NE.0" IS PUT IN! SUBROUTINE
C     LEVDER IS CALLED ONLY FOR THE 1ST ITERATION THEN, BECAUSE THE
C     QUESTION "WAS THE ITERATION SUCCESSFUL", I.E. "IS SQX LOWERED",
C     IS ALWAYS ANSWERED WITH "NOT SUCCESSFUL"!
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     1,GMAT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM,EIVECV
     1,LMAT
     7,DBLMAT,FINTEG,FKSI
     8,LOWER0,OMEGA,LIST,ALPHAM,ALPHA,BETA,BETAM,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,LAUFNR,ITMIN,ITMAX)
C
C**   LEVENBERG-MARQUARDT METHOD: PAGE -526-  NUMERICAL RECIPES,
C     THE ART OF SCIENTIFIC COMPUTING, CAMBRIDGE UNIVERSITY PRESS 1992.
C  LEVENBERG-MARQUARDT METHOD, ATTEMPTING TO REDUCE CHISQ, THE SUM OF
C  THE DIFFERENCES OF CHI(I)-MEASURED AND CHI(I)-CALCULATED SQUARED.
C  THERE ARE NDATA POINTS TEMPIK(I), CHI(I)-MEASURED WITH INDIVIDUAL
C  STANDARD DEVIATIONS SIG(I), AND A FIT IS REQUIRED BETWEEN THESE
C  NDATA POINTS AND CHI(I)-CALCULATED. THE STANDARD DEVIATIONS ARE OFTEN
C  EQUAL TO CHI(I)-MEASURED. CHI(I)-CALCULATED DEPENDS ON UP TO 31
C  COEFFICIENTS, AND UP TO 27 OF THESE ARE WYBOURNE COEFFICIENTS OF
C  A LIGAND FIELD. THE ACTUAL, I.E. POSSIBLY CHANGED, COEFFICIENTS
C  (TRUE WYBOURNE VALUES) ARE STORED IN BWYW AND IN BWWWXX (IN COMMON),
C  THE FIXED ONES IN BWNULL. ONLY MFIT COEFFICIENTS ARE ACTUALLY
C  BEEN ADJUSTED.
C  SUBROUTINE SUSC EVALUATES CHI(I) AND ITS DERIVATIVES WITH RESPECT TO THE
C  FITTING PARAMETERS, CHI(I) ITSELF USING SUBROUTINE LEVSQX AND THE
C  DERIVATIVES OF CHI(I) USING SUBROUTINE LEVDER.
C  A PROPOSAL FOR THE FITTING PARAMETERS (NOT FOR THE 0TH ITERATION!) IS
C  MADE HERE WITH HELP OF THE ABOVE MENTIONED DERIVATIVES (BUT NOT ALWAYS,
C  EXCEPT THERE IS THE FIRST ITERATION), AND WITH HELP OF SUBROUTINE GAUSS.
C  IF, IN SUBROUTINE LEVSQX, SQX BECOMES "BETTER" (FORMALLY ALWAYS IN THE
C  0TH ITERATION!), NEW DERIVATIVES ARE CALCULATED AND A NEW PROPOSAL IS
C  MADE WITH HELP OF THESE DERIVATIVES AND SUBROUTINE GAUSS. IN THE OPPOSITE
C  CASE, A NEW PROPOSAL IS MADE WITH HELP OF THE "OLD" DERIVATIVES AGAIN
C  AND SUBROUTINE GAUSS, BUT IN A DIFFERENT WAY WITH AN INCREASED OMEGA,
C  A PARAMETER OF THE LEVENBERG-MARQUARDT METHOD.
C  THIS PARAMETER DECREASES IN THE CASE, THAT SQX BECOMES SMALLER.
C  IF SQX REMAINS PRACTICALLY CONSTANT DURING FURTHER ITERATIONS,
C  CONVERGENCE IS ACHIEVED (OR IF OMEGA HAS BECOME VERY BIG!).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
C      LOGICAL LMAT(ND2002,ND2002),SPAERL(ND2002)
      CHARACTER QTEXT1(60)
      CHARACTER*15 QMPC
      PARAMETER (ZERO=0.0D0,ONE=1.0D0,J20=44)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
C
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(J20),CHIFIX
     1,CFOSXJ,NOTONE,JAMIST
C
      DIMENSION LIST(J20),ALPHAM(J20,J20),ALPHA(J20,J20)
     1,BETA(J20),BETAM(J20),ABLCHM(J20,601),CHIBER(601),DELCHI(601)
     1,CHIFIX(601,4)
     2,SIG2I(601),CHIGEM(601)
      DIMENSION INMIST(J20),BWMIST(J20),JZEILE(J20)
      SAVE
      DATA JZEILE/0,1,0,3,3,3,0,7,7,7,7,0,0,0,0,0,0,0,0,0,1,3,7,7,20*0/
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,14)
      IF(LOWER0.EQ.0)GOTO 3344
      OMEGA=0.1D0
      WRITE(11,1213)OMEGA
 1033 WRITE(*,1213)OMEGA
 1213 FORMAT(/,' OMEGA =',D16.8,', RETURN FOR THIS OMEGA OR INPUT OTHER'
     1,/,' IN E16.8 (IS CHANGED AUTOM.)! ADD 1 IN I1 FOR "NOSUCC",'
     1,/,' A SPECIAL TEST (FOR THIS TEST SET IITMIN=IITMAX)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8,I1)',ERR=5588,END=3878)BOMEGA,NOSUCC
      GOTO 4878
      ENDIF
 3878 READ(*,'(D16.8,I1)',ERR=5588,END=4576)BOMEGA,NOSUCC
      LMN=1
 4878 WRITE(7,102)BOMEGA,NOSUCC
  102 FORMAT(D16.8,I1,' =(B)OMEGA,NOCUCC')
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
 1021 FORMAT(' OMEGA (A PARAMETER OF LEVENBERG/MARQUARDT),NOSUCC=',D16.8
     1,I2,'!!!!!!!!!')
      WRITE(*,1021)OMEGA,NOSUCC
      WRITE(11,1021)OMEGA,NOSUCC
C
 3344 CONTINUE
C**   3344 CONTINUE: LOWER0=1 <=> INITIALIZATION, =0 <=> CONTINUATION
C     OF THE CURRENT (FIRST, SECOND, ...) ITERATION!
C**   THIS IS THE FIRST TIME, WHERE LAUFNR=0 BECOMES LAUFNR=1!:
      LAUFNR=LAUFNR+1
C**   END OF INITIALIZATION!:
      LOWER0=0
      IF(JASUCC.NE.0.AND.NDATAM.NE.0.AND.(NOSUCC.EQ.0.OR.LAUFNR.EQ.1))
     1THEN
C
C**   JASUCC SURELY =1 FOR THE FIRST (0th!) ITERATION!
C**   CALCULATION OF NEW DERIVATIVES, NEW ALPHA AND NEW BETA!:
C
      CALL LEVDER(
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     1,GMAT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM,EIVECV
     1,LMAT
     7,DBLMAT,FINTEG,FKSI
     8,LOWER0,OMEGA,LIST,ALPHA,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,NOTONE,LAUFNR)
C
      ENDIF
C
C**   ALTER LINEARIZED FITTING MATRIX, BY AUGMENTING DIAGONAL ELEMENTS:
 3337 CONTINUE
      DO 599 J=1,MFIT
      DO 499 K=1,MFIT
      ALPHAM(J,K)=ALPHA(J,K)
  499 CONTINUE
      ALPHAM(J,J)=ALPHA(J,J)*(ONE+OMEGA)
      BETAM(J)=BETA(J)
  599 CONTINUE
      ISING=0
      LEVRUS=0
      CALL GAUSS(ALPHAM,MFIT,J20,BETAM,ISING,MOROUT,LEVRUS)
      IF(ISING.NE.0)STOP 'ISING'
C**   MATRIX SOLUTION. - THE "RESULT" IS BETAM(ATRIX)(J20)!
C**   NOW FOR THE NEXT ITERATION STBWWW (MEANS BTRIAL = B-TRI-AL!):
      DO 699 J=1,MFIT
      STBWWW(LIST(J))=BWNULL(LIST(J))+BETAM(J)
  699 CONTINUE
COMMENT: STBWWW(LIST(J))=BWNULL(LIST(J))+BETAM(J) !"FACTORS" MAY BE THERE
C
      RETURN
C**   LEVMAR RETURNS TO SUSFIT!
 4576 CALL FINISH
 5588 CALL FINISI
CEND LEVMAR
      END
      SUBROUTINE LEVDER(
C     USED BY LEVMAR TO EVALUATE THE LINEARIZED FITTING MATRIX ALPHA
C     AND VECTOR BETA. IN ADDITION TO THE FIRST TERM, WHICH IS
C     CALCULATED IN SUBROUTINE LEVSQX, THE SECOND TERM FOR CALCULATING
C     DERIVATIVES NUMERICALLY IS CALCULATED HERE BY CALLING SUSC!
C     EVALUATED IN SUSC: THE (DERIVATIVES OF THE) FITTING FUNCTION (THE
C     SUSCEPTIBILITY).
C     DERIVATIVES ARE ALWAYS CALCULATED FOR THE FIRST ITERATION
C     (FOLLOWING A "0TH" ITERATION), BUT ARE CALCULATED FOR FURTHER
C     ITERATIONS ONLY, IF SQX HAS BECOME "BETTER"!
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     1,GMAT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM,EIVECV
     1,LMAT
     7,DBLMAT,FINTEG,FKSI
     8,LOWER0,OMEGA,LIST,ALPHA,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,NOTONE,LAUFNR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C      INTEGER OMP_GET_THREAD_NUM
      COMMON/FLAG/LMN
C      LOGICAL LMAT(ND2002,ND2002),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(J20=44)
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      PARAMETER (DELTAF=1.0001D0,DELTAX=0.000001D0
     1,ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6)
      DIMENSION LIST(J20),ALPHA(J20,J20)
     1,BETA(J20),ABLCHM(J20,601),CHIBER(601),DELCHI(601)
     2,SIG2I(601),CHIGEM(601)
     3,DELTA(J20)
      SAVE
      DATA LOWER1/1/
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,15)
      JAABLT=1
C
      IF(LOWER1.EQ.0)GOTO 3344
C**   LOWER1=1 <=> INITIALIZATION!
      LOWER1=0
C
      IOPT31=-2*IOPT3+4
 3344 CONTINUE
C**   LAUFNR=LAUFNR+1, IF THERE WAS A NEW ALPHA AND/ OR(!) A NEW OMEGA!
      JTHETA=0
      THETA=ZERO
      IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
C      STOP 'THETA.NE.ZERO' !THETA removed
      WRITE(*,3434)
      WRITE(11,3434)
 3434 FORMAT(' WARNING: THETA was removed and is set to zero here!')
C      JTHETA=1
C      THETA=STBWWW(14)
C      LISTL=0
C      DO 52 I=1,MFIT
C   52 IF(LIST(I).EQ.14)LISTL=I
      ENDIF !IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
C
      DO 1517 I=1,J20
C      BWW(I)=STBWWW(I)
      BWWOMP(I)=STBWWW(I)
 1517 CONTINUE
      DO 2516 II=1,MFIT
      BWII=STBWWW(LIST(II))
      BWIID=BWII*DELTAF
      DELTA(LIST(II))=BWIID-BWII
      DELTAQ=DELTAX
C**   CHI-0 <=> 15: !no more used here
      IF(LIST(II).EQ.15)DELTAQ=DELTAX**2
      IF(DABS(DELTA(LIST(II))).LT.DELTAQ)THEN
      IF(DELTA(LIST(II)).GE.ZERO)DELTA(LIST(II))=DELTAQ
      IF(DELTA(LIST(II)).LT.ZERO)DELTA(LIST(II))=-DELTAQ
      ENDIF
      BWWOMP(LIST(II))=BWII+DELTA(LIST(II))
C**   BWWOMP NEEDED IN SUSC JUST AS BEFORE!
 2516 CONTINUE
C
      MFITFF=0
      MFITFG=0
      MFITFH=0
      DO 1516 IIMFIT=1,MFIT
      IF(LIST(IIMFIT).EQ.16)THEN
C**   CORRECTION FACTOR <=> 16:
      MFITFF=IIMFIT
      GOTO 1516
      ENDIF
      IF(LIST(IIMFIT).EQ.15)THEN
C**   CHI 0 <=> 15:
      MFITFH=IIMFIT
      GOTO 1516
      ENDIF
      IF(LIST(IIMFIT).EQ.13)THEN
C**   LAMBDA <=MFIT> 13:
      MFITFG=IIMFIT
      GOTO 1516
      ENDIF
      JAABLT=LIST(IIMFIT)
      DO 1515 IPRI=1,NDATAP
      IF(MINDAT(IPRI).EQ.0.AND.MOD(LOWDAT(IPRI),2).EQ.0)THEN
      TEMPTH=TEMPIK(IPRI)
CRD      TESLAS=TESDAT(IPRI)
C**   NOW THE SECOND CALL OF SUSC (TO GET DIFFERENT VALUES FOR CHI(I)-
C     CALCULATED, DIFFERENT FROM THOSE OF THE FIRST CALL IN SUBROUTINE
C     LEVSQX, IN ORDER TO EVALUATE THE DERIVATIVES OF CHI(I) WITH RESPECT
C     TO THE FITTING PARAMETERS)!:
      CALL SUSC(
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM
     1,IPRI
     7,FINTEG,FKSI,LIST,IIMFIT,LAUFNR)
C
CRD      WRITE(*,6571)IOPT31,CHI(1,IOPT31,1)
CRD      WRITE(11,6571)IOPT31,CHI(1,IOPT31,1)
CRD 6571 FORMAT(' IOPT31,CHI(1,IOPT31,1)=',2I3,D16.8)
      CBERRR=CHI(1,IOPT31,1)
C**   The interface to the calculation of CHI is "CALL SUSC" either
C     in LEVSQX or in LEVDER (for the DERivations). "Within" SUSC
C     the calculation of CHI is for a given temperature. These results
C     are stored "outside" SUSC for all temperatures (in LEVSQX, in
C     the form of CHI...(NRTEMP), including DELCHI(NRTEMP)=CHIGEM(NRTEMP)
C     -CHIBER(NRTEMP)), but in the case of the derivations they are
C     not(!) stored (in LEVDER, in the form of e.g. CHI(2,4,7)).
C     Hint, if IOPT3=1:
C     Derivatives of CHIBER ("calculated") with respect to F and CHI-0
C     are zero! However CHIGEM ("measured") is corrected for F and CHI-0.
C     Because for the "quality of a fit" a SQX is defined according to
C     SQX=SQRT(SUM((1-CHIBER/CHIGEM)**2)/NDATA), CHIGEM can be used as
C     well as CHIBER! Therefore the derivation is (IOPT31=-2*IOPT3+4)
C**   ABLCHI=(CHI(1,IOPT31,1)+DELCHI(NRTEMP)-CHI(2,IOPT31,1))/DELTA
      ABLNEN=CBERRR+DELCHI(IPRI)-CHI(2,IOPT31,1)
      ABLCHI=ABLNEN/DELTA(LIST(IIMFIT))
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(IIMFIT,IPRI)=ABLCHI
 1515 CONTINUE
CKR 1957 CONTINUE
 1516 CONTINUE
      IF(MFITFF.NE.0)THEN
C**   F-FACTOR:
      DO 1561 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.MOD(LOWDAT(I),2).EQ.0)THEN
      IF(IOPT3.EQ.0)THEN
      ABLCHI=-CHIBER(I)/STBWWW(16)
      ELSE IF(IOPT3.NE.0)THEN
      ABLCHI=-(CHIGEM(I)+STBWWW(15))/STBWWW(16)
      ENDIF
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(MFITFF,I)=ABLCHI
 1561 CONTINUE
      ENDIF !IF(MFITFF.NE.0)THEN
      IF(MFITFG.NE.0)THEN
C**   LAMBDA:
      DO 1562 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.MOD(LOWDAT(I),2).EQ.0)THEN
      IF(IOPT3.EQ.0)THEN
      ABLCHI=((CHIBER(I)*STBWWW(16)-STBWWW(15))**2)/STBWWW(16)
      ELSE IF(IOPT3.NE.0)THEN
      ABLCHI=CHIBER(I)**2
      ENDIF
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(MFITFG,I)=ABLCHI
 1562 CONTINUE
      ENDIF !IF(MFITFG.NE.0)THEN
      IF(MFITFH.NE.0)THEN
C**   CHI-0:
      DO 1563 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.MOD(LOWDAT(I),2).EQ.0)THEN
      IF(IOPT3.EQ.0)THEN
      ABLCHI=ONE/STBWWW(16)
      ELSE IF(IOPT3.NE.0)THEN
      ABLCHI=ONE
      ENDIF
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(MFITFH,I)=ABLCHI
 1563 CONTINUE
      ENDIF !IF(MFITFH.NE.0)THEN
      JAABLT=0
C**   THE DERIVATIVES ARE READY! - NOW FOLLOWING: CALCULATION OF NEW
C     ALPHA UND BETA:
      DO 211 J=1,MFIT
      DO 1111 K=1,J
      ALPHA(J,K)=ZERO
 1111 CONTINUE
      BETA(J)=ZERO
  211 CONTINUE
C
      DO 1518 I=1,NDATAP
C**   ABLCHM(,I)=ABLCHI=ZERO, IF MINDAT(I).NE.0.OR.MOD(LOWDAT(I),2).NE.0,
C     AND ZWI TOO!
      DO 498 J=1,MFIT
      ABLCJI=ABLCHM(J,I)
      ZWI=ABLCJI*SIG2I(I)
      DO 399 K=1,J
      ABLCKI=ABLCHM(K,I)
      ALPHA(J,K)=ALPHA(J,K)+ZWI*ABLCKI
  399 CONTINUE
      BETA(J)=BETA(J)+DELCHI(I)*ZWI
  498 CONTINUE
 1518 CONTINUE
      DO 799 J=2,MFIT
      DO 698 K=1,J-1
      ALPHA(K,J)=ALPHA(J,K)
  698 CONTINUE
  799 CONTINUE
C**   RETURNS TO LEVMAR!
      RETURN
CEND LEVDER 
      END
      SUBROUTINE GAUSS(WATRIX,N,KDIM,COLUMN,ISING,MOROUT,LEVRUS)
C**   LINEAR EQUATION SOLUTION BY THE ALGORITHM OF GAUSS WITH 
C     PIVOTING. THE INPUT MATRIX OF DIMENSION=KDIM*KDIM IS NAMED
C     WATRIX, AND THE RIGHT HAND SIDE OF THE SYSTEM OF LINEAR
C     EQUATIONS IS NAMED COLUMN. THERE ARE N EQUATIONS OF N UNKNOWNS.
C     THE SOLUTION, I.E. THE UNKNOWNS, IS / ARE IN COLUMN, WHEN
C     GAUSS RETURNS, AND KOLUMN IS USED TO REARRANGE THE SOLUTION
C     VECTOR.
C**   THIS SUBROUTINE WILL BE CALLED BY LEVMAR, AND IN THE
C     CASE OF A SINGULAR MATRIX RETURN WILL OCCUR WITH THE LABEL
C     ISING=1 (NOT USED HERE).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MISTMO,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER (ZERO=0.D0,ONE=1.D0,KKDIM=119)
      DIMENSION WATRIX(KDIM,KDIM),COLUMN(KDIM),KOLUMN(KKDIM)
      SAVE
      DATA KLICK,MOROUU/0,0/
      DATA PARGAU,PARGAB/1.0D-55,1.0D-4/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,16)
      IF(LEVRUS.NE.0)PARGAU=PARGAB
      NLEV=N
C**   FOR OUTPUT ONLY!:
      IF(LEVRUS.NE.0)NLEV=N+LEVRUS-ISING
      IF(MOROUT.NE.0.AND.KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,10)
  100 WRITE(*,10)
   10 FORMAT(
     1' MOROUT.NE.0 IN GAUSS: INPUT 1 IN I1 FOR MORE OUTPUT HERE!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3883)MOROUU
      GOTO 4883
      ENDIF
 3883 READ(*,'(I1)',ERR=100,END=4576)MOROUU
      LMN=1
 4883 WRITE(7,2294)MOROUU
 2294 FORMAT(I1,' =MOROUU IN GAUSS')
      WRITE(11,2942)MOROUU
      WRITE(*,2942)MOROUU
 2942 FORMAT(I2,' =MOROUU IN GAUSS!!!!!!!!!')
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,3025)N,NLEV
      WRITE(11,3025)N,NLEV
 3025 FORMAT(' SUBR. GAUSS: MATRIX AND COLUMN, N= , NLEV= ',2I6)
      DO 30 I=1,N
      WRITE(*,25)(WATRIX(I,J),J=1,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=1,NLEV)
   25 FORMAT(6D13.3)
   30 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
C**   BACKWARDS NUMBERING OF (THE COLUMNS OF) THE MATRIX:
      J=N+1
      DO 11 I=1,N
      J=J-1
      KOLUMN(I)=J
   11 CONTINUE
C
C**   EACH ROW - NO INTERCHANGE OF ROWS - 1 CONTINUE: 150 ROWS BELOW!:
      JROW=0
      DO 1 IROW=N,1,-1
C
      IROWM1=IROW-1
      ICOLM1=IROWM1
      ICOLMP=ICOLM1+1
      JROW=JROW+1
      TEMP=WATRIX(JROW,JROW)
      ABSBIG=DABS(TEMP)
      JNRCOL=JROW
      JCOL=JROW
C**   ALL COLUMNS > JCOL=JROW!:
      DO 2 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      IF(DABS(WATRIX(JROW,JCOL)).GT.ABSBIG)THEN
      ABSBIG=DABS(WATRIX(JROW,JCOL))
      JNRCOL=JCOL
      ENDIF
    2 CONTINUE
      IF(JROW.NE.JNRCOL)THEN
C**   EXCHANGE:
      ITEMPG=KOLUMN(JROW)
      KOLUMN(JROW)=KOLUMN(JNRCOL)
      KOLUMN(JNRCOL)=ITEMPG
C**   ALL(!) ROWS (I=1,N)!:
      DO 24 I=1,N
      TEMP=WATRIX(I,JROW)
      WATRIX(I,JROW)=WATRIX(I,JNRCOL)
      WATRIX(I,JNRCOL)=TEMP
   24 CONTINUE
      ENDIF
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,3029)JROW
      WRITE(11,3029)JROW
 3029 FORMAT(
     1' IN DO 1 IROW=N,2,-1:(MATRIX((I=1,N),J),J=JROW,NLEV), JROW =',I6)
C**   ALL(!) ROWS (I=1,N)!:
      DO 29 I=1,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROW,NLEV)
   29 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
C**   WATRIX(JROW,JROW) => ONE!:
      ISING=0
      IF(DABS(WATRIX(JROW,JROW)).LT.PARGAU)THEN
      ISING=1
      IF(LEVRUS.EQ.0)THEN
      DO 26 I=JROW,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,N)
      WRITE(11,25)(WATRIX(I,J),J=JROW,N)
   26 CONTINUE
      WRITE(11,27)PARGAU
   28 WRITE(*,27)PARGAU
   27 FORMAT(' MATRIX MAY BE ILL CONDITIONED FOR PAR =',D16.8,/,' INPUT 
     1SMALLER PAR (ZERO <=> NO CHANGE) OR "ONE" TO STOP (IN E16.8)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3884)PARGIN
      GOTO 4884
      ENDIF
 3884 READ(*,'(D16.8)',ERR=28,END=4576)PARGIN
      LMN=1
 4884 WRITE(7,2295)PARGIN
 2295 FORMAT(D16.8,' =PARGIN')
      WRITE(11,2295)PARGIN
      WRITE(*,2295)PARGIN
      IF(PARGIN.GT.ZERO.AND.PARGIN.LT.PARGAU)PARGAU=PARGIN
      IF(PARGIN.NE.ONE)THEN
      ISING=0
      GOTO 33
C     ELSE
C (IN LEVMAR:) STOP 'ISING'
      ENDIF
      ENDIF
      RETURN
      ENDIF
   33 DENOM=ONE/(WATRIX(JROW,JROW))
C
C**   ALL COLUMNS > JCOL=JROW, BUT ONLY ONE ROW (=JROW)!:
      JCOL=JROW
      DO 3 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      WATRIX(JROW,JCOL)=WATRIX(JROW,JCOL)*DENOM
    3 CONTINUE
      COLUMN(JROW)=COLUMN(JROW)*DENOM
C
C**   WATRIX(JROW,JROW) IS NOW = ONE (AT LEAST VIRTUALLY!):
      WATRIX(JROW,JROW)=ONE
C
C**   NORMALIZATION OF THE MATRIX WATRIX INCL. COLUMN:
      JROM=JROW
      DO 4 IROM=IROWM1,1,-1
      JROM=JROM+1
C**   NEARLY EQUAL WEIGHT TO EACH ROW!:
      ABSBIG=DABS(WATRIX(JROM,JROW))
      JCOL=JROW
C**   ALL COLUMNS > JCOL=JROW, ROW <=> JROM <=> DO 4!:
      DO 41 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      IF(DABS(WATRIX(JROM,JCOL)).GT.ABSBIG)
     1ABSBIG=DABS(WATRIX(JROM,JCOL))
   41 CONTINUE
      IF(ABSBIG.GT.ZERO)THEN
      DENOM=ONE/ABSBIG
      ELSE
C**   RESULTS IN ISING=1 ("SINGULAR MATRIX") LATER(!) ON:
      DENOM=ONE
      ENDIF
C**   ALL COLUMNS > JCOL=JROW-1, ROW <=> JROM <=> DO 4!:
      JCOL=JROW-1
      DO 43 ICOL=ICOLMP,1,-1
      JCOL=JCOL+1
      WATRIX(JROM,JCOL)=WATRIX(JROM,JCOL)*DENOM
   43 CONTINUE
      COLUMN(JROM)=COLUMN(JROM)*DENOM
    4 CONTINUE
C**   END OF NORMALIZATION!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,3032)
      WRITE(11,3032)
 3032 FORMAT(
     1' IN DO 1 AFTER NORMAL.: (MATRIX(I,J),J=JROW,NLEV) AND COLUMN')
      DO 32 I=JROW,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROW,NLEV)
   32 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=JROW,NLEV)
      WRITE(11,25)(COLUMN(I),I=JROW,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
      IF(JROW.EQ.N)GOTO 13
      JROM=JROW
      DO 14 IROM=IROWM1,1,-1
      JROM=JROM+1
      FIRST=WATRIX(JROM,JROW)
      JCOL=JROW
      DO 44 ICOL=IROWM1,1,-1
      JCOL=JCOL+1
      WATRIX(JROM,JCOL)=WATRIX(JROM,JCOL)-FIRST*WATRIX(JROW,JCOL)
   44 CONTINUE
      COLUMN(JROM)=COLUMN(JROM)-FIRST*COLUMN(JROW)
   14 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      JROWP1=JROW+1
      WRITE(*,3034)JROWP1
      WRITE(11,3034)JROWP1
 3034 FORMAT(
     1' & SMALLER: (MATRIX(I,J),J=JROWP1,NLEV) AND COLUMN, JROWP1=',I6)
      DO 34 I=JROWP1,N
      WRITE(*,25)(WATRIX(I,J),J=JROWP1,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROWP1,NLEV)
   34 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=JROWP1,NLEV)
      WRITE(11,25)(COLUMN(I),I=JROWP1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
    1 CONTINUE
   13 CONTINUE
C**   BACKSUBSTITUTION ("FORWARDS" IN DO 5):
C     (ATTENTION: STARTING AT "N"!:)
      JROW=N
      DO 5 IROW=2,N
      IROWM1=IROW-1
      JROW=JROW-1
      JCOL=JROW
      DO 55 ICOL=IROWM1,1,-1
      JCOL=JCOL+1
      COLUMN(JROW)=COLUMN(JROW)-COLUMN(JCOL)*WATRIX(JROW,JCOL)
   55 CONTINUE
    5 CONTINUE
      IF(MOROUU.NE.0)THEN
      WRITE(*,665)
      WRITE(11,665)
  665 FORMAT(' NOT YET ORDERED IN GAUSS: (COLUMN(I),I=1,NLEV) =')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C**   REARRANGEMENT ("ORDERING") OF THE SOLUTION VECTOR COLUMN
C     WITH HELP OF KOLUMN:
      NM1=N-1
      DO 6 I=1,NM1
      IP1=I+1
      DO 66 II=IP1,N
      ITEMPG=KOLUMN(I)
      TEMP=COLUMN(I)
      IF(KOLUMN(II).GT.ITEMPG)THEN
      KOLUMN(I)=KOLUMN(II)
      KOLUMN(II)=ITEMPG
      COLUMN(I)=COLUMN(II)
      COLUMN(II)=TEMP
      ENDIF
   66 CONTINUE
    6 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,666)
      WRITE(11,666)
  666 FORMAT(' NOW ORDERED IN GAUSS: (COLUMN(I),I=1,NLEV) =')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
      RETURN
C**   RETURNS TO LEVMAR (OR TO RUSSEL, A ROUTINE FOR "TESTS" ONLY).
 4576 CALL FINISH
 5588 CALL FINISI
CEND GAUSS
      END
      SUBROUTINE LEVSQX(NOSUCC,
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     1,GMAT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM,EIVECV
     1,LMAT
     7,DBLMAT,FINTEG,FKSI
     8,LOWER0,OMEGA,LIST,ALPHA,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,NOTONE,LAUFNR)
C     CALLS SUBROUTINE SUSC, WHICH EVALUATES THE FITTING FUNCTION
C     (THE SUSCEPTIBILITY), AND RETURNS TO SUSFIT.
C     SUBROUTINE LEVSQX CALCULATES CHI WITH HELP OF THE PARAMETERS,
C     WHICH WERE READ IN OR EVALUATED BY SUBROUTINE LEVMAR IN THE
C     CASE OF ITERATIONS.
C     CALCULATED AND MEASURED CHI ARE COMPARED IN ORDER TO GET SQX
C     =SQRT(SUM((1-CHIBER/CHIGEM)**2)/NDATA) (A LEAST SQUARE FIT)
C     AS A MEASURE OF THE QUALITY OF A FIT (READY IN SUSFIT!).
C     (E.G. WYBOURNE) PARAMETERS MAY BE FITTED SO AS TO MINIMIZE SQX,
C     USING THE LEVENBERG-MARQUARDT METHOD. THE LATTER STARTS HERE
C     FOR THE FIRST TERM OF NUMERICALLY CALCULATED DERIVATIVES,
C     AND THE SECOND TERM IS CALCULATED IN SUBROUTINE LEVDER, WHICH
C     IS CALLED BY LEVMAR, AND LEVMAR IS CALLED BY SUSFIT FOLLOWING
C     THE CALL OF LEVSQX HERE.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      PARAMETER (DELTAF=1.0001D0,DELTAX=0.000001D0
     1,ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6,J20=44)
C      LOGICAL LMAT(ND2002,ND2002),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
C
      COMMON/CROVER/VLSTNG(44)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(J20),CHIFIX
     1,CFOSXJ,NOTMST,JAMIST
      COMMON/XMAT12/
     1WERT12(252),FMAT12(252,252,3),GMAT12(252,252,3),KENNNG,KOMBIN
      DIMENSION LIST(J20),ALPHA(J20,J20)
     1,BETA(J20),ABLCHM(J20,601),CHIBER(601),DELCHI(601)
     2,SIG2I(601),CHIGEM(601),CHIFIX(601,4)
      COMPLEX*16 FMAT12,GMAT12
      SAVE
      DATA KLICK,KLICKY,KLICKC,KLICKM/0,0,0,0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,17)
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(LOWER0.EQ.0)GOTO 3344
C**   LOWER0=1 <=> INITIALIZATION!
C
      DO 1718 J=1,J20
      BWNULL(J)=STBWWW(J)
CRD      BWWTMP(J)=BWWWXX(J) !BWWTMP REMOVED
      JPL=J+15 !15 from OLDf7.DAT (15 not used)
      IF(JPL.LE.44)VLSTNG(JPL)=STBWWW(J)
 1718 CONTINUE
C
      NOTONE=0
      DO 7578 I=1,NDATAP
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7578
C
      IF(SIGMA(I).NE.ONE)NOTONE=1
C
 7578 CONTINUE
      IF(NOTONE.NE.0)THEN
      WRITE(*,3112)
      WRITE(11,3112)
 3112 FORMAT(' ANY OF THE STANDARD DEVIATIONS ARE NOT ONE!')
      ENDIF
C
 3344 CONTINUE
      CHISQ=ZERO
C
      JTHETA=0
      THETA=ZERO
      IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
C      STOP 'THETA.NE.ZERO' !THETA removed
      WRITE(*,3434)
      WRITE(11,3434)
 3434 FORMAT(' WARNING: THETA was removed and is set to zero here!')
C      JTHETA=1
C      THETA=STBWWW(14)
      ENDIF !IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
      NDATAO=NDATAM
      IF(KLICK.EQ.0)NDATAO=NDATA
      KLICK=1
      NDATAM=NDATA
C
      IOPT31=-2*IOPT3+4
      DO 598 I=1,NDATAP
      NRTEMP=I
      MINDAT(I)=0
      TEMPII=TEMPIK(I)
      TEMPTH=TEMPII
CRD      TESLAS=TESDAT(I)
C
      CALL SUSC(
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM
     1,NRTEMP
     7,FINTEG,FKSI,LIST,IIMFIT,LAUFNR)
C
      IF(LOWER0.EQ.1)THEN
      DO 1962 JJ=1,3
      CHIFIX(I,JJ)=CHIZXY(JJ,I)
 1962 CONTINUE
      CHIFIX(I,4)=CHISTA(I)
      ENDIF
C
      CHIMOD=CHI(1,IOPT31,1)
      CHIGEM(I)=CHI(2,IOPT31,1)
      CHIBER(I)=CHIMOD
      IF(NREL.EQ.0)THEN
      IF(CHI(1,IOPT31,1).EQ.ZERO.AND.CHI(2,IOPT31,1).GT.ZERO)GOTO 7198
      ENDIF
C**   NO FITTING USING NEG. CHI VALUES!:
C..   BUT EXCEPTION: (=>-CKR-)
CKR      IF(TEMPIK(NRTEMP).LT.-995.0D0)GOTO 7198
      IF(CHI(1,IOPT31,1).LT.ZERO.OR.CHI(2,IOPT31,1).LE.ZERO)THEN
      MINDAT(I)=1
      IF(MOD(LOWDAT(I),2).EQ.0)NDATAM=NDATAM-1
C**   CHIBER(I)=ZERO - "ENERGIES"
      ENDIF
 7198 CONTINUE
C
      IF(CHI(1,2,1).LT.ZERO.AND.CHI(1,4,1).GT.ZERO)THEN
      IF(KLICKC.EQ.0)THEN
      KLICKC=1
      WRITE(11,588)
      WRITE(*,588)
  588 FORMAT(' WARNING:',/
     1,' CHISTART BECOMES NEG. FIRSTLY AND POS., WHEN CHI-0 IS ADDED!')
      ENDIF
      ENDIF
      IF(CHI(2,2,1).LT.ZERO.AND.CHI(2,4,1).GT.ZERO)THEN
      IF(KLICKM.EQ.0)THEN
      KLICKM=1
      WRITE(11,589)
      WRITE(*,589)
  589 FORMAT(' WARNING:',/
     1,' CHI-MEAS. BECOMES NEG., WHEN CHI-0 IS SUBTR.!')
      ENDIF
      ENDIF
  598 CONTINUE
C**   LAST CONTINUE BELONGS TO "DO 598 I=1,NDATAP"!
CKR  597 CONTINUE
C
      IF(NDATAM.NE.NDATAO)THEN
      WRITE(*,1555)NDATA,NDATAM
      WRITE(11,1555)NDATA,NDATAM
 1555 FORMAT(
     1' NDATA.NE.NDATAM (OR NDATAM WAS CHANGED)! THEY ARE=',2I4)
      WRITE(*,1514)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
      WRITE(11,1514)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
 1514 FORMAT(' LIST(I), BWYB(LIST(I))=',/,(5(I3,D16.8)))
      ENDIF
C
      IF(NDATAP.EQ.1.AND.KLICKY.EQ.0)THEN
      KLICKY=1
      WRITE(*,55)CHIMOD
      WRITE(11,55)CHIMOD
   55 FORMAT(
     1' CALCULATED VALUE OF CHI FOR "ONLY 1 ROW OF INPUT":',D16.8)
      ENDIF
C**   NOW F-FACTOR, LAMBDA AND CHI-0:
C     (13) LAMBDA, (15) CHI-0 ("CHI DIAMAGNETIC") AND (16) F-FACTOR
C     (CORR. OF WEIGHT OF THE SAMPLE, WHERE MEASURED CHI COMES FROM)
CRD      SQXKOR=ONE
CRD      IF(NOPROZ.NE.0)SQXKOR=ZERO
C
      DO 152 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.MOD(LOWDAT(I),2).EQ.0)THEN
      SIGI=CHIGEM(I)
      SIGMI=SIGMA(I)
      SIG2I(I)=ONE
CRD      IF(NOPROZ.EQ.0)THEN
      IF(SIGI.EQ.ZERO)THEN
      WRITE(*,1541)I
      WRITE(11,1541)I
 1541 FORMAT(' ATTEMPT TO DIVIDE BY MEASURED CHI = ZERO:'
     1,/,' THIS FIT IS NOT POSSIBLE! LINE NO. =',I4)
      STOP ':ZERO'
      ENDIF
      SIG2I(I)=ONE/(SIGI*SIGI)
CRD      ENDIF
C**   NOTONE.NE.0: ANY OF THE SIGMI ("STANDARD DEVIATIONS") IS NOT ONE!:
      IF(NOTONE.NE.0)SIG2I(I)=SIG2I(I)/(SIGMI*SIGMI)
      DLCHII=CHIGEM(I)-CHIBER(I)
      DELCHI(I)=DLCHII
C
C**   NOW CHISQ WILL BE CALCULATED!
C
      DLIDLI=DLCHII*DLCHII*SIG2I(I)
      CHISQ=CHISQ+DLIDLI
      ELSE
      CHIGEM(I)=ZERO
      DELCHI(I)=ZERO
      ENDIF
  152 CONTINUE
CRD      IF(NOPROZ.NE.0)SQXKOR=SQXKOR/DBLE(NDATAM)
C**   CHISQW <=> CHISQW(ITHOUT) SQXKOR!:
CRD      CHISQ=CHISQ*SQXKOR !->
C      CHISQ=CHISQ
C
      CHISQQ=CHISQ
C**   = THE NEWLY CALCULATED CHISQ!
      IF(LOWER0.NE.0)THEN
      OCHISQ=CHISQ*TWO
      ELSE
C**   FOR CLARITY ONLY!:
      IF(NDATAM.EQ.0)CHISQ=ONE
      ENDIF
C
      JASUCC=0
      IF(CHISQ.LT.OCHISQ.AND.NDATAM.NE.0)JASUCC=1
      IF(NOSUCC.NE.0)JASUCC=0
      CFOS=EICFOS
      CFOSJ=EIFOSJ
C
      IF(JASUCC.NE.0)THEN
C**   SUCCESS!: ACCEPT THE NEW SOLUTION.
C
      IF(KENNNG.NE.0)THEN !KENNNG=0 <-> symmetr. DIMER!
      WRITE(11,1311)NRVAL,KENNNG,KOMBIN
      WRITE(*,1311)NRVAL,KENNNG,KOMBIN
 1311 FORMAT(' JASUCC: WRITE(13) ...NRVAL,KENNNG,KOMBIN...:',3I3)
      REWIND(13)
      WRITE(13,ERR=1011)
     1(((FMAT12(I,J,K),I=1,252),J=1,252),K=1,3)
     1,(((GMAT12(I,J,K),I=1,252),J=1,252),K=1,3)
     1,(WERT12(I),I=1,252),NRVAL,KENNNG,KOMBIN
     1,(BWWWXX(I),I=1,44),(VLSTNG(I),I=1,44)
      CLOSE(13)
      ENDIF
C
      DO 1717 J=1,J20
      BWNULL(J)=STBWWW(J) !"FACTORS" MAY BE THERE
CRD      BWWTMP(J)=BWWWXX(J) !"TRUE" WYBOURNE VALUES
      JPL=J+15 !15 from OLDf7.DAT (15 not used)
      IF(JPL.LE.44)VLSTNG(JPL)=BWWWXX(J) !44-15==20+4+5
 1717 CONTINUE
COMMENT: THIS MEANS: STBWWW=BWNULL IN THE CALLING ROUTINE SUSFIT, IF JASUCC=1!
C**   FOR OUTPUT LATER ON:
C     CRYSTAL FIELD MINIMAL SPLITTING AND THE TWO DEGENERATIONS
C     BELONGING TO THESE TWO LEVELS, AND CRYSTAL FIELD OVER ALL SPLITTING
C     (REALLY OR NOT: INDEED THE EIGENVALUE OF THE LEVEL "NRVAL"! AND:
C     THE EIGENVALUE OF THE LEVEL NRVALJ.) 
      CFMSFX=DIFLOW
      CFOSFX=CFOS
      CFOSXJ=CFOSJ
      IGR1FX=IGR1
      IGR2FX=IGR2
      DO 188 J=1,NDATAP
      DO 1963 JJ=1,3
      CHIFIX(J,JJ)=CHIZXY(JJ,J)
 1963 CONTINUE
      CHIFIX(J,4)=CHISTA(J)
  188 CONTINUE
      OCHISQ=CHISQ
C**   OCHISQ WILL BE USED IN THE NEXT ITERATION!
      IF(LOWER0.EQ.0)THEN
      OMEGA=0.3D0*OMEGA
      IF(OMEGA.LT.1.0D-33)OMEGA=1.0D-33
      ENDIF
C**   STBWWW AND BWNULL ARE BOTH RELEVANT FURTHERMORE (BWNULL FOR OUTPUT (ONLY)
C     OR FOR NEW STARTING!).
C
      ELSE IF(JASUCC.EQ.0)THEN
C**   NO SUCCESS!: INCREASE OMEGA, HOLD THE OLD CHISQ ("OCHISQ"), AND RETURN.
C
      OMEGA=3.D0*OMEGA
      CHISQ=OCHISQ
      ENDIF
C
      RETURN
C**   RETURNS TO SUSFIT AND HAS THE ACTUAL VALUES READY NOW FOR OUTPUT!
C     THE LEVENBERG-MARQUARTD METHOD ITSELF WILL FOLLOW IN SUBROUTINE LEVMAR,
C     IF THERE ARE DATA TO FIT AND IF THESE DATA SHALL BE FITTED!
 4576 CALL FINISH
 5588 CALL FINISI
 1011 STOP 'WRITE(13)'
CEND LEVSQX
      END
      SUBROUTINE SUSC(
C**   IS CALLED BY LEVSQX OR LEVDER, THE LATTER A SUBROUTINE OF LEVMAR,
C     THE "LEVENBERG-MARQUARDT METHOD", TO CALCULATE THE SUSCEPTIBILITY!
C     INDEED THE CRYSTAL FIELD PARAMETERS ("WYBOURNE PARAMETERS") ARE
C     CALCULATED HERE, IF "FUNCTIONS" OF THESE, E.G. B44=B40*FACTOR,
C     ARRIVE HERE! CALLS TANABE, WHERE THE CALCULATION OF THE
C     SUSCEPTIBILITY REALLY STARTS.
     1JASTRU,KMASKE,NGROUP
     1,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM
     1,NRTEMP
     7,FINTEG,FKSI,LIST,IIMFIT,LAUFNR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/CBWWWS/BWWWS(16)
      COMMON/QBQVQQ/QB,QV
      COMMON/QQQQQQ/QQ
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      PARAMETER(J20=44)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      CHARACTER*14 HAWARN(11)
      INTEGER LIST(J20),JAWARN(11)
      DIMENSION
     1BWYW(J20)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      ALLOCATABLE EIWERT(:)
      SAVE
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0
     1,VPREZ6=1.0D6/(4.D0*3.1415926D0),BOLZCM=0.695040D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
      DATA I,J,KLICKT,KLICK,KAWARN,JAWARN/0,0,0,0,-1,11*0/
      DATA HAWARN/'1.0           ','1.0           ','1.0           '
     1,'1.0           ','-SQRT(10./7.) ','SQRT(5./14.)  '
     1,'1.0           ','0.0           ','SQRT(210.)/24.'
     1,'-SQRT(3.5)    ','SQRT(231.)/24.'/
COMMENT: AN INTERFACE (No.2) IS HERE!: NO BWYW BEFORE, NOW BWYW=STBWWW
CO:   RESP. = BWWOMP FOR JAABLT.NE.0! - IF(IBWWW(6).LT.0)BWYW(6)=BWYW(6)*...
CO:   (E.G.), THEN AFTERWARDS: BWWWXX(J)=BWYW(J) (TRUE WYBOURNE VALUES)!
CO:   (BWWWXX IS IN COMMON, BWYW IS NOT!)
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(.NOT.ALLOCATED(EIWERT))ALLOCATE (EIWERT(ND2002))
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,18)
C     B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66:
      DO 3516 I=1,J20
      BWYW(I)=STBWWW(I) !NO MORE IN LEV...
 3516 CONTINUE
      IF(JAABLT.NE.0)BWYW(JAABLT)=BWWOMP(JAABLT)
COMMENT: STBWWW, BWWOMP, BWYW CONTAIN, RESP. 0, 1 OR MORE, 1 "DELTA"!
C      NEWBWW=0 !cancelled! 
C 28 LINES REMOVED! - CONCERNING NEWBWW!      
C
C BBBBBBBBBB BJLTCF%%%% BBBBRZFFFB BBBBBBBBBB B
C
C 5 LINES REMOVED! (<->BWW(I))
C 13 LINES REMOVED!
C
      IF(JASTRU.NE.0)THEN
      CALL STR00(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWYW,KMASKE,NGROUP,J20)
      IF(NGROUP.EQ.20)THEN
C**   //21'/22'//41'/42'/43'/44'//61'/62'/63'/64'//65'/66':
      BWYW(30)=BWWWS(2)
      BWYW(31)=BWWWS(3)
      BWYW(32)=BWWWS(5)
      BWYW(33)=BWWWS(6)
      BWYW(34)=BWWWS(7)
      BWYW(35)=BWWWS(8)
      BWYW(36)=BWWWS(10)
      BWYW(37)=BWWWS(11)
      BWYW(38)=BWWWS(12)
      BWYW(39)=BWWWS(13)
      BWYW(40)=BWWWS(15)
      BWYW(41)=BWWWS(16)
C**   IN STR00:
C     WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWWS(I),QS(I),I=2,3)
C    1,(0,BWWWS(I),QS(I),I=5,8)
C    2,(0,BWWWS(I),QS(I),I=10,13),(0,BWWWS(I),QS(I),I=15,16)
      ENDIF
      GOTO 6789
      ENDIF
CRD   ... 155 LINES DELETED!
C
      IF(NGROUP.NE.20)THEN
      DO 9114 I=21,24
      IBWWW(I)=0
      BWYW(I)=0.0D0
 9114 CONTINUE
      DO 9115 I=30,41
      IBWWW(I)=0
      BWYW(I)=0.0D0
 9115 CONTINUE
      ELSE IF(NGROUP.EQ.20)THEN
      IF(KLWERT.EQ.2)THEN
      DO 8114 I=23,24
      IBWWW(I)=0
      BWYW(I)=0.0D0
 8114 CONTINUE
      DO 8115 I=36,41
      IBWWW(I)=0
      BWYW(I)=0.0D0
 8115 CONTINUE
      ENDIF
      ENDIF
C
      IF(KLWERT.EQ.2.OR.KLWERT.EQ.3)THEN
      IF(KLWERT.LT.3.OR.NREL.EQ.1)BWYW(29)=ZERO
      IF(NREL.EQ.1)BWYW(28)=ZERO
      IF(NREL.EQ.1)BWYW(27)=ZERO
      IF(NREL.NE.1.AND.KLWERT.EQ.2)THEN
      IF(IBWWW(28).LT.0)BWYW(28)=BWYW(28)*BWYW(27)
      BWYW(28)=(BWYW(28)/35.0D0)*441.D0
C**   FINTEG(3)=(RACAHQ/35.0D0)*441.D0
      BWYW(27)=(BWYW(27)+5.D0*BWYW(28)/441.D0)*49.0D0
C**   FINTEG(2)=(RACAHP+5.D0*FINTEG(3)/441.D0)*49.0D0
      ENDIF
      IF(NGROUP.EQ.21)THEN
      BWYW(6)=BWYW(3)*DSQRT(5.0D0/14.0D0) !cubI
      ELSE IF(NGROUP.EQ.22)THEN
C**   THE SIGN IN FRONT OF DSQRT IS MINUS! THE C3-STEP-UP OPERATOR WITH MINUS
C     SIGN IN FRONT OF IT IS USED (AS USUAL!)!
      BWYW(5)=BWYW(3)*(-DSQRT(10.0D0/7.0D0)) !cubII
      ENDIF
C**   NEXT TWO LINES ARE MASKED, IF "CUBIC" (I.E. IBWWW=0!)!:
      IF(IBWWW(6).LT.0)BWYW(6)=BWYW(6)*BWYW(3)*DSQRT(5.0D0/14.0D0) !B44
      IF(IBWWW(5).LT.0)BWYW(5)=BWYW(5)*BWYW(3)*(-DSQRT(10.0D0/7.0D0)) !B43
      IF(KAWARN.EQ.-1.AND.IBWWW(5).EQ.-1)JAWARN(5)=5
      IF(KAWARN.EQ.-1.AND.IBWWW(5).EQ.-2.AND.BWYW(5).NE.ZERO)JAWARN(5)=5
      IF(KAWARN.EQ.-1.AND.IBWWW(6).EQ.-1)JAWARN(6)=6
      IF(KAWARN.EQ.-1.AND.IBWWW(6).EQ.-2.AND.BWYW(6).NE.ZERO)JAWARN(6)=6
      IF(IBWWW(4).LT.0)BWYW(4)=BWYW(4)*BWYW(3) !B42
      IF(IBWWW(2).LT.0)BWYW(2)=BWYW(2)*BWYW(1) !B22
      IF(KAWARN.EQ.-1.AND.IBWWW(4).EQ.-1)JAWARN(4)=4
      IF(KAWARN.EQ.-1.AND.IBWWW(4).EQ.-2.AND.BWYW(4).NE.ZERO)JAWARN(4)=4
      IF(KAWARN.EQ.-1.AND.IBWWW(8).EQ.-1)JAWARN(8)=8
      IF(KAWARN.EQ.-1.AND.IBWWW(8).EQ.-2.AND.BWYW(8).NE.ZERO)JAWARN(8)=8
      IF(NGROUP.EQ.20)THEN
      IF(IBWWW(21).LT.0)BWYW(21)=BWYW(21)*BWYW(1) !B21
      IF(IBWWW(22).LT.0)BWYW(22)=BWYW(22)*BWYW(3) !B41
      IF(KAWARN.EQ.-1.AND.IBWWW(21).EQ.-1)JAWARN(1)=21
      IF(KAWARN.EQ.-1.AND.IBWWW(21).EQ.-2.AND.BWYW(21).NE.ZERO)JAWARN(1)
     1=21
      IF(KAWARN.EQ.-1.AND.IBWWW(22).EQ.-1)JAWARN(2)=22
      IF(KAWARN.EQ.-1.AND.IBWWW(22).EQ.-2.AND.BWYW(22).NE.ZERO)JAWARN(2)
     1=22
      ENDIF
      ENDIF !IF(KLWERT.EQ.2.OR.KLWERT.EQ.3)THEN
C**   BREAK OF ALL IF'S!
      IF(KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWYW(10)=BWYW(7)*(-DSQRT(3.5D0)) !cubI
      ELSE IF(NGROUP.EQ.22)THEN
      BWYW(9)=BWYW(7)*DSQRT(210.0D0)/24.0D0 !cubII
C**   FORMULA FROM M.T. HUTCHINGS, SOLID STATE PHYSICS VOL.16(1964),227
C     ACADEMIC PRESS NEW YORK AND LONDON; FORMULA (2.15) PAGE 246;
C     (THE OPERATOR IS (Y6-3) - (Y6+3)).
      BWYW(11)=BWYW(7)*DSQRT(231.0D0)/24.0D0 !cubII
      ENDIF
      IF(IBWWW(10).LT.0)BWYW(10)=BWYW(10)*BWYW(7)*(-DSQRT(3.5D0)) !B64
      IF(IBWWW(9).LT.0)BWYW(9)=BWYW(9)*BWYW(7)*DSQRT(210.0D0)/24.0D0 !B63
      IF(IBWWW(11).LT.0)BWYW(11)=BWYW(11)*BWYW(7)*DSQRT(231.0D0)/24.0D0 !B66
      IF(KAWARN.EQ.-1.AND.IBWWW(9).EQ.-1)JAWARN(9)=9
      IF(KAWARN.EQ.-1.AND.IBWWW(9).EQ.-2.AND.BWYW(9).NE.ZERO)JAWARN(9)=9
      IF(KAWARN.EQ.-1.AND.IBWWW(10).EQ.-1)JAWARN(10)=10
      IF(KAWARN.EQ.-1.AND.IBWWW(10).EQ.-2.AND.BWYW(10).NE.ZERO)JAWARN(10
     1)=10
      IF(KAWARN.EQ.-1.AND.IBWWW(11).EQ.-1)JAWARN(11)=11
      IF(KAWARN.EQ.-1.AND.IBWWW(11).EQ.-2.AND.BWYW(11).NE.ZERO)JAWARN(11
     1)=11
      IF(IBWWW(8).LT.0)BWYW(8)=BWYW(8)*BWYW(7) !B62
      IF(NGROUP.EQ.20)THEN
      IF(IBWWW(23).LT.0)BWYW(23)=BWYW(23)*BWYW(7) !B61
      IF(IBWWW(24).LT.0)BWYW(24)=BWYW(24)*BWYW(7) !B65
      IF(KAWARN.EQ.-1.AND.IBWWW(23).EQ.-1)JAWARN(3)=23
      IF(KAWARN.EQ.-1.AND.IBWWW(23).EQ.-2.AND.BWYW(23).NE.ZERO)JAWARN(3)
     1=23
      IF(KAWARN.EQ.-1.AND.IBWWW(24).EQ.-1)JAWARN(7)=24
      IF(KAWARN.EQ.-1.AND.IBWWW(24).EQ.-2.AND.BWYW(24).NE.ZERO)JAWARN(7)
     1=24
      ENDIF
      ENDIF !IF(KLWERT.EQ.3)THEN
C**   BREAK OF ALL IF'S!
      IF(KAWARN.NE.12)THEN
      NOWARN=1
      DO 9113 I=1,11
      IF(JAWARN(I).NE.0)NOWARN=0
 9113 CONTINUE
      IF(NOWARN.EQ.0)THEN
      WRITE(*,9193)
      WRITE(11,9193)
      DO 1189 I=1,11
      IF(JAWARN(I).NE.0)WRITE(*,1198)JAWARN(I),HAWARN(I)
      IF(JAWARN(I).NE.0)WRITE(11,1198)JAWARN(I),HAWARN(I)
 1189 CONTINUE
 1198 FORMAT(I3,3X,A14)
 9193 FORMAT(
     1' WARNING: THE RATIOS OF WYBOURNE PARAMETERS ARRIVING HERE',/,
     1' ARE CHANGED NOW OR LATER ON, NAMELY THE PARAMETER ...',/
     2,' IS MULTIPLIED BY ... (MAY BE 1.0, E.G. B21=B21*(FACTOR=B20)')
      ENDIF
      ENDIF
      KAWARN=12 !MEANS: "OUTPUT ONLY ONCE"!
C
 6789 CONTINUE
      IF(KLICKT.EQ.0)THEN
      KLICKT=1
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
      WRITE(*,9101)(IBWWW(I),BWYW(I),QQ(I),I=1,44)
      WRITE(11,9101)(IBWWW(I),BWYW(I),QQ(I),I=1,44)
 9101 FORMAT(/,' CALCULATED WYBOURNE VALUES (PLUS OTHER VALUES) (1 OR -1
     1 MEANS "FITTED"):',/,(1X,3(I3,D16.8,1X,A5)))
      IF(MORTEX.EQ.0)THEN
      WRITE(*,8111)
      WRITE(11,8111)
 8111 FORMAT(' IF(NGROUP.EQ/NE.20): CHOOSE MORTEX!',/)
      ELSE IF(MORTEX.NE.0)THEN
      WRITE(*,9111)
      WRITE(11,9111)
 9111 FORMAT(' IF(NGROUP.NE.20) THE VALUES B21,B41,B61,B65,',/,
     1' B21'',B22'',B41'',B42'',B43'',B44'',',/,
     4' B61'',B62'',B63'',B64'',B65'',B66'' ARE SET TO ZERO,',/,
     5' BUT RED-F/ZETA/F(2)/F(3)/F(4) ARE NOT!',/,
     5' HERE F''s FOR d-EL., NOT RACAH''s!',/,
     6' RED-F/ZETA/F(2)/F(3)/F(4) ARE ONLY USED, IF NOT =ZERO!',/)
      ENDIF
      ENDIF !IF(KLICKT.EQ.0)THEN
C**   BREAK OF ALL IF'S!
C
      IF(TEMPIK(NRTEMP).EQ.ZERO)STOP 'Temperature=0.'
      IF(CHIMEA(NRTEMP).EQ.ZERO.AND.MOD(LOWDAT(NRTEMP),2).EQ.0
     1.AND.KLICK.EQ.0)THEN
      KLICK=1
      WRITE(*,9877)
      WRITE(11,9877)
 9877 FORMAT(' WARNING: CHIMEA(NRTEMP).EQ.ZERO AND WILL POSSIBLY BECOME'
     1,/,' A DENOMINATOR: "NO FIT POSSIBLE IN THIS CASE!"')
      ENDIF !END "WARNING"
C**   BREAK OF ALL IF'S!
C     NEWBWW cancelled!
C     (E.G.) BWYW(10)=BWYW(7)*(-DSQRT(3.5D0)) (cubI) runs always(!) now,
C     and STR001 for JASTRU.NE.0 also!
C
      DO 1718 J=1,44
      BWWWXX(J)=BWYW(J)
 1718 CONTINUE
C
      CALL TANABE(NGROUP,
     1EIWERT,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM
     7,FINTEG,FKSI
     2,BWYW,NRTEMP,LAUFNR)
C
      IF(JAABLT.EQ.0)EICFOS=EIWERT(NRVAL)
      IF(JAABLT.EQ.0)EIFOSJ=EIWERT(NRVALJ)
C
C**   RETURNS TO LEVSQX OR LEVDER!
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUSC
      END
      SUBROUTINE TANABE(NGROUP,
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     TANABE IS CALLED BY SUSC AND RETURNS TO SUSC.
C     IN TANABE THE CALCULATION OF SUSCEPTIBILITIES STARTS. IT CALCULATES
C     EIGENVALUES AND EIGENVECTORS OF A MATRIX, WHICH IS BASED ON A FULL
C     BASIS OF MICRO STATES.
C     EL.-EL. REPULSION,  SPIN-ORBIT COUPLING, CRYSTAL FIELD, AND
C     FMAT AND GMAT IN REDUCT ARE ALWAYS (NEW) CALCULATED, IF TANABE
C     RUNS AT ALL! THE SUBROUTINES ELELWW, SPORCO, CRYSTF AND MAGNF,
C     WHICH ARE NEEDED FOR THESE, ARE CALLED ONLY ONCE AND FOR ALL!
C     IT CALLS REDUCT(ANABE), WHICH CALLS SELECT, WHICH CALLS  SUGANC
C     (SUGANC IS CALLED ONCE FOR IOPT1=2 AND UP TO 3 TIMES FOR IOPT1=1).
C
     1EIWERT,DIRECZ
     2,DIFLOW,IGR1,IGR2
     3,NRVAL
     4,NREL,KLWERT
     5,TEMPTH,JAABLT
     6,ND2002
     7,REDFAZ,KASSUM
     7,FINTEG,FKSI
     2,BWYW,NRTEMP,LAUFNR)
C
C**   SUBROUTINES/FUNCTIONS NEEDED: SCHEMA,SPORCO,ELELWW,CRYSTF,MAGNF,
C     CKCOE FOR CONDON-SHORTLEY COEFFICIENTS (INCL. DREIJ AND FACTLR), AND
C     IN ADDITION A DIAGONALIZATION ROUTINE CALLED VIA THE LINK-ROUTINE
C     ZHPEVK! THE DIAGONALIZATION ROUTINE IS ZHPEVD LINKED FROM A LIBRARY
C     OR TAKEN FROM THE INTERNET.
C**   INSTEAD OF CALLING THE DIAGONALIZATION ROUTINE DIRECTLY, SUBROUTINE
C     BLOCUT MAY BE CALLED FIRSTLY TO BLOCK-OUT THE MATRIX BEFORE
C     DIAGONALIZING THE BLOCKS ONE AFTER ANOTHER! 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C      INTEGER OMP_GET_THREAD_NUM
      COMMON/FLAG/LMN
      COMPLEX*16
     1DBLMAT,EIVECV
      PARAMETER(I6=6,I7=36,J7=6)
      ALLOCATABLE DBLMAT(:,:),EIVECV(:,:)
      ALLOCATABLE EIVSHT(:,:),MQUER(:,:),MSML(:,:,:)
     2,MSMLNW(:,:),NOFROW(:,:),NROFNR(:)
      ALLOCATABLE NROFNS(:),NOFROX(:,:),EIVSHU(:,:)
     2,NROFNT(:),NOFROY(:,:),EIVSHV(:,:,:)
     3,NROFN6(:),NOFRO6(:,:),EIVSH6(:,:)
     4,NROFN5(:),NOFRO5(:,:),EIVSH5(:,:)
     5,NROFN4(:),NOFRO4(:,:),EIVSH4(:,:,:)
     6,NROFN3(:),NOFRO3(:,:),EIVSH3(:,:,:)
     7,NROFN2(:),NOFRO2(:,:),EIVSH2(:,:,:)
     8,NROFN1(:),NOFRO1(:,:),EIVSH1(:,:,:)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(J20=44,NREL14=14)
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      DIMENSION BWYOLD(J20)
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/MOWDAT/NOWDAT
      PARAMETER(ZERO=0.0D0,ONE=1.0D0
     1,HALF=0.5D0
     1,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO,PARWUC=1.0D-8
     2,FOUR=4.0D0,VPREZ6=1.0D6/(FOUR*3.1415926D0)
     2,BOLZCM=0.695040D0,FMONE=-ONE)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110;
C**   ALL VALUES ARE IN SI UNITS, WITH ONE EXCEPTION: ENERGIES ARE ALWAYS
C     IN CM**-1 CORRESP. TO "WAVENUMBER=ENERGY/(PLANCK CONST.*VELOCITY OF
C     LIGHT)".
C     THE CONST. OF BOLTZMANN IN CM**-1*KELVIN**-1 INSTEAD OF
C     JOULE*KELVIN**-1 IS BOLZCM=0.695040. THE BOHR MAGNETON USED ABOVE
C     IS THAT NAMED AFTER AMPERE, IS IN A*M**2=J/TESLA, AND IS SIMUBA=
C     9.27402*10**-24. THE BOHR MAGNETON NAMED AFTER COULOMB IS IN V*S*M,
C     AND IT IS SIMUBC=SIMUBA*4PI*10**-7=1.165407*10**-29. THE CONVERSION
C     FACTOR, WHICH TAKES MAGNETIC FLUX DENSITY IN TESLAS INTO SUCH IN
C     CM**-1 IS TESLCM=0.466864. AVOGADROS NUMBER IN MOL**-1 IS AVOGAD=
C     6.02214*10**23. THE CALCULATED CHI-MOL VALUE IS IN SI UNITS, BUT IT
C     IS ALSO GIVEN IN GGS UNITS (MULTIPL. WITH 10**6/4PI=VPREZ6=79577.47D0).
C**   TESLCM=SIMUBA*(5.03411*10**22)(Joule/Tesla)*(cm**(-1)/Joule)
C     (HINT: INCLUDED IN TESLCM IS SIMUBA, WHICH BELONGS TO FMAT(I,J,))
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
C
C**   IN THE FOLLOWING: DIMENSIONS CORRESP. TO MAX. L VALUE
C     (L VALUE FOR 6 F EL.!): 2*12+1=25:
C
      DOUBLE PRECISION
     2EIWERT(ND2002),FINTEG(4),FINTUS(4) !EIWERT was allocated in SUSC!
     6,BWYW(J20)
     7,DIRECZ(3),REDFAZ(3)
C     8,EIVSHT(ND2002,*)
      INTEGER MSMLCO(2,NREL14),NRELDF(NREL14)
C      INTEGER MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
C     1,NROFNR(*),NOFROW(ND2002,*)
      DATA LAUF10,KLICKB,KLICK3,KLILOC,MOROUU,MFPLUR,
     1MFPLUS/0,0,0,0,0,0,0/
C      DATA I,J,K,JAEXCH,KKK/0,0,0,0,0/
C      DATA CKPLUS,FKSIH,SUM,NR,ML,MS,PROD,FMIKRK,FMIKRW/3*ZERO,3*0
C     1,3*ZERO/
C      DATA KLWRTP,LMAL2,LMAL2P,NRELMX,NRELM1,FLWRTH /5*0,ZERO/
      SAVE
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,19)
      KLWRTP=KLWERT+1
      FLWRTH=DBLE(KLWERT)+HALF
      LMAL2=2*KLWERT
      LMAL2P=LMAL2+1
      NRELMX=2*LMAL2P
      IF(NREL14.LT.NRELMX)STOP '.LT.14'
C
      NRELM1=NREL-1
C - FIRST RUN ONLY:
      IF(LAUF10.NE.0)GOTO 1234
      LAUF10=1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8227 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-TANABE; =0, 1 OR 2!',I5)
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3885)MOROUU
      GOTO 4885
      ENDIF
 3885 READ(*,'(I1)',ERR=8227,END=4576)MOROUU
      LMN=1
 4885 WRITE(7,2296)MOROUU
 2296 FORMAT(I1,' =MOROUU IN TANABE')
      WRITE(*,1281)MOROUU
      WRITE(11,1281)MOROUU
 1281 FORMAT(' MOROUT-HERE-IN-TANABE =',I2,'!!!!!!!!!')
      ENDIF
C
C**   THE FOLLOWING CALCULATION NEEDS TO BE DONE FOR THE VERY FIRST TIME
C     ONLY: THE POSSIBLE MICRO STATES ARE COMPUTED AND STORED!:
C
C**   MAX. OF KASSUM (No. OF MICRO STATES) IS =252 =10 UPON 5 FOR D EL.,
C     FOR INSTANCE 10 UPON 3 AMOUNTS TO 120.
C     ALL KASSUM MICRO STATES FOR NREL ELECTRONS ARE COMPUTED AND STORED
C     NOW IN SUBROUTINE SCHEMA AND MSML( , , ) AND MQUER( , ) ARE READY!:
      ALLOCATE (EIVSHT(ND2002,10),MQUER(ND2002,3),MSML(ND2002,2,NREL14)
     2,MSMLNW(ND2002,NREL14),NOFROW(ND2002,10),NROFNR(ND2002)) !10=I10
COMMENT:   (I)10 = MAX. OF POSS. FOR ANY MIKRO STATE OF F EL. TO BE SHIFTED
CO:   DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
      CALL SCHEMA(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW)
      ALLOCATE (NROFNS(ND2002),NOFROX(ND2002,I6),EIVSHU(ND2002,I6)
     1,NROFNT(ND2002),NOFROY(ND2002,I7),EIVSHV(ND2002,I7,3)
     2,NROFN6(ND2002),NOFRO6(ND2002,J7),EIVSH6(ND2002,J7)
     3,NROFN5(ND2002),NOFRO5(ND2002,J7),EIVSH5(ND2002,J7)
     4,NROFN4(ND2002),NOFRO4(ND2002,J7),EIVSH4(ND2002,J7,2)
     5,NROFN3(ND2002),NOFRO3(ND2002,J7),EIVSH3(ND2002,J7,2)
     6,NROFN2(ND2002),NOFRO2(ND2002,J7),EIVSH2(ND2002,J7,3)
     7,NROFN1(ND2002),NOFRO1(ND2002,J7),EIVSH1(ND2002,J7,3))
      DO 3433 K=1,3
      DO 3432 J=1,I7
      DO 3431 I=1,ND2002
      EIVSHV(I,J,K)=ZERO
 3431 CONTINUE
 3432 CONTINUE
 3433 CONTINUE
      CALL ELELWW(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14,LMAL2
     1,I7,NROFNT,NOFROY,EIVSHV,FLWRTH,MSML,MSMLCO,NRELDF)
      CALL SPORCO(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,I6,NROFNS,NOFROX,EIVSHU,FLWRTH,MSML,MSMLCO)
      CALL CRYSTF(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14,LMAL2
     1,J7,NROFN1,NOFRO1,EIVSH1,FLWRTH,MSML,MSMLCO,NRELDF
     2,NROFN2,NOFRO2,EIVSH2,NROFN3,NOFRO3,EIVSH3,NROFN4,NOFRO4,EIVSH4
     3,NROFN5,NOFRO5,EIVSH5,NROFN6,NOFRO6,EIVSH6)
      CALL MAGNF(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MSMLCO,ND2002,MSMLNW
     9,NOFROW,NROFNR,EIVSHT)
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL!)
C
C**   FACTORS IN FRONT OF STEP-UP- AND STEP-DOWN-OPERATORS: (KLWERT=1, 2 OR =3)
C%%%
 1234 CONTINUE
C**   BELONGS TO "IF(LAUF10.NE.0)GOTO 1234"
      IF(.NOT.ALLOCATED(DBLMAT))ALLOCATE (DBLMAT(ND2002,ND2002))
      IF(.NOT.ALLOCATED(EIVECV))ALLOCATE (EIVECV(ND2002,ND2002))
      KASSUL=KASSUM-1
C
C**   FOR THE FOLLOWING CONDITIONS THERE IS NO CRYSTAL FIELD:
      JAMAT0=1
      DO 246 I=1,11
      IF(BWYW(I).NE.ZERO)JAMAT0=0
  246 CONTINUE
      IF(NGROUP.EQ.20)THEN
      DO 2461 I=21,24
      IF(BWYW(I).NE.ZERO)JAMAT0=0
 2461 CONTINUE
      DO 1250 I=30,41
      IF(BWYW(I).NE.ZERO)JAMAT0=0
 1250 CONTINUE
      ENDIF
C
      FKWERT=BWYW(12)
      FLWERT=BWYW(42)
      FMWERT=BWYW(43)
      FNWERT=BWYW(44)
C
C**   NEW B-VALUES?:
CRDW      NEUEBS=0
C      GOTO 2426 !ELIMINATED !?NEUEBS=NEWBWW?
      NEUEBS=0
      DO 115 I=1,24
      IF(I.EQ.12)GOTO 115 !J
      IF(BWYW(I).NE.BWYOLD(I))NEUEBS=1
      BWYOLD(I)=BWYW(I)
  115 CONTINUE
      DO 113 I=30,41
      IF(BWYW(I).NE.BWYOLD(I))NEUEBS=1
      BWYOLD(I)=BWYW(I)
  113 CONTINUE
C BBBBBBBBBB BJLTCF%%%% BBBBRZFFFB BBBBBBBBBB B
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      NEUEBS=1
      ENDIF
CRD0      IF(IOPT0.EQ.1.AND.TESINT.NE.TESOLD)NEUEBS=1 !CRD0:
C CONCORD.IOPT0.f -> CONCORD.f - IOPT0 removed!
C
      IF(((IBWWW(25).EQ.1).OR.(BWYW(25).NE.ZERO)))THEN
      IF(BWYW(25).NE.BWYOLD(25))NEUEBS=1
      BWYOLD(25)=BWYW(25)
      REDFAZ(1)=BWYW(25)
      REDFAZ(2)=BWYW(25)
      REDFAZ(3)=BWYW(25)
      ENDIF
C
      FKSIUS=FKSI
      IF((IBWWW(26).EQ.1).OR.(BWYW(26).NE.ZERO))THEN
      IF(BWYW(26).NE.BWYOLD(26))NEUEBS=1
      BWYOLD(26)=BWYW(26)
      FKSIUS=BWYW(26)
      ENDIF
      FINTUS(2)=FINTEG(2)
      IF((IBWWW(27).EQ.1).OR.(BWYW(27).NE.ZERO))THEN
      IF(BWYW(27).NE.BWYOLD(27))NEUEBS=1
      BWYOLD(27)=BWYW(27)
      FINTUS(2)=BWYW(27)
      ENDIF
      FINTUS(3)=FINTEG(3)
      IF((IBWWW(28).EQ.1).OR.(BWYW(28).NE.ZERO))THEN
      IF(BWYW(28).NE.BWYOLD(28))NEUEBS=1
      BWYOLD(28)=BWYW(28)
      FINTUS(3)=BWYW(28)
      ENDIF
      FINTUS(4)=FINTEG(4)
      IF((IBWWW(29).EQ.1).OR.(BWYW(29).NE.ZERO))THEN
      IF(BWYW(29).NE.BWYOLD(29))NEUEBS=1
      BWYOLD(29)=BWYW(29)
      FINTUS(4)=BWYW(29)
      ENDIF
C 2426 CONTINUE !ELIMINATED
C
      IF(NEUEBS.EQ.0)THEN
C**   FOR THIS CONDITION NOTHING HAS TO BE (NEW) CALCULATED:
      GOTO 9999
      ENDIF
C
      DO 2367 J=1,KASSUM
      DO 7140 I=1,KASSUM
      DBLMAT(I,J)=DCMPLX(ZERO,ZERO)
 7140 CONTINUE
 2367 CONTINUE
C
C**   FOR THE FOLLOWING CONDITIONS THERE HAS NO EL.-EL. REPULSION
C     TO BE CALCULATED:
C
      IF(NREL.EQ.1.OR.(FINTUS(2).EQ.ZERO
     1.AND.FINTUS(3).EQ.ZERO.AND.FINTUS(4).EQ.ZERO))THEN
      GOTO 2345
      ENDIF
C
C**   EL.-EL. REPULSION (NOT, IF THERE IS ONLY ONE EL.)!:
C
C**   THE NON-DIAG. ELEMENTS IN DBLMAT!:
      DO 5422 J=1,KASSUM
      DO 5423 I=1,NROFNT(J)
      CKPLUS=EIVSHV(J,I,1)
     1*FINTUS(2)+EIVSHV(J,I,2)*FINTUS(3)+EIVSHV(J,I,3)*FINTUS(4)
      DBLMAT(NOFROY(J,I),J)=DBLMAT(NOFROY(J,I),J)+DCMPLX(CKPLUS,ZERO)
 5423 CONTINUE
 5422 CONTINUE
C
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C
C     FOR THE NON-DIAGONAL ELEMENTS SEE: SUBROUTINE ELELWW!
C
C**   THE DIAGONAL ELEMENS:
C     (THE OPERATOR IS A DOUBLE SUM (DO 14 / DO 13) OF TWO-EL. OPERATORS!)
C     ALL KASSUM MICRO-STATES IN DO 15:
C      WRITE(*,1542)KASSUM,NREL,KLWERT
C      WRITE(11,1542)KASSUM,NREL,KLWERT
C 1542 FORMAT(' KASSUM,NREL,KLWERT=',3I5)
      DO 15 K=1,KASSUM
      DO 14 J=1,NRELM1
C      JP1=J+1
      DO 13 I=J+1,NREL
      JAEXCH=0
      IF(MSML(K,2,I).EQ.MSML(K,2,J))JAEXCH=1
C     JAEXCH=1 FOR EL. OF LIKE SPINS!:
C**   THE EXCHANGE INTEGRALS OF EQ.(7) CONDON/SH. P.173,
C     WITH HELP OF EQ.(9) P.175:
      IF(JAEXCH.NE.0)THEN
      DO 19 KKK=2,LMAL2,2
C      KF=1+KKK/2
      CKPLUS=-CKCOE(KKK,KLWERT,MSML(K,1,I),KLWERT,MSML(K,1,J))**2
     2*FINTUS(1+KKK/2)
      DBLMAT(K,K)=DBLMAT(K,K)+DCMPLX(CKPLUS,ZERO)
C      PRINT *, '2'
   19 CONTINUE
      ENDIF
C**   AND THE DIRECT INTEGRALS - SEE ALSO EQ.(13) AND (14) P.176:
      DO 18 KKK=2,LMAL2,2
C      KF=1+KKK/2
      CKPLUS=CKCOE(KKK,KLWERT,MSML(K,1,I),KLWERT,MSML(K,1,I))
     2*CKCOE(KKK,KLWERT,MSML(K,1,J),KLWERT,MSML(K,1,J))
     3*FINTUS(1+KKK/2)
      DBLMAT(K,K)=DBLMAT(K,K)+DCMPLX(CKPLUS,ZERO)
   18 CONTINUE
   13 CONTINUE
   14 CONTINUE
   15 CONTINUE
C** END OF 1/RIJ!!!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2221)
      WRITE(11,2221)
 2221 FORMAT(
     1' MATRIX DBLMAT (1/RIJ-MATRIX); COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUU=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUU.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEM.!')
      ENDIF
      DO 1019 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
 2010 FORMAT(6(1X,D12.4))
 1019 CONTINUE
      ENDIF
C
 2345 CONTINUE
C**   BELONGS TO "NO EL.-EL. REPULSION"
C
C**   FOR THE FOLLOWING CONDITION THERE IS NO SPIN-ORBIT COUPLING:
      IF(FKSIUS.EQ.ZERO)GOTO 3456

C**   NOW SPIN-ORBIT COUPLING: SUBROUTINE SPORCO IS USED FOR THE NON-
C     DIAGONAL ELEMENTS!
C
C     THE DIAGONAL ELEMENTS (SUM OF(lz.sz)):
      FKSIH=HALF*FKSIUS
C
      DO 45 I=1,KASSUM
      SUM=ZERO
      DO 445 NR=1,NREL
      ML=MSML(I,1,NR)
      MS=MSML(I,2,NR)
C     (MS IS TWICE ms!)
      PROD=DBLE(ML*MS)
      SUM=SUM+PROD
  445 CONTINUE
C     THE RESULT OF SUCH A SUM OF ONE-EL. OPERATORS
C     (CONDON/SH.,P.59,EQ.(3)OF 7**3) AND/OR P.221,EQ.(1C)) IS:
      SUM=SUM*FKSIH
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(SUM,ZERO)
   45 CONTINUE
C
C**   AND THE NON-DIAGONAL ELEMENTS:
C
      DO 4522 J=1,KASSUM
      DO 4523 I=1,NROFNS(J)
      CKPLUS=EIVSHU(J,I)*FKSIH
      DBLMAT(NOFROX(J,I),J)=DBLMAT(NOFROX(J,I),J)+DCMPLX(CKPLUS,ZERO)
 4523 CONTINUE
 4522 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2223)
      WRITE(11,2223)
 2223 FORMAT(' MATRIX DBLMAT INCL.'
     1,' SPIN-ORB.-COUPL. MATRIX; COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 1003 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
 1003 CONTINUE
      ENDIF
C
 3456 CONTINUE
C**   BELONGS TO "IF(FKSIUS.EQ.ZERO)GOTO 3456"
C
C**   FOR THE FOLLOWING CONDITION THERE IS NO CRYSTAL FIELD:
      IF(JAMAT0.NE.0)THEN
      GOTO 5678
      ENDIF
C
C**   NOW FOLLOWING: THE CRYSTAL FIELD (SEE CONDON/SH. PP.169,170,171;
C     AND GRIFFITH P.196,EQ.(8.4))!:
C     SUBROUTINE CRYSTF IS USED FOR THE NON-DIAGONAL ELEMENTS!
C
C**   THE DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(9))!:
C
      DO 34 I=1,KASSUM
      DO 344 NR=1,NREL
      ML=MSML(I,1,NR)
      IF(BWYW(1).NE.ZERO)THEN
      CKPLUS=CKCOE(2,KLWERT,ML,KLWERT,ML)*BWYW(1)
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
      ENDIF
      IF(BWYW(3).NE.ZERO)THEN
      CKPLUS=CKCOE(4,KLWERT,ML,KLWERT,ML)*BWYW(3)
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
      ENDIF
      IF(BWYW(7).NE.ZERO)THEN
      CKPLUS=CKCOE(6,KLWERT,ML,KLWERT,ML)*BWYW(7)
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
      ENDIF
  344 CONTINUE
   34 CONTINUE
C
C**   AND THE NON-DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(8))!:
C
      DO 3114 J=1,KASSUL
C
C     NOFRO6 CORRESP. TO (IABS(ML1-ML2).EQ.(NK=6))! - IABS MEANS: STEP UP
C     AND(!) STEP DOWN OPERATOR(S)!
C-B66&B66':
      IF(BWYW(11).NE.ZERO.OR.BWYW(41).NE.ZERO)THEN
      DO 3130 I=1,NROFN6(J)
      FMIKRK=EIVSH6(J,I)
      FMIKRW=FMIKRK*BWYW(11)
      DBLMAT(NOFRO6(J,I),J)=DBLMAT(NOFRO6(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(41)
      DBLMAT(NOFRO6(J,I),J)=DBLMAT(NOFRO6(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3130 CONTINUE
      ENDIF
C-B65&B65':
      IF(BWYW(24).NE.ZERO.OR.BWYW(40).NE.ZERO)THEN
      DO 3131 I=1,NROFN5(J)
      FMIKRK=EIVSH5(J,I)
      FMIKRW=FMIKRK*BWYW(24)
      DBLMAT(NOFRO5(J,I),J)=DBLMAT(NOFRO5(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(40)
      DBLMAT(NOFRO5(J,I),J)=DBLMAT(NOFRO5(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3131 CONTINUE
      ENDIF
C-B44&B44':
      IF(BWYW(6).NE.ZERO.OR.BWYW(35).NE.ZERO)THEN
      DO 3132 I=1,NROFN4(J)
      FMIKRK=EIVSH4(J,I,1)
      FMIKRW=FMIKRK*BWYW(6)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(FMIKRW,ZERO)
C**   BECAUSE OF (IABS(ML1-ML2).EQ.4) CORRESP. TO KLWERT AND KLWERT-4,
C     CKCOE IS SYMM., I.E. (ML1-ML2) CORRESP. TO (ML2-ML1)!
      FMIKRW=-FMIKRK*BWYW(35)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3132 CONTINUE
      ENDIF
C-B64&B64':
      IF(BWYW(10).NE.ZERO.OR.BWYW(39).NE.ZERO)THEN
      DO 3133 I=1,NROFN4(J)
      FMIKRK=EIVSH4(J,I,2)
      FMIKRW=FMIKRK*BWYW(10)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(39)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3133 CONTINUE
      ENDIF
C-B43&B43':
      IF(BWYW(5).NE.ZERO.OR.BWYW(34).NE.ZERO)THEN
      DO 3134 I=1,NROFN3(J)
C**   CKCOE(4,L,2,L,-1) = CKCOE(4,L,-2,L,1) = -SQRT(35/441)
C  (BUT:) CKCOE(4,L,-1,L,2) = CKCOE(4,L,1,L,-2) = +SQRT(35/441)
C**   <2/C3/-1> = CKCOE(4,L,2,L,-1) = -<-1/C-3/2>
C     <1/C3/-2> = CKCOE(4,L,1,L,-2) = -CKCOE(4,L,2,L,-1)
C
C**   BECAUSE THE DIFFERENCE OF KLWERT AND KLWERT-3 IS 3, CKCOE IS NOT
C     SYMM., I.E. (ML1-ML2) CORRESP. NOT TO (ML2-ML1) (FACTOR OF MINUS 1)!
C**   THE OPERATOR IS (-C3+C-3); ONLY THE PART -C3 OR THE PART +C-3 OF IT IS
C     OPERATING AT THE SAME TIME (C3 MEANS STEP UP AND C-3 STEP DOWN OP. -
C     BECAUSE MNUR4 <=> J AND MNUR4C <=> I, THE OPERATOR OPERATING HERE
C     CORRESPONDS TO MNUR4(1,2).GT./.LT.MNUR4C(1,2): .GT. MEANS "STEP UP"!
      FMIKRK=EIVSH3(J,I,1)
      FMIKRW=FMIKRK*BWYW(5)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(34)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(ZERO,FMIKRW)
C**   IT HAS BEEN FOUND, THAT ONLY THE STEP UP OPERATOR (WITH MINUS SIGN
C     IN FRONT OF IT!) WORKS HERE!
 3134 CONTINUE
      ENDIF
C-B63&B63':
      IF(BWYW(9).NE.ZERO.OR.BWYW(38).NE.ZERO)THEN
      DO 3135 I=1,NROFN3(J)
      FMIKRK=EIVSH3(J,I,2)
      FMIKRW=FMIKRK*BWYW(9)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(38)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3135 CONTINUE
      ENDIF
C-B22&B22':
      IF(BWYW(2).NE.ZERO.OR.BWYW(31).NE.ZERO)THEN
      DO 3136 I=1,NROFN2(J)
      FMIKRK=EIVSH2(J,I,1)
      FMIKRW=FMIKRK*BWYW(2)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(31)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3136 CONTINUE
      ENDIF
C-B42&B42':
      IF(BWYW(4).NE.ZERO.OR.BWYW(33).NE.ZERO)THEN
      DO 3137 I=1,NROFN2(J)
      FMIKRK=EIVSH2(J,I,2)
      FMIKRW=FMIKRK*BWYW(4)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(33)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3137 CONTINUE
      ENDIF
C-B62&B62':
      IF(BWYW(8).NE.ZERO.OR.BWYW(37).NE.ZERO)THEN
      DO 3138 I=1,NROFN2(J)
      FMIKRK=EIVSH2(J,I,3)
      FMIKRW=FMIKRK*BWYW(8)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(37)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3138 CONTINUE
      ENDIF
      IF(NGROUP.EQ.20)THEN
C
C-B21&B21':
      IF(BWYW(21).NE.ZERO.OR.BWYW(30).NE.ZERO)THEN
      DO 3139 I=1,NROFN1(J)
      FMIKRK=EIVSH1(J,I,1)
      FMIKRW=FMIKRK*BWYW(21)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(30)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3139 CONTINUE
      ENDIF
C-B41&B41':
      IF(BWYW(22).NE.ZERO.OR.BWYW(32).NE.ZERO)THEN
      DO 3140 I=1,NROFN1(J)
      FMIKRK=EIVSH1(J,I,2)
      FMIKRW=FMIKRK*BWYW(22)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(32)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3140 CONTINUE
      ENDIF
C-B61&B61':
      IF(BWYW(23).NE.ZERO.OR.BWYW(36).NE.ZERO)THEN
      DO 3141 I=1,NROFN1(J)
      FMIKRK=EIVSH1(J,I,3)
      FMIKRW=FMIKRK*BWYW(23)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWYW(36)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3141 CONTINUE
      ENDIF
C
      ENDIF
 3114 CONTINUE
C
 5678 CONTINUE
C**   BELONGS TO "NO (NEW) CRYSTAL FIELD"
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2222)
      WRITE(11,2222)
 2222 FORMAT(' MATRIX'
     1,' DBLMAT (REAL PART OF ..., INCL. LIG.-FLD. MATRIX);',/
     1,' COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 1002 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
 1002 CONTINUE
      ENDIF
C
      DO 2354 J=1,KASSUM
      IF(CDABS(DBLMAT(J,J)).LT.PARZER)DBLMAT(J,J)=DCMPLX(ZERO,ZERO)
      JP1=J+1
      DO 7144 I=JP1,KASSUM
      IF(CDABS(DBLMAT(I,J)).LT.PARZER)DBLMAT(I,J)=DCMPLX(ZERO,ZERO)
 7144 CONTINUE
 2354 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(/,1X,'REAL PART OF MATRIX TO BE DIAGONALIZED:',/
     1,' COLUMNS IN THE FORM OF ROWS, STARTING WITH DIAG. ELEM.',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 200 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
  200 CONTINUE
      WRITE(*,2100)
      WRITE(11,2100)
 2100 FORMAT(/,1X,' IMAG. PART OF MATRIX TO BE DIAGONALIZED:',/
     1,' COLUMNS IN THE FORM OF ROWS, STARTING WITH DIAG. ELEM.',/)
      DO 2200 J=1,KASI
      WRITE(11,2010)(DIMAG(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DIMAG(DBLMAT(I,J)),I=J,KASSUM)
 2200 CONTINUE
      ENDIF
C
C**   CALL THE DIAGONALISATION ROUTINE (DIRECTLY OR BLOCK-OUT AT FIRST):
C
      IF(KLILOC.EQ.0)THEN
      KLILOC=1
      JABLOC=0
      IF(KLWERT.EQ.3)THEN
      JABLOC=1
      IF(MORTEX.GE.0)THEN
      WRITE(*,9992)
      WRITE(11,9992)
 9992 FORMAT(/,' L VALUE=3,'
     1,' THEREFORE BLOC(O)UT WILL ALWAYS BE CALLED (IF NOT TEST)!')
      ENDIF
      ENDIF
      WRITE(*,2999)
      WRITE(11,2999)
 2999 FORMAT(
     1/,' ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE',/
     1,' FORM "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY QUANTUM NUMBERS!')
      WRITE(*,2899)
      WRITE(11,2899)
 2899 FORMAT(' ALSO OCCUP. OF SPINORBITALS ARE CALC. IN SUBR. BLOCUT!')
      WRITE(11,3000)JABLOC
 8228 WRITE(*,3000)JABLOC
C 3000 FORMAT(' INPUT IN I1 YES/NO(0) "BLOCK-OUT" ("ALWAYS":',I2,')!')
 3000 FORMAT(' INPUT IN I1 YES/NO(0) "BLOCK-OUT" ("STANDARD":',I2,')!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3886)JABLOC
      GOTO 4886
      ENDIF
 3886 READ(*,'(I1)',ERR=8228,END=4576)JABLOC
      LMN=1
C 4886 JABLOC=0
 4886 CONTINUE
      WRITE(7,3001)JABLOC
 3001 FORMAT(I1,' = JABLOC(KING OUT)')
      WRITE(*,3003)JABLOC
      WRITE(11,3003)JABLOC
 3003 FORMAT(' BLOCKING OUT TAKES PLACE YES/NO(0):',I2,'!!!!!!!!!')
      ENDIF
C
      IF(JABLOC.NE.0)THEN
C**   THE WHOLE(!) MATRIX IS NEEDED FOR SUBROUTINE BLOCUT!:
C
      DO 213 J=2,KASSUM
      JM1=J-1
      DO 7145 I=1,JM1
      DBLMAT(I,J)=DCONJG(DBLMAT(J,I))
 7145 CONTINUE
  213 CONTINUE
C     WRITE(11,'(E16.8)')((DBLMAT(I,J),I=1,KASSUM),J=1,KASSUM)
C
C**   PARR MUST NOT BE PARAMETER!:
      PARR=PARWUQ
      CALL BLOCUT(ND2002,KASSUM,PARR,KLWERT,NRELMX,MSMLNW
     1,DBLMAT,EIVECV,EIVECV,EIWERT,MQUER,NGROUP
     2,MSML,NREL14,NREL
     3,JAABLT)
C
      ELSE IF(JABLOC.EQ.0)THEN
C
      CALL ZHPEVK(1,DBLMAT,EIWERT,EIVECV,ND2002,KASSUM)
C
      ENDIF
C**   COEFF., WHICH ARE LOWER THAN PARZER IN ABS. VALUE, NOW BECOME ZERO:
      DO 2199 J=1,KASSUM
      DO 2198 I=1,KASSUM
      IF(CDABS(EIVECV(I,J)).LT.PARZER)EIVECV(I,J)=DCMPLX(ZERO,ZERO)
 2198 CONTINUE
 2199 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' MATRIX OF REAL PART OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)WRITE(11,1012)
 1012 FORMAT(' BECAUSE MOROUU'
     1,'=1, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      DO 101 J=1,KASI
      WRITE(11,2010)(DBLE(EIVECV(I,J)),I=1,KASSUM)
      WRITE(*,2010)(DBLE(EIVECV(I,J)),I=1,KASSUM)
  101 CONTINUE
      ENDIF
C
C**   ALWAYS SHIFT!:
C
      EIWER0=EIWERT(1)
      DO 4447 I=1,KASSUM
      EIWERT(I)=EIWERT(I)-EIWER0
 4447 CONTINUE
C
      IGR1=KASSUM
      IGRPL=IGR1+1
      DIFLOW=ZERO
      DO 4448 I=2,KASSUM
      EIWER1=DABS(EIWERT(I))
      IF(EIWER1.GT.PARWUC)THEN
      DIFLOW=EIWERT(I)
      IGR1=I-1
C**   IGR=I
      IGRPL=I+1
      GOTO 4449
      ENDIF
 4448 CONTINUE
 4449 CONTINUE
      IF(JAABLT.NE.0)IGR1=0
      IF(JAABLT.NE.0)DIFLOW=ZERO
C
      IGR2=KASSUM
      DO 4450 I=IGRPL,KASSUM
      EIWER1=DABS(EIWERT(I)-DIFLOW)
      IF(EIWER1.GT.PARWUC)THEN
      IGR2=I-1
      GOTO 4451
      ENDIF
 4450 CONTINUE
 4451 IGR2=IGR2-IGR1
      IF(JAABLT.NE.0)IGR2=0
C
      IF(KLICK3.NE.0.AND.MOROUU.EQ.0)GOTO 2128
      KLICK3=1
      WRITE(*,2217)KASSUM,EIWER0
 2217 FORMAT(
     1/,' MAX. 99 OF',I5,' EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',
     1D20.12,/,' ... BECOMES:')
      WRITE(11,2217)KASSUM,EIWER0
      KASI=KASSUM
      IF(MOROUU.LE.1.AND.KASI.GT.99)KASI=99
      IF(MOROUU.GT.1.AND.KASI.GT.99)WRITE(*,1090)KASSUM
      IF(MOROUU.GT.1.AND.KASI.GT.99)WRITE(11,1090)KASSUM
 1090 FORMAT(
     1' (BECAUSE MOROUU.GT.1, ALL',I5,' EIGENVALUES!)')
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
      IF(KASI.NE.KASSUM)THEN
      WRITE(*,2216)EIWERT(KASSUM),KASSUM
      WRITE(11,2216)EIWERT(KASSUM),KASSUM
 2216 FORMAT(' ... AND THE LAST  EIGENVALUE AND ITS No:',D12.4,I5)
      ENDIF
      WRITE(*,1091)
      WRITE(11,1091)
 1091 FORMAT(' END OF OUTPUT FROM SUBROUTINE TANABE!')
 2128 CONTINUE
C
CKR      IF(JATEST.NE.0.AND.KLICK4.EQ.0)THEN
CKR      IF(JANORS.NE.0)CALL RUSSEL(NREL,KLWERT,ND2002,DBLMAT,BLOMAT
CKR 8323 FORMAT(' "CONCORD": JANORS ALWAYS => NO(0)!')
C**   NO RETURN FROM RUSSEL! 
CKR      ENDIF
C
 9999 CONTINUE
C     BELONGS TO "NO NEW MATRICES (NEUEBS.EQ.0)"
C
      IF(MFPLUR.EQ.0.AND.(IOPT1.EQ.1.OR.IOPT1.EQ.2))THEN
      MFPLUR=1
      WRITE(11,6670)
      WRITE(*,6670)
 6670 FORMAT(/,
     1' If negative temp. occur: -2.0 is the 2nd, i.e. the 1st exited,',
     1/,' energy level (-1.0 must not be fitted - may be omitted).')
  557 IF(IOPT1.EQ.1)THEN
      WRITE(11,6671)
      WRITE(*,6671)
 6671 FORMAT(/,
     1' IOPT1=1: Energies without magnetic field (Hint: IOPT1=2',/,
     1' for either "with" or "without"!) - Put in any number in I1!')
      ELSE IF(IOPT1.EQ.2)THEN
      WRITE(11,667)
      WRITE(*,667)
  667 FORMAT(/,' IOPT1=2: If TEMPIK(NRTEMP).LT.ZERO occurs:',/,
     1' INPUT IN I1 YES(0)/NO: "MONOMER WITHOUT MAGN. FIELD"',
     1/,' (IF NO, ENERGIES ARE WITH MAGN. FIELD (Magn.FieldPLUS)',/
     1,' - NOT POSSIBLE FOR "COMB. MODEL II", STOP FOLLOWS LATER ON).',/
     1,' If TEMPIK(NRTEMP).LT.ZERO not occurs: Put in any number!',/)
      ENDIF !MFPLUS - Magn.FieldPLUS - TEXT
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3865)MFPLUS
      GOTO 4865
      ENDIF
 3865 READ(*,'(I1)',ERR=557,END=4576)MFPLUS
      LMN=1
 4865 CONTINUE
      IF(IOPT1.EQ.1)MFPLUS=0
      WRITE(7,2273)MFPLUS
 2273 FORMAT(I1,' =MFPLUS')
      WRITE(*,2732)MFPLUS
      WRITE(11,2732)MFPLUS
 2732 FORMAT(I2,' =MFPLUS!!!!!!!!!')
      ENDIF !MFPLUS - Magn.FieldPLUS - INPUT
C
      IF((IOPT1.EQ.2).AND.(TEMPIK(NRTEMP).LT.ZERO).AND.
     1(MFPLUS.EQ.0))THEN
      ITEMP=INT(DABS(TEMPIK(NRTEMP))+0.0000000001D0)
      FIWERT=EIWERT(ITEMP)
C     IF(.AND.MFPLUS.NE.0)FIWERT=EI2VAL(ITEMP)
      CHISTA(NRTEMP)=FIWERT
C      
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=FIWERT
      CHI(2,I,J)=CHIMEA(NRTEMP)
 4121 CONTINUE
 4122 CONTINUE
      RETURN
      ENDIF
C
      CALL REDUCT(NGROUP,
     1EIWERT,DIRECZ
     2,DIFLOW
     3,NRVAL,NEUEBS
     4,NREL,KLWERT
     2,EIVECV
     5,TEMPTH,JAABLT
     6,EIVSHT,ND2002
     7,MQUER,REDFAZ,KASSUM
     9,MSMLNW,NOFROW,NROFNR,BWYW,NRTEMP,LAUFNR,MFPLUS)
C
C**   RETURNS TO SUSC!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND TANABE
      END
      SUBROUTINE BLOCUT(ND2002,JDIM,PARR,KLWERT,NRELMX
C**   CALLED BY TANABE.
C     INSTEAD OF CALLING THE DIAGONALIZATION ROUTINE DIRECTLY,
C     SUBROUTINE BLOCUT MAY BE CALLED FIRSTLY TO BLOCK-OUT
C     THE MATRIX BEFORE DIAGONALIZING THE BLOCKS ONE AFTER ANOTHER!
C     IF THE ELEMENT OF THE MATRIX IS ABS. LOWER THEN PARR=1.0E-12,
C     II IS SET TO ZERO (PARR MAY BE CHANGED).
C
C     ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE FORM
C     "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY QUANTUM NUMBERS!
C     ALSO OCCUP. OF SPINORBITALS ARE CALCULATED IN SUBR. BLOCUT:
C     OCCUP. OF SPINORB., 1...TH EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP,
C     (ML=)3 WITH (SPIN)DOWN, ...
C
C     FOR D ORBITALS (ONLY) MAY BE CALCULATED, IN ADDITION:
C     OCCUP. OF SPINORB., 1...TH EIGENVEC., DX2-Y2-(SPIN)UP,
C     DX2-Y2-DOWN, DXZ-UP, DXZ-DOWN, DZ**2-UP, DZ**2-DOWN,
C     DYZ-UP, DYZ-DOWN, DXY-UP, DXY-DOWN.
C     INSTEAD, IF NGROUP.EQ.8(D3d).OR.NGROUP.EQ.22(cubII):
C     ORBITALS MAY BE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS
C     AS Z-AXIS:
C     EITHER: DX2-Y2-(SPIN)UP, DX2-Y2-DOWN, etc.
C     OR: OCCUP. OF SPINORB., 1...TH EIGENVEC., E.G. (ML=)2 WITH
C     (SPIN)UP, (ML=)2 WITH (SPIN)DOWN, ...
     1,MSMLNW,DBLMAT,LMAT,EIVECV,WERTZZ,MQUER,NGROUP
     2,MSML,NREL14,NREL
     3,JAABLT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      ALLOCATABLE BLOMAT(:,:)
     1,REIHNF(:),BLOCKD(:),BLOCKS(:),WNRW(:),SPAERL(:),BESETZ(:,:)
      COMMON/FLAG/LMN
  321 FORMAT(
     1' SUBROUTINE to BLOCk oUT, if possible, a hermitian matrix DBLMAT
     1',/,' with elements abs. greater than PARR and ZERO else.')
C     PARR is read in! Firstly a block corresponding
C     to a null-matrix is looked for, and if one has been found, NULSPA.EQV.
C     .TRUE. is set! BLOCKDimension(1) becomes the DIMENSION of a null-matrix
C     found.
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0,PI=3.1415926D0
     1,PIV=PI/4.0D0,HALFM=-0.5D0)
C
      COMPLEX*16
     1DBLMAT(ND2002,ND2002),EIVECV(ND2002,ND2002)
     2,CTEMP,BLOMAT
      DIMENSION
     1WERTZZ(ND2002),EIOUT(4)
     2,RBMM55(5,5),TRRL55(5,5)
      INTEGER IIEI(4),REIHNF,BLOCKD,BLOCKS
     1,MQUER(ND2002,3),NFOLGE(4),JJEI(4),MSMLNS(2,-3:3) !3=KLWER3
     2,MSML(ND2002,2,NREL14),MSMLNW(ND2002,2,-3:3)
     3,NDIGIT(10),MWM(8,2),MWMSML(252,8),MSMLN1(14)
      LOGICAL NULSPA
      COMPLEX*16 RAMM55(5),RGMM55(5),CPLXIJ(5,5),CPXROW(5),CEMPEI,COMSUM
C**   The matrix is mapped onto LOGICAL LMAT, and a element becomes
C     .TRUE., if the element of DBLMAT is abs. greater than PARR.
C     The columns which are done are noticed in SPA(lten)ERL(edigt).
C
C     The sequence of the columns of DBLMAT resulting after blocking
C     out is noticed in REIHNF(LAUFNR), and this is the first result
C     needed later on.
C
C**   BLOCKDimension(1:NBLOCK) contains the dimensions of the NBLOCK
C     different blocks. BLOCKSum(0)=0 and BLOCKSum(1:NBLOCK) is the sum
C     of these dimensions up to the block considered, i.e. BLOCKSum(1)=
C     BLOCKDimension(1) e.g. BLOCKDimension(1) becomes the DIMENSION of
C     the first non-null block, if a null-matrix has not been found.
C
C     The result is the following: BLOckMAT, which will be updated in each
C     DO LOOP 1...NBLOCK with help of REIHNF, contains one of the blocks
C     (excluded the case of a null-matrix) of DBLMAT, and BLOMAT will be
C     diagonalized instead of DBLMAT! There may be one to JDIM blocks:
C     One means "no blocking at all" and JDIM means JDIM 1*1-"blocks"!
C
      LOGICAL LMAT(ND2002,ND2002),SPAERL
C**   EQUIVALENCE (EIVECV,LMAT)
      SAVE
      DATA LAUF0,LAUF1,LAUF2,LAUF3,LAUF4,LAUF5,LAUF50,LAUF51,LAUF49,KLIK
     1/0,0,0,0,0,0,0,0,0,0/
      DATA MOROUZ,MOROUU,MOROUV,MOROUW,MOROUX,MOROUY/0,0,0,0,0,0/
C**   2nd PART OF UNITARY MATRIX R**(J)=R**(2): r**(J)(BETA) PART
C     = RBMM55(5,5) (B<=>BETA) FOR COS(BETA)=DSQRT(3)/3 (BETA MUST BE POS.!)
      DATA RBMM55/
C**   r**(J)(BETA):
     10.622008D0,-0.643951D0,0.408248D0,-0.172546D0,0.044658D0
     2,0.643951D0,0.122008D0,-0.577350D0,0.455342D0,-0.172546D0
     3,0.408248D0,0.577350D0,0.000000D0,-0.577350D0,0.408248D0
     4,0.172546D0,0.455342D0,0.577350D0,0.122008D0,-0.643951D0
     5,0.044658D0,0.172546D0,0.408248D0,0.643951D0,0.622008D0/
C**   COMLEX**16 RAMM55(5) (A<=>ALPHA) AND RGMM55(5) (G<=>GAMMA):
C     2 PARTS OF UNITARY MATRIX R**(J)=R**(2), ALPHA PART
C     (ALPHA=PI/4.), AND GAMMA PART (GAMMA=0.):
C     COMPLEX R**(2)(2,1) = RAMM55(2)*RBMM55(2,1)*RGMM55(1)
C**   TRRL55(5,5): MATRIX TO TRansform a basis of 5 complex basis orbitals to
C     a basis of 5 ReaL or purely imaginary basis orbitals (d orbitals)
C     (to be multiplied by SQRT(2) except TRRL55(3,3)):
      DATA TRRL55/
C**   AN UNITARY AND SYMMETRICAL MATRIX:
C     THE MATRIX AND THE RECIPROCAL MATRIX ARE IDENTICAL!
     1HALF,ZERO,ZERO,ZERO,HALF
     2,ZERO,HALFM,ZERO,HALF,ZERO
     3,ZERO,ZERO,ONE,ZERO,ZERO
     4,ZERO,HALF,ZERO,HALF,ZERO
     5,HALF,ZERO,ZERO,ZERO,HALFM/
      DATA SINB2Q,COSB2Q/0.21132487D0,0.78867513D0/
C
      IF(.NOT.ALLOCATED(BLOMAT))ALLOCATE (BLOMAT(ND2002,ND2002))
      IF(.NOT.ALLOCATED(REIHNF))ALLOCATE (REIHNF(ND2002))
      IF(.NOT.ALLOCATED(BLOCKD))ALLOCATE (BLOCKD(ND2002))
      IF(.NOT.ALLOCATED(BLOCKS))ALLOCATE (BLOCKS(0:ND2002))
      IF(.NOT.ALLOCATED(WNRW))ALLOCATE (WNRW(ND2002))
      IF(.NOT.ALLOCATED(SPAERL))ALLOCATE (SPAERL(ND2002))
      IF(.NOT.ALLOCATED(BESETZ))ALLOCATE (BESETZ(NREL14,10)) !10=I10
C
      IF(JAABLT.NE.0)GOTO 4790
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,20)
C**   KASSUM=JDIM
      IF(LAUF1.EQ.0)THEN
      LAUF1=1
      IF(MORTEX.GT.0)THEN
      WRITE(*,321)
      WRITE(11,321)
C**   FORMAT SEE ABOVE!
      ENDIF
      WURZ2=DSQRT(TWO)
      DO 8922 J=1,5
      DO 8921 I=1,5
      TRRL55(I,J)=TRRL55(I,J)*WURZ2
      CPLXIJ(I,J)=DCMPLX(TRRL55(I,J),ZERO)
 8921 CONTINUE
 8922 CONTINUE
      TRRL55(3,3)=ONE
      CPLXIJ(3,3)=DCMPLX(ONE,ZERO)
C
      WRITE(11,1)PARR
 8229 WRITE(*,1)PARR
    1 FORMAT(' PARR=',D10.2
     1,/,' PARR MAY BE CHANGED: INPUT IN D6.1 (.LT.0.: => 0.)')
      IF(LMN.EQ.0)THEN
      READ(77,'(D6.1)',ERR=5588,END=3890)PAR
      GOTO 4890
      ENDIF
 3890 READ(*,'(D6.1)',ERR=8229,END=4576)PAR
      LMN=1
 4890 IF(PAR.NE.ZERO)PARR=PAR
      IF(PARR.LT.ZERO)PARR=ZERO
      WRITE(*,61)PARR
      WRITE(11,61)PARR
      WRITE(7,2250)PARR
 2250 FORMAT(D6.1,' =PARR(in BLOCUT)')
   61 FORMAT(' IN BLOCUT: PARR-NEW=',D6.1,'!!!!!!!!!')
      ENDIF !IF(LAUF1.EQ.0)THEN
 4790 CONTINUE
C
      NULSPA=.FALSE.
      LAUFNR=0
      DO 20 I=1,ND2002
      BLOCKD(I)=0
   20 CONTINUE
      DO 12 J=1,JDIM
      SPAERL(J)=.TRUE.
      DO 11 I=1,JDIM
      LMAT(I,J)=.FALSE.
      IF(CDABS(DBLMAT(I,J)).GE.PARR)THEN
      LMAT(I,J)=.TRUE.
      SPAERL(J)=.FALSE.
      ENDIF
   11 CONTINUE
      IF(SPAERL(J).EQV..TRUE.)THEN
      LAUFNR=LAUFNR+1
      REIHNF(LAUFNR)=J
      BLOCKD(1)=LAUFNR
      ENDIF
   12 CONTINUE
      IF(BLOCKD(1).GT.0)NULSPA=.TRUE.
C
      IF(JAABLT.NE.0)GOTO 3791
      IF(MOROUT.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,128)
 8230 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0 OR =1!',/
     2,' ... OR =8 FOR "NO MORE OUTPUT FURTHERMORE HERE IN BLOCUT"!',/,
     3' (=0 FOR OUTPUT AT THE END OF BLOCUT ONLY: OCCUP.OF SPINORB.)',/,
     4' (=8 CANCELS OUTPUT AT THE END OF BLOCUT AND IN FURTHER ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3891)MOROUZ
      GOTO 4891
      ENDIF
 3891 READ(*,'(I1)',ERR=8230,END=4576)MOROUZ
      LMN=1
 4891 WRITE(*,2215)MOROUZ
      WRITE(11,2215)MOROUZ
      WRITE(7,2251)MOROUZ
 2251 FORMAT(I1,' =MOROUZ IN BLOCUT/0')
 2215 FORMAT(I2,' =MOROUZ IN BLOCUT/0!!!!!!!!!')
      ENDIF
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1288)
 8203 WRITE(*,1288)
 1288 FORMAT(
     1' INPUT 0, 1, 2 OR 3: VALID (ONLY) FOR THE FIRST PART OF BLOCUT!',
     2/,' (I.E. LOGICAL LMAT AND "REIHNF"=ORDERING OF COLUMNS OF LMAT)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3892)MOROUU
      GOTO 4892
      ENDIF
 3892 READ(*,'(I1)',ERR=8203,END=4576)MOROUU
      LMN=1
 4892 WRITE(*,2225)MOROUU
      WRITE(11,2225)MOROUU
      WRITE(7,2252)MOROUU
 2252 FORMAT(I1,' =MOROUU IN BLOCUT/1')
 2225 FORMAT(I2,' =MOROUU IN BLOCUT/1!!!!!!!!!')
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,129)
      WRITE(11,129)
  129 FORMAT(' OUTPUT OF (LMAT(I,J),J=1,JDIM), I=1 FOR MOROUT=1 OR =2')
      ENDIF
      IF(MOROUU.EQ.1.OR.MOROUU.EQ.2)THEN
      WRITE(*,'(1X,81L1)')(LMAT(1,J),J=1,JDIM)
      WRITE(11,'(1X,81L1)')(LMAT(1,J),J=1,JDIM)
      ELSE IF(MOROUU.GT.2)THEN
      DO 377 I=1,JDIM
      WRITE(*,'(1X,81L1)')(LMAT(I,J),J=1,JDIM)
      WRITE(11,'(1X,81L1)')(LMAT(I,J),J=1,JDIM)
  377 CONTINUE
      ENDIF !OF MORE OUTPUT
 3791 CONTINUE
C
      DO 1112 I=1,JDIM
      LMAT(I,I)=.TRUE.
C**   The statement before is absolutely necessary!
 1112 CONTINUE
C
C**   Now starting with first or second block, respectively!:
      NBLOCK=0
      IF(NULSPA.EQV..TRUE.)NBLOCK=1
C**   NBLOCK=NBLOCK+1 in the DO-LOOP!
C**   There is a maximum of JDIM blocks, and these would be 1*1-"blocks"!
      DO 123 J=1,JDIM
      IF(SPAERL(J).EQV..TRUE.)GOTO 123
      NBLOCK=NBLOCK+1
      LAUFNR=LAUFNR+1
      SPAERL(J)=.TRUE.
      REIHNF(LAUFNR)=J
      BLOCKD(NBLOCK)=1
C**   Now an infinite loop ("122 CONTINUE"), until ISTRND.GT.JDIM:
      ISTRND=0
      JJ=J
  122 CONTINUE
      JJ=JJ+1
      IF(JJ.GT.JDIM)JJ=JJ-JDIM
      ISTRND=ISTRND+1
      IF(ISTRND.GT.JDIM)GOTO 123
C**   ISTRND.GT.JDIM is now true!
      IF(JJ.EQ.J)GOTO 122
      IF(SPAERL(JJ).EQV..TRUE.)GOTO 122
C**   Now the JJth column is compared with the Jth column:
      DO 121 I=1,JDIM
      IF((LMAT(I,JJ).EQV..TRUE.).AND.(LMAT(I,J).EQV..TRUE.))THEN
C**   Updating now!:
      DO 120 II=1,JDIM
      IF(LMAT(II,JJ).EQV..TRUE.)LMAT(II,J)=.TRUE.
  120 CONTINUE
      SPAERL(JJ)=.TRUE.
      ISTRND=0
      LAUFNR=LAUFNR+1
      REIHNF(LAUFNR)=JJ
      BLOCKD(NBLOCK)=BLOCKD(NBLOCK)+1
      GOTO 122
      ENDIF
  121 CONTINUE
      GOTO 122
  123 CONTINUE
C
      BLOCKS(0)=0
      BLOCKS(1)=BLOCKD(1)
      DO 1982 I=2,NBLOCK
C      IM1=I-1
      BLOCKS(I)=BLOCKS(I-1)+BLOCKD(I)
 1982 CONTINUE
C
      IF(JAABLT.NE.0)GOTO 4791
      IF(MOROUU.GE.1)THEN
      WRITE(*,130)
      WRITE(11,130)
  130 FORMAT(' OUTPUT OF (REIHNF(J),J=1,JDIM):')
      WRITE(*,'(1X,20I4)')(REIHNF(J),J=1,JDIM)
      WRITE(11,'(1X,20I4)')(REIHNF(J),J=1,JDIM)
      ENDIF
C
C**   NOW OUTPUT (ALWAYS, BUT ONLY FIRST RUN):
C
      IF(LAUF0.EQ.0.AND.MORTEX.GE.0)THEN
      LAUF0=1
      WRITE(*,333)NULSPA
      WRITE(11,333)NULSPA
  333 FORMAT(' NULL-ROW/ -COLUMN IS THERE (YES=T/NO=F):',L3)
      WRITE(*,338)NBLOCK
      WRITE(11,338)NBLOCK
  338 FORMAT(' NUMBER OF BLOCKS AND DIMENSIONS OF THESE=',I8)
C
      WRITE(*,'(10I8)')(BLOCKD(N),N=1,NBLOCK)
      WRITE(11,'(10I8)')(BLOCKD(N),N=1,NBLOCK)
      ENDIF ! IF(LAUF0.EQ.0.AND...
 4791 CONTINUE
C
C**   NOW FIRSTLY BLOMAT INCL. OUTPUT (OUTPUT ONLY, IF MOROUT.NE.0
C     AND MOROUZ.NE.0.AND.MOROUZ.NE.8!):
C
      IEINZW=1
      IF(NULSPA.EQV..TRUE.)IEINZW=2
C**   LOCKDN=BLOCKD(1)
C
C**   BREAK OF ALL IF'S!
C
      DO 99 J=1,JDIM
      DO 88 I=1,JDIM
      BLOMAT(I,J)=DBLMAT(REIHNF(I),REIHNF(J))
   88 CONTINUE
   99 CONTINUE
C
      IF(JAABLT.NE.0)GOTO 3792
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      DO 1110 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      IF(N.LE.5)THEN
      WRITE(11,127)N
 8200 WRITE(*,127)N
  127 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0, 1 OR 2!'
     2,/,' VALID FOR THE SECOND PART OF BLOCUT, I.E. BLOMAT IN DO 1110'
     3,' N=',/,' IEINZW,NBLOCK WITH N =',I3,' (OR N>5 TOO, IF N=5)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3893)MOROUV
      GOTO 4893
      ENDIF
 3893 READ(*,'(I1)',ERR=8200,END=4576)MOROUV
      LMN=1
 4893 WRITE(*,2235)MOROUV
      WRITE(11,2235)MOROUV
      WRITE(7,2253)MOROUV
 2253 FORMAT(I1,' =MOROUV IN BLOCUT/2')
 2235 FORMAT(I2,' =MOROUV IN BLOCUT/2!!!!!!!!!')
      ENDIF
      IF(MOROUV.GE.1)THEN
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,6146)N
      WRITE(11,6146)N
 6146 FORMAT(' NOW FOLLOWING: (DBLE(BLOMAT(ISTART,J)),J=ISTART,IENDE): '
     1,'(N=',I5,')')
      WRITE(*,'(6E14.6)')(DBLE(BLOMAT(ISTART,J)),J=ISTART,IENDE)
      WRITE(11,'(6E14.6)')(DBLE(BLOMAT(ISTART,J)),J=ISTART,IENDE)
      IF(MOROUV.GE.2)THEN
      WRITE(*,6145)N
      WRITE(11,6145)N
 6145 FORMAT(' ... AND (DBLE(BLOMAT(ISTART+1:IENDE,J)),J=ISTART,IENDE):'
     1,' (N=',I5,')')
      DO 177 I=ISTART+1,IENDE
      WRITE(*,'(6E14.6)')(DBLE(BLOMAT(I,J)),J=ISTART,IENDE)
      WRITE(11,'(6E14.6)')(DBLE(BLOMAT(I,J)),J=ISTART,IENDE)
  177 CONTINUE
      ENDIF
      ENDIF
 1110 CONTINUE
      ENDIF !OF MOROUV
 3792 CONTINUE
C
C**   BREAK OF ALL IF'S!
C**   NO DIAGONALIZATION FOR N=1, IF IEINZW=2!:
C
      IF(IEINZW.EQ.2)THEN
      IENDE=BLOCKD(1)
      DO 1999 J=1,IENDE
      WERTZZ(J)=ZERO
      DO 1998 I=1,IENDE
      BLOMAT(I,J)=DCMPLX(ZERO,ZERO)
 1998 CONTINUE
      BLOMAT(J,J)=DCMPLX(ONE,ZERO)
 1999 CONTINUE
      ENDIF
C
      IF(JAABLT.NE.0)GOTO 3793
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1899)
 1888 WRITE(*,1899)
 1899 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0, 1, 2 OR 3!'
     2,/,' VALID FOR THE THIRD PART OF BLOCUT, I.E. DO 1101 N=',/
     3,' IEINZW,NBLOCK WITH RESULTS OF DIAGON. INCL. SPINORB.!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3894)MOROUW
      GOTO 4894
      ENDIF
 3894 READ(*,'(I1)',ERR=1888,END=4576)MOROUW
      LMN=1
 4894 WRITE(*,2245)MOROUW
      WRITE(11,2245)MOROUW
      WRITE(7,2254)MOROUW
 2254 FORMAT(I1,' =MOROUW IN BLOCUT/3')
 2245 FORMAT(I2,' =MOROUW IN BLOCUT/3!!!!!!!!!')
      ENDIF !OF MOROUW
 3793 CONTINUE
C
C**   NOW FOR LOWER STORAGE MODE:
      DO 111 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      DO 1201 J=ISTART,IENDE
      JJ=J-ISTART+1
      DO 1200 I=ISTART,IENDE
      II=I-ISTART+1
      DBLMAT(II,JJ)=BLOMAT(I,J)
 1200 CONTINUE
 1201 CONTINUE
C
      CALL ZHPEVK(1,DBLMAT,WNRW,EIVECV,ND2002,LOCKDN)
C
C**   NOW TRANSFER OF EIVECV TO BLOMAT AND OF WNRW TO WERTZZ!:
      DO 999 J=ISTART,IENDE
      JJ=J-ISTART+1
      WERTZZ(J)=WNRW(JJ)
  999 CONTINUE
      DO 887 J=ISTART,IENDE
      JJ=J-ISTART+1
      DO 888 I=ISTART,IENDE
      II=I-ISTART+1
      BLOMAT(I,J)=EIVECV(II,JJ)
  888 CONTINUE
  887 CONTINUE
C
  111 CONTINUE
C
C**   ORDERING AND TRANSFER OF BLOMAT TO EIVECV!:
      DO 7034 K=1,JDIM
      DO 705 J=1,JDIM
      JJ=REIHNF(J)
      EIVECV(JJ,K)=BLOMAT(J,K)
  705 CONTINUE
 7034 CONTINUE
C
      IF(JAABLT.NE.0)GOTO 4792
      IF(MOROUW.EQ.0)GOTO 897
      DO 1101 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      WRITE(*,1648)N
      WRITE(11,1648)N
 1648 FORMAT(' THE EIGENVALUES OF BLOCK No.',I5,' ARE:')
      WRITE(*,6148)(WERTZZ(J),J=ISTART,IENDE)
      WRITE(11,6148)(WERTZZ(J),J=ISTART,IENDE)
 6148 FORMAT(/,3D20.12)
      WRITE(*,6147)
      WRITE(11,6147)
 6147 FORMAT(/,' N',
     1'OW FOLLOW THE FIRST EIGENVECTOR(REAL PART) AND REIHNF AND 2*MJ:')
      LIMITI=ISTART
      IF(MOROUW.GT.2)THEN
      LIMITI=IENDE
      WRITE(*,1649)
      WRITE(11,1649)
 1649 FORMAT(' ... AND, BECAUSE MOROUT > 2, ALL OTHER EIGENVECTORS!')
      ENDIF
      I1=ISTART-1
      DO 189 J=ISTART,LIMITI
      WRITE(*,6149)(DBLE(EIVECV(REIHNF(I+I1),J))
     1,REIHNF(I+I1),MQUER(REIHNF(I+I1),3),I=1,LOCKDN)
      WRITE(11,6149)(DBLE(EIVECV(REIHNF(I+I1),J))
     1,REIHNF(I+I1),MQUER(REIHNF(I+I1),3),I=1,LOCKDN)
 6149 FORMAT(4(E12.4,I5,I3))
  189 CONTINUE
C
      IF(LAUF2.EQ.0)THEN
      LAUF2=1
      LIMIT=10
      GRENZE=0.1D0
      WRITE(11,2193)LIMIT,GRENZE
 8231 WRITE(*,2193)LIMIT,GRENZE
 2193 FORMAT(' INPUT IN I4,F10.4 LIMITS FOR OUTPUT OF EIGENVECTORS;'
     1,/,' < ZERO => 0 AND 0.0; ZERO =>',I5,F4.1,/,' (I.E.: MAX.'
     2,' NUMBER OF EIGENVEC. TO BE TAKEN INTO ACCOUNT AND LOWEST',/
     3,' (ABS.) VALUE OF THESE EIGENVECTORS TO BE TAKEN INTO ACCOUNT)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,F10.4)',ERR=5588,END=3895)LIMITI,GRENZD
      GOTO 4895
      ENDIF
 3895 READ(*,'(I4,F10.4)',ERR=8231,END=4576)LIMITI,GRENZD
      LMN=1
 4895 WRITE(*,2195)LIMITI,GRENZD
      WRITE(11,2195)LIMITI,GRENZD
 2195 FORMAT(I4,F10.4,' =LIMITI,GRENZD!!!!!!!!!')
      WRITE(7,2194)LIMITI,GRENZD
 2194 FORMAT(I4,F10.4,' =LIMITI,GRENZD')
      IF(LIMITI.NE.0)LIMIT=LIMITI
      IF(LIMIT.LT.0)LIMIT=0
      IF(GRENZD.NE.ZERO)GRENZE=GRENZD
      ENDIF ! IF(LAUF2.EQ.0)THEN
      LIMITI=LIMIT
      IF(LIMITI.GT.LOCKDN)LIMITI=LOCKDN
      WRITE(*,1896)LIMITI,GRENZE
      WRITE(11,1896)LIMITI,GRENZE
 1896 FORMAT(' MAX. No. OF EIGENVEC.(REAL PART) AND LIMIT=',I5,F10.4)
      LIMITI=LIMITI+ISTART-1
C**   I1=ISTART-1
      DO 1898 J=ISTART,LIMITI
      WRITE(*,6174)J
      WRITE(11,6174)J
 6174 FORMAT(
     1' NOW FOLLOW (PART OF) THE',I5,'TH EIGENV. AND REIHNF AND 2*MJ:')
C
      II=0
      DO 1897 IL=1,LOCKDN
C
      IF(CDABS(EIVECV(REIHNF(IL+I1),J)).GE.GRENZE)THEN
      II=II+1
      NFOLGE(II)=IL
      IF(II.EQ.4)THEN
      WRITE(*,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,4)
      WRITE(11,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,4)
      II=0
      ENDIF
      ENDIF
C
 1897 CONTINUE
      IF(II.EQ.0)THEN
C**   A REST OF A ROW IS NOT FOLLOWING: THEREFORE AN EMPTY ROW!
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C**   IF II.NE.0, THERE IS A REST OF A ROW, WHICH FOLLOWS NOW!:
      WRITE(*,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,II)
      WRITE(11,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,II)
C**   END OF OUTPUT OF (PART OF) EIGENVECTOR J.
C
C**   NOW COMPUT. OF OCC. OF SPINORB.:
C
      DO 2189 NR=1,NRELMX
      BESETZ(NR,1)=ZERO
 2189 CONTINUE
C
      DO 2897 IL=1,LOCKDN
      EIVECQ=CDABS(EIVECV(REIHNF(IL+I1),J))**2
      DO 2119 NR=1,NREL
      ML=MSML(REIHNF(IL+I1),1,NR)
      ML=(ML+KLWERT)*2
      MS=MSML(REIHNF(IL+I1),2,NR)
      IF(MS.EQ.1)ML=ML+1
      ML=NRELMX-ML
      BESETZ(ML,1)=BESETZ(ML,1)+EIVECQ
 2119 CONTINUE
 2897 CONTINUE
C
      IF(LAUF4.EQ.0)THEN
      LAUF4=1
      WRITE(*,2281)
      WRITE(11,2281)
 2281 FORMAT(/,' OCCUP. OF SPIN'
     1,'ORB. OF 1ST EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP, 3 DOWN, ...:')
      ENDIF !IF(LAUF4.EQ.0)THEN
      WRITE(*,2011)(BESETZ(II,1),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,1),II=1,NRELMX)
C
 1898 CONTINUE
C
 1101 CONTINUE
C**   1101 CONTINUE BEFORE <=> DO 1101 N=IEINZW,NBLOCK ...
C**   ... AND 897 CONTINUE FOLLOWING <=> IF(MOROUW.EQ.0)GOTO 897
C     (BOTH APPROX. 150 LINES ABOVE!)
  897 CONTINUE
 4792 CONTINUE
C
      IF(JAABLT.NE.0)GOTO 3794
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1280)
 1279 WRITE(*,1280)
 1280 FORMAT(
     1' MOROUT.NE.0: INPUT IN 2I1 MOROUT-HERE-IN-BLOCUT; =0, 1 OR 2!'
     2,/,' VALID FOR THE 4TH AND 5TH PART OF BLOCUT, I.E. ALL VALUES/'
     3,/,' EIGENVEC.(REAL PART) NOT ORDERED AND ORDERED RESP.!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3896)MOROUX,MOROUY
      GOTO 4896
      ENDIF
 3896 READ(*,'(2I1)',ERR=1279,END=4576)MOROUX,MOROUY
      LMN=1
 4896 WRITE(*,2265)MOROUX,MOROUY
      WRITE(11,2265)MOROUX,MOROUY
      WRITE(7,2256)MOROUX,MOROUY
 2256 FORMAT(2I1,' =MOROUX,MOROUY IN BLOCUT/4/5')
 2265 FORMAT(2I2,' =MOROUX,MOROUY IN BLOCUT/4/5!!!!!!!!!')
      ENDIF !OF MOROUX,MOROUY
 3794 CONTINUE
C
      IF(JAABLT.NE.0)GOTO 4793
      IF(MOROUX.GE.1)THEN
      WRITE(*,613)
      WRITE(11,613)
  613 FORMAT(/,' NOW (WERTZZ(J),J=1,JDIM), I.E. ALL EIGENVALUES:')
      WRITE(*,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      WRITE(11,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      IF(MOROUX.GE.2)THEN
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,1650)
      WRITE(11,1650)
 1650 FORMAT(' ... AND, BECAUSE MOROUT >1, ALL EIGENVECTORS(REAL PART),'
     1,/,' I.E. COLUMNS, GIVEN HERE AS ROWS:')
      DO 188 J=1,JDIM
      WRITE(*,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
      WRITE(11,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
  188 CONTINUE
      ENDIF
      ENDIF
 4793 CONTINUE
C
C     ORDERING OF ENERGIES AND EIGENVECTORS:
C      JDIMM1=JDIM-1
      DO 7022 I=1,JDIM-1
C      IP1=I+1
      TEMP=WERTZZ(I)
      JTEMP=I
      DO 7033 J=I+1,JDIM
      IF(WERTZZ(J).GE.TEMP)GOTO 7033
      TEMP=WERTZZ(J)
      JTEMP=J
 7033 CONTINUE
      IF(JTEMP.NE.I)THEN
      WERTZZ(JTEMP)=WERTZZ(I)
      WERTZZ(I)=TEMP
      DO 704 K=1,JDIM
      CTEMP=EIVECV(K,JTEMP)
      EIVECV(K,JTEMP)=EIVECV(K,I)
      EIVECV(K,I)=CTEMP
  704 CONTINUE
      ENDIF
 7022 CONTINUE
C
      IF(JAABLT.NE.0)GOTO 4794
      IF(MOROUY.GE.1)THEN
      WRITE(*,6133)
      WRITE(11,6133)
 6133 FORMAT(/,' NOW (WERTZZ(J),J=1,JDIM) (CONSECUTIVELY ORDERED):')
      WRITE(*,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      WRITE(11,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      JDIM12=1
      IF(MOROUY.GE.2)JDIM12=JDIM
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,1878)
      WRITE(11,1878)
 1878 FORMAT(
     1' EIGENVECTOR(S), I.E. COLUMN(S), GIVEN AS ROW(S), ALSO ORDERED:')
      DO 187 J=1,JDIM12
      WRITE(*,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
      WRITE(11,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
  187 CONTINUE
      ENDIF
C
      IF(LAUF3.NE.0.OR.MOROUT.EQ.0.OR.MOROUZ.EQ.8)GOTO 781
      IF(LAUF3.EQ.0)THEN
      LIMIT=10
      GRENZE=0.1D0
      WRITE(11,2193)LIMIT,GRENZE
 8223 WRITE(*,2193)LIMIT,GRENZE
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,F10.4)',ERR=5588,END=3897)LIMITI,GRENZD
      GOTO 4897
      ENDIF
 3897 READ(*,'(I4,F10.4)',ERR=8223,END=4576)LIMITI,GRENZD
      LMN=1
 4897 WRITE(*,2195)LIMITI,GRENZD
      WRITE(11,2195)LIMITI,GRENZD
      WRITE(7,2194)LIMITI,GRENZD
      IF(LIMITI.NE.0)LIMIT=LIMITI
      IF(LIMIT.LT.0)LIMIT=0
      IF(LIMIT.GT.JDIM)LIMIT=JDIM
      IF(GRENZD.NE.ZERO)GRENZE=GRENZD
      ENDIF !IF(LAUF3.EQ.0)THEN
      LAUF3=1
C
      IIJJ=0
      IJ=0
      WRITE(*,2120)GRENZE,LIMIT
      WRITE(11,2120)GRENZE,LIMIT
 2120 FORMAT(' I, J, '
     1,'EIVEC(I,J) FOR ABS(EIVEC(I,J)).GE.',D8.1,' UNTIL LIMIT=',I9,/,' 
     2(PART OF) THE FIRST ROW CONTAINS (PART OF) THE FIRST EIGENVECTOR')
C
      DO 2192 J=1,LIMIT
      DO 2191 I=1,JDIM
C
      IF(CDABS(EIVECV(I,J)).GE.GRENZE)THEN
      IIJJ=IIJJ+1
      IJ=IJ+1
      EIOUT(IJ)=EIVECV(I,J)
      IIEI(IJ)=I
      JJEI(IJ)=J
C
      IF(IJ.EQ.4)THEN
      WRITE(11,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
      IF(IIJJ.LE.24)
     1WRITE(*,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
 2122 FORMAT(4(2I4,D12.4))
      IJ=0
      ENDIF
      ENDIF
C
 2191 CONTINUE
 2192 CONTINUE
C
      WRITE(11,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
      IF(IIJJ.LE.24)
     1WRITE(*,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
C
      WRITE(*,2121)IIJJ,IIJJ
      WRITE(11,2121)IIJJ,IIJJ
 2121 FORMAT(
     1' No. OF VALUES=',I9,'; ON FILE11:',I9,'; MAX. 24 ON TERMINAL')
C
C**   NOW COMPUT. OF OCC. OF SPINORB.:
      IJ10=0
      DO 3192 J=1,LIMIT
C**   IJ10=0 STATEMENT BELOW, TOO!
      IJ10=IJ10+1
      DO 2190 NR=1,NRELMX
      BESETZ(NR,IJ10)=ZERO
 2190 CONTINUE
      DO 3191 I=1,JDIM
      EIVECQ=DCONJG(EIVECV(I,J))*EIVECV(I,J)
      DO 2109 NR=1,NREL
      ML=MSML(I,1,NR)
      ML=(ML+KLWERT)*2
      MS=MSML(I,2,NR)
      IF(MS.EQ.1)ML=ML+1
      ML=NRELMX-ML
      BESETZ(ML,IJ10)=BESETZ(ML,IJ10)+EIVECQ
 2109 CONTINUE
 3191 CONTINUE
C
      IF(LAUF5.EQ.0)THEN
      LAUF5=1
      WRITE(*,2218)
      WRITE(11,2218)
 2218 FORMAT(/,' OCCUP. OF SPIN'
     1,'ORB., 1...TH EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP, 3 DOWN, ...')
      ENDIF !IF(LAUF5.EQ.0)THEN
      IF(IJ10.EQ.10)THEN
      DO 2219 JJ=1,10
      WRITE(*,2011)(BESETZ(II,JJ),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,JJ),II=1,NRELMX)
 2219 CONTINUE
 2011 FORMAT(10F7.3)
      IJ10=0
      ENDIF
C
 3192 CONTINUE
C
      DO 2220 J=1,IJ10
      WRITE(*,2011)(BESETZ(I,J),I=1,NRELMX)
      WRITE(11,2011)(BESETZ(I,J),I=1,NRELMX)
 2220 CONTINUE
C
      IF(KLWERT.NE.2)GOTO 3920
C
      IF(LAUF5.EQ.1)THEN
      LAUF5=2
      WRITE(*,2182)
      WRITE(11,2182)
 2182 FORMAT(/,' D ORBITALS ONLY:',/,' OCCUP. OF '
     1,'SPINORB., 1...TH EIGENVEC., DX2-Y2-(SPIN)UP, DX2-Y2-DOWN,',/
     2,' DXZ-UP, DXZ-DOWN, DZ**2-UP, DZ**2-DOWN, DYZ-UP, DYZ-DOWN, DXY-'
     3,'UP, DXY-DOWN')
      IF(NGROUP.NE.8.AND.NGROUP.NE.22)THEN
      WRITE(11,3917)
 3916 WRITE(*,3917)
 3917 FORMAT(' D ORBITALS .AND. NGROUP.NE.8.AND.NGROUP.NE.22:',/,
     1' NO TRANSF. CORRESP. TO [111]-AXIS POSS.: INPUT 0 OR 1 IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3898)JANO
      GOTO 4898
      ENDIF
 3898 READ(*,'(I1)',ERR=3916,END=4576)JANO
      LMN=1
 4898 JANO=1
      WRITE(*,2820)JANO
      WRITE(11,2820)JANO
      WRITE(7,2821)JANO
      ENDIF
      ENDIF !IF(LAUF5.EQ.1)THEN
      IF(NGROUP.NE.8.AND.NGROUP.NE.22)GOTO 3919
      IF(LAUF50.EQ.0)THEN
      LAUF50=1
      WRITE(11,3918)
 2822 WRITE(*,3918)
 3918 FORMAT(' D ORBITALS .AND. NGROUP.EQ.8.OR.NGROUP.EQ.22:',/,
     1' ORBITALS ARE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS'
     2,' AS Z-AXIS:',/,' PUT IN YES(0)/NO (IN I1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3899)JANO
      GOTO 4899
      ENDIF
 3899 READ(*,'(I1)',ERR=2822,END=4576)JANO
      LMN=1
 4899 WRITE(*,2820)JANO
      WRITE(11,2820)JANO
 2820 FORMAT(I2,' =JANO "TRANSF." IN BLOCUT!!!!!!!!!')
      WRITE(7,2821)JANO
 2821 FORMAT(I1,' =TRANSF. IN BLOCUT')
C
      IF(JANO.NE.0)GOTO 3919
      II=0
C**   ALL M RESP. M':
      DO 3211 I=2,-2,-1
      II=II+1
C**   e**(-i*PHI) WITH PHI=A(LPHA) OR =G(AMMA):
      RAMM55(II)=DCMPLX(COS(PIV*I),-SIN(PIV*I))
      RGMM55(II)=DCMPLX(ONE,ZERO)
 3211 CONTINUE
      ENDIF !IF(LAUF50.EQ.0)THEN
      IF(JANO.NE.0)GOTO 3919
C
C**   CPLXIJ IS COMPLEX, BUT IN PRINCIPLE UP TO NOW THE SAME AS REAL TRRL55! NOW
C     NEW CPLXIJ (CPLXIJ NEEDED FOR "TRANSFORMATION" INTO CUB(II)/D3d):
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7821)
      WRITE(11,7821)
 7821 FORMAT(' ALPHA PART:')
      WRITE(*,5828)(RAMM55(JJ),JJ=1,5)
      WRITE(11,5828)(RAMM55(JJ),JJ=1,5)
      WRITE(*,7822)
      WRITE(11,7822)
 7822 FORMAT(' GAMMA PART:')
      WRITE(*,5828)(RGMM55(JJ),JJ=1,5)
      WRITE(11,5828)(RGMM55(JJ),JJ=1,5)
      WRITE(*,7823)
      WRITE(11,7823)
 7823 FORMAT(' BETA PART MATRIX:')
      DO 5843 K=1,5
      WRITE(*,5882)(RBMM55(K,JJ),JJ=1,5)
      WRITE(11,5882)(RBMM55(K,JJ),JJ=1,5)
 5843 CONTINUE
C5882 FORMAT(10D14.6)
      ENDIF
      DO 8924 J=1,5
      DO 8923 I=1,5
C**   COMPLEX R**(2)(2,1) = RAMM55(2)*RBMM55(2,1)*RGMM55(1):
      CPLXIJ(I,J)=RAMM55(I)*DCMPLX(RBMM55(I,J),ZERO)*RGMM55(J)
 8923 CONTINUE
 8924 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7824)
      WRITE(11,7824)
 7824 FORMAT(' COMPLEX MATRIX RESULTING FROM ALPHA, BETA AND GAMMA:')
      DO 5824 K=1,5
      WRITE(*,5828)(CPLXIJ(K,JJ),JJ=1,5)
      WRITE(11,5828)(CPLXIJ(K,JJ),JJ=1,5)
 5824 CONTINUE
C5828 FORMAT(10D14.6)
      ENDIF
C
      IF(LAUF49.EQ.0)THEN
      LAUF49=1
      WRITE(11,3981)
 2823 WRITE(*,3981)
 3981 FORMAT(' D ORBITALS .AND. NGROUP.EQ.8.OR.NGROUP.EQ.22:',/,
     1' ORBITALS ARE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS'
     2,' AS Z-AXIS,',/,' BUT NOT TO REAL OR PURELY IMAGINARY'
     3,' BASIS ORBITALS: PUT IN YES/NO(0) (IN I1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3400)JANOO
      GOTO 4900
      ENDIF
 3400 READ(*,'(I1)',ERR=2823,END=4576)JANOO
      LMN=1
 4900 WRITE(*,2820)JANOO
      WRITE(11,2820)JANOO
C2820 FORMAT(I2,' =JANO "TRANSF." IN BLOCUT!!!!!!!!!')
      WRITE(7,2821)JANOO
C2821 FORMAT(I1,' =TRANSF. IN BLOCUT')
      IF(JANOO.NE.0)THEN
      WRITE(*,2812)
      WRITE(11,2812)
 2812 FORMAT(' OUTPUT CORRESP. TO THE FOLLOWING HEADER WAS SELECTED:')
      WRITE(*,2218)
      WRITE(11,2218)
      ENDIF
      ENDIF !IF(LAUF49.EQ.0)THEN
C
      IF(JANOO.NE.0)GOTO 3991
C**   NOW THE FINAL CPLXIJ NEEDED FOR "TRANSFORMATION" IN CUB(II)/D3d!
C     (MULTIPL. OF MATRICES TRRL55 AND CPLXIJ (IN THIS ORDER) CORRESP. TO
C     TRANSFORM. AND ROTATION, RESPECTIVELY (BUT TO BE PERFORMED FROM
C     RIGHT TO LEFT!) TO COEFF. OF REAL OR PURELY IMAGINARY BASIS ORBITALS):
C
      DO 2446 K=1,5
      DO 5446 J=1,5
      CPXROW(J)=DCMPLX(ZERO,ZERO)
      DO 5442 I=1,5
      CPXROW(J)=CPXROW(J)+DCMPLX(TRRL55(J,I),ZERO)*CPLXIJ(I,K)
 5442 CONTINUE
 5446 CONTINUE
      DO 1446 JJ=1,5
      CPLXIJ(JJ,K)=CPXROW(JJ)
 1446 CONTINUE
 2446 CONTINUE
C
 3919 CONTINUE
C**   BELONGS TO "IF(NGROUP.NE.8.AND.NGROUP.NE.22)GOTO 3919" .AND. TO
C     "IF(JANO.NE.0)GOTO 3919"
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7826)
      WRITE(11,7826)
 7826 FORMAT(' MATRIX'
     1,' NEEDED FOR TRANSF. INTO REAL OR PURELY IMAG. BASIS ORBITALS:')
      DO 5842 K=1,5
      WRITE(*,5882)(TRRL55(K,JJ),JJ=1,5)
      WRITE(11,5882)(TRRL55(K,JJ),JJ=1,5)
 5842 CONTINUE
 5882 FORMAT(10D14.6)
      ENDIF
 3991 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7827)
      WRITE(11,7827)
 7827 FORMAT(' RESULTING'
     1,' (AT LEAST FORMALLY) COMPLEX MATRIX FOR TRANSFORMATION:')
      DO 5859 K=1,5
      WRITE(*,5828)(CPLXIJ(K,JJ),JJ=1,5)
      WRITE(11,5828)(CPLXIJ(K,JJ),JJ=1,5)
 5859 CONTINUE
 5828 FORMAT(10D12.4)
      ENDIF
C
      IF(LAUF51.EQ.0)THEN
      LAUF51=1
C**   CALCULATION OF MWMSML AND NRCOMB:
      NRELM1=NREL-1
      NRMXDI=2*(2*KLWERT+1)
      DO 33 N=1,NRELM1
      MWM(N,1)=NRMXDI-N
      MWM(N,2)=NRELM1-N
   33 CONTINUE
C
      NRCOMB=1
      IF(NRELM1.NE.0)THEN
      NRCOMB=0
C**   INFINITE LOOP:
  199 CONTINUE
      II=NRELM1
      NRCOMB=NRCOMB+1
      IF(NRCOMB.GT.252)STOP 'NRCOMB'
      DO 21 N=1,NRELM1
      MWMSML(NRCOMB,N)=MWM(N,1)
   21 CONTINUE
      MWM(II,1)=MWM(II,1)-1
   22 CONTINUE
      IF(MWM(II,1).LT.MWM(II,2))THEN
      II=II-1
      IF(II.EQ.0)GOTO 55
      MWM(II,1)=MWM(II,1)-1
      GOTO 22
      ENDIF
C      IIP1=II+1
      DO 3 I=II+1,NRELM1
C      IM1=I-1
      MWM(I,1)=MWM(I-1,1)-1
    3 CONTINUE
      GOTO 199
   55 CONTINUE
      ENDIF
C
      ENDIF !IF(LAUF51.EQ.0)THEN
C
      IJ10=0
      DO 5830 J=1,LIMIT
C**   IJ10=0 STATEMENT BELOW, TOO!
      IJ10=IJ10+1
      DO 5831 NR=1,NRELMX
      BESETZ(NR,IJ10)=ZERO
 5831 CONTINUE
C
C      WRITE(*,5813)J
C      WRITE(11,5813)J
C 5813 FORMAT(' NEW EIGENVECTOR NOW, NO.=',I6)
CCCCCCCCC
C      ISUM=0
C**   KASSUM=JDIM
C**   THE FOLLOWING DO LOOP FOR SPIN UP AND SPIN DOWN OF 1TH EL.:
      DO 5820 NIPSUP=1,0,-1
C**   THE FOLLOWING DO LOOP FOR EACH COMBINATION OF QUANTUM NUMBERS OF OTHER ELECTRONS:
      DO 5821 NSTEP=1,NRCOMB
CCCCCCCCC
C      WRITE(*,5819)NSTEP
C      WRITE(11,5819)NSTEP
C 5819 FORMAT(' NSTEP=',I8)
C**   FOR EACH ROW OF MATRIX CPLXIJ FOR LINEAR COMBINATION:
      DO 5822 NRROW=1,5
C**   LINEAR COMBINATION - ONE(!) ROW:
      COMSUM=DCMPLX(ZERO,ZERO)
      DO 5823 KOLUMN=1,5
C     ... AND THIS NUMBER IS NOW TRANSLATED INTO THE ROW NUMBER, IF IT EXISTS,
C     OF THE EIGENVECTOR CONCERNED:
      NDIGIT(1)=9-(KOLUMN-1)*2
      IF(NIPSUP.EQ.0)NDIGIT(1)=8-(KOLUMN-1)*2
      DO 2826 JJ=1,NRELM1
      JJP1=JJ+1
      NDIGIT(JJP1)=MWMSML(NSTEP,JJ)
 2826 CONTINUE
CCCCCCCCC
C      WRITE(*,5829)(NDIGIT(JJ),JJ=1,NREL)
C      WRITE(11,5829)(NDIGIT(JJ),JJ=1,NREL)
C 5829 FORMAT(' (NDIGIT(JJ),JJ=1,NREL)=',I6,4I4)
      MP=1
C**   PERMUTATION/ ORDERING OF DIGITS. IF ANY 2 DIGITS ARE THE SAME, MP=0:
      DO 2828 JJ=1,NRELM1
      JP1=JJ+1
      DO 2829 I=JP1,NREL
      IF(NDIGIT(JJ).EQ.NDIGIT(I))THEN
      MP=0
      GOTO 2830
      ENDIF
      IF(NDIGIT(JJ).LT.NDIGIT(I))THEN
      MP=MP*(-1)
      ITEMPB=NDIGIT(JJ)
      NDIGIT(JJ)=NDIGIT(I)
      NDIGIT(I)=ITEMPB
      ENDIF
 2829 CONTINUE
 2828 CONTINUE
      DO 2824 JJ=-2,2
      DO 2825 I=1,2
      MSMLNS(I,JJ)=0
 2825 CONTINUE
 2824 CONTINUE
      DO 2827 JJ=1,NREL
      IODD=MOD(NDIGIT(JJ),2)
      NR=((NDIGIT(JJ)-IODD)/2)-2
      IF(IODD.EQ.1)THEN
      MSMLNS(1,NR)=1
      ELSE
      MSMLNS(2,NR)=-1
      ENDIF
 2827 CONTINUE
CCCCCCCCC
C      WRITE(*,'(5I3)')((MSMLNS(II,III),III=-2,2),II=1,2)
C      WRITE(11,'(5I3)')((MSMLNS(II,III),III=-2,2),II=1,2)
C      ISUM=ISUM+1
C      WRITE(*,2847)MP,NSTEP,ISUM
C      WRITE(11,2847)MP,NSTEP,ISUM
C 2847 FORMAT(' MP,NSTEP,ISUM=',3I6)
C
 2830 CONTINUE
      NRLIN=0
      CEMPEI=DCMPLX(ZERO,ZERO)
      IF(MP.NE.0)THEN
      N1=0
      DO 6 N=KLWERT,-KLWERT,-1
      DO 611 IZEILE=1,2
      IF(MSMLNS(IZEILE,N).EQ.0)GOTO 611
      N1=N1+1
      MSMLN1(N1)=(N+KLWERT)*2
      IF(IZEILE.EQ.1)MSMLN1(N1)=MSMLN1(N1)+1
  611 CONTINUE
    6 CONTINUE
C     MSML NOT USED IN NUMERO!
      CALL NUMERO(1,NRLIN,MSML,MSMLN1,ND2002,KLWERT,JDIM,N1,MSMLNW)
C
      CEMPEI=EIVECV(NRLIN,J)*DCMPLX(DBLE(MP),ZERO)
CCCCCCCCC
C      WRITE(*,5827)NRLIN
C      WRITE(11,5827)NRLIN
C 5827 FORMAT(' NRLIN=',I4)
      ENDIF
      COMSUM=COMSUM+CPLXIJ(NRROW,KOLUMN)*CEMPEI
 5823 CONTINUE
C**   CONTINUE BEFORE BELONGS TO DO LOOP "LINEAR COMBINATION - 1 ROW", KOLUMN=1,5
      BESETZ(NRROW*2-NIPSUP,IJ10)=BESETZ(NRROW*2-NIPSUP,IJ10)
     1+DBLE(COMSUM*DCONJG(COMSUM))
 5822 CONTINUE
 5821 CONTINUE
 5820 CONTINUE
C
      IF((NGROUP.EQ.8.OR.NGROUP.EQ.22).AND.JANO.EQ.0)THEN
      IF(KLIK.EQ.0)THEN
      KLIK=1
      WRITE(*,5801)
      WRITE(11,5801)
 5801 FORMAT(' HINT: "SPIN UP" MEANS NOW "SPIN IN [111]-DIRECTION"!')
      ENDIF
      DO 5809 K=1,9,2
      KP1=K+1
      TMPSTO=BESETZ(K,IJ10)*COSB2Q+BESETZ(KP1,IJ10)*SINB2Q
      BESETZ(KP1,IJ10)=BESETZ(K,IJ10)*SINB2Q+BESETZ(KP1,IJ10)*COSB2Q
      BESETZ(K,IJ10)=TMPSTO
 5809 CONTINUE
      ENDIF
C
      IF(IJ10.EQ.10)THEN
      DO 5825 JJ=1,10
      CONTRL=ZERO
      CONTRM=ZERO
      DO 2921 II=1,NRELMX
      CONTRL=CONTRL+BESETZ(II,JJ)
      IF(MOD(II,2).NE.0)CONTRM=CONTRM+BESETZ(II,JJ)
 2921 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,5834)CONTRL,CONTRM
      WRITE(11,5834)CONTRL,CONTRM
 5834 FORMAT(' SUM OF NEXT ROW, AND SUM, BUT SPIN UP ONLY, =',2D16.8)
      ENDIF
C
      WRITE(*,2011)(BESETZ(II,JJ),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,JJ),II=1,NRELMX)
 5825 CONTINUE
C2011 FORMAT(10F7.3) - SEE BEFORE!
      IJ10=0
      ENDIF
C
 5830 CONTINUE
C**   BELONGS TO "DO 5830 J=1,LIMIT" <=> "NEW EIGENVECTOR"!
C
      DO 5826 J=1,IJ10
      CONTRL=ZERO
      CONTRM=ZERO
      DO 2920 II=1,NRELMX
      CONTRL=CONTRL+BESETZ(II,J)
      IF(MOD(II,2).NE.0)CONTRM=CONTRM+BESETZ(II,J)
 2920 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,5834)CONTRL,CONTRM
      WRITE(11,5834)CONTRL,CONTRM
      ENDIF
C
      WRITE(*,2011)(BESETZ(I,J),I=1,NRELMX)
      WRITE(11,2011)(BESETZ(I,J),I=1,NRELMX)
 5826 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C**   END OF "TRANSFORMATION"!
C
 3920 CONTINUE
C**   BELONGS TO "IF(KLWERT.NE.2)GOTO 3920"
C
      WRITE(*,2123)LIMIT
      WRITE(11,2123)LIMIT
 2123 FORMAT(
     1' OCCUP. OF SPINORB. OF EIGENVEC. 1...LIMIT=',I5,' WERE LISTED!')
C**   781 CONTINUE FOLLOWING <=> IF(LAUF3.NE.0.OR.MOROUT.EQ.0.OR.MOROUZ.EQ.8)
C     GOTO 781
  781 CONTINUE
 4794 CONTINUE
C
C**   RETURNS TO TANABE!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND BLOCUT
      END
      SUBROUTINE REDUCT(NGROUP,
C     CALLED BY TANABE! - NEEDS MAGNF! - CALLS SELECT!
C**   SUBROUTINE REDUC-T(ANABE) CALCULATES FMAT AND GMAT WITH DIMENSIONS
C     UP TO THE MAXIMUM, WHICH IS POSSIBLE FOR D ELECTRONS, AND WHICH IS
C     (ND252=) 252, BUT A REDUCTION OF THE NUMBER OF EIGENVALUES AND
C     EIGENVECTORS IS POSSIBLE AND NEEDED FOR MANY CASES OF F ELECTRONS.
C     THE BASIS FOR THE (neg.)magn.momentMATrices FMAT IS THAT OF THESE
C     EIGENVECTORS AND NOT THAT OF MICRO STATES.
C     THE (neg.)magn.momentMATrices FMAT ARE USED TO TAKE INTO ACCOUNT
C     THE ENERGY OF A (E.G. STRONG) MAGNETIC FIELD (MATRIX CFDMMM).
C     (THERE IS NO ORBITAL CONTRIBUTION IN GMAT, AND THE G-FACTOR IS
C     FORMALLY ONE, BECAUSE GMAT IS USED FOR HEISENBERG COUPLING,
C     AND NO MAGNETIC FIELD IS CONCERNED!)
C
     1EIWERT,DIRECZ
     2,DIFLOW
     3,NRVAL,NEUEBS
     4,NREL,KLWERT
     2,EIVECV
     5,TEMPTH,JAABLT
     6,EIVSHT,ND2002
     7,MQUER,REDFAZ,KASSUM
     9,MSMLNW,NOFROW,NROFNR,BWYW,NRTEMP,LAUFNR,MFPLUS)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      PARAMETER(J20=44,ND252=252) !ND252 is new here: for FMAT and GMAT
      COMPLEX*16
     1EIVECV(ND2002,ND2002),EIVECQ
     1,EIVECF,EIVECG,EIVEDF,EIVEDG
     1,FMAT(ND252,ND252,5),GMAT(ND252,ND252,3)
     2,FMAT12,GMAT12
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      COMMON/MIRROV/FACZ,FACXY
      COMMON/CROVER/VLSTNG(44)
      COMMON/XMAT12/
     1WERT12(252),FMAT12(252,252,3),GMAT12(252,252,3),KENNNG,KOMBIN
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6)
      DIMENSION EIWERT(*)
     1,MULMUL(13),MULMUD(9)
     2,REDFAZ(3),MQUER(ND2002,3)
     3,MSMLNW(ND2002,2,-3:3) !3=KLWER3
     4,NROFNR(ND2002),NOFROW(ND2002,10) !10=I10
     5,EIVSHT(ND2002,10),BWYW(*)
      SAVE
C**   (I)10 = MAX. OF POSS. FOR ANY MICRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
C     CORRESP. TO SMALLEST J VALUE: /6,9,10,9,6,1,8,1,6,9,10,9,6/
C     ... AND CORR. TO LARGEST J VALUE: /8,13,16,17,16,13,8,13,16,17,16,13,8/
C**   (SPIN-)MULTIPL.*(ORB.-)MULTIPL.= (MAX=66; DY):
      DATA MULMUL/14,33,52,65,66,49,8,49,66,65,52,33,14/
      DATA MULMUD/10,21,28,25,6,25,28,21,10/
C
C     NEUEBS=1: NEW B-VALUES; IF NEUEBS=0, NO REDUCTION NECESSARAY IN THE
C     2ND ETC. RUN!
C
      DATA KLICK1,KLICK2,MOROUU,KLICKH,FACZ,FACXY/0,0,0,0,1.0D0,1.0D0/
      DATA KLICKM,KLICK4,KLICK5,KLICK6,KLICK3
     1,NRVALI,KOMBIM/0,0,0,0,0,0,0/
C
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,21)
      IF(KLICK1.NE.0)GOTO 9976
C**   THE VERY FIRST RUN!:
      KLICK1=1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8232 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-REDUCT; =0, 1, 2 OR 3!')
CKR     2/,' (+5, I.E. 5, 6, 7 OR 8, FOR OUTPUT OF G-FACTORS(S) IN ADD.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3401)MOROUU
      GOTO 4901
      ENDIF
 3401 READ(*,'(I1)',ERR=8232,END=4576)MOROUU
      LMN=1
 4901 IF(MOROUU.GT.3)MOROUU=3
      WRITE(*,2572)MOROUU
      WRITE(11,2572)MOROUU
 2572 FORMAT(I2,' =MOROUU IN REDUCT!!!!!!!!!')
      WRITE(7,2257)MOROUU
 2257 FORMAT(I1,' =MOROUU IN REDUCT')
      ENDIF
C
      NRVAL=KASSUM
CRDF      NRVALF=0 !from JAFAST in CONDON
      WRITE(*,1145)KASSUM
      WRITE(11,1145)KASSUM
 1145 FORMAT(/,' No. OF MICRO STATES =',I5)
C**   NO PROBLEM AT ALL FOR S OR P ELECTRONS:
      IF(KLWERT.LE.1)GOTO 1146
      IF(KLWERT.EQ.3)THEN
      WRITE(11,1147)JMULTI(NREL),MULMUL(NREL)
      WRITE(*,1147)JMULTI(NREL),MULMUL(NREL)
 1147 FORMAT(' MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE FOR F'
     1,' EL.',/,' AND (SPIN-)MULTIPL.*(ORB.-)MULTIPL. ARE =',2I3)
      IF(NREL.EQ.5.OR.NREL.EQ.6)THEN
      WRITE(*,1144)
      WRITE(11,1144)
 1144 FORMAT(
     1' INPUT BELOW (A PART OF) THE SUM OF 6+8+10+12+14+16=66(=(2*5/2+1'
     2,')*(2*5+1))',/,' FOR SM RESP. 1+3+5+7+9+11+13=49(=(2*3+1)*(2*3+1'
     3,')) FOR EU!')
      ENDIF
      ENDIF
C
      IF(KLWERT.EQ.3)THEN
      IF(IOPT2.EQ.0)THEN
C**   F ELECTRONS, "SINGLE ION":
      NRVAL=MULMUL(NREL)
      WRITE(*,1148)ND252
      WRITE(11,1148)ND252
 1148 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,
     1' (0 => "PRE-OCC." <=> (SEE ABOVE:) (SPIN-)MULTIPL.*(ORB.-)MULTIPL
     2.)',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND252! ND252=
     3',I4)
      ELSE IF(IOPT2.GE.1)THEN
C**   F ELECTRONS, "DIMER" (IOPT2=2 NOW pingPONG)!:
      NRVAL=JMULTI(NREL)
      WRITE(*,1149)28 !28=ND28
      WRITE(11,1149)28
 1149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 ='
     1,'> "PRE-OCC." (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VA'
     2,'LUE))',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND28! N'
     3,'D28=',I3)
      WRITE(*,1150)
      WRITE(11,1150)
 1150 FORMAT(' BUT THE No. SHOULD BE LOWER THAN 18 (E.G. 17 FOR HO)'
     1,/,' (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VALUE!)'
     2,/,' HINT: IN THE CASE OF "pingPONG" (IOPT2=2),',/
     2,' THE MAX. POSS. IS THE No. OF MICRO STATES!')
      ENDIF
C**   ENDIF BEFORE BELONGS TO "F EL. - SINGLE ION OR "ELSE""!
      ELSE IF(KLWERT.EQ.2)THEN
      IF(IOPT2.EQ.0)THEN
C**   D ELECTRONS, "SINGLE ION":
      NRVAL=ND252
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
      WRITE(*,2184)ND252
      WRITE(11,2184)ND252
 2184 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 '
     1,'=> "PRE-OCC.", WHICH IS =No.OF STATES OR =ND252, =',I5,')')
      ELSE IF(IOPT2.GE.1)THEN
C**   D ELECTRONS, "DIMER" (IOPT2=2 NOW pingPONG!):
      NRVAL=MULMUD(NREL)
      WRITE(*,2149)NRVAL,28
      WRITE(11,2149)NRVAL,28
 2149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/
     1' (0 => "PRE-OCC." <=> (SPIN-)MULTIPL.*(ORB.-)MULTIPL.;',/,
     2' THE MAX. POSS. IS ND28! THESE ARE =',2I3,')',/,
     3' (HINT: NRVAL MAY BE >28, BUT KOMBIN MUST NOT!')
      ENDIF
C**   ENDIF BEFORE BELONGS TO "D EL. - SINGLE ION OR "ELSE""!
      ENDIF
C**   ENDIF BEFORE BELONGS TO "KLWERT.EQ.3 OR .EQ.2"!
C** BREAK OF ALL IF's!
C
C**   NOW BOTH, KLWERT=2 AND KLWERT=3:
      WRITE(*,2185)
      WRITE(11,2185)
 2185 FORMAT(/,' INPUT FOR "COMB. MODEL II" IS ALWAYS NEEDED HERE:',/
     1,' PUT IN IN 2(!)I3 NRVALI->NRVAL AND KOMBIM->KOMBIN,',/
     1,' THE NUMBER OF VALUES TO BE COMBINED (KOMBIN=0 OR >NRVAL ->',/
     2,' =NRVAL, AND COMB. MODEL DOES NOT RUN, KOMBIN->0 FOR MONOMERS).'
     2,/,' STANDARD: "RETURN", "COMB. MODEL DOES NOT RUN"!')
CRD      IF(IOPT2.NE.2)THEN !IOPT2=2 NOW ->pingPONG
 8235 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(2I3)',ERR=5588,END=3404)NRVALI,KOMBIM
      GOTO 4904
      ENDIF
 3404 READ(*,'(2I3)',ERR=8235,END=4576)NRVALI,KOMBIM
      LMN=1
 4904 CONTINUE
      WRITE(*,2137)NRVALI,KOMBIM !KOMBIM->KOMBIN
      WRITE(11,2137)NRVALI,KOMBIM
 2137 FORMAT(I4,I3,' =NRVALI(No. OF STATES),KOMBIM->KOMBIN!!!!!!!!!')
      WRITE(7,2371)NRVALI,KOMBIM
 2371 FORMAT(2I3,' =NRVALI(No. OF STATES),KOMBIM')
      IF(NRVALI.GT.0)NRVAL=NRVALI
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
C**   BUT THE ABS. MAXIMUM POSSIBLE IS:
      IF(NRVAL.GT.ND252)NRVAL=ND252
C**   NEXT LINE FOR "DIMER" - D AND/OR F EL.!:
CKR      IF(IOPT2.NE.0.AND.NRVAL.GT.NDS66)NRVAL=NDS66 !Dy3+ sextetH
      IF(IOPT2.NE.0.AND.NRVAL.GT.28)THEN !28=ND28
      WRITE(*,8334)
      WRITE(11,8334)
 8334 FORMAT(' NRVAL.GT.28: INPUT IN I1 YES/NO(0) "O.K."!',
     1/,' (HINT: NRVAL MAY BE >28, BUT KOMBIN MUST NOT!)')
 8335 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3405)JAOK
      GOTO 4905
      ENDIF
 3405 READ(*,'(I1)',ERR=8335,END=4576)JAOK
      LMN=1
 4905 WRITE(*,8337)JAOK
      WRITE(11,8337)JAOK
 8337 FORMAT(I2,' <=O.K.!!!!!!!!!')
      WRITE(7,8336)JAOK
 8336 FORMAT(I1,' <=O.K.')
      IF(JAOK.EQ.0)NRVAL=28
      ENDIF !IF(IOPT2.NE.0.AND.NRVAL.GT.28)THEN
      KOMBIN=KOMBIM
      IF(KOMBIN.EQ.0)KOMBIN=NRVAL
      IF(KOMBIN.GT.NRVAL)KOMBIN=NRVAL
      IF(KOMBIN.GT.28)KOMBIN=28
      IF(IOPT2.EQ.0)KOMBIN=0 !MONOMER
      WRITE(*,9213)NRVALI,NRVAL,KOMBIM,KOMBIN
      WRITE(11,9213)NRVALI,NRVAL,KOMBIM,KOMBIN
 9213 FORMAT(
     1' No. OF VALUES (INPUT AND CORR.) AND KOMBIN (INPUT AND CORR.) =',
     24I5,/)
CRD      ENDIF !IF(IOPT2.NE.2)THEN !IOPT2=2 NOW ->pingPONG
C
 1146 CONTINUE
C**   BELONGS TO "IF(KLWERT.LE.1)GOTO 1146"
C** BREAK OF ALL IF's!
      IF(KLWERT.GT.1)GOTO 9964
      WRITE(11,2184)ND252
 2834 WRITE(*,2184)ND252
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=4403)NRVALI
      GOTO 9403
      ENDIF
 4403 READ(*,'(I3)',ERR=2834,END=4576)NRVALI
      LMN=1
 9403 WRITE(*,2529)NRVALI
      WRITE(11,2529)NRVALI
 2529 FORMAT(I4,' =NRVALI(for S-/P-EL.)!!!!!!!!!')
      WRITE(7,2297)NRVALI,KOMBIM
 2297 FORMAT(I3,' =NRVALI(for S-/P-EL.)')
      IF(NRVALI.GT.0)NRVAL=NRVALI
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
      KOMBIN=NRVAL
      IF(IOPT2.EQ.0)KOMBIN=0 !MONOMER
      WRITE(*,9214)NRVALI,NRVAL,KOMBIN
      WRITE(11,9214)NRVALI,NRVAL,KOMBIN
 9214 FORMAT(' No. OF VALUES (INPUT AND CORR.) (AND KOMBIN) =',3I5,/)
 9964 CONTINUE
C** BREAK OF ALL IF's!
C
 9976 CONTINUE
C**   BELONGS TO "IF("NOT THE VERY FIRST RUN")GOTO 9976"
C** BREAK OF ALL IF's!
C
      IF(KLICK2.NE.0.AND.NEUEBS.EQ.0)GOTO 9977
      KLICK2=1
C
      DO 1247 J=1,NRVAL
      DO 7146 I=1,KASSUM
      IF(CDABS(EIVECV(I,J)).LT.PARWUR)EIVECV(I,J)=DCMPLX(ZERO,ZERO)
 7146 CONTINUE
 1247 CONTINUE
C
      DO 1246 K=1,5
      DO 7147 J=1,NRVAL
      DO 7148 I=1,NRVAL
      FMAT(I,J,K)=DCMPLX(ZERO,ZERO)
      IF(K.LE.3)GMAT(I,J,K)=DCMPLX(ZERO,ZERO)
 7148 CONTINUE
 7147 CONTINUE
 1246 CONTINUE
C
C**   FOR THE (neg.)magn.momentMATrices FMAT (WITH THE RESP. G-FACTOR INCL.)
C     (GMAT RESERVED FOR OTHER PURPOSES - GFACTOR IS ONE THERE (BECAUSE NO
C     MAGN. FIELD CONCERNED!) - NO ORBITAL CONTRIBUTIONS THERE!):
C
C**   FIRSTLY THE Z-DIRECTION (FMAT(,,1)):
      DO 1445 IE=1,NRVAL
      DO 2445 IEI=IE,NRVAL
C
      EIVECF=DCMPLX(ZERO,ZERO)
      EIVECG=DCMPLX(ZERO,ZERO)
      DO 5441 I=1,KASSUM
      EIVECQ=DCONJG(EIVECV(I,IE))*EIVECV(I,IEI)
C      EIVECI=DIMAG(DCONJG(EIVECV(I,IE))*EIVECV(I,IEI))
C      IF(EIVECI.NE.ZERO)WRITE(1,'(D16.8)')EIVECI
      EIVECF=EIVECF+EIVECQ*DBLE(MQUER(I,1))
C**   GRIFFITH P.284,EQ.(10.43) FOR ORBITAL REDUCTION ("REDFAZ()")!
      EIVECG=EIVECG+EIVECQ*DBLE(MQUER(I,2))
 5441 CONTINUE
      EIVECG=EIVECG*HALF
C
      FMAT(IE,IEI,1)=EIVECF
C**   FMAT(,,1) AND GMAT(,,1) ARE SYMM.!:
      FMAT(IEI,IE,1)=DCONJG(EIVECF)
      GMAT(IE,IEI,1)=EIVECG
      GMAT(IEI,IE,1)=DCONJG(EIVECG)
C
 2445 CONTINUE
 1445 CONTINUE
C
      IF(KLICKM.EQ.0)THEN
      KLICKM=1
C
CKR      IF(44.GT.24.AND.NGROUP.EQ.20.AND. !IN25
CKR     1((IBWWW(25).EQ.1).OR.(BWW(25).NE.ZERO)))THEN
CKR      REDFAZ(1)=BWW(25)
CKR      ENDIF
      WRITE(*,2253)EIWERT(1),EIWERT(2)
      WRITE(11,2253)EIWERT(1),EIWERT(2)
 2253 FORMAT(' THE FIRST 5 EIGENVAL.:',2D22.14)
      WRITE(*,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      WRITE(11,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      IF(IGR1.EQ.1)THEN
      WRITE(*,2235)
      WRITE(11,2235)
 2235 FORMAT(' THE FIRST STATE IS NOT DEGENERATED!')
      ENDIF
C-"CONDOR":
C      GOTO 2532
C ...... (ca. 80 lines concerning FMATZ(10,10) and G-FACTOR(S) deleted!)
C 2532 CONTINUE
      ENDIF
C**   ENDIF BEFORE BELONGS TO:
C     "IF(KLICKM.EQ.0)THEN"!
C** BREAK OF ALL IF's!
      IF(MOROUU.NE.0.AND.KLICK5.EQ.0)THEN
      KLICK5=1
      WRITE(*,2224)
      WRITE(11,2224)
 2224 FORMAT(' COMPLEX MATRIX FMAT(,,1):'
     1,' PERT.-OPER. FOR Z-DIR.(ONLY); COLUMNS (GIVEN AS ROWS):')
      WRITE(*,8928)
      WRITE(11,8928)
 8928 FORMAT(' UP TO NOW IN REDUCTanabe HERE ONLY THE ORBITAL PART IS IN
     1CLUDED!')
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVAL
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUU=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUU.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG.-ELEM.!')
      ENDIF
      DO 1004 J=1,KASI
      WRITE(11,2010)(FMAT(I,J,1),I=J,NRVAL)
      WRITE(*,2010)(FMAT(I,J,1),I=J,NRVAL)
 2010 FORMAT(6(1X,D12.4))
 1004 CONTINUE
C
      WRITE(*,2228)
      WRITE(11,2228)
 2228 FORMAT(' COMPLEX MATRIX GMAT(,,1):'
     1,' GMAT HERE FOR Z-DIR. (ONLY); COLUMNS (GIVEN AS ROWS):'
     2,/,' (FOR DETAILS SEE FMAT ABOVE!)')
      DO 1056 J=1,KASI
      WRITE(11,2010)(GMAT(I,J,1),I=J,NRVAL)
      WRITE(*,2010)(GMAT(I,J,1),I=J,NRVAL)
 1056 CONTINUE
      ENDIF
C**   END OF THE Z-DIRECTION (FMAT(,,1))!
C** BREAK OF ALL IF's!
C
C**   NOW STEPUP/STEPDOWN: FMAT(,,4) AND FMAT(,,5) FOR ORBITAL!
C     FOR SPIN (GFACTOR NOT(!) INCL.!) GMAT(,,2) AND GMAT(,,3).
C
C     FMAT(,,2) AND FMAT(,,3) FOR X- AND Y-DIRECTION ARE FIRSTLY
C     CALCULATED, AFTERWARDS GMAT(,,2) AND GMAT(,,3) ARE INCLUDED!
C**   FOR X-DIRECTION IS FMAT(,,2): ORB.-PART OF THIS IS
C     HALF*(L- + L+), SPIN-PART IS GFACT*HALF*(S- + S+) (G-FACTOR
C     TIMES HALF RESULTS TO ONE!)!
C**   (PART OF GMAT(,,2) IS ONE(!)*S+ (WITHOUT ANY ORBITAL-PART!))
C     (FMAT(,,3) IS HERMITIAN, BEFORE AND AFTER INCLUDING GMAT.)
C
C**   ONLY STEP-DOWN OPERATORS HAVE BEEN USED IN SUBROUTINE MAGNF!
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL!)
C
      DO 1446 IE=1,NRVAL
C**   ATTENTION: IEI=1(!),NRVALX HERE! - ONLY STEP-DOWN OP.!:
      DO 2446 IEI=1,NRVAL
      EIVEDF=DCMPLX(ZERO,ZERO)
      EIVEDG=DCMPLX(ZERO,ZERO)
      DO 5442 J=1,KASSUM
      IF(EIVECV(J,IEI).EQ.DCMPLX(ZERO,ZERO))GOTO 5442
      DO 6442 I=1,NROFNR(J)
      IF(NOFROW(J,I).LT.0)THEN
      EIVECQ=DCONJG(EIVECV(-NOFROW(J,I),IE))*EIVECV(J,IEI)
C      EIVECI=DIMAG(DCONJG(EIVECV(-NOFROW(J,I),IE))*EIVECV(J,IEI))
C      IF(EIVECI.NE.ZERO)WRITE(1,'(D16.8)')EIVECI
C**   G-FACTOR FOR SPIN IS =2, BUT FORMALLY =1 FOR EIVEDG!
      EIVEDG=EIVEDG+EIVECQ
      ELSE
      QUOTTT=EIVSHT(J,I)
      EIVECQ=(DCONJG(EIVECV(NOFROW(J,I),IE))*EIVECV(J,IEI))*QUOTTT
C      EIVECI=DIMAG(DCONJG(EIVECV(NOFROW(J,I),IE))*EIVECV(J,IEI))*QUOTTT
C      IF(EIVECI.NE.ZERO)WRITE(1,'(D16.8)')EIVECI
      EIVEDF=EIVEDF+EIVECQ
      ENDIF
 6442 CONTINUE
 5442 CONTINUE
C
C**   EIVE-UP-F=EIVEDF("DOWN"), IF IE=IEI, I.E. E.G. FMAT(1,1,4)=FMAT(1,1,5)!
C     - AND THERE IS SOME MORE SYMM. CONCERN. UP AND DOWN (FMAT(,,5): "DOWN"):
      FMAT(IE,IEI,5)=EIVEDF
      FMAT(IEI,IE,4)=DCONJG(EIVEDF)
C**   FMAT NOT YET READY (ONLY ORBITAL PART)!
      GMAT(IE,IEI,3)=EIVEDG
      GMAT(IEI,IE,2)=DCONJG(EIVEDG)
C
 2446 CONTINUE
 1446 CONTINUE
C
      DO 1447 IE=1,NRVAL
      DO 2447 IEI=1,NRVAL
      FMAT(IEI,IE,2)=HALF*(FMAT(IEI,IE,4)+FMAT(IEI,IE,5))
      FMAT(IEI,IE,3)=HALF*(-FMAT(IEI,IE,4)+FMAT(IEI,IE,5))
     1*DCMPLX(ZERO,ONE)
C**   FMAT(,,5) CORRESP. TO JY-OPERATOR! -
C     Sy=(-S+ + S-)i/2
C     *DCMPLX(ZERO,ONE) IS NOW HERE INCLUDED FOR FMAT!
 2447 CONTINUE
 1447 CONTINUE
C
      IF(MOROUU.GT.1.AND.KLICK6.EQ.0)THEN
      KLICK6=1
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' COMPLEX MATRIX FMAT(,,2..5)'
     1,' (STEP- (4..5) AND PERT.-OPER. FOR X- AND',
     2/,' Y-DIR. (2..3)); (HERE!:) ROWS:'
     3,/,' (BECAUSE OF SYMMETRY FMAT(1,2,4) = FMAT(2,1,5))')
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVAL
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
 1022 FORMAT(' BECAUSE MOROUU=2, ONLY ONE ROW!')
      ELSE
      WRITE(11,1008)
 1008 FORMAT(' BECAUSE MOROUU.GT.2, ALL ROWS!')
      ENDIF
      DO 1055 K=2,5
      WRITE(*,1050)K
      WRITE(11,1050)K
 1050 FORMAT(' NUMBER OF OPERATOR FMAT (2..5) =',I2)
      DO 1005 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVAL)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVAL)
 1005 CONTINUE
 1055 CONTINUE
C
      WRITE(*,1553)
      WRITE(11,1553)
 1553 FORMAT(' COMPLEX MATRIX GMAT(,,2..3); (HERE!:) ROWS:')
      DO 1551 K=2,3
      WRITE(*,1550)K
      WRITE(11,1550)K
 1550 FORMAT(' NUMBER OF OPERATOR GMAT (2..3) =',I2)
      DO 1552 I=1,KASI
      WRITE(11,2010)(GMAT(I,J,K),J=1,NRVAL)
      WRITE(*,2010)(GMAT(I,J,K),J=1,NRVAL)
 1552 CONTINUE
 1551 CONTINUE
C
      ENDIF
C** BREAK OF ALL IF's!
C
      IF(IOPT2.NE.0)THEN
      IF(KLICKH.EQ.0)THEN
      KLICKH=1
      WRITE(11,1581)
 1582 WRITE(*,1581)
 1581 FORMAT(' INSTEAD OF HEISENBERG COUPLING, THE ISING MODEL, THE XY M
     1ODEL',/,' OR ANY MODEL "BETWEEN" THESE TWO MAY BE APPLIED:',/,' IN
     2PUT IN 2F5.1 1.0.(ISING), 1.b., 1.1.(HEISENBERG), a.1., 0.1.(XY)')
      WRITE(11,1587)
      WRITE(*,1587)
 1587 FORMAT('   0.0  0.0 => HEISENBERG MODEL!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2F5.1)',ERR=5588,END=3406)FACZ,FACXY
      GOTO 4906
      ENDIF
 3406 READ(*,'(2F5.1)',ERR=1582,END=4576)FACZ,FACXY
      LMN=1
 4906 IF(FACZ.GT.ONE)FACZ=ONE
      IF(FACXY.GT.ONE)FACXY=ONE
      IF(FACZ.LT.ZERO)FACZ=ZERO
      IF(FACXY.LT.ZERO)FACXY=ZERO
      IF(FACZ.EQ.ZERO.AND.FACXY.EQ.ZERO)THEN
      FACZ=ONE
      FACXY=ONE
      ENDIF
      IF(FACXY.LT.ONE)FACZ=ONE
      IF(FACZ.LT.ONE)FACXY=ONE
      WRITE(7,1583)FACZ,FACXY
 1583 FORMAT(2F5.1,' =FACZ,FACXY')
      WRITE(*,1586)FACZ,FACXY
      WRITE(11,1586)FACZ,FACXY
 1586 FORMAT(' FACZ, FACXY =',2F6.1)
      FACZ=FACZ**2
      FACXY=FACXY**2
      ENDIF
C 7 LINES REMOVED!
      ENDIF
C** BREAK OF ALL IF's!
C
 9977 CONTINUE
C**   BELONGS TO "NO NEW MATRICES!"
C
      IF(KLICK3.NE.0.AND.NEUEBS.EQ.0)GOTO 9978
      KLICK3=1
C
      DO 2268 IE=1,NRVAL
      DO 2267 IEI=1,NRVAL
      FMAT(IEI,IE,1)=FMAT(IEI,IE,1)*REDFAZ(1)+TWO*GMAT(IEI,IE,1)
 2267 CONTINUE
 2268 CONTINUE
C
      DO 1448 IE=1,NRVAL
      DO 2448 IEI=1,NRVAL
      FMAT(IEI,IE,2)=FMAT(IEI,IE,2)*REDFAZ(2)
     1+GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
      FMAT(IEI,IE,3)=FMAT(IEI,IE,3)*REDFAZ(3)
     1+(-GMAT(IEI,IE,2)+GMAT(IEI,IE,3))*DCMPLX(ZERO,ONE)
C**   FMAT(,,5) CORRESP. TO JY-OPERATOR! -
C     Sy=(-S+ + S-)i/2
C     *DCMPLX(ZERO,ONE) IS NOW HERE INCLUDED ALSO FOR GMAT!
 2448 CONTINUE
 1448 CONTINUE
 9978 CONTINUE !BELONGS TO "NO NEW MATRICES!: NEUEBS=0"
C
      IF(MOROUU.GT.1.AND.KLICK4.EQ.0)THEN
      KLICK4=1
      WRITE(*,2205)
      WRITE(11,2205)
 2205 FORMAT(
     1' COMPLEX MATRIX FMAT(,,1&2&3), NOW WITH SPIN PART INCLUDED')
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVAL
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
      ELSE
      WRITE(11,1008)
      ENDIF
C      DO 2201 K=1,5
      DO 2201 K=1,3
C      IF(K.EQ.4.OR.K.EQ.5)GOTO 2201
      WRITE(*,2202)K
      WRITE(11,2202)K
 2202 FORMAT(' NUMBER OF OPERATOR FMAT (,,No) =',I2)
      DO 2203 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVAL)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVAL)
 2203 CONTINUE
 2201 CONTINUE
      ENDIF
C ENDIF BELONGS TO "IF(MOROUU.GT.1.AND.KLICK4.EQ.0)THEN"!
C
      IF(IOPT1.EQ.0)THEN !<->IOPT2=2
C      OPEN(13,ERR=4581,FILE='fort.13',STATUS='NEW') !ERROR, if not "C"!
      REWIND(13)
      WRITE(13,ERR=8011)
     1(((FMAT(I,J,K),I=1,252),J=1,252),K=1,3)
     1,(((GMAT(I,J,K),I=1,252),J=1,252),K=1,3)
     1,(EIWERT(I),I=1,252),NRVAL,KENNNG,KOMBIN
     1,(BWYW(I),I=1,44),(VLSTNG(I),I=1,44)
      CLOSE(13)
      STOP 'IOPT1.EQ.0: For START of pingPONG STOP here'
      ENDIF
C
      IF(IOPT2.EQ.2.AND.JAABLT.EQ.0)THEN
      DO 2833 K=1,3
      DO 2832 J=1,252
      DO 2831 I=1,252
      FMAT12(I,J,K)=FMAT(I,J,K)
      GMAT12(I,J,K)=GMAT(I,J,K)
 2831 CONTINUE
 2832 CONTINUE
 2833 CONTINUE
      DO 2884 I=1,252
      WERT12(I)=EIWERT(I)
 2884 CONTINUE
      ENDIF
C
COMMENT: AN INTERFACE (No.3) IS HERE!: ONLY MATRICES EIWERT, FMAT, GMAT PASS BY,
CO:   AND ND252=252 for FMAT AND GMAT!
CO:   Previously: Dimension ND2002 for EIWERT, DBLMAT and EIVECV
CO:   After it: Dimension NDNEW=252 for EIVAL.(NDNEW,3) and ZEEMN.(NDNEW,3)
CO:   in SELECT, dimension ND2828=28*28=784 for CPXMAT, EIVECC, CFDMMM, CFMATY,
CO:   dimension N63504=63504=NDNEW**2 for EI2VAL(N63504,3) and ZE2MAN(N63504,3)
C
      CALL SELECT(NGROUP,
     1EIWERT,FMAT,DIRECZ
     2,DIFLOW
     3,NRVAL,NEUEBS
     4,ND252,NREL,KLWERT
     1,GMAT,KENNNG
     5,TEMPTH,JAABLT,KASSUM,FACZ,FACXY,BWYW,NRTEMP,KOMBIN,LAUFNR,MFPLUS)
CKR      ENDIF
C
C**   REDUCT RETURNS TO TANABE!:
      RETURN
 4581 STOP 'STOP: fort.13->FORT.13'
 8011 STOP 'WRITE(13)'
 4576 CALL FINISH
 5588 CALL FINISI
CEND REDUCT
      END
      BLOCKDATA GRIFFI
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/RRF/RACAHB,RACAHC,FKSIDA
      COMMON/RF/RACAKB(9),FKSIDK(9)
      PARAMETER(ZERO=0.0D0,ZE=ZERO)
      DOUBLE PRECISION RACAHB(9,5,3),RACAHC(9,5,3),FKSIDA(9,5,3)
      SAVE
CF1   DATA RACAHA/ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO/
C**   STORAGE NAMED ...KB AND ...DK CORRESP. TO DATA OF KOENIG/KREMER:
C**   DATA FOR IONS WITH ONE TO NINE D ELECTRONS
C     FROM KOENIG/KREMER (1(!) EL. HAS ZERO EL.-EL. REPULSION!)!:
      DATA RACAKB/ZERO,630.D0,700.D0,800.D0,825.D0,806.D0
     1,825.D0,905.D0,ZERO/
C**   ABOVE: RACAH-PARAMETERS; BELOW: KSI RESP. ZETA (SPIN-ORBIT
C     COUPL.-CONST. FOR ONE(!) ELECTRON)!
      DATA FKSIDK/200.D0,210.D0,270.D0,290.D0,400.D0,420.D0
     1,515.D0,650.D0,830.D0/
C
C**   NOW DATA FROM GRIFFITH HERE IN BLOCKDATA GRIFFI!:
C**   LIT.: J.S.GRIFFITH: THE THEORY OF TRANSITION-METAL IONS,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1971.                    
C
      DATA RACAHB
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/ZERO,560.D0,578.D0,ZERO,720.D0,806.D0,798.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,659.D0,710.D0,ZERO,ZERO,878.D0,1037.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,718.D0,766.D0,830.D0,960.D0,1058.D0
     3,1115.D0,1084.D0,1238.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,861.D0,1030.D0,1140.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,1039.D0,ZERO,1144.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,ZERO,254.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,260.D0,440.D0,ZERO,474.D0,667.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,ZERO,539.D0,532.D0,ZERO,ZERO,ZERO,620.D0,826.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,602.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,ZERO,ZERO,345.D0,371.D0,847.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,847.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
C
      DATA RACAHC
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/ZERO,1840.D0,2273.D0,ZERO,3087.D0,3506.D0,4167.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,2417.D0,2790.D0,ZERO,ZERO,3828.D0,4314.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,2629.D0,2855.D0,3430.D0,3325.D0,3901.D0
     3,4366.D0,4831.D0,4659.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,4165.D0,3850.D0,3675.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,4238.D0,ZERO,4459.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,ZERO,1975.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,1990.D0,1987.D0,ZERO,1806.D0,2313.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,ZERO,1640.D0,2095.D0,ZERO,ZERO,ZERO,4002.D0,2620.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,1367.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,ZERO,ZERO,1289.D0,1900.D0,1182.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZERO,ZERO,ZERO,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,1182.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
C
      DATA FKSIDA
C - FOR HALF FILLED SHELLS - (HERE: WITH S ORB.**2 AND WITHOUT S ORB., RESP.)
C - I.E. MN2+=MNIII, MNI, CRII, MOII, TCI, REI - LAMBDA BECOMES ZERO!
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/67.D0,111.D0,158.D0,ZERO,239.D0,391.D0,517.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,136.D0,222.D0,ZERO,ZERO,456.D0,603.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,79.D0,121.D0,167.D0,230.D0,347.D0,410.D0
     3,533.D0,649.D0,829.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,154.D0,209.D0,273.D0,352.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,248.D0,327.D0,ZERO,514.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,212.D0,335.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,490.D0,672.D0,ZERO,887.D0,1212.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,290.D0,403.D0,554.D0,ZERO,ZERO,ZERO,1235.D0,1615.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,670.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES
C     (IONS (CHARGE.GE.1): HF1+ AND RE3+ (WITH DATA OF RE+-0) ONLY):
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,798.D0,ZERO,1657.D0,2089.D0,2285.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,1336.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZERO,ZERO,ZERO,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,2285.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
CEND BLOCKDATA GRIFFI
      END
      BLOCKDATA WIGNER
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FINTE/FINT(4,13),FKSIWI(13)
      SAVE
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0
     1,F22=225.0D0,F440=1089.0D0,F660=7361.64D0,F42=0.145D0,F62=0.0164D0
     1,F44=F42*F440,F66=F62*F660
     1,FCE=ZERO,FPR=320.D0,FND=327.D0,FPM=ZERO,FSM=370.D0,FEU=401.D0
     2,FGD=408.D0,FTB=434.D0,FDY=420.D0,FHO=450.D0,FER=433.D0,FTM=447.D0
     2,FYB=ZERO,DAT22=FPR*F22,DAT23=FPR*F44,DAT24=FPR*F66
     3,DAT32=FND*F22,DAT33=FND*F44,DAT34=FND*F66
     5,DAT52=FSM*F22,DAT53=FSM*F44,DAT54=FSM*F66
     6,DAT62=FEU*F22,DAT63=FEU*F44,DAT64=FEU*F66
     7,DAT72=FGD*F22,DAT73=FGD*F44,DAT74=FGD*F66
     8,DAT82=FTB*F22,DAT83=FTB*F44,DAT84=FTB*F66
     9,DAT92=FDY*F22,DAT93=FDY*F44,DAT94=FDY*F66
     1,DAT102=FHO*F22,DAT103=FHO*F44,DAT104=FHO*F66
     1,DAT112=FER*F22,DAT113=FER*F44,DAT114=FER*F66
     2,DAT122=FTM*F22,DAT123=FTM*F44,DAT124=FTM*F66)
      DATA FINT/ZERO,ZERO,ZERO,ZERO,ZERO,DAT22,DAT23,DAT24,ZERO,DAT32
     2,DAT33,DAT34,ZERO,ZERO,ZERO,ZERO,ZERO,DAT52,DAT53,DAT54
     3,ZERO,DAT62,DAT63,DAT64,ZERO,DAT72,DAT73,DAT74
     2,ZERO,DAT82,DAT83,DAT84,ZERO,DAT92,DAT93,DAT94
     4,ZERO,DAT102,DAT103,DAT104,ZERO,DAT112,DAT113,DAT114
     5,ZERO,DAT122,DAT123,DAT124,ZERO,ZERO,ZERO,ZERO/
      DATA FKSIWI/640.D0,759.D0,885.D0,0.0D0,1200.D0,1320.D0
     1,1470.D0,1705.D0,1900.D0,2163.D0,2393.D0,2617.D0,2883.D0/
CEND BLOCKDATA WIGNER
      END
      BLOCKDATA STEVEN
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      SAVE
      DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
CEND BLOCKDATA STEVEN
      END
      BLOCKDATA WWWWWW
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,J20=44)
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/CROVER/VLSTNG(44)
      COMMON/MAINPR/ZETA,FINTEG(4),REDFAZ(3),DIRECZ(3),SIGMA0(601)
     1,JASTRU,KLWERT,NREL,NGROUP,KMASKE(20)
      COMMON/QBQVQQ/QB,QV
      COMMON/MOWDAT/NOWDAT
      CHARACTER*5 QB(J20),QV(J20)
      SAVE
      DATA J2,NOWDAT/44,0/
      DATA TEMPIK/300.,290.,280.,270.,260.,250.,240.,230.,220.,210.
     1,200.,190.,180.,170.,160.,150.,140.,130.,120.,110.,100.
     1,95.,90.,85.,80.,75.,70.,65.,60.,55.,50.,45.,40.
     1,35.,30.,25.,20.,19.,18.,17.,16.,15.,14.5,14.
     2,13.5,13.,12.5,12.,11.5,11.,10.5,10.,9.5,9.,8.5,8.
     3,7.5,7.,6.5,6.,5.5,5.,4.5,4.,3.5,3.,2.5,2.
     4,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1.0
     5,0.9,0.8,0.7,0.6,0.5,0.45,0.4,0.35,0.3,0.25,0.2,0.15,0.1,0.05 !92
     6,509*ZERO/
      DATA SIGMA/92*ONE,509*ZERO/
      DATA TESDAT/ZERO,91*0.1D0,509*ZERO/
      DATA LOWDAT/601*0/
      DATA INBWWW/44*0/
      DATA IBWWW/44*0/
      DATA BWWWIN/44*ZERO/
      DATA STBWWW/44*ZERO/
      DATA BWWWXX/44*ZERO/
      DATA NDATAM/0/
      DATA VLSTNG/44*ZERO/
      DATA KMASKE/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1/
      DATA SIGMA0/601*ONE/
      DATA DIRECZ/ONE,ONE,ONE/
      DATA REDFAZ/ONE,ONE,ONE/
      DATA ZETA/ZERO/
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','%%%%%','%%%%%','%%%%%'
     2,'%%%%%'
     3,'B21  ','B41  ','B61  ','B65  ','RED-F','ZETA ','F(2) ','F(3) '
     4,'F(4) ','B21'' ','B22'' ','B41'' ','B42'' ','B43'' ','B44'' '
     5,'B61'' ','B62'' ','B63'' ','B64'' ','B65'' ','B66'' ',3*'     '/
      DATA QV/'B20  ','2ZU20','B40  ','2ZU40','3ZU40','4ZU40'
     1,'B60  ','2ZU60','3ZU60','4ZU60','6ZU60'
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','%%%%%','%%%%%','%%%%%'
     2,'%%%%%'
     3,'1ZU20','1ZU40','1ZU60','5ZU60','RED-F','ZETA ','F(2) ','F(3) '
     4,'F(4) ','B21'' ','B22'' ','B41'' ','B42'' ','B43'' ','B44'' '
     5,'B61'' ','B62'' ','B63'' ','B64'' ','B65'' ','B66'' ',3*'     '/
CEND BLOCKDATA WWWWWW
      END
      SUBROUTINE SELECT(NGROUP,
C     In SUBROUTINE SELECT the subroutine SUGANC is selected with
C     different parameters, e.g. the resulting CHI's of three calls
C     for three different directions of the magnetic field are
C     calculated, stored in three different stores CHIZXY(I,NRTEMP),
C     and combined to one mean value of CHI.
C     One single CHI for each line of INPUT is the result in any case,
C     CHIZXY(I,NRTEMP) is for OUTPUT only and never used else!
     1EIWERT,FMAT,DIRECZ
     2,DIFLOW
     3,NRVAL,NEUEBS
     4,ND252,NREL,KLWERT
     1,GMAT,KENNNG
     5,TEMPTH,JAABLT,KASSUM,FACZ,FACXY,BWYW,NRTEMP,KOMBIN,LAUFNR,MFPLUS)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C      INTEGER OMP_GET_THREAD_NUM
      ALLOCATABLE EI2VAL(:,:),ZE2MAN(:,:),CFDMMM(:,:)
     1,CPXMAT(:,:),EIVECC(:,:)
      INTEGER ZOMBIN,ZOMBIC,ZNRVAL,ZNRVAC
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(J20=44,ND28=28,ND2828=ND28*ND28) !ND28 not used!
      PARAMETER(NDNEW=252, !=ND252, but NEW! ND2828=28*28=784
     1N63504=NDNEW*NDNEW)
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS,EICFOS,EIFOSJ
      COMMON/MOWDAT/NOWDAT
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,DRITTL=ONE/DREI,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO)
      PARAMETER(VPREZ6=79577.47D0,AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC,BOLTZM=1.380658D-23,BOLZCM=0.695040D0
     2,SIMUBA=9.27402D-24,FNAMAC=AVOGAD*SIMUBA*SIMUBC/(BOLTZM/BOLZCM)
     2,TESLCM=0.466864D0)
C     FNAMAC=AVOGAD*SIMUBA*SIMUBC*BOLTZM(IN SI UNIT J/K)/BOLZCM=
C     =AVOGAD*SIMUBA*SIMUBC/(1.380658D-23/0.695040D0)=
C     =AVOGAD*SIMUBA*SIMUBC*0.503412E23=3.27658E-6
      PARAMETER(WURZ3=1.7320507D0,REZSQ3=ONE/WURZ3)
      DIMENSION DIRECZ(3),EIWERT(*),DIRCOS(3,0:3)
      COMPLEX*16 FMAT(ND252,ND252,5),GMAT(ND252,ND252,3)
      DIMENSION BWYW(J20)
      COMPLEX*16 CPXMAT,EIVECC
     1,CFDMMM !ComplexFieldDirectionMagn.MomentMatrix
      DIMENSION EIVAL1(NDNEW,3) !here for the 1st time!
      DIMENSION EIVALC(NDNEW,3)
CRD      DIMENSION  EI2VAL(ND2828,3),ZE2MAN(ND2828,3) !->ALLOCATE BELOW
      DIMENSION ZEEMN1(NDNEW,3) !here for the 1st time!
      DIMENSION ZEEMNC(NDNEW,3)
      DIMENSION CHIMOL(3),CHI1(3),CHI2(3)
C     NOW FOR READ(15) - IOPT2=2
      DOUBLE PRECISION EIWECU(252),BWWW15(44),ULSTNG(44)
      COMPLEX*16 FMATCU(252,252,3),GMATCU(252,252,3)
      COMPLEX*16 EIVECT(252,252,3),EIVECU(252,252,3)
      SAVE
      DATA ITRANS,JTRANS,KLIJAC,JACOMB,NOSIMI,KLICKS,INSUGC/0,0,0,0,1
     1,0,1/
      DATA KLINEG,MOROUU,MOROUV,KLICKE,KLIC15/0,0,0,0,0/
      DATA KLICK9/0/,KLICKF/0/,FKOLD,FLOLD,FMOLD,FNOLD/4*ZERO/
      DATA CHIMOL/ZERO,ZERO,ZERO/
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
      DATA TESLAO/ZERO/
      DATA DIRCOS/REZSQ3,REZSQ3,REZSQ3
     1,ONE,ZERO,ZERO,ZERO,ONE,ZERO,ZERO,ZERO,ONE/
      DATA OLDDIZ,OLDDIX,OLDDIY/REZSQ3,REZSQ3,REZSQ3/
C
      IF(NDNEW.NE.ND252)STOP 'NDNEW.NE.ND252' !this line may be removed!!!
      IF(.NOT.ALLOCATED(EI2VAL))ALLOCATE (EI2VAL(N63504,3)) !252**2=63504
      IF(.NOT.ALLOCATED(ZE2MAN))ALLOCATE (ZE2MAN(N63504,3))
      IF(.NOT.ALLOCATED(CPXMAT))ALLOCATE (CPXMAT(ND2828,ND2828))
      IF(.NOT.ALLOCATED(EIVECC))ALLOCATE (EIVECC(ND2828,ND2828))
      IF(.NOT.ALLOCATED(CFDMMM))ALLOCATE (CFDMMM(ND2828,ND2828))
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,22)
C
      IF(MOROUT.NE.0.AND.KLICKE.EQ.0)THEN
C**   KLICKE=1 SEE BELOW!
      WRITE(11,7776)
 7766 WRITE(*,7776)
 7776 FORMAT(
     1' MORE OUTPUT IN SUBROUTINE SELECT FOR CHI (AND FOR ITS COMPONENTS
     1, IF MORE',/,' THEN ONE COMPONENT): FOR FIRST...NNTH TEMP. AND/OR 
     1FOR FIRST...NRTH',/,' VALUES OF CHI! INPUT IN 2I2 NN AND NR (0000 
     1=> 0101)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I2)',ERR=5588,END=3412)MOROUU,MOROUV
      GOTO 4912
      ENDIF
 3412 READ(*,'(2I2)',ERR=7766,END=4576)MOROUU,MOROUV
      LMN=1
 4912 WRITE(7,2374)MOROUU,MOROUV
 2374 FORMAT(2I2,' =MOROUU,MOROUV IN SELECT')
      WRITE(*,2437)MOROUU,MOROUV
      WRITE(11,2437)MOROUU,MOROUV
 2437 FORMAT(I3,I2,' =MOROUU,MOROUV IN SELECT!!!!!!!!!')
      ENDIF ! ...KLICKE.EQ.0)THEN
      IF(MOROUU.EQ.0)MOROUU=1
      IF(MOROUV.EQ.0)MOROUV=1
C
      IF(IOPT2.EQ.2.AND.KLIC15.EQ.0)THEN
      KLIC15=1
      READ(15,ERR=4578,END=4577)FMATCU,GMATCU,EIWECU
     1,NRVALC,KENNNC,KOMBIC
C     1,JACUGE,KENNNG,JACUGT !if "READ15.252.f"!
     1,BWWW15,ULSTNG
C      WRITE(11,1014)NRVALC,KENNNC,KOMBIC
C 1014 FORMAT(/,' NRVALC,KENNNC,KOMBIC =',I3,2I2,/,
C     1' (KENNNC IS FOR INFORMATION ONLY AND IS NOT USED HERE!)')
      WRITE(11,1012)NRVALC,KENNNC,KOMBIC,KENNNG,KENNNC
      WRITE(*,1012)NRVALC,KENNNC,KOMBIC,KENNNG,KENNNC
 1012 FORMAT(/,' NRVALC,KENNNC,KOMBIC =',3I3,/,
     1' (KENNNC IS FOR INFORMATION ONLY AND IS NOT USED HERE!)',/
     1' CONTROL: KENNNG SHOULD BE KENNNC ONLY IF TEST! THEY ARE:',2I2,/
     3,' (TO TERMINAL AND, IF(MOROUT.NE.0), TO fort.11, too!):',/
     2,' EIWECU(1:NRVALC), COMPLEX FMATCU(1,1:NRVALC,1), BWWW15(1:44),'
     2,' AND',/,' ULSTNG(1:44), READ IN FROM fort.15',/)
      WRITE(*,25)(EIWECU(J),J=1,NRVALC)
      WRITE(*,26)
      WRITE(*,25)(FMATCU(1,J,1),J=1,NRVALC)
      WRITE(*,26)
      WRITE(*,25)(BWWW15(I),I=1,44)
      WRITE(*,26)
      WRITE(*,25)(ULSTNG(I),I=1,44)
      WRITE(*,26)
   25 FORMAT(8D16.8)
   26 FORMAT(/)
C      WRITE(*,1013)KENNNG,KENNNC
      IF(MOROUT.NE.0)THEN
      WRITE(11,2522)
 2522 FORMAT(' (MOROUT:)')
      WRITE(11,25)(EIWECU(J),J=1,NRVALC)
      WRITE(11,26)
      WRITE(11,25)(FMATCU(1,J,1),J=1,NRVALC)
      WRITE(11,26)
      WRITE(11,25)(BWWW15(I),I=1,44)
      WRITE(11,26)
      WRITE(11,25)(ULSTNG(I),I=1,44)
      WRITE(11,26)
      ENDIF
C      WRITE(11,1013)KENNNG,KENNNC
C 1013 FORMAT(
C     1' CONTROL: KENNNG SHOULD BE KENNNC ONLY IF TEST! THEY ARE:',2I2)
      ENDIF
C
      TESLAS=TESDAT(NRTEMP)
      TESLAC=TESLAS*TESLCM
COMMENT: TESLAC=TESLAS*TESLCM used instead of TESLAS, if energies in cm**(-1)
CO:   are calculated from e.g. FMAT's, which are in Bohr magnetons.
CO:   (TESLCM=SIMUBA*(5.03411*10**22)(Joule/Tesla)*(cm**(-1)/Joule),
CO:   SIMUBA=9.27402*10**(-24)(Joule/Tesla) is the Bohr magneton named after
CO:   Ampere in SI values Joule and Tesla.)
      NEWFLD=0
      IF(TESLAC.NE.TESLAO)NEWFLD=1
      TESLAO=TESLAC
C
      IF(MOROUU.NE.0.AND.LAUFNR.EQ.0.AND.NEWFLD.NE.0)THEN
      WRITE(*,6468)TESLAS,TESLAC ! ->SELECT FROM TANABE
      WRITE(11,6468)TESLAS,TESLAC
 6468 FORMAT(' TESLAS,TESLAC=',2D14.6)
      ENDIF
C
      IF(NOWDAT.NE.0)THEN
      IF(LOWDAT(NRTEMP).GE.8)STOP 'LOWDAT>7'
CKR   (8&9<=>SCHOTTky heat capacity instead of "SIMULTANEOUSLY": NOT INCLUDED!)
      DO 3312 I=1,3
      DIRECZ(I)=DIRCOS(I,LOWDAT(NRTEMP)/2)
CKR   EITHER 1.:1.:1. FOR DIRCOS(I,0), IF LOWDAT=0 OR =1, OR
C     "SIMULTANEOUSLY", IF LOWDAT IN CHIINP.DAT =2, 4, OR 6 (<=>0),
C     OR =3, 5, OR 7 (<=>1: "NOT TO BE FITTED")
 3312 CONTINUE
      IF(DIRECZ(1).NE.OLDDIZ.OR.DIRECZ(2).NE.OLDDIX
     1.OR.DIRECZ(3).NE.OLDDIY)NEWFLD=1
      OLDDIZ=DIRECZ(1)
      OLDDIX=DIRECZ(2)
      OLDDIY=DIRECZ(3)
      ENDIF !IF(NOWDAT.NE.0)THE
C
      IF(JAABLT.NE.0)GOTO 9843
      IF(ITRANS.EQ.0.AND.MOROUT.NE.0)THEN
      IF(IOPT2.EQ.2)THEN
      WRITE(11,9796)
      WRITE(*,9796)
 9796 FORMAT(' IOPT2=2: Calculation of TRANSVERSE COMPON. in SUGANY',/,
     1' not implemented, but CALL TEXT2D in SUGANY is possible!')
      ENDIF
      WRITE(11,9734)DIRECZ(1),DIRECZ(2),DIRECZ(3),TESLAS,NRTEMP
 9795 WRITE(*,9734)DIRECZ(1),DIRECZ(2),DIRECZ(3),TESLAS,NRTEMP
 9734 FORMAT(/,' PUT IN IN I1 YES/NO(0): COMPUT. OF TRANSVERSE COMPON.',
     1' OF MAGN. MOMENT FIRSTLY,',/,
     2' THE DIRECTIONCOS. (Z,X,Y) ARE:',3D12.4,/,
     3' (THE MAGNETIC FIELD, IN TESLA, IS ',D14.6,', CORRESP. TO NR = '
     4,I4,',',/,' AND ONLY THIS WILL BE TAKEN INTO ACCOUNT!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=9754)JTRANS
      GOTO 9774
      ENDIF
 9754 READ(*,'(I1)',ERR=9795,END=4576)JTRANS
      LMN=1
 9774 WRITE(7,9784)JTRANS
 9784 FORMAT(I1,' =JTRANS(VERSE COMP.)')
      WRITE(*,9794)JTRANS
      WRITE(11,9794)JTRANS
 9794 FORMAT(I2,' =JTRANS(VERSE COMP.)!!!!!!!!!')
C      IF(JTRANS.NE.0)CALL SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
C     1,NRVAL,ND2828,EIVECC,EIWERT,NDATAP
C     2,IOPT2,NRROUT,NRVAL,N63504)
      ITRANS=1
      ENDIF
C
 9843 CONTINUE
C
      NURTMP=0
      IF(NEUEBS.EQ.0.AND.NEWFLD.EQ.0)NURTMP=1
C**   NEUEBS=1 FOR FIRST RUN!
C
      NURTMQ=0
      IF(KLICKF.NE.0.AND.NURTMP.NE.0.AND.FKOLD.EQ.FKWERT
     1.AND.FLOLD.EQ.FLWERT.AND.FMOLD.EQ.FMWERT.AND.FNOLD.EQ.FNWERT
     1)NURTMQ=1
      KLICKF=1
      FKOLD=FKWERT
      FLOLD=FLWERT !NOT USED
      FMOLD=FMWERT !NOT USED
      FNOLD=FNWERT !NOT USED
      IF(KLIJAC.EQ.0)THEN
      KLIJAC=1
      IF((IOPT2.GE.1).AND.(NRVAL.NE.KOMBIN))JACOMB=1
      IF((IOPT2.EQ.2).AND.(NRVALC.NE.KOMBIC))JACOMB=1
C
      IF(IOPT2.EQ.0)GOTO 2240
      IF(KLICKS.EQ.0)THEN
      KLICKS=1
      WRITE(11,2239)JACOMB,NOSIMI
 3398 WRITE(*,2239)JACOMB,NOSIMI
 2239 FORMAT(
     1' AS A SPECIAL TEST PUT IN IN SELECT NOSIMI, JACOMB,NOSIMI=',2I2)
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3437)NOSIMJ
      GOTO 4937
      ENDIF
 3437 READ(*,'(I1)',ERR=3398,END=4576)NOSIMJ
      LMN=1
 4937 NOSIMI=NOSIMJ
      WRITE(*,2391)NOSIMI
      WRITE(11,2391)NOSIMI
      WRITE(7,2392)NOSIMI
 2391 FORMAT(I2,' = NOSIMI IN SELECT')
 2392 FORMAT(I1,' = NOSIMI IN SELECT')
      ENDIF
C
      WRITE(11,3366)INSUGC
 3399 WRITE(*,3366)INSUGC
 3366 FORMAT(' INSUGC IN SELECT =',I2,', MAY BE AUTOMATICALLY CHANGED!')
      IF(JACOMB.EQ.0.AND.NOSIMI.NE.0)INSUGC=0
      IF(JACOMB.EQ.0.AND.NOSIMI.EQ.0)CONTINUE !INSUGC=1
      IF(JACOMB.NE.0.AND.NOSIMI.NE.0)INSUGC=2
      IF(JACOMB.NE.0.AND.NOSIMI.EQ.0)CONTINUE !INSUGC=1
      WRITE(*,2394)INSUGC
      WRITE(11,2394)INSUGC
 2394 FORMAT(I2,' = INSUGC IN SELECT')
 2240 CONTINUE
C
      ENDIF
C
      IF(JACOMB.NE.0.AND.MFPLUS.NE.0)STOP 'JACOMB.NE.0.AND.MFPLUS.NE.0'
      MFPLUT=0
      IF((MFPLUS.NE.0).AND.(TEMPIK(NRTEMP).LT.ZERO))MFPLUT=1 !NRTEMP is always new
      DIFMAX=EIWERT(NRVAL)
C
      NRLOOP=1
      IF(IOPT1.EQ.1)NRLOOP=NRDIRE
C
      DO 221 IDIR=1,NRLOOP
C**   DIRECTION COSINUS:
C     (IOPT1=:) MEAN VALUE OF CHI (=1),
C     DIRECTION AT WILL: (=2)
      IF(IOPT1.EQ.1)THEN
      NRCOSI=IDIR
      DO 1312 I=1,3
      DIRECZ(I)=DIRCOS(I,NRCOSI)
 1312 CONTINUE
      ENDIF
C**   NRSTOR=1,2,3 <=> z,x,y-DIRECTION!:
      IF(IOPT1.EQ.1)NRSTOR=IDIR !However:
      IF(IOPT1.EQ.2)NRSTOR=1
      CALL SUGANC(FKWERT,FLWERT,FMWERT,FNWERT,GMAT,NEWFLD
     1,EIWERT,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC
     1,EIVAL1(1,NRSTOR),ZEEMN1(1,NRSTOR),DIFLOW,DIFMAX
     1,EIVALC(1,NRSTOR),ZEEMNC(1,NRSTOR)
     2,EI2VAL(1,NRSTOR),ZE2MAN(1,NRSTOR)
     3,CFDMMM,NRVAL,MOROUT,NRSTOR,NURTMP,NURTMQ
     4,ND252,ND2828,CHI2(NRSTOR)
     5,TEMPTH,JAABLT,TESLAS
     6,NRTEMP,KOMBIN,JTRANS,KENNNG,JACOMB,NOSIMI,INSUGC
     7,EIWECU,FMATCU,GMATCU,KOMBIC,NRVALC,N63504,MFPLUT
     8,EIVECT(1,1,NRSTOR),EIVECU(1,1,NRSTOR))
  221 CONTINUE
C
COMMENT: AN INTERFACE (No.4) IS HERE!: THE 1 OR 2 OR 3 RESULTS FOR CHI
CO:   ARE READY AND, FOR 2 OR 3 RESULTS, THEIR MEAN VALUE IS CALCULATED.
CO:   THIS VALUE IS THE ONLY VALUE, WHICH ENTERS FURTHER CALCULATIONS
CO:   (REMARK: ONE VALUE FOR EACH TEMPERATURE AND EACH FIELD IN THE INPUT).
CO:   SEE SUBROUTINE SELECT IN TEXT2D FOR MORE INFORMATION!
C
      DO 333 IDIR=1,NRLOOP
      IF(IOPT1.EQ.1)NRSTOR=IDIR
      IF(IOPT1.EQ.2)NRSTOR=1
      CHIMOL(NRSTOR)=CHI2(NRSTOR)
  333 CONTINUE
C
      IF(NRLOOP.EQ.1)THEN
      CHI111=CHIMOL(1)
      ELSE IF(NRLOOP.EQ.2)THEN
      CHI111=(CHIMOL(1)+TWO*CHIMOL(2))*DRITTL
      ELSE IF(NRLOOP.EQ.3)THEN
      CHI111=(CHIMOL(1)+CHIMOL(2)+CHIMOL(3))*DRITTL
      ENDIF
C
C**   IF A MEAN VALUE OF TWO OR THREE DIRECTIONS WAS CALCULATED OR NOT:
      IF(IOPT1.EQ.1)THEN
      DO 1141 I=1,3
      CHIZXY(I,NRTEMP)=CHIMOL(I)
 1141 CONTINUE
      IF(NRTEMP.LE.MOROUU.AND.KLICKE.LE.MOROUV)THEN
      WRITE(*,334)NRTEMP,(CHIMOL(I),I=1,3)
      WRITE(11,334)NRTEMP,(CHIMOL(I),I=1,3)
  334 FORMAT(' No.OF TEMP., COMPON.OF CHI =',I4,3D16.8)
      ENDIF
      ENDIF
C
      IF(MFPLUT.EQ.0)CHI(1,1,1)=CHI111
C**   CHI(1,1:4,1) <=> CHI CALCULATED, IN SI UNIT M**3/MOL, MEAN VALUES
C     RESP. ONE MEAN VALUE FOR CHI(1,1,1) (ONE VALUE FOR NRLOOP=1)
C
C**   TESTS AND WARNINGS, IF ENERGIES ARE FITTED:
      IF(KLINEG.EQ.0)THEN
      KLINEG=1
      NEGMAX=0
      DO 3322 I=1,NDATAP
      IF(TEMPIK(I).LT.ZERO)THEN
      ITEMPS=INT(DABS(TEMPIK(I))+0.0000000001D0)
      IF(ITEMPS.GT.NEGMAX)NEGMAX=ITEMPS
      ENDIF
 3322 CONTINUE
      IF(NEGMAX.NE.0)THEN
      IGRUNX=KASSUM
      IF(NEGMAX.GT.IGRUNX)THEN
      WRITE(*,3323)NEGMAX,IGRUNX
      WRITE(11,3323)NEGMAX,IGRUNX
 3323 FORMAT(' AT LEAST ONE OF THE ENERGY LEVELS TO BE FITTED'
     1,/,' DOES NOT EXIST:',I4,'.GT.',I4)
      STOP 'NEGMAX.GT.IGRUNX'
      ELSE IF(IOPT2.GT.0.AND.MFPLUS.EQ.0)THEN
      WRITE(*,3324)IGRUNX
      WRITE(11,3324)IGRUNX
 3324 FORMAT(' WARNING: ENERGY LEVELS TO BE FITTED ARE WITHOUT EXCHANGE 
     1COUPLING!',/,' THERE ARE ',I4,' LEVELS!')
      ENDIF
      ENDIF
      ENDIF !END OF TESTS AND WARNINGS, IF ENERGIES ARE FITTED!
C
C**   TO BE ABLE TO AVOID UNNECESSARY CALCULATIONS OF CHI FOR OUTPUT:
      CHISTA(NRTEMP)=CHI(1,1,1)
C
      IF(NRTEMP.LE.MOROUU.AND.KLICKE.LE.MOROUV)THEN
C**   THE FOLLOWING OUTPUT AT LEAST ONCE!:
      WRITE(*,335)NRTEMP,CHISTA(NRTEMP)
      WRITE(11,335)NRTEMP,CHISTA(NRTEMP)
  335 FORMAT(' No. OF TEMP., CHI-START CALCULATED =',I4,D16.8)
      KLICKE=KLICKE+1
      ENDIF
C
C** THE FOLLOWING IS COPIED TO RESTBL (NRTEMP<=>NR,CHISTA(NRTEMP)=CHI(1,1,1))
C     IT IS NEEDED (ONLY!) IN LEVSQX, IF(!) IOPT3=1 ("CHI-0")! 
C
C**   CHI(1,,) <=> CALCULATED VALUES - CHI(2,,) <=> MEASURED VALUES
C
C**   CHIMEA-SURED(LINE OF INPUT TABLE) => CHI(2,4,1) (,1:3,: DERIVED CHI'S):
      CHI(2,4,1)=CHIMEA(NRTEMP)
C**   BWYW(12:16)<=>FKWERT/SILAMB/THETA/CHIDIA/GEWFAC !THETA removed
C     (IBWWW(12:16).NE.0: WILL BE FITTED; IBWWW(12).NE.0: FK WILL BE FITTED
C     <=> IFITK=1)
      SILAMB=BWYW(13)
C**   I.E. THE MOLECULAR FIELD PARAMETER LAMBDA IN SI UNITS!
      CHI(1,2,1)=CHI(1,1,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(1,1,1).NE.ZERO)DENOM=-SILAMB+ONE/CHI(1,1,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(1,2,1)=ONE/DENOM
      ENDIF
      CHIDIA=BWYW(15)
C**   CHIDIA <=> CHI-0 <=> ADDITIVE CONSTANT TO CHI IN SI UNITS -
C     SHOULD NOT REALLY BE THE DIAMAGNETIC CONTRIBUTION TO CHI, BUT MAY BE!
      CHI(1,3,1)=CHI(1,2,1)+CHIDIA
      GEWFAC=BWYW(16)
C**   GEWFAC <=> FACTOR TO CHI MEASURED(!), AS A POSSIBILITY TO CORRECT
C     A POSSIBLY WRONG WEIGHT OF THE SAMPLE!
      CHI(1,4,1)=CHI(1,3,1)
      IF(GEWFAC.NE.ONE)CHI(1,4,1)=CHI(1,3,1)/GEWFAC
C
C     (CHI(1,1:4,1) <=> CHI CALCULATED, IN SI UNIT M**3/MOL, MEAN VALUES
C     RESP. ONE MEAN VALUE FOR CHI(1,1,1) (ONE VALUE FOR NRLOOP=1)
C     CHI(1,1:4,2) <=> ONE/CHI,
C     CHI(1,1:4,5) <=> MAGNETISATION IN SI UNIT TESLA*M**3/MOL (IN CHIMAG:
C     CHIFLD),
C     CHI(1,1:4,3) <=> MAGNETIC MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G.
C     SATURATION MOMENT) (IN CHIMAG: FMAGNB)
C     (PREVOR=-AVOGAD*SIMUBC=-7.01824E-6),
C     CHI(1,1:4,4) <=> EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS
C     (=SQRT(CHI*T*3.0*BOLTZM/(AVOGAD*SIMUBA*SIMUBC))),
C     CHI(1,1:4,6) <=> CHI IN CGS UNIT CM**3/MOL,
C     CHI(1,1:4,7) <=> CHI*T
C
C**   NOW CORRECTIONS IN PRINCIPLE AS ABOVE, BUT REVERSED:
C**   (SEE SUBROUTINE RESTBL FOR A COPY THE FOLLOWING 15 LINES
C     AND (LESS THAN) THE CORRESPONDING 20 LINES ABOVE!)
C     (IN RESTBL ARE THE CHI(,,>1) CALCULATED IN ADDITION!)
      CHI(2,3,1)=CHI(2,4,1)
      IF(GEWFAC.NE.ONE)CHI(2,3,1)=CHI(2,4,1)*GEWFAC
      CHI(2,2,1)=CHI(2,3,1)-CHIDIA
      CHI(2,1,1)=CHI(2,2,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(2,2,1).NE.ZERO)DENOM=+SILAMB+ONE/CHI(2,2,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(2,1,1)=ONE/DENOM
      ENDIF
C
      EICFOS=EIWERT(NRVAL)
      EIFOSJ=EIWERT(NRVALJ)
C
C**   RETURNS TO REDUCT(ANABE)!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
 4578 WRITE(*,4587)
      WRITE(11,4587)
 4587 FORMAT(' ERR IN fort.15: STOP')
      STOP 'STOP15-ERR'
 4577 WRITE(*,4588)
      WRITE(11,4588)
 4588 FORMAT(' END OF fort.15: STOP')
      STOP 'STOP15-END'
CEND SELECT
      END
      SUBROUTINE SUGANO(NRCALL,NRROUT,NRSTOR
C**   SUBROUTINE SUGANO is only for more O(!)utput for the
C     3 subroutines SUGANC, SUGAND, SUGANK ("HEISENBERG").
C     These 3 ROUTines are numbered: NRROUT=2,3,4! SUGANC
C     calls SUGANK for "HEISENBERG", and SUGANK calls SUGAND.
C     Subroutine SUGANC may be called, for the same temperature,
C     once (NRSTOR=1) or max. 3 times: NRSTOR=1...3 <=>
C     z-, x-, and y-direction, and output is for all directions.
C     SUGANO is called, if MOROUT.NE.0, however then "more output"
C     appears always, for (STANDARD:) RETURN only a minimum of
C     output, i.e. "USED EIGENVALUES OF THE INTERFACE" and
C     "(NEG.) MAGNETIC MOMENTS (EFTIMM(I) = (neg.) induced magn.
C     moments in Bohr magnetons)", and "2nd CALL" is omitted.
     1,NRKOIQ,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EIGVAL
     3,EFTIMM,JAABLT)
COMMENT:   EIGVAL=EI1VAL.or.EI2VAL<->EI.VAL
CO: NRKOIQ<->NRval-KOmbin-kombIQ - CALL SUGANO(,,,NRVAL,... -
CO: CALL SUGANO(,,,KOMBIN,... - CALL SUGANO(,,,KOMBIQ,...      
CO: EFTIMM<->ZE.MAN<->EnergyFieldTemperatureInducedMagn.Moment
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
C
      DIMENSION KLICK1(4,3),KLICK2(4,3),KLICK3(4,3)
     1,EIWERT(*),EIGVAL(*),EFTIMM(*),DIRECZ(3)
      COMPLEX*16 CPXMAT(ND2828,ND2828),EIVECC(ND2828,ND2828)
      SAVE
C**   MOROUT.NE.0 HERE!
      DATA KLICK0/0/
      DATA KLICK1/12*0/
      DATA KLICK2/12*0/
      DATA KLICK3/12*0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,23)
C...
CRD 3366 FORMAT(' INPUT MOROUT-HERE-IN-SUGANO IN I1: 0 => (ALWAYS) RETURN')
C...
      IF(KLICK0.EQ.0)THEN
      KLICK0=1
      WRITE(*,669)
      WRITE(11,669)
  669 FORMAT(
     1/,' HERE IS SUBROUTINE SUGANO (FOR OUTPUT ONLY), CALLED BY',
     1/,' SUGANC (No.2), SUGANK (No.4), OR SUGAND (No.3).')
      WRITE(11,9023)
 8252 WRITE(*,9023)
 9023 FORMAT(' INPUT YES(0)/NO ONLY MINIMUM OUTPUT, YES(0)/NO "OUTPUT ON
     1LY ONCE"',/,' AND YES/NO(0) "FULL MATRICES"!')
      IF(MORTEX.NE.0)THEN
      WRITE(*,9024)
      WRITE(11,9024)
 9024 FORMAT(/' ONLY MINIMUM OUTPUT: USED EIGENVALUES OF THE INTERFACE,'
     1,/,' FIELD IN CM**(-1), (3rd CALL:) RESULTING EIGENVALUES AND',/
     1,' (NEG.) MAGNETIC MOMENTS (NUMBER OF VALUES MAY BE RESTRICTED).',
     2/,' "OUTPUT ONLY ONCE": MEANS ONCE FOR EACH "DIRECTION" AND EACH',
     2/,' OF THE SUBROUTINES SUGANC (No.2), SUGANK (No.4), SUGAND (No.3)
     3.',/,' "FULL MATRICES": SELF EXPLAINING! - (STANDARD:) RETURN')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3438)JANO1,JANO2,JANO3
      GOTO 4938
      ENDIF
 3438 READ(*,'(3I1)',ERR=8252,END=4576)JANO1,JANO2,JANO3
      LMN=1
 4938 WRITE(7,2393)JANO1,JANO2,JANO3
 2393 FORMAT(3I1,' =JANO1,JANO2,JANO3')
      WRITE(*,2339)JANO1,JANO2,JANO3
      WRITE(11,2339)JANO1,JANO2,JANO3
 2339 FORMAT(3I2,' =JANO1,JANO2,JANO3!!!!!!!!!')
      ENDIF !IF(KLICK0.EQ.0)THEN
C
      GO TO (33,66,99) NRCALL
  33  CONTINUE
      IF(JANO2.NE.0.OR.(JANO2.EQ.0.AND.KLICK1(NRROUT,NRSTOR).EQ.0))THEN
      KLICK1(NRROUT,NRSTOR)=1
      WRITE(*,670)NRROUT,NRSTOR
      WRITE(11,670)NRROUT,NRSTOR
  670 FORMAT(' HERE IS SUBROUTINE SUGANO CALLED BY',
     1' (2,3,4 <=> ',/,' SUGANC, SUGAND, SUGANK) No.',I2,', NUMBER'
     2,' OF STORAGE =',I2,', 1ST CALL.')
C
C**   NRVAL <=> USED No. OF VALUES OF THE INTERFACE
      WRITE(*,2217)NRKOIQ
      WRITE(11,2217)NRKOIQ
 2217 FORMAT(/,' MAX. 66 OF',I4,' USED'
     1,' EIGENVALUES OF THE INTERFACE, IN ASCENDING ORDER (IN ROWS):')
      KASI=NRKOIQ
      IF(JANO1.LE.1.AND.KASI.GT.66)KASI=66
      IF(MORTEX.NE.0.AND.JANO1.EQ.1)WRITE(*,1029)NRKOIQ
      IF(MORTEX.NE.0.AND.JANO1.EQ.1)WRITE(11,1029)NRKOIQ
 1029 FORMAT(' HINT: SET JANO1.GT.1 FOR ALL',I6,' VALUES!')
      IF(JANO1.GT.1.AND.KASI.GT.66)WRITE(*,1090)NRKOIQ
      IF(JANO1.GT.1.AND.KASI.GT.66)WRITE(11,1090)NRKOIQ
 1090 FORMAT(' BECAUSE JANO1.GT.1, ALL',I6,' VALUES!')
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
 2010 FORMAT(6(1X,D12.4))
      IF(KASI.NE.NRKOIQ)THEN
      WRITE(*,2216)EIWERT(NRKOIQ),NRKOIQ
      WRITE(11,2216)EIWERT(NRKOIQ),NRKOIQ
 2216 FORMAT(' ... AND THE LAST  EIGENVALUE AND ITS No:',D12.4,I6)
      ENDIF
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
      IF(JAABLT.EQ.0)THEN
      WRITE(*,2218)
      WRITE(11,2218)
 2218 FORMAT(' FIELD IN CM**(-1), DIRECTIONS (Z-, X-, Y-) OF THE FIELD,'
     1,/,' AND MINIMAL AND MAXIMAL DIFFERENCE OF FORMER EIGENVALUES:')
      WRITE(*,2010)TESLAC,(DIRECZ(I),I=1,3),DIFLOW,DIFMAX
      WRITE(11,2010)TESLAC,(DIRECZ(I),I=1,3),DIFLOW,DIFMAX
      ELSE
      WRITE(*,2239)
      WRITE(11,2239)
 2239 FORMAT(' FIELD IN CM**(-1), DIRECTIONS (Z-, X-, Y-) OF THE FIELD')
      WRITE(*,2029)TESLAC,(DIRECZ(I),I=1,3)
      WRITE(11,2029)TESLAC,(DIRECZ(I),I=1,3)
 2029 FORMAT(4(1X,D12.4))
      ENDIF
      ENDIF
C
C**   RETURNS (HERE!) TO  SUGANC OR SUGANK!:
      RETURN
   66 CONTINUE
C
      IF(JANO1.NE.0.AND.(JANO2.NE.0.OR.(JANO2.EQ.0.AND
     1.KLICK2(NRROUT,NRSTOR).EQ.0)))THEN
      KLICK2(NRROUT,NRSTOR)=1
      WRITE(*,671)NRROUT,NRSTOR
      WRITE(11,671)NRROUT,NRSTOR
  671 FORMAT(' HERE IS SUBROUTINE SUGANO CALLED BY',
     1' (2,3,4 <=> ',/,' SUGANC, SUGAND, SUGANK) No.',I2,', NUMBER'
     2,' OF STORAGE =',I2,', 2ND CALL.')
      WRITE(*,2221)
      WRITE(11,2221)
 2221 FORMAT(
     1' MATRIX TO BE DIAGONALIZED; COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(JANO3.NE.0)KASI=NRKOIQ
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE "FULL"=0, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' "FULL"=1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEMENT!')
      ENDIF
      WRITE(*,2025)
      WRITE(11,2025)
 2025 FORMAT(' THE MATRIX IS COMPLEX HERE!')
      DO 2026 J=1,KASI
      WRITE(11,2010)(CPXMAT(I,J),I=J,NRKOIQ)
      WRITE(*,2010)(CPXMAT(I,J),I=J,NRKOIQ)
 2026 CONTINUE
      IF(KASI.GT.1)THEN
      WRITE(11,2063)
 2063 FORMAT(' AND THE SAME MATRIX IN LOWER STORAGE MODE:')
      DO 2062 I=1,NRKOIQ
      WRITE(11,'(/)')
      WRITE(11,2010)(CPXMAT(I,J),J=1,I)
 2062 CONTINUE
      ENDIF
      ENDIF
C
C**   RETURNS (HERE!) TO SUGANC OR SUGAND!:
      RETURN
   99 CONTINUE
C
      IF(JANO2.NE.0.OR.(JANO2.EQ.0
     1.AND.KLICK3(NRROUT,NRSTOR).EQ.0))THEN
      KLICK3(NRROUT,NRSTOR)=1
      WRITE(*,672)NRROUT,NRSTOR
      WRITE(11,672)NRROUT,NRSTOR
  672 FORMAT(' HERE IS SUBROUTINE SUGANO CALLED BY',
     1' (2,3,4 <=> ',/,' SUGANC, SUGAND, SUGANK) No.',I2,', NUMBER'
     2,' OF STORAGE =',I2,', 3RD CALL.')
      IF(JANO1.NE.0)THEN
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' MATRIX OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(JANO3.NE.0)KASI=NRKOIQ
      IF(KASI.EQ.1)THEN
      WRITE(*,1012)
      WRITE(11,1012)
      ENDIF
 1012 FORMAT(' BECAUSE "FULL"'
     1,'=0, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      WRITE(*,2025)
      WRITE(11,2025)
      DO 1010 J=1,KASI
      WRITE(*,2010)(EIVECC(I,J),I=1,NRKOIQ)
      WRITE(11,2010)(EIVECC(I,J),I=1,NRKOIQ)
 1010 CONTINUE
      ENDIF
C
      WRITE(*,2219)NRKOIQ
      WRITE(11,2219)NRKOIQ
 2219 FORMAT(/,
     1' MAX. 66 OF',I6,' EIGENVALUES, IN ASCENDING ORDER (IN ROWS):')
      KASI=NRKOIQ
      IF(JANO1.LE.1.AND.KASI.GT.66)KASI=66
      IF(MORTEX.NE.0.AND.JANO1.EQ.1)WRITE(*,1029)NRKOIQ
      IF(MORTEX.NE.0.AND.JANO1.EQ.1)WRITE(11,1029)NRKOIQ
C1029 FORMAT(' HINT: SET JANO1.GT.1 FOR ALL',I6,' VALUES!')
      IF(JANO1.GT.1.AND.KASI.GT.66)WRITE(*,1090)NRKOIQ
      IF(JANO1.GT.1.AND.KASI.GT.66)WRITE(11,1090)NRKOIQ
C1090 FORMAT(' BECAUSE JANO1.GT.1, ALL',I6,' VALUES!')
      WRITE(*,2010)(EIGVAL(I),I=1,KASI)
      WRITE(11,2010)(EIGVAL(I),I=1,KASI)
      IF(KASI.NE.NRKOIQ)THEN
      WRITE(*,2216)EIGVAL(NRKOIQ),NRKOIQ
      WRITE(11,2216)EIGVAL(NRKOIQ),NRKOIQ
C2216 FORMAT(' ... AND THE LAST  EIGENVALUE AND ITS No:',D12.4,I6)
      ENDIF
C
      WRITE(*,2033)
      WRITE(11,2033)
 2033 FORMAT(/,' MAX. 66 (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      IF(JANO1.GT.0.AND.KASI.GT.66)WRITE(*,1090)NRKOIQ
      IF(JANO1.GT.0.AND.KASI.GT.66)WRITE(11,1090)NRKOIQ
      WRITE(*,2010)(EFTIMM(I),I=1,KASI)
      WRITE(11,2010)(EFTIMM(I),I=1,KASI)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
      ENDIF
C
C**   RETURNS (HERE!) TO SUGANC OR SUGAND!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANO
      END
      SUBROUTINE SUGANC(FKWERT,FLWERT,FMWERT,FNWERT,GMAT,NEWFLD
COMMENT: CALLed by SELECT with IOPT1, DIRECZ(1:3), EIWERT(=energy).
CO:   (SUGANK for (coupled) dimers calls SUGAND instead of SUGANC!)
CO:   Runs for monomers and for dimers, but for dimers only, if KOMBII
CO:   really works (combined model: KOMBIN<NRVAL OR KOMBIC<NRVALC:
CO:   "JACOMB=1").
CO:   CALLs TEXT2D, where a description of SUGANC will be found.
CO:   CALLs SUPONG, if IOPT2=2 for unsymmetrical dimers ("Pingpong"),
CO:   but only, if KOMBII really works (combined model: KOMBIC<NRVALC).
CO:   CALLs SUGANO for more OUTPUT.
CO:   CALLs ZHPEVK, a link to a diagonalization routine.
CO:   CALLs SUGANY to get the transverse components of the induced
CO:   magnetic moments (for information only, not furtheron used here)
CO:   and the transverse (molar) magnetisation.
CO:   CALLs SUGANK for (coupled) dimers.
CO:   CALLs KOMBII for "combined model" always, but this works really only,
CO:   if KOMBIN<NRVAL (resp. KOMBIC<NRVALC) for combined model.
CO:   Hint: See text to SUBROUTINE SUGANC for the two parts of EICVAL and
CO:   of ZECMAN, resp.!
COMMENT: For the same temperature and the same magn. field it is called either
CO:   once (for IOPT1=2) or up to three times (for IOPT1=1). - NURTMP and NURTMQ
CO:   (temperature and magn. field the same or not) are calculated in SELECT.
CO:   SUGANC does effectively not work, if NURTMP=NURTMQ=1, but CHIMAG is called,
CO:   and the result is "CHI" for the given temperature, field, and for the valid
CO:   DIRECZ.
COMMENT: To the end, if IOPT2=0, SUBROUTINE CHIMAG is CALLed, and RETURN follows!
CO:   If IOP2>0, SUBROUTINE SUGANK is CALLed!
CO:   To the end and in any case SUBROUTINE CHIMAG is CALLed!
CO:   SUGANC RETURNs to SELECT.
     1,EIWERT,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC
     2,EI1VAL,ZE1MAN,DIFLOW,DIFMAX !CALL ZHPEVK->EI1VAL
     2,EICVAL,ZECMAN
     2,EI2VAL,ZE2MAN
     3,CFDMMM,NRVAL,MOROUT,NRSTOR,NURTMP,NURTMQ
     4,ND252,ND2828
     5,CHISI,TEMPTH,JAABLT,TESLAS,NRTEMP,KOMBIN,JTRANS
     6,KENNNG,JACOMB,NOSIMI,INSUGC
     7,EIWECU,FMATCU,GMATCU,KOMBIC,NRVALC,N63504,MFPLUT
     8,EIVECT,EIVECU)
      use foo
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION EIWERT(*)
     1,TESLAC,DIRECZ(3)
     2,EI1VAL(*),ZE1MAN(*),DIFLOW,DIFMAX
     2,EICVAL(*),ZECMAN(*)
     2,EI2VAL(*),ZE2MAN(*)
     3,CHISI,CHIFLD,TEMPTH,TESLAS
     4,ZERO,ONE,PARWUR,PARWUQ,PARZER
     5,ZEWERT,ZEWERU
     6,TEMPIK,CHIMEA,SIGMA,TESDAT,FMIN,FIWERT
     7,CHI,CHISTA,CHIZXY,FKMIST,EIWECU(*)
      COMPLEX*16 CPXMAT(ND2828,ND2828),EIVECC(ND2828,ND2828)
     1,CFDMMM(ND2828,*),COMZEF,CEEWES
     1,FMAT(ND252,ND252,5),TEMPPR,GMAT(ND252,ND252,3)
      COMPLEX*16 EIVECT(252,252),EIVECU(252,252)
     1,FMATCU(252,252,3),GMATCU(252,252,3)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,MIS8(2),IOPT1,IOPT2,MIS4(2)
     1,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),MIST1(1644)
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKMIST(4)
      SAVE
      DATA KLICK1,KLICK2/0,0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,24)
      NRROUT=2
C
C      IF(NURTMP.NE.0.OR.NURTMQ.NE.0)GOTO 9988
      IF(IOPT2.EQ.2.AND.NEWFLD.NE.0)THEN
      CALL SUPONG(
     1CPXMAT,TESLAC,DIRECZ,EIVECC
     2,EICVAL,ZECMAN !CALL ZHPEVK->EICVAL
     3,CFDMMM,MOROUT,ND2828
     7,EIWECU,FMATCU,KOMBIC,NRVALC,INSUGC)
      IF(NOSIMI.EQ.0)THEN
      DO 7649 J=1,KOMBIC
      DO 7648 I=1,KOMBIC
      EIVECU(I,J)=EIVECC(I,J)
 7648 CONTINUE
 7649 CONTINUE
      ENDIF
      ENDIF
C 9988 CONTINUE !trivial
      IF(NURTMQ.NE.0)GOTO 9999
      IF(INSUGC.EQ.0)GOTO 9989
      NRVALK=NRVAL !K<->KOMBIN
      IF(INSUGC.EQ.2)NRVALK=KOMBIN
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSTOR !NRROUT=2
     1,NRVALK,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EI1VAL
     3,ZE1MAN,JAABLT)
      DO 6121 J=1,NRVALK
      DO 7715 I=J,NRVALK
      TEMPPR=DCMPLX(DIRECZ(1),ZERO)*FMAT(I,J,1)+DCMPLX(DIRECZ(2),ZERO)
     1*FMAT(I,J,2)+DCMPLX(DIRECZ(3),ZERO)*FMAT(I,J,3)
      CFDMMM(I,J)=TEMPPR
 7715 CONTINUE
 6121 CONTINUE
C
      DO 2123 J=2,NRVALK
      DO 6715 I=1,J-1
      CFDMMM(I,J)=DCONJG(CFDMMM(J,I))
 6715 CONTINUE
 2123 CONTINUE
C
      DO 111 J=1,NRVALK
      DO 110 I=J,NRVALK
      CPXMAT(I,J)=DCMPLX(ZERO,ZERO)
      IF(I.EQ.J)CPXMAT(I,J)=DCMPLX(EIWERT(I),ZERO)
COMMENT: THE MAGNETIC FIELD WILL NOW BE TAKEN INTO ACCOUNT EXPLICITLY!
CO:   (SEE IN SELECT FOR TESLAS AND FOR TESLAC!)
      CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CFDMMM(I,J)
  110 CONTINUE
  111 CONTINUE
C
C**   2=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(2,NRROUT,NRSTOR !NRROUT=2
     1,NRVALK,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EI1VAL
     3,ZE1MAN,JAABLT)
C
C**   AND NOW FOR LOWER STORAGE MODE:
C      ND28QU=ND2828**2
C      CALL ZHPEVW(1,CPXMAT,CPXMAT,EIWERT,EIVECC,ND2828,KASSMN,DUMMYD
C     1,ND28QU)
C
C**   CALL THE DIAGONALISATION ROUTINE, RESP. A LINK TO IT:
      CALL ZHPEVK(1,CPXMAT,EI1VAL,EIVECC,ND2828,NRVALK)
      IF(NOSIMI.EQ.0)THEN
      DO 7652 J=1,NRVALK
      DO 7651 I=1,NRVALK
      EIVECT(I,J)=EIVECC(I,J)
 7651 CONTINUE
 7652 CONTINUE
      ENDIF
C
      FMIN=EI1VAL(1)
      IF(JACOMB.EQ.0)THEN
      DO 7615 I=1,NRVAL
      EI1VAL(I)=EI1VAL(I)-FMIN !"JACOMB": SHIFT->CHIMAG
 7615 CONTINUE
      ENDIF
C
      IF(JAABLT.NE.0)GOTO 9843
      IF(JTRANS.NE.0.AND.IOPT2.EQ.0)
     1CALL SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,NRVAL,ND2828,EIVECC,EI1VAL,NDATAP
     2,IOPT2,NRROUT,NRVAL,N63504)
 9843 CONTINUE
C
COMMENT: A Similarity transformation of MATRIX CFDMMM
CO:   (ComplexFieldDirectionMagn.MomentMatrix)
CO:   with help of the formerly calculated eigenvectors EIVECC is calculated,
CO:   however only the diagonal of the matrix is needed and calculated here:
CO:   EFTIMM<->ZE.MAN<->EnergyFieldTemperatureInducedMagn.Moment
CO:   (EFTIMM(I) = (neg.) induced magn. moments in Bohr magnetons)
      DO 98 KZE=1,NRVALK
      COMZEF=DCMPLX(ZERO,ZERO)
      DO 97 IZE=1,NRVALK
      CEEWES=DCMPLX(ZERO,ZERO)
      DO 99 JZE=1,NRVALK
      CEEWES=CEEWES+CFDMMM(IZE,JZE)*EIVECC(JZE,KZE)
   99 CONTINUE
      COMZEF=COMZEF+DCONJG(EIVECC(IZE,KZE))*CEEWES
   97 CONTINUE
      ZE1MAN(KZE)=ZERO
C**   (THE G-FACTOR FOR SPIN (=2) IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERU=DBLE(COMZEF)
C      DUMMYD(KZE)=DIMAG(COMZEF) !=ZERO: The diagonal is of course real!
      IF(DABS(ZEWERU).GE.PARWUR)ZE1MAN(KZE)=ZEWERU
   98 CONTINUE
C
C**   3=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(3,NRROUT,NRSTOR !NRROUT=2
     1,NRVALK,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EI1VAL
     3,ZE1MAN,JAABLT)
C
 9989 CONTINUE
      IF(INSUGC.NE.2)GOTO 9999
      KOMBI1=KOMBIN+1
      KOMDEL=NRVAL-KOMBIN
      IF(KOMDEL.EQ.0)GOTO 9999
C**   1=NRCALL
      DO 6122 J=KOMBI1,NRVAL
      DO 7716 I=J,NRVAL
      TEMPPR=DCMPLX(DIRECZ(1),ZERO)*FMAT(I,J,1)+DCMPLX(DIRECZ(2),ZERO)
     1*FMAT(I,J,2)+DCMPLX(DIRECZ(3),ZERO)*FMAT(I,J,3)
      CFDMMM(I,J)=TEMPPR
 7716 CONTINUE
 6122 CONTINUE
C
      DO 6123 J=KOMBI1+1,NRVAL
      DO 6714 I=KOMBI1,J-1
      CFDMMM(I,J)=DCONJG(CFDMMM(J,I))
 6714 CONTINUE
 6123 CONTINUE
C
      DO 1911 J=1,KOMDEL
      DO 1910 I=J,KOMDEL
      CPXMAT(I,J)=DCMPLX(ZERO,ZERO)
      IF(I.EQ.J)CPXMAT(I,J)=DCMPLX(EIWERT(I+KOMBIN),ZERO)
      CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CFDMMM(I+KOMBIN,J+KOMBIN)
 1910 CONTINUE
 1911 CONTINUE
C**   2=NRCALL
C
      CALL ZHPEVK(1,CPXMAT,EI1VAL(KOMBI1),EIVECC,ND2828,KOMDEL)
C
      DO 6981 KZE=1,KOMDEL
      COMZEF=DCMPLX(ZERO,ZERO)
      DO 6971 IZE=1,KOMDEL
      CEEWES=DCMPLX(ZERO,ZERO)
      DO 6991 JZE=1,KOMDEL
      CEEWES=CEEWES+CFDMMM(IZE+KOMBIN,JZE+KOMBIN)*EIVECC(JZE,KZE)
 6991 CONTINUE
      COMZEF=COMZEF+DCONJG(EIVECC(IZE,KZE))*CEEWES
 6971 CONTINUE
      ZE1MAN(KZE+KOMBIN)=ZERO
      ZEWERU=DBLE(COMZEF)
      IF(DABS(ZEWERU).GE.PARWUR)ZE1MAN(KZE+KOMBIN)=ZEWERU
 6981 CONTINUE
C
      IF(KLICK1.EQ.0)THEN
      KLICK1=1
      WRITE(*,2219)KOMDEL
      WRITE(11,2219)KOMDEL
 2219 FORMAT(/,' FOR JACOMB HERE IN SUGANC, 2nd part:',/
     1' MAX. 24 OF',I6,' EIGENVALUES, IN ASCENDING ORDER (IN ROWS):')
      KASI=KOMDEL
      IF(KASI.GT.24)KASI=24
      WRITE(*,2010)(EI1VAL(I),I=KOMBI1,KOMBIN+KASI)
      WRITE(11,2010)(EI1VAL(I),I=KOMBI1,KOMBIN+KASI)
 2010 FORMAT(6(1X,D12.4))
C
      WRITE(*,2033)
      WRITE(11,2033)
 2033 FORMAT(/,' MAX. 24 (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      WRITE(*,2010)(ZE1MAN(I),I=KOMBI1,KOMBIN+KASI)
      WRITE(11,2010)(ZE1MAN(I),I=KOMBI1,KOMBIN+KASI)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
      ENDIF
C
 9999 CONTINUE
C
      IF(IOPT2.EQ.0)THEN
      IF(MFPLUT.EQ.0)THEN
      CALL CHIMAG(0, !MONOMER
     1CHISI,CHIFLD,TEMPTH,TESLAS
     1,EI1VAL,ZE1MAN,NRVAL,NRROUT,MOROUT,NRTEMP)
      ELSE IF(MFPLUT.NE.0)THEN
      IF((IOPT1.EQ.2).AND.(TEMPIK(NRTEMP).LT.ZERO))THEN
      ITEMP=INT(DABS(TEMPIK(NRTEMP))+0.0000000001D0)
      FIWERT=EI1VAL(ITEMP)
C      
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=FIWERT
      CHI(2,I,J)=CHIMEA(NRTEMP)
 4121 CONTINUE
 4122 CONTINUE
      ENDIF
      ENDIF
      ENDIF !IF(IOPT2.EQ.0)THEN
C
      IF(IOPT2.GT.0.AND.NURTMQ.EQ.0)
     1CALL SUGANK(JACOMB,NOSIMI
     1,FKWERT,FLWERT,FMWERT,FNWERT,GMAT
     1,EIWERT,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC
     2,DIFLOW,DIFMAX !for SUGANO, but not used
     2,EI2VAL,ZE2MAN
     3,CFDMMM,KOMBIN,MOROUT,NRSTOR,NURTMQ !NURTMP not needed
     4,ND252,ND2828
     5,JAABLT,TESLAS,KENNNG
     7,EIWECU,FMATCU,GMATCU,KOMBIC,JTRANS,N63504
C
     8,EIVECT,EIVECU
     8,EI1VAL,EICVAL
     8,NRVAL,NRVALC)
C
      IF(IOPT2.GT.0.AND.NURTMQ.EQ.0)CALL KOMBII(KENNNG,
     1EI2VAL,ZE2MAN,NRVAL,EI1VAL,ZE1MAN,KOMBIN,
     2EICVAL,ZECMAN,NRVALC,KOMBIC)
C
      IF(IOPT2.GT.0)THEN
      IF(MFPLUT.EQ.0)THEN
      CALL CHIMAG(1, !DIMER
     1CHISI,CHIFLD,TEMPTH,TESLAS
     1,EI2VAL,ZE2MAN,NRVAL,NRROUT,MOROUT,NRTEMP) !NRVAL is a DUMMY here!
      ELSE IF(MFPLUT.NE.0)THEN
      IF((IOPT1.EQ.2).AND.(TEMPIK(NRTEMP).LT.ZERO))THEN
      ITEMP=INT(DABS(TEMPIK(NRTEMP))+0.0000000001D0)
      FIWERT=EI2VAL(ITEMP)
C      
      DO 4222 J=1,7
      DO 4221 I=1,4
      CHI(1,I,J)=FIWERT
      CHI(2,I,J)=CHIMEA(NRTEMP)
 4221 CONTINUE
 4222 CONTINUE
      ENDIF
      ENDIF
      ENDIF !IF(IOPT2.GT.0)THEN
C

C**   SUGANC RETURNS TO SELECT!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANC
      END
      SUBROUTINE SUGAND(FMAT,JACOMB
C**   CALLed by SUGANK, where Heisenberg coupling is involved!
C     SUGAND is a copy of the second part of SUGANC, a little modified,
C     and CALLs SUGANY as SUGANC does!
C**   SUBROUTINE SUGAND, if it works, CALLs (SUGANO for more OUTPUT and)
C     ZHPEVK, a link to a routine to diagonalize the matrix CPXMAT!
C     Eigenvalues EI2VAL are calculated and (neg.) induced magn. moments
C     ZE2MAN from the corresponding eigenvectors and matrix CFDMMM,
C     which was calculated in SUGANK together with CPXMAT.
C**   If only temperature has changed (NURTMQ.NE.0), SUGAND does effectively
C     not work!
C     More OUTPUT may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C
C     To the end SUBROUTINE CHIMAG is CALLed, which calculates CHI!
C     SUGAND RETURNs to SUGANK.
C
     1,EIWERT,CPXMAT,TESLAC,DIRECZ,EIVECC
     2,EI2VAL,ZE2MAN,DIFLOW,DIFMAX,CFDMMM
     3,KOMBIQ,MOROUT,NRSTOR,NURTMQ,KOMBIN
     4,ND252,ND2828,JAABLT,TESLAS,JTRANS,N63504)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION EIWERT(*)
     1,TESLAC,DIRECZ(3)
     2,EI2VAL(*),ZE2MAN(*),DIFLOW,DIFMAX
     4,ZERO,ONE,PARWUR,PARWUQ,PARZER
     5,ZEWERU,TESLAS
      DOUBLE PRECISION TEMPIK,CHIMEA,SIGMA,TESDAT,FMIN
      COMPLEX*16 CPXMAT(ND2828,ND2828),EIVECC(ND2828,ND2828)
     1,CFDMMM(ND2828,*),COMZEF,CEEWES,FMAT(ND252,ND252,5)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,MIS8(3),IOPT2,MIS4(2)
     1,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),MIST1(1644)
      SAVE
      NRROUT=3 !NEW!!!
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,25)
      IF(NURTMQ.NE.0)GOTO 9999
C...
C**   2=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(2,NRROUT,NRSTOR !NRROUT=3
     1,KOMBIQ,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EI2VAL
     3,ZE2MAN,JAABLT)
C
C**   AND NOW FOR LOWER STORAGE MODE:
C
      CALL ZHPEVK(1,CPXMAT,EI2VAL,EIVECC,ND2828,KOMBIQ)
C
      FMIN=EI2VAL(1)
      IF(JACOMB.EQ.0)THEN
      DO 7615 I=1,KOMBIQ
      EI2VAL(I)=EI2VAL(I)-FMIN !"JACOMB": SHIFT->CHIMAG
 7615 CONTINUE
      ENDIF
C
      IF(JAABLT.NE.0)GOTO 9843
      IF(JTRANS.NE.0.AND.IOPT2.NE.0)
     1CALL SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,KOMBIN,ND2828,EIVECC,EI2VAL,NDATAP
     2,IOPT2,NRROUT,KOMBIQ,N63504)
 9843 CONTINUE
C
      DO 98 KZE=1,KOMBIQ
      COMZEF=DCMPLX(ZERO,ZERO)
      DO 97 IZE=1,KOMBIQ
      CEEWES=DCMPLX(ZERO,ZERO)
      DO 99 JZE=1,KOMBIQ
      CEEWES=CEEWES+CFDMMM(IZE,JZE)*EIVECC(JZE,KZE)
   99 CONTINUE
      COMZEF=COMZEF+DCONJG(EIVECC(IZE,KZE))*CEEWES
   97 CONTINUE
      ZE2MAN(KZE)=ZERO
      ZEWERU=DBLE(COMZEF)
C      DUMMYD(KZE)=DIMAG(COMZEF)
      IF(DABS(ZEWERU).GE.PARWUR)ZE2MAN(KZE)=ZEWERU
   98 CONTINUE
C
C**   3=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(3,NRROUT,NRSTOR !NRROUT=3
     1,KOMBIQ,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EI2VAL
     3,ZE2MAN,JAABLT)
C
 9999 CONTINUE
C**   SUGAND RETURNS TO SUGANK!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGAND
      END
      SUBROUTINE SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,NRVKOM,ND2828,EIVECC,EIGVAL,NDATAP !NRVKOM<->NRVAL-KOMBIN
     2,IOPT2,NRROUT,NRVBIQ,N63504) !NRVBIQ<->NRVAL-KOMBIQ
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      ALLOCATABLE ZEEMAN(:),CFMATY(:,:)
      COMMON/FLAG/LMN
      COMMON/JC3V/ZWEI12
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPMST,NRDIRE,NDATA,NDMIST
      DOUBLE PRECISION DIRECZ(3),TEMPIK(601),TESDAT(601)
     1,DIRB(3),DIRBJ3(3),DIRBJ2(3),EIGVAL(*)
     2,FMAGNS(601,3),FMATRX(3,3),TLINE(601) !S<->SI units
      COMPLEX*16 EIVECC(ND2828,*),CFMATY,COMZEE,CEEWER
     1,FMAT(ND252,ND252,5),TEMPPR,TEMPPI !ND2828=28*28=784
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,HALF=0.5D0
     1,PARWUQ=PARWUR**2)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,BOLZCM=0.695040D0,PREVOR=-AVOGAD*SIMUBC)
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,26)
      IF(.NOT.ALLOCATED(ZEEMAN))ALLOCATE (ZEEMAN(N63504)) !pseudo ZEEMAN
      IF(.NOT.ALLOCATED(CFMATY))ALLOCATE (CFMATY(ND2828,ND2828))
COMMENT: ZEEMAN IS EFTIMM IN SUBROUTINE CHIMAG, with
CO:   EFTIMM=EnergyFieldTemperatureInducedMagn.Moment - Induced means:
CO:   Projection of the (neg.) magn. moment on the direction of the magn. field
CO:   (EFTIMM(I) = (neg.) induced magn. moments in Bohr magnetons)
      WRITE(11,9700)
 9700 FORMAT(/,' HERE IS SUBROUTINE SUGANY FOR TRANSVERSE COMPONENTS!')
      JTRANS=1
      WRITE(*,9743)(DIRECZ(I),I=1,3)
      WRITE(11,9743)(DIRECZ(I),I=1,3)
      WRITE(14,9743)(DIRECZ(I),I=1,3)
 9743 FORMAT(' 3 DIRECTIONCOS.,'
     1' FOR THE (NEG.) INDUCED MAGN. MOMENT ITSELF, AS STARTING VALUES',
     2/,' (IN THE DIRECTION OF THE MAGN. FIELD):',3D12.4)
      DIRB(3)=DIRECZ(3)
      DIRB(2)=DIRECZ(2)
      DIRB(1)=DIRECZ(1)
 9742 CONTINUE
      IF(JTRANS.EQ.2)THEN
      DIRB(3)=ZERO
      DIRB(2)=ZERO
      DIRB(1)=ZERO
      IF(DIRECZ(3).EQ.ONE)THEN
      DIRB(1)=ONE
      ELSE IF(DIRECZ(2).EQ.ONE)THEN
      DIRB(3)=ONE
      ELSE IF(DIRECZ(1).EQ.ONE)THEN
      DIRB(2)=ONE
      ELSE
      DIRB(2)=DIRECZ(1)/DSQRT(ONE-DIRECZ(3)**2)
      DIRB(1)=DSQRT(ONE-DIRB(2)**2)
      IF(DABS(DIRB(1)*DIRECZ(1)+DIRB(2)*DIRECZ(2)+DIRB(3)*DIRECZ(3)).GT.
     1PARWUR)DIRB(2)=-DIRB(2)
      ENDIF
      ENDIF !IF(JTRANS.EQ.2)THEN
      IF(JTRANS.EQ.2)THEN
      DO 7758 I=1,3
      DIRBJ2(I)=DIRB(I)
 7758 CONTINUE
      WRITE(*,9744)(DIRB(I),I=1,3)
      WRITE(11,9744)(DIRB(I),I=1,3)
      WRITE(14,9744)(DIRB(I),I=1,3)
 9744 FORMAT(' 3 DIRECTIONCOS.,'
     1,' NOW FOR THE TRANSVERSE COMP. OF THE (NEG.) INDUCED MAGN.MOMENT'
     1,/,' (TRANSVERSE TO THE DIRECTION OF THE MAGN. FIELD):',3D12.4)
      ENDIF !IF(JTRANS.EQ.2)THEN
      IF(JTRANS.EQ.3)THEN
      DIRBJ3(1)=DIRECZ(2)*DIRB(3)-DIRECZ(3)*DIRB(2)
      DIRBJ3(2)=DIRECZ(3)*DIRB(1)-DIRECZ(1)*DIRB(3)
      DIRBJ3(3)=DIRECZ(1)*DIRB(2)-DIRECZ(2)*DIRB(1)
      WRITE(*,9744)(DIRBJ3(I),I=1,3)
      WRITE(11,9744)(DIRBJ3(I),I=1,3)
      WRITE(14,9744)(DIRBJ3(I),I=1,3)
      DO 9726 I=1,3
      DIRB(I)=DIRBJ3(I)
 9726 CONTINUE
      ENDIF !IF(JTRANS.EQ.3)THEN
      IF(IOPT2.EQ.0)THEN
      DO 9925 J=1,NRVKOM !NRVAL
      DO 9724 I=J,NRVKOM !NRVAL
      TEMPPR=DCMPLX(DIRB(1),ZERO)*FMAT(I,J,1)+
     1DCMPLX(DIRB(2),ZERO)*FMAT(I,J,2)
      TEMPPI=DCMPLX(DIRB(3),ZERO)*FMAT(I,J,3)
      CFMATY(I,J)=TEMPPR+TEMPPI
 9724 CONTINUE
 9925 CONTINUE
      ELSE IF(IOPT2.EQ.1)THEN
C
      LINROW=0
      DO 1215 JJ=1,NRVKOM !KOMBIN
      DO 1214 J=1,NRVKOM !KOMBIN
      LINROW=LINROW+1
      LINCOL=0
      DO 1213 II=1,NRVKOM
      DO 1212 I=1,NRVKOM
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 1212
      CFMATY(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DCMPLX(DIRB(1),ZERO)*FMAT(I,J,1)+
     1DCMPLX(DIRB(2),ZERO)*FMAT(I,J,2)
      TEMPPI=DCMPLX(DIRB(3),ZERO)*FMAT(I,J,3)
      CFMATY(LINCOL,LINROW)=TEMPPR+TEMPPI
      ENDIF !BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DCMPLX(DIRB(1),ZERO)*FMAT(II,JJ,1)+
     1DCMPLX(DIRB(2),ZERO)*FMAT(II,JJ,2)
C      TEMPPI=DIRB(3)*DCMPLX(ZERO,ONE)*FMAT(II,JJ,5)
      TEMPPI=DCMPLX(DIRB(3),ZERO)*FMAT(II,JJ,3)
      CFMATY(LINCOL,LINROW)=CFMATY(LINCOL,LINROW)+TEMPPR+TEMPPI
      ENDIF !BELONGS TO "IF(I.EQ.J)THEN"!
 1212 CONTINUE
 1213 CONTINUE
 1214 CONTINUE
 1215 CONTINUE
C
      ELSE IF(IOPT2.GT.1)THEN
      WRITE(*,1251)
      WRITE(11,1251)
 1251 FORMAT(' "IOPT2.GT.1" NOT POSSIBLE, ->RETURN')
      RETURN
      ENDIF !BELONGS TO "IOPT2"!
C
      DO 2124 J=2,NRVBIQ
      JM1=J-1
      DO 6716 I=1,JM1
      CFMATY(I,J)=DCONJG(CFMATY(J,I))
 6716 CONTINUE
 2124 CONTINUE
C
      DO 98 K=1,NRVBIQ
      COMZEE=DCMPLX(ZERO,ZERO)
      DO 97 I=1,NRVBIQ
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 99 J=1,NRVBIQ
      CEEWER=CEEWER+CFMATY(I,J)*EIVECC(J,K)
   99 CONTINUE
      COMZEE=COMZEE+DCONJG(EIVECC(I,K))*CEEWER
   97 CONTINUE
      ZEEMAN(K)=ZERO
C**   (THE G-FACTOR FOR SPIN (=2) IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERT=DBLE(COMZEE)
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
   98 CONTINUE
C
      WRITE(11,2033)NRVBIQ
      WRITE(*,2033)NRVBIQ
 2033 FORMAT(
     1' MAX. 66 OF',I4,' (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      KASI=NRVBIQ
      IF(KASI.GT.66)KASI=66
      WRITE(11,2131)(ZEEMAN(K),K=1,KASI)
      WRITE(*,2131)(ZEEMAN(K),K=1,KASI)
 2131 FORMAT(6D12.4)
      DO 1704 J=2,NRVBIQ
      IF((DABS(ZEEMAN(J)+ZEEMAN(J-1)).LT.PARWUQ).
     1AND.(DABS(EIGVAL(J)-EIGVAL(J-1)).LT.PARWUQ).
     1AND.(DABS(ZEEMAN(J)).GT.PARWUR)
     1)THEN
      WRITE(*,1703)PARWUQ,J,J-1
      WRITE(11,1703)PARWUQ,J,J-1
 1703 FORMAT(D10.2,2I7,' =PARWUQ,J,J-1: "DEGENERATED"!')
      ENDIF
 1704 CONTINUE
C
      TEMPPK=ZEEMAN(1)*PREVOR !>0
      IF(NRROUT.GT.2)TEMPPK=TEMPPK/ZWEI12
      WRITE(*,774)ZERO,TEMPPK,TESLAS
      WRITE(11,774)ZERO,TEMPPK,TESLAS
      WRITE(14,774)ZERO,TEMPPK,TESLAS
  774 FORMAT(F7.2,D16.8,
     1' (= MAGN.MOM.*((-AVOGAD*SIMUBC=)7.018244E-6) (SI units)',/,
     2' = SATURATION MOMENT (evtl. TRANSVERS, evtl. DIVIDED BY ZWEI12))'
     3,/,' TESLAS=',D16.8)
      J123=0
      DO 777 J=1,NDATAP !ALL(!) LINES OF CHIINP.DAT!
      IF(TEMPIK(J).LE.ZERO)GOTO 777
      IF(TESDAT(J).NE.TESLAS)GOTO 777
      J123=J123+1
      TEMPPJ=TEMPIK(J)
      FKT=BOLZCM*TEMPPJ
      EFTSUM=ZERO
      PARTI=ZERO
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,NRVBIQ
      EIWFKT=-EIGVAL(I)/FKT
      POPART=DEXP(EIWFKT)
      PARTI=PARTI+POPART
      EFTSUM=EFTSUM+ZEEMAN(I)*POPART
  700 CONTINUE
      IF(NRROUT.GT.2)EFTSUM=EFTSUM/ZWEI12
      CHIQUO=ZERO
      IF(PARTI.NE.ZERO)CHIQUO=EFTSUM/PARTI
COMMENT: THIS RESULT (i.e. CHIQUO) IS (NEG.) MEAN INDUCED MAGN. MOMENT
CO:   IN BOHR MAGNETONS!
CO:   (MOLAR) MAGNETISATION (CHI*FIELD):
      FMAGNS(J123,JTRANS)=PREVOR*CHIQUO !>0, FOR PREVOR SEE "PARAMETER"!
      TLINE(J123)=TEMPPJ
  777 CONTINUE !ENDDO
C
      IF(J123.NE.0)THEN
      WRITE(*,776)
      WRITE(11,776)
      WRITE(14,776)
  776 FORMAT(' TEMP',
     1'/K (TRANSVERS) INDUCED MAGN. MOMENTS - TEMP/K ... - TEMP/K ...')
  775 FORMAT(3(F7.2,D16.8))
      WRITE(*,775)(TLINE(I),FMAGNS(I,JTRANS),I=1,J123)
      WRITE(11,775)(TLINE(I),FMAGNS(I,JTRANS),I=1,J123)
      WRITE(14,775)(TLINE(I),FMAGNS(I,JTRANS),I=1,J123)
      ENDIF !IF(J123.NE.0)THEN
C
      IF(JTRANS.NE.3)THEN
      JTRANS=JTRANS+1
      GOTO 9742
      ENDIF
C-HERE APPENDED (after inserting the part "JTRANS=1"):
C
      IF(J123.NE.0)THEN
      DO 7757 I=1,3
      FMATRX(1,I)=DIRECZ(I)
      FMATRX(2,I)=DIRBJ2(I)
      FMATRX(3,I)=DIRBJ3(I)
 7757 CONTINUE
C
      WRITE(*,7756)
      WRITE(11,7756)
      WRITE(14,7756)
 7756 FORMAT(' TEMP/K,'
     1,' z-, x-, y-Cartesian coordinates, and the lenght of the vector',
     2/,' of the magnetic moment (in SI unit Tesla*m**3/mol).')
      DO 7755 I=1,J123
      ZCART=FMATRX(1,1)*FMAGNS(I,1)+FMATRX(2,1)*FMAGNS(I,2) !Z-CARTesian
     1+FMATRX(3,1)*FMAGNS(I,3)
      XCART=FMATRX(1,2)*FMAGNS(I,1)+FMATRX(2,2)*FMAGNS(I,2)
     1+FMATRX(3,2)*FMAGNS(I,3)
      YCART=FMATRX(1,3)*FMAGNS(I,1)+FMATRX(2,3)*FMAGNS(I,2)
     1+FMATRX(3,3)*FMAGNS(I,3)
      SQSSUM=DSQRT(FMAGNS(I,1)**2+FMAGNS(I,2)**2+FMAGNS(I,3)**2)
      WRITE(*,7760)TLINE(I),ZCART,XCART,YCART,SQSSUM
      WRITE(11,7760)TLINE(I),ZCART,XCART,YCART,SQSSUM
      WRITE(14,7760)TLINE(I),ZCART,XCART,YCART,SQSSUM
 7760 FORMAT(F7.2,4D16.8)
C      CONTSM=DSQRT(ZCART**2+XCART**2+YCART**2)
C      WRITE(*,7759)CONTSM
C      WRITE(11,7759)CONTSM
C 7759 FORMAT(' CONTROL:',D16.8)
 7755 CONTINUE
      ENDIF !IF(J123.NE.0)THEN
C
      WRITE(*,773)
      WRITE(11,773)
      WRITE(14,773)
  773 FORMAT(' SUGANY(JTRANS) RETURNS TO SUGANC OR SUGAND.')
      RETURN
CEND SUGANY
      END
      SUBROUTINE SUGANK(JACOMB,NOSIMI
C**   CALLED BY SUGANC! - CALLS (SUGANO for more OUTPUT and) SUGAND to
C     diagonalize a matrix CPXMAT set up here and to calculate ZE2MAN,
C     the (neg.) induced magnetic moments, which are also called EFTIMM
C     (EFTIMM(I)=EnergyFieldTemperatureInducedMagn.Moment),
C     with help of a matrix CFDMMM, which is also set up here and serves
C     to add the energy resulting from the (abs. value of the) magn. 
C     field to the already computed energies!
C     If only temperature has changed, i.e. if also FKWERT has not
C     changed (NURTMQ.NE.0), SUGANK does effectively not work, and
C     SUGAND is CALLed with NURTMQ!
C**   More OUTPUT may be produced (only) in SUBROUTINE SUGANO,
C     if MOROUT.NE.0!
C     For the same temperature and the same magn. field it is called
C     either once (for IOPT1=2) or up to three times (for IOPT1=1).
C**   Heisenberg coupling is taken into account here in CPXMAT with
C     FAKGQK=-TWO*FKWERT for symmetrical or not symmetrical dimers.
C
C     The g-factor for spin is contained in FMAT. GMAT(ND252,ND252,1:3),
C     which containes only spin, but without g-factor, will be used
C     for Heisenberg coupling.
C
C     In order to be able to take into account not symmetrical dimers,
C     POINTERS are used here, although, because the sequence of the
C     two parts of dimers is all the same, these are not necessary!
C     However an extension of the PROGRAM to e.g. trimers would be
C     enabled, if POINTERS are used! (Use of pointers reduces in any
C     case the lenght of the code to calculate CPXMAT(LINCOL,LINROW)
C     and CFDMMM(LINCOL,LINROW)!)
C     Product states are used as the new basis here, and the dimension
C     is KOMBIQ=ZOMBIN*ZOMBIC with ZOMBIN=>KOMBIN and ZOMBIC=>KOMBIN
C     for symmetrical dimers.
C     For not symmetrical dimers, INPUT of "the other part" comes from
C     file fort.15, a copy of fort.13, and is marked using "C<->Cuprum"!
C     ZOMBIN=>KOMBIN and ZOMBIC=>KOMBIC or ZOMBIN=>KOMBIC and ZOMBIC
C     =>KOMBIN is set corresponding to KENNNG, but for dimers this is
C     all the same, although the sequence is different of course!
C
C     Subroutine KOMBII for "combined model II" is always called,
C     but it runs only formally, not really, if KOMBIN=NRVAL and
C     KOMBIC=NRVALC, i.e. if SUBROUTINE KOMBII not really works.
C     In this case SUBROUTINE SUGANC calculates nothing,
C     else it calculates for the NRVAL values of the monomer within
C     the dimer (JACOMB=1 then)!
C
C     Dimensions of CFDMMM and CPXMAT are (ND2828,ND2828) with
C     ND2828=28**2=784 <=> 4*7 <=> quartet-F state - d electrons!
C     See SUBROUTINE SUGAND resp. SUGANC for more information!
C
C     Here in SUGANK-2.f an option NOSIMI=0 may be chosen! If so,
C     for combined model II (JACOMB=1) the calculated energies EI1VAL
C     (in SUGANC) and, if SUPONG runs, EICVAL, which include the
C     magn. field now, are used here in SUGANK for matrix CPXMAT,
C     which, for JACOMB=1, does not include other contributions
C     of the magn. field. For the contribution of the magn. field to
C     matrix CFDMMM here in SUGANK the matrices FMAT are similarity-
C     transformed using FUNCTION FCFMAT and the eigenvectors
C     EIVECT=EIVECC of SUGANC and, if SUPONG runs, EIVECU=EIVECC
C     (important: the dimension NRVAL instead of KOMBIN and, if
C     SUPONG runs, NRVALC instead of KOMBIC).
C     The matrices GMAT are also similarity-transformed in this case,
C     using FUNCTION GCGMAT!
C
     1,FKWERT,FLWERT,FMWERT,FNWERT,GMAT
     1,EIWERT,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC
     2,DIFLOW,DIFMAX !for SUGANO, but not used
     2,EI2VAL,ZE2MAN
     3,CFDMMM,KOMBIN,MOROUT,NRSTOR,NURTMQ !NURTMP not needed
     4,ND252,ND2828
     5,JAABLT,TESLAS,KENNNG
     7,EIWECU,FMATCU,GMATCU,KOMBIC,JTRANS,N63504
C
     8,EIVECT,EIVECU
     8,EI1VAL,EICVAL
     8,NRVAL,NRVALC)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/JC3V/ZWEI12
      INTEGER ZOMBIN,ZOMBIC,ZNRVAL,ZNRVAC
      DOUBLE PRECISION EIWERT(252) !<->ALLOCATE (EIWERT(ND2002)) IN SUSC
     1,DIRECZ(3)
     2,EI2VAL(*),ZE2MAN(*)
     5,EIWECU(252)
      DOUBLE PRECISION EI1VAL(252),EICVAL(252)
      COMPLEX*16 CPXMAT(ND2828,ND2828)
     1,CFDMMM(ND2828,*),FMAT(ND252,ND252,5)
     1,GMAT(ND252,ND252,3),TEMPPR,TEMPPI,TEMPMR,TEMPMI,FAKMAT
     2,ZGFMAT,ZGGMAT,ZFMATC,ZGMATC
     2,FMATCU(252,252,3),GMATCU(252,252,3)
     3,FCFMAT,GCGMAT
     4,EIVECC(ND2828,ND2828)
      COMPLEX*16 EIVECT(252,252),EIVECU(252,252),EIVEZG,EIVEZU
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,MIST14(7)
      COMMON/MIRROV/FACZ,FACXY
      SAVE
      TARGET KOMBIN,KOMBIC
     1,EIWERT,FMAT,GMAT
     1,EIWECU,FMATCU,GMATCU
      TARGET EIVECT,EIVECU !EIGENVECTORs
     1,EI1VAL,EICVAL !EIGENVALUEs-NEW
     1,NRVAL,NRVALC
      POINTER ZOMBIN,ZOMBIC
     1,ZIWERT(:),ZEIWEC(:)
     1,ZGFMAT(:,:,:),ZFMATC(:,:,:)
     1,ZGGMAT(:,:,:),ZGMATC(:,:,:)
      POINTER EIVEZG(:,:),EIVEZU(:,:) !EIGENVECTORs
     1,ZI1VAL(:),ZICVAL(:) !EIGENVALUEs-NEW
     1,ZNRVAL,ZNRVAC
      DATA KLICK3/0/
     1,KLICKG/0/,KLICKH/0/
      FACXYH=FACXY*HALF
      FACXYV=FACXYH*HALF
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,27)
      NRROUT=4
C
      IF(KENNNG.EQ.0)THEN !SYMM. DIMER
      ZOMBIN=>KOMBIN
C      ZOMBIC=>KOMBIC !.....Cu
      ZOMBIC=>KOMBIN
      ZIWERT=>EIWERT
C      ZEIWEC=>EIWECU
      ZEIWEC=>EIWERT
      ZGFMAT=>FMAT
      ZFMATC=>FMAT
      ZGGMAT=>GMAT
      ZGMATC=>GMAT
      ZNRVAL=>NRVAL
      ZNRVAC=>NRVAL
      ZI1VAL=>EI1VAL
      ZICVAL=>EI1VAL
      EIVEZG=>EIVECT
      EIVEZU=>EIVECT
      ELSE IF(KENNNG.EQ.1)THEN
      ZOMBIN=>KOMBIN
      ZOMBIC=>KOMBIC
      ZIWERT=>EIWERT
      ZEIWEC=>EIWECU
      ZGFMAT=>FMAT
      ZFMATC=>FMATCU
      ZGGMAT=>GMAT
      ZGMATC=>GMATCU
      ZNRVAL=>NRVAL
      ZNRVAC=>NRVALC
      ZI1VAL=>EI1VAL
      ZICVAL=>EICVAL
      EIVEZG=>EIVECT
      EIVEZU=>EIVECU
      ELSE IF(KENNNG.EQ.2)THEN
      ZOMBIN=>KOMBIC
      ZOMBIC=>KOMBIN
      ZIWERT=>EIWECU
      ZEIWEC=>EIWERT
      ZGFMAT=>FMATCU
      ZFMATC=>FMAT
      ZGGMAT=>GMATCU
      ZGMATC=>GMAT
      ZNRVAL=>NRVALC
      ZNRVAC=>NRVAL
      ZI1VAL=>EICVAL
      ZICVAL=>EI1VAL
      EIVEZG=>EIVECU
      EIVEZU=>EIVECT
      ENDIF
      KOMBIQ=ZOMBIN*ZOMBIC
      IF(KOMBIQ.GT.ND2828)STOP 'KONBIQ.GT.ND2828'
      IF(NURTMQ.NE.0)GOTO 9999
C**   1=NRCALL
      IF(NOSIMI.NE.0)THEN
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSTOR !NRROUT=4
     1,KOMBIN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EIWERT,CPXMAT,ND2828,EIVECC,EI2VAL
     3,ZE2MAN,JAABLT)
      ELSE IF(NOSIMI.EQ.0)THEN
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSTOR !NRROUT=4
     1,KOMBIN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,EI1VAL,CPXMAT,ND2828,EIVECC,EI2VAL
     3,ZE2MAN,JAABLT)
      ENDIF
C
      IF(KLICK3.EQ.0)THEN
      KLICK3=1
      WRITE(11,10)
  100 WRITE(*,10)
   10 FORMAT(' MORE THEN 1 ION OR 2 SORTS OF IONS (IN SUGANK)!'
     2,/,' RETURN OR PUT IN ZWEI12 IN F3.1 (0.0->1.0)!'
     3,/,' (THE RESULT/S IN CHIMAG IS/ARE DIVIDED BY ZWEI12)')
      IF(LMN.EQ.0)THEN
      READ(77,'(F3.1)',ERR=5588,END=3883)ZWEI12
      GOTO 4883
      ENDIF
 3883 READ(*,'(F3.1)',ERR=100,END=4576)ZWEI12
      LMN=1
 4883 IF(ZWEI12.EQ.0.0D0)ZWEI12=1.0D0
      WRITE(7,2294)ZWEI12
 2294 FORMAT(F3.1,' =ZWEI12 IN SUGANK')
      WRITE(11,2942)ZWEI12
      WRITE(*,2942)ZWEI12
 2942 FORMAT(F3.1,' =ZWEI12 IN SUGANK!!!!!!!!!')
      ENDIF
C
      FAKGQK=-TWO*FKWERT
C
      LINROW=0
      DO 1215 JJ=1,ZOMBIN !->KOMBIN
      DO 1214 J=1,ZOMBIC !->KOMBIC
      LINROW=LINROW+1
      LINCOL=0
      DO 1213 II=1,ZOMBIN
      DO 1212 I=1,ZOMBIC
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 1212
CCCCCC-1
      IF(NOSIMI.NE.0)THEN !NO SIMILARITY TRANSFORMATION:
      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CFDMMM(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*ZFMATC(I,J,1)+DIRECZ(2)*ZFMATC(I,J,2)
C      TEMPPI=DIRECZ(3)*FMAT(I,J,5)*DCMPLX(ZERO,ONE)
      TEMPPI=DIRECZ(3)*ZFMATC(I,J,3)
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      IF(I.EQ.J)TEMPMR=TEMPMR+DCMPLX(ZEIWEC(I),ZERO)
      CPXMAT(LINCOL,LINROW)=TEMPMR+TEMPMI
      CFDMMM(LINCOL,LINROW)=TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRECZ(1)*ZGFMAT(II,JJ,1)+DIRECZ(2)*ZGFMAT(II,JJ,2)
      TEMPPI=DIRECZ(3)*ZGFMAT(II,JJ,3)
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      IF(II.EQ.JJ)TEMPMR=TEMPMR+DCMPLX(ZIWERT(II),ZERO)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+TEMPMR+TEMPMI
      CFDMMM(LINCOL,LINROW)=CFDMMM(LINCOL,LINROW)+TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
CCCCCC-2
      ELSE IF(NOSIMI.EQ.0)THEN !SIMILARITY TRANSFORMATION:
      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CFDMMM(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
C    FUNCTION FCFMAT(I,J,K,FMAT,NDFMAT,EIVECT,IEI28)
      IF(I.EQ.J)
     1THEN !II
      TEMPPR=DCMPLX(ZERO,ZERO)
      IF(DIRECZ(1).NE.ZERO)TEMPPR
     1=DCMPLX(DIRECZ(1),ZERO)*FCFMAT(II,JJ,1,ZGFMAT,252
     1,EIVEZG,252,ZNRVAL)
      IF(DIRECZ(2).NE.ZERO)TEMPPR=TEMPPR
     1+DCMPLX(DIRECZ(2),ZERO)*FCFMAT(II,JJ,2,ZGFMAT,252
     1,EIVEZG,252,ZNRVAL)
      TEMPPI=DCMPLX(ZERO,ZERO)
      IF(DIRECZ(3).NE.ZERO)TEMPPI
     1=DCMPLX(DIRECZ(3),ZERO)*FCFMAT(II,JJ,3,ZGFMAT,252
     1,EIVEZG,252,ZNRVAL)
      TEMPMR=DCMPLX(ZERO,ZERO)
      TEMPMI=DCMPLX(ZERO,ZERO)
C      IF(JAVANV.EQ.0.AND.JTSTZX.EQ.0)THEN
C      TEMPMR=TEMPPR*TESLAC
C      TEMPMI=TEMPPI*TESLAC
C      ENDIF
      IF(II.EQ.JJ)TEMPMR=TEMPMR+DCMPLX(ZI1VAL(II),ZERO)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+TEMPMR+TEMPMI
      CFDMMM(LINCOL,LINROW)=CFDMMM(LINCOL,LINROW)+TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      IF(II.EQ.JJ)
     1THEN !I
      TEMPPR=DCMPLX(ZERO,ZERO)
      IF(DIRECZ(1).NE.ZERO)TEMPPR
     1=DCMPLX(DIRECZ(1),ZERO)*FCFMAT(I,J,1,ZFMATC,252,EIVEZU,252,ZNRVAC)
      IF(DIRECZ(2).NE.ZERO)TEMPPR=TEMPPR
     1+DCMPLX(DIRECZ(2),ZERO)*FCFMAT(I,J,2,ZFMATC,252,EIVEZU,252,ZNRVAC)
      TEMPPI=DCMPLX(ZERO,ZERO)
      IF(DIRECZ(3).NE.ZERO)TEMPPI
     1=DCMPLX(DIRECZ(3),ZERO)*FCFMAT(I,J,3,ZFMATC,252,EIVEZU,252,ZNRVAC)
      TEMPMR=DCMPLX(ZERO,ZERO)
      TEMPMI=DCMPLX(ZERO,ZERO)
C      IF(JAVANV.EQ.0.AND.JTSTZX.EQ.0)THEN
C      TEMPMR=TEMPPR*TESLAC
C      TEMPMI=TEMPPI*TESLAC
C      ENDIF
      IF(I.EQ.J)TEMPMR=TEMPMR+DCMPLX(ZICVAL(I),ZERO)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+TEMPMR+TEMPMI
      CFDMMM(LINCOL,LINROW)=CFDMMM(LINCOL,LINROW)+TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      ENDIF !IF(NOSIMI.NE.0)THEN - ELSE
C
      IF(NOSIMI.NE.0)THEN !2nd
      FAKMAT=ZGGMAT(II,JJ,1)*ZGMATC(I,J,1)*FACZ
     1+FACXYH*(ZGGMAT(II,JJ,2)*ZGMATC(I,J,3)
     2+ZGGMAT(II,JJ,3)*ZGMATC(I,J,2))
      FAKMAT=FAKMAT*FAKGQK
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+FAKMAT
C**   Z-AXIS IS ION-ION AXIS
      ELSE IF(NOSIMI.EQ.0)THEN !2nd
      FAKMAT=GCGMAT(II,JJ,1,ZGGMAT,252,EIVEZG,252,ZNRVAL)
     1*GCGMAT(I,J,1,ZGMATC,252,EIVEZU,252,ZNRVAC)*FACZ
     1+FACXYV*(GCGMAT(II,JJ,2,ZGGMAT,252,EIVEZG,252,ZNRVAL)
     1*GCGMAT(I,J,2,ZGMATC,252,EIVEZU,252,ZNRVAC)
     2-GCGMAT(II,JJ,3,ZGGMAT,252,EIVEZG,252,ZNRVAL)
     1*GCGMAT(I,J,3,ZGMATC,252,EIVEZU,252,ZNRVAC))
      FAKMAT=FAKMAT*FAKGQK
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+FAKMAT
      ENDIF !IF(NOSIMI.NE.0)THEN - ELSE - 2nd
 1212 CONTINUE
 1213 CONTINUE
 1214 CONTINUE
 1215 CONTINUE
C
C**   CFDMMM HAS TO BE THE WHOLE(!) MATRIX!:
      DO 2122 J=2,KOMBIQ
      DO 3715 I=1,J-1
      CFDMMM(I,J)=DCONJG(CFDMMM(J,I))
 3715 CONTINUE
 2122 CONTINUE
C
 9999 CONTINUE
C
      CALL SUGAND(FMAT,JACOMB
     1,EIWERT,CPXMAT,TESLAC,DIRECZ,EIVECC
     2,EI2VAL,ZE2MAN,DIFLOW,DIFMAX,CFDMMM
     3,KOMBIQ,MOROUT,NRSTOR,NURTMQ,KOMBIN
     4,ND252,ND2828,JAABLT,TESLAS,JTRANS,N63504)
C**   SUGANK RETURNS TO SUGANC!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANK
      END
      FUNCTION FCFMAT(I,J,K,FMAT,NDFMAT,EIVECT,IEI28,NRVALX)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C    SIMILARITY TRANSFORMATION!
C      COMPLEX*16 FMAT(ND252,ND252,5) - FMATCU(28,28,3)
      COMPLEX*16 EIVECT(IEI28,*),SUMSUM,SUM,FCFMAT,FMAT(NDFMAT,NDFMAT,*)
      SUMSUM=(0.0D0,0.0D0)
      DO 11 M=1,NRVALX
      SUM=(0.0D0,0.0D0)
      DO 1 N=1,NRVALX
C      IF(K.EQ.3)THEN !FMAT(,,3) includes SQRT(-1)
C      SUM=SUM+DCMPLX(0.0D0,1.0D0)*FMAT(M,N,3)*EIVECT(N,J)
C      ELSE
      SUM=SUM+FMAT(M,N,K)*EIVECT(N,J)
C      ENDIF
    1 CONTINUE
      SUMSUM=SUMSUM+DCONJG(EIVECT(M,I))*SUM
   11 CONTINUE
      FCFMAT=SUMSUM
C      WRITE(*,*)'K,FCFMAT',K,FCFMAT
      RETURN
CEND FCFMAT
      END
      FUNCTION GCGMAT(I,J,K,GMAT,NDGMAT,EIVECC,IEI28,NRVALX)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C    SIMILARITY TRANSFORMATION!
C      DOUBLE PRECISION GMAT(ND252,ND252,3)
      COMPLEX*16 EIVECC(IEI28,*),SUMSUM,SUM,GCGMAT,GMAT(NDGMAT,NDGMAT,3)
      IF(K.EQ.1)THEN
C      GCGMAT(I,J,1,GMAT,ND252,EIVECC,ND2828)
      SUMSUM=(0.0D0,0.0D0)
      DO 11 M=1,NRVALX
      SUM=(0.0D0,0.0D0)
      DO 1 N=1,NRVALX
      SUM=SUM+GMAT(M,N,1)*EIVECC(N,J)
    1 CONTINUE
      SUMSUM=SUMSUM+DCONJG(EIVECC(M,I))*SUM
   11 CONTINUE
      ELSE IF(K.EQ.2)THEN
C      GCGMAT(II,JJ,2,GMAT,ND252,EIVECC,ND2828)
C      =(GMAT(I,J,2)+GMAT(I,J,3))
      SUMSUM=(0.0D0,0.0D0)
      DO 112 M=1,NRVALX
      SUM=(0.0D0,0.0D0)
      DO 12 N=1,NRVALX
      SUM=SUM+(GMAT(M,N,2)+GMAT(M,N,3))*EIVECC(N,J)
   12 CONTINUE
      SUMSUM=SUMSUM+DCONJG(EIVECC(M,I))*SUM
  112 CONTINUE
      ELSE IF(K.EQ.3)THEN
C      GCGMAT(II,JJ,3,GMAT,ND252,EIVECC,ND2828)
C      =(-GMAT(I,J,2)+GMAT(I,J,3))
      SUMSUM=(0.0D0,0.0D0)
      DO 113 M=1,NRVALX
      SUM=(0.0D0,0.0D0)
      DO 13 N=1,NRVALX
      SUM=SUM+(-GMAT(M,N,2)+GMAT(M,N,3))*EIVECC(N,J)
   13 CONTINUE
      SUMSUM=SUMSUM+DCONJG(EIVECC(M,I))*SUM
  113 CONTINUE
      ELSE
      STOP 'K.IN.GCGMAT'
      ENDIF
      GCGMAT=SUMSUM
C      WRITE(*,*)'K,GCGMAT',K,GCGMAT
      RETURN
CEND GCGMAT
      END
      SUBROUTINE SUPONG(
C     SUBROUTINE SUPONG is CALLed by SUBROUTINE SUGANC and
C     RETURNs to SUGANC.
C     It runs only, if IOPT2=2 ("pingPONG"), if (NRVALC.NE.KOMBIC)
C     ("combined model II runs really for this condition"),
C     and if (NEWFLD.NE.0) ("new value of the magn. field").
C     It is a modified copy of SUGANC with EICVAL, ZECMAN, EIWECU,
C     FMATCU, NRVALC ("C<-> Cuprum") instead of EI1VAL, ZE1MAN, EIWERT,
C     FMAT, NRVAL in SUGANC.
C     SUPONG serves to include the magn. field in CPXMAT, using FMATCU
C     and CFDMMM, in order to get EICVAL and ZECMAN for KOMBII,
C     if combined model II really works (JACOMB=1).
C     Hint: See SUBROUTINE SUGANC for the two parts of EICVAL and
C     of ZECMAN, resp.!
     1CPXMAT,TESLAC,DIRECZ,EIVECC
     2,EICVAL,ZECMAN !CALL ZHPEVK->EICVAL
     3,CFDMMM,MOROUT,ND2828
     7,EIWECU,FMATCU,KOMBIC,NRVALC,INSUGC)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION EIWECU(*)
     1,TESLAC,DIRECZ(3)
     2,EICVAL(*),ZECMAN(*)
     4,ZERO,ONE,PARWUR
     5,ZEWERT,ZEWERU
     6,TEMPIK,CHIMEA,SIGMA,TESDAT,FMIN
      COMPLEX*16 CPXMAT(ND2828,ND2828),EIVECC(ND2828,ND2828)
     1,CFDMMM(ND2828,*),COMZEF,CEEWES
     1,FMATCU(252,252,3),TEMPPR
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6)
      COMMON/ALLGEM/MORMST,MORTEX,MIS8(2),IOPT1,IOPT2,MIS4(2)
     1,NDATAP
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),MIST1(1644)
      SAVE
      DATA KLICKS,KLICK2/0,0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,28)
C
      IF(KLICKS.EQ.0.AND.MOROUT.NE.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(/,' INPUT MOROUT-HERE-IN-SUPONG IN I1')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1,I4)',ERR=5588,END=3437)MOROUU
      GOTO 4937
      ENDIF
 3437 READ(*,'(I1,I4)',ERR=3399,END=4576)MOROUU
      LMN=1
 4937 CONTINUE
      WRITE(*,2239)MOROUU
      WRITE(11,2239)MOROUU
 2239 FORMAT(I2,' =MOROUU IN SUPONG!!!!!!!!!')
      WRITE(7,2392)MOROUU
 2392 FORMAT(I1,' =MOROUU IN SUPONG')
      ENDIF
C
C     IF(INSUGC.EQ.0)GOTO 9989
      NRVALK=NRVALC !K<->KOMBIN
      IF(INSUGC.EQ.2)NRVALK=KOMBIC
      DO 6121 J=1,NRVALK
      DO 7715 I=J,NRVALK
      TEMPPR=DCMPLX(DIRECZ(1),ZERO)*FMATCU(I,J,1)+DCMPLX(DIRECZ(2),ZERO)
     1*FMATCU(I,J,2)+DCMPLX(DIRECZ(3),ZERO)*FMATCU(I,J,3)
      CFDMMM(I,J)=TEMPPR
 7715 CONTINUE
 6121 CONTINUE
C
      DO 2123 J=2,NRVALK
      DO 6715 I=1,J-1
      CFDMMM(I,J)=DCONJG(CFDMMM(J,I))
 6715 CONTINUE
 2123 CONTINUE
C
      DO 111 J=1,NRVALK
      DO 110 I=J,NRVALK
      CPXMAT(I,J)=DCMPLX(ZERO,ZERO)
      IF(I.EQ.J)CPXMAT(I,J)=DCMPLX(EIWECU(I),ZERO)
      CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CFDMMM(I,J)
  110 CONTINUE
  111 CONTINUE
C
      CALL ZHPEVK(1,CPXMAT,EICVAL,EIVECC,ND2828,NRVALK)
C
      IF(MOROUT.NE.0)THEN
      IF(MOROUU.EQ.0.AND.KLICK2.GT.2)GOTO 2128
      KLICK2=KLICK2+1
      FMIN=EICVAL(1)
      WRITE(*,2217)FMIN,KLICK2
 2217 FORMAT(' SUPONG:',
     1/,' < (ALL+1) Z,X,Y- EIGENVALUES,IN ASCENDING ORDER (IN ROWS):',
     1D20.12,/,' ... BECOMES: (OUTPUT ',I2,' FOR SUPONG')
      WRITE(11,2217)FMIN,KLICK2
      WRITE(*,2010)(EICVAL(I),I=1,NRVALK)
      WRITE(11,2010)(EICVAL(I),I=1,NRVALK)
 2010 FORMAT(6(1X,D12.4))
 2128 CONTINUE
      ENDIF
C
      DO 98 KZE=1,NRVALK
      COMZEF=DCMPLX(ZERO,ZERO)
      DO 97 IZE=1,NRVALK
      CEEWES=DCMPLX(ZERO,ZERO)
      DO 99 JZE=1,NRVALK
      CEEWES=CEEWES+CFDMMM(IZE,JZE)*EIVECC(JZE,KZE)
   99 CONTINUE
      COMZEF=COMZEF+DCONJG(EIVECC(IZE,KZE))*CEEWES
   97 CONTINUE
      ZECMAN(KZE)=ZERO
C**   (THE G-FACTOR FOR SPIN (=2) IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERU=DBLE(COMZEF)
C      DUMMYD(KZE)=DIMAG(COMZEF)
      IF(DABS(ZEWERU).GE.PARWUR)ZECMAN(KZE)=ZEWERU
   98 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(11,2130)NRVALK
      WRITE(*,2130)NRVALK
 2130 FORMAT(
     1' (NRVALK IN SUPONG =',I8,') CONTROL: ZECMAN=')
      WRITE(11,2131)(ZECMAN(K),K=1,NRVALK)
      WRITE(*,2131)(ZECMAN(K),K=1,NRVALK)
 2131 FORMAT(6D12.4)
      ENDIF
C9989 CONTINUE
      IF(INSUGC.NE.2)GOTO 9999
      KOMBI1=KOMBIC+1
      KOMDEL=NRVALC-KOMBIC
      IF(KOMDEL.EQ.0)GOTO 9999
C**   1=NRCALL
      DO 6122 J=KOMBI1,NRVALC
      DO 7716 I=J,NRVALC
      TEMPPR=DCMPLX(DIRECZ(1),ZERO)*FMATCU(I,J,1)+DCMPLX(DIRECZ(2),ZERO)
     1*FMATCU(I,J,2)+DCMPLX(DIRECZ(3),ZERO)*FMATCU(I,J,3)
      CFDMMM(I,J)=TEMPPR
 7716 CONTINUE
 6122 CONTINUE
C
      DO 6123 J=KOMBI1+1,NRVALC
      DO 6714 I=KOMBI1,J-1
      CFDMMM(I,J)=DCONJG(CFDMMM(J,I))
 6714 CONTINUE
 6123 CONTINUE
C
      DO 1911 J=1,KOMDEL
      DO 1910 I=J,KOMDEL
      CPXMAT(I,J)=DCMPLX(ZERO,ZERO)
      IF(I.EQ.J)CPXMAT(I,J)=DCMPLX(EIWECU(I+KOMBIC),ZERO)
      CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CFDMMM(I+KOMBIC,J+KOMBIC)
 1910 CONTINUE
 1911 CONTINUE
C**   2=NRCALL
C
      CALL ZHPEVK(1,CPXMAT,EICVAL(KOMBI1),EIVECC,ND2828,KOMDEL)
C
      DO 6981 KZE=1,KOMDEL
      COMZEF=DCMPLX(ZERO,ZERO)
      DO 6971 IZE=1,KOMDEL
      CEEWES=DCMPLX(ZERO,ZERO)
      DO 6991 JZE=1,KOMDEL
      CEEWES=CEEWES+CFDMMM(IZE+KOMBIC,JZE+KOMBIC)*EIVECC(JZE,KZE)
 6991 CONTINUE
      COMZEF=COMZEF+DCONJG(EIVECC(IZE,KZE))*CEEWES
 6971 CONTINUE
      ZECMAN(KZE+KOMBIC)=ZERO
      ZEWERU=DBLE(COMZEF)
      IF(DABS(ZEWERU).GE.PARWUR)ZECMAN(KZE+KOMBIC)=ZEWERU
 6981 CONTINUE
C
      IF(KLICK1.EQ.0)THEN
      KLICK1=1
      WRITE(*,2219)KOMDEL
      WRITE(11,2219)KOMDEL
 2219 FORMAT(/,' FOR JACOMB HERE IN SUPONG, 2nd part:',/
     1' MAX. 24 OF',I6,' EIGENVALUES, IN ASCENDING ORDER (IN ROWS):')
      KASI=KOMDEL
      IF(KASI.GT.24)KASI=24
      WRITE(*,2010)(EICVAL(I),I=KOMBI1,KOMBIC+KASI)
      WRITE(11,2010)(EICVAL(I),I=KOMBI1,KOMBIC+KASI)
C2010 FORMAT(6(1X,D12.4))
C
      WRITE(*,2033)
      WRITE(11,2033)
 2033 FORMAT(/,' MAX. 24 (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      WRITE(*,2010)(ZECMAN(I),I=KOMBI1,KOMBIC+KASI)
      WRITE(11,2010)(ZECMAN(I),I=KOMBI1,KOMBIC+KASI)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
      ENDIF
C
 9999 CONTINUE
C
C**   SUPONG RETURNS TO SUGANC!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUPONG
      END
      SUBROUTINE KOMBII(KENNNG,
C     It is CALLed by SUGANC, and it RETURNs to SUGANC.
C     COMBINED MODEL II runs here always for
C     (IOPT2.GT.0).and.(NURTMQ.EQ.0), however "virtually",
C     i.e. not "really", if KOMBIN=NRVAL and,
C     if IOPT2=2, KOMBIC=NRVALC.
C     (Heisenberg) coupling may be omitted for "higher"
C     energies, but these "higher" energies must not
C     be omitted, i.e. they have to be handled as if
C     they would be coupled with coupling constant "zero"!
C     To have the same sequence of the two parts of not
C     symmetrical dimers as in SUGANK, pointers are used,
C     although this is not necessary! (Use of pointers
C     reduces in any case the lenght of the code!)
     1EI2VAL,ZE2MAN,NRVAL,EI1VAL,ZE1MAN,KOMBIN,
     2EICVAL,ZECMAN,NRVALC,KOMBIC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      DIMENSION EI1VAL(252),EI2VAL(*),EICVAL(252)
      DIMENSION ZE1MAN(252),ZE2MAN(*),ZECMAN(252)
      INTEGER ZOMBIN,ZOMBIC,ZNRVAL,ZNRVAC
      COMMON/ALLGEM/MOROUT,MORTEX,MIST(7)
      COMMON/VALQ/NRVALQ
      SAVE
      DATA KLICK /0/
      TARGET KOMBIN,KOMBIC,NRVAL,NRVALC !K->L, N->M
     1,EI1VAL,ZE1MAN,EICVAL,ZECMAN !E->F, Z->Y
      POINTER ZOMBIN,ZOMBIC,ZNRVAL,ZNRVAC
     1,ZI1VAL(:),ZZE1MN(:),ZICVAL(:),ZZECMN(:)
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,29)
C
      IF(KENNNG.EQ.0)THEN !SYMM. DIMER
      ZOMBIN=>KOMBIN
C      ZOMBIC=>KOMBIC !.....Cu
      ZOMBIC=>KOMBIN
      ZNRVAL=>NRVAL
C      ZNRVAC=>NRVALC !.....Cu
      ZNRVAC=>NRVAL
C
      ZI1VAL=>EI1VAL
      ZICVAL=>EI1VAL !.....Cu
      ZZE1MN=>ZE1MAN
      ZZECMN=>ZE1MAN !.....Cu
      ELSE IF(KENNNG.EQ.1)THEN
      ZOMBIN=>KOMBIN
      ZOMBIC=>KOMBIC
      ZNRVAL=>NRVAL
      ZNRVAC=>NRVALC
C
      ZI1VAL=>EI1VAL
      ZICVAL=>EICVAL !.....Cu
      ZZE1MN=>ZE1MAN
      ZZECMN=>ZECMAN !.....Cu
      ELSE IF(KENNNG.EQ.2)THEN
      ZOMBIN=>KOMBIC
      ZOMBIC=>KOMBIN
      ZNRVAL=>NRVALC
      ZNRVAC=>NRVAL
C
      ZI1VAL=>EICVAL
      ZICVAL=>EI1VAL !.....Cu
      ZZE1MN=>ZECMAN
      ZZECMN=>ZE1MAN !.....Cu
      ENDIF
C
      KOMBIQ=ZOMBIN*ZOMBIC
      NRVALQ=ZNRVAL*ZNRVAC !NRVALCu
C
      IF(KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,6788)
 6787 WRITE(*,6788)
 6788 FORMAT(' INPUT IN I1 YES/NO(0): (TEST:) COMBINATION IGNORED!',
     1/,' (VALID ONLY FOR COMBINED MODEL, IGNORED ELSE!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3818)KOKURZ
      GOTO 4818
      ENDIF
 3818 READ(*,'(I1)',ERR=6787,END=4576)KOKURZ
      LMN=1
 4818 CONTINUE
      WRITE(7,6786)KOKURZ
 6786 FORMAT(I1,' =KOKURZ(=1 for test)')
      WRITE(*,6768)KOKURZ
      WRITE(11,6768)KOKURZ
 6768 FORMAT(I2,' =KOKURZ(=1 for test)!!!!!!!!!')
      ENDIF !KLICK
      IF(KOMBIQ.EQ.NRVALQ)GOTO 2197 !NO COMB. MODEL!
      IF(KOKURZ.NE.0)THEN
      NRVALQ=KOMBIQ
      GOTO 2197 !KOmbii KURZ - NO COMB. MODEL
      ENDIF
C
      NM=KOMBIQ
      DO 2 N=1,ZNRVAL !->NRVAL
      DO 21 M=1,ZNRVAC !.....Cu
      IF(M.LE.ZOMBIC.AND.N.LE.ZOMBIN)THEN
      NMM=(N-1)*ZOMBIN+M
      ENDIF
      IF(M.LE.ZOMBIC.AND.N.LE.ZOMBIN)
     1GOTO 21
      NM=NM+1
      EI2VAL(NM)=
     1ZICVAL(M)+ZI1VAL(N)
      ZE2MAN(NM)=
     1ZZECMN(M)+ZZE1MN(N)
   21 CONTINUE
    2 CONTINUE
C
      IF(NRVALQ.NE.NM)STOP 'NRVALQ.NE.NM'
 2197 CONTINUE
C     KOMBII RETURNS TO SUGANC:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND KOMBII
      END
      SUBROUTINE CHIMAG(MODI01,
C**   CALLED BY SUGANC (for monomers and for dimers)!
     1CHISI,CHIFLD,TEMPTH,TESLAS
     1,EIWERT,EFTIMM,NRVAL,NRROUT,MOROUT,NRTEMP)
C     <=> CHI-MAGnetisation !NRVALG <-> NRVAL - NRVALQ
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/JC3V/ZWEI12
      COMMON/ALLGEM/MOMIST,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      COMMON/VALQ/NRVALQ
      DOUBLE PRECISION CHISI,CHIFLD,TEMPTH,TESLAS,FMAGNB
     1,EIWERT(*),EFTIMM(*),EIWFKT,FMIN
C     NRVALG=NRVAL.or.NRVALQ, corresp. to monomer.or.dimer
COMMENT: EFTIMM=EnergyFieldTemperatureInducedMagn.Moment - Induced means:
CO:   Projection of the (neg.) magn. moment on the direction of the magn. field
CO:   (EFTIMM(I) = (neg.) induced magn. moments in Bohr magnetons)
COMMENT: POPART=PartOfPARTitionfunction $ PARTI=PARTItion function
CO:   EFTSUM=SUMofEFTIMM*POPART=EFTSUM+EFTIMM(I)*POPART
CO:   POPART WORKS AS A WEIGHTING FUNCTION, THEREFORE "MEAN" BELOW!
      DOUBLE PRECISION ZERO,HALF,ONE,TWO,AVOGAD,SIMUBC,SIMUBA,PREVOR
     1,FKT,BOLZCM,BOLTZM,FCHIS,EFTSUM,PARTI,POPART,CHIQUO,ZWEI12
      INTEGER KLICCH
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29,SIMUBA=9.27402D-24
     1,BOLZCM=0.695040D0,PREVOR=-AVOGAD
     2*SIMUBC,BOLTZM=1.380622D-23,FCHIS=AVOGAD*SIMUBA*SIMUBC/BOLTZM)
      SAVE
C**   Calculates (molar) paramagnetic chi in SI units (CHI=CHISI)
C     and magnetisation chi*FIELD=CHI*TESLAS=CHIFLD, for given temperature
C     TEMPTH (in Kelvin) and "magnetic field" FIELD=TESLAS (in Tesla)
C     As input needed: The energy eigenvalues EIWERT and the (neg.) induced
C     magnetic moments EFTIMM (see also ZE.MAN) for the lowest energy
C     eigenvalues ("niveaus") taken in account, their number being NRVAL.
C     The lowest EIWERT is set to zero. The result/s is/are divided by
C     ZWEI12 (put in), if MODI01.GT.0 (symmetric dimer yes or no!).
C     (THE G-FACTOR FOR SPIN (=2) IS CONTAINED IN EFTIMM.)
      DATA KLICK,JANO/0,0/
      DATA KLICCH/0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,30)
      IF(MODI01.EQ.0)NRVALG=NRVAL !IOPT2=0
      IF(MODI01.EQ.1)NRVALG=NRVALQ !IOPT2>0
C
      FMIN=EIWERT(1)
      DO 7615 I=1,NRVALG
      EIWERT(I)=EIWERT(I)-FMIN
 7615 CONTINUE
C
      FKT=BOLZCM*TEMPTH
      EFTSUM=ZERO
      PARTI=ZERO
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,NRVALG
      EIWFKT=-EIWERT(I)/FKT
      POPART=DEXP(EIWFKT)
      PARTI=PARTI+POPART
      EFTSUM=EFTSUM+EFTIMM(I)*POPART
  700 CONTINUE
      IF(MODI01.GT.0)EFTSUM=EFTSUM/ZWEI12
      CHIQUO=ZERO
      IF(PARTI.NE.ZERO)CHIQUO=EFTSUM/PARTI
COMMENT: THIS RESULT (i.e. CHIQUO) IS (NEG.) MEAN INDUCED MAGN. MOMENT
CO:   IN BOHR MAGNETONS:
      FMAGNB=-CHIQUO !>0, FOR MORE OUTPUT, BUT ONLY "HERE"!
CO:   (MOLAR) MAGNETISATION (CHI*FIELD=CHI*TESLAS):
      CHIFLD=PREVOR*CHIQUO !>0, FOR PREVOR SEE "PARAMETER"!
      CHISI=CHIFLD/TESLAS !CHI IN SI UNITS
C**   FMUE=ZERO
C     VPREZ6=1.0D6/(4.D0*3.1415926D0)
C     CHICGS=CHISI*VPREZ6
C     IF(CHICGS.GE.ZERO)FMUE=DSQRT(8.0D0*CHICGS*TEMPTH)
C**   FMUE=SQRT(3.0*BOLTZM/(AVOGAD*SIMUBA*SIMUBC))
C     IF(CHISI.GT.ZERO.AND.TEMPTH.GT.ZERO)FMUE
C    1=797.730D0*DSQRT(CHISI*TEMPTH)
      IF(MOROUT.NE.0)THEN
      IF(KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,77)
 8255 WRITE(*,77)
   77 FORMAT(
     1' MORE OUTPUT IN SUBROUTINE CHIMAG (FOR CHI/MAGN./MAGN.MOMENT)!',/
     2,' FIRST TEMP.: INPUT IN I1: MORE OUTPUT ONLY FOR THIS TEMP. YES(0
     3)/NO',/,' (2 => FIRST TEMP. OF EACH ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3446)JANO
      GOTO 4946
      ENDIF
 3446 READ(*,'(I1)',ERR=8255,END=4576)JANO
      LMN=1
 4946 WRITE(7,2396)JANO
 2396 FORMAT(I1,' =JANO OUTPUT IN CHIMAG')
      WRITE(*,2639)JANO
      WRITE(11,2639)JANO
 2639 FORMAT(I2,' =JANO OUTPUT IN CHIMAG!!!!!!!!!')
      ENDIF
      IF((JANO.EQ.0.AND.KLICCH.GT.0).OR
     1.(JANO.GE.2.AND.NRTEMP.GT.1))GOTO 777
      KLICCH=1
      WRITE(*,70)CHISI,CHIFLD,TEMPTH,TESLAS,FMAGNB
     1,NRVALG,MODI01,NRTEMP
      WRITE(11,70)CHISI,CHIFLD,TEMPTH,TESLAS,FMAGNB
     1,NRVALG,MODI01,NRTEMP
   70 FORMAT(
     1' CHI IN SI, CHI*FIELD =',2D12.5,/
     1' TEMPERATURE, FIELD =',2D12.5,/
     2,' MAGN.MOMENT, No.OF MICRO ST. CONS. ='1D12.5,I8,
     3/,' MONOMER(0) OR DIMER(1), No.OF NEW TEMP. =',2I4)
  777 CONTINUE
      ENDIF
C**   CHIMAG RETURNS TO SUGANC:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND CHIMAG
      END
      SUBROUTINE RESTBL(NOCONV
     1,JASUCC,NRVAL,JASTOP,LAUFNR,NRVALJ,NREL,KLWERT,KASSUM
     2,NRTEMP)
C**   SUBROUTINE RESTBL <=> RES(ALT)T(A)BL(ES)!
C     CALLed by SUBROUTINE SUSFIT, RETURNs to SUSFIT, if
C     JASTOR.EQ.1 (JASTOR put in here!).
C     JASTOR>1: STOP 'JASTOR', END of the calculation,
C     all results are put out in form of 1 table or more tables.
C     Hint: For each line (<->NRTEMP) of the INPUT file is firstly
C     only one single result calculated (CHI-START=CHI(1,1,1)),
C     corresponding to the "measured" CHI (CHI(2,1,1)),
C     however CHI(2,4,1)=CHIMEA(NRTEMP) is the measured CHI
C     from the INPUT file!
C     Derived are (up to) 27 values from CHI(1,1,1) and
C     (the corresponding) 27 values from CHI(2,4,1),
C     e.g. CHI(1,4,1) corresponds to CHI(2,4,1),
C     and CHI(1,4,1) is the resulting corrected calculated CHI!
C     (CHI(,,1..7) are:
C     (1) CHI IN SI UNIT M**3/MOL,
C     (2) RECIPROCAL CHI,
C     (3) MAGNETIC MOMENT OF 1 ATOM IN BOHR MAGNETONS,
C     (4) EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS,
C     (5) MAGNETISATION IN SI UNIT TESLA*M**3/MOL,
C     (6) CHI IN CGS UNIT CM**3/MOL,
C     (7) CHI*T)
C     In addition are put out, to file fort.11 and to fort.1,
C     the 1, 2 or 3 terms ("direction(s)": z-, x-, y-), which
C     are combined to CHI(1,1,1).
C     A lot of text is put out for information on the results,
C     when the SUBROUTINE is running!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/MOWDAT/NOWDAT
      CHARACTER*16 QKK(7),QJJ(4),QII(2),QSS(2)
      CHARACTER*16 QLIST(44),QQLIST(44)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      PARAMETER(J20=44)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      COMMON/QQQQQQ/QQ
      COMMON/QBQVQQ/QB,QV
      COMMON/ALLGEN/
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWWWXX(J20),IBWWW(J20)
     2,LOWDAT(601)
     3,NDATAM,BWWOMP(J20)
     1,MINDAT(601),J2
      COMMON/ALLGEO/CHI(2,4,7),CHISTA(601),CHIZXY(3,601),FKWERT
     1,FLWERT,FMWERT,FNWERT
      COMMON/CROVER/VLSTNG(44)
C
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(J20),CHIFIX
     1,CFOSXJ,NOTONE,JAMIST
      DIMENSION CHIFIX(601,4),WLSTNG(44)
C
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,PARWUQ=PARWUR**2
     1,FOUR=4.0D0,VPREZ6=1.0D6/(FOUR*3.1415926D0))
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
C
      DIMENSION IDATA(3,6,36),IIN(3,6),II(3,6),KEND(36)
C**   II(1,)=1 <=> CALCUL. CHI! - II(1,)=2 <=> MEASURED CHI!
C**   II(2,)=1 <=> CHI-START! - II(2,)=2 <=> CHI-CALC.*F-CHI0!
C     - II(2,)=3 <=> CHI-CALC.*F! - II(2,)=4 <=> CHI-CALC.,
C     I.E. CHI INCL. LAM., CHI0 AND /F; BUT ATTENTION: MEASURED CHI
C     ITSELF, I.E. WITHOUT ANY CORRECTIONS, IS TO BE COMPARED WITH CHI-CALC.!
C**   II(3,)=1 <=> CHI IN SI UNITS - II(3,)=4 <=> MU-EFF.! - II(3,)=6 <=> "CGS"!
      SAVE
      DATA QKK
     1/'CHI IN SI UNITS ','     1/CHI      ','   MAGN.MOMENT  '
     1,'  MU EFFECTIVE  ','    CHI*FIELD   ','   CHI IN CGS   '
     2,'  CHI*TEMP/K    '/
      DATA QJJ
     1/'   CHI-START    ','CHI-CALC.*F-CHI0','  CHI-CALC.*F   '
     1,'   CHI-CALC.    '/
      DATA QII/'   CALCULATED   ','    MEASURED    '/
      DATA QSS/'  CALCUL. CHI   ','  MEASURED CHI  '/
      DATA KLICK1,KLICK2/0,0/
C
      DATA QLIST
     1/' =DIR. FIELD(Z),',' =DIR. FIELD(X),',' =DIR. FIELD(Y),'
     2,' =DIST. (DIMER),',' =NEW FIELD,    ',' =RACAH-B,      '
     3,' =RACAH-C,      ',' =F-INTEGRAL(2),',' =F-INTEGRAL(3),'
     4,' =F-INTEGRAL(4),',' =ZETA (1 EL.), ',' =ORB.RED.F.(Z),'
     5,' =ORB.RED.F.(X),',' =ORB.RED.F.(Y),','                '
     6,' =B20(WYBOURNE),',' =B22(WYBOURNE),',' =B40(WYBOURNE),'
     7,' =B42(WYBOURNE),',' =B43(WYBOURNE),',' =B44(WYBOURNE),'
     8,' =B60(WYBOURNE),',' =B62(WYBOURNE),',' =B63(WYBOURNE),'
     9,' =B64(WYBOURNE),',' =B66(WYBOURNE),',' =J(HEISENBERG),'
     1,' =MOL.FLD.PARAM,',' =THETA: %%%%% ,',' =CHI-0 (DIAM.),'
     1,' =CORR.(WEIGHT),',' %,             ',' %,             '
     2,' %,             ',' %,             ',' =B21(WYBOURNE),'
     3,' =B41(WYBOURNE),',' =B61(WYBOURNE),',' =B65(WYBOURNE),'
     4,' =ORBRED.F(ZXY),',' =ZETA (1 EL.), ',' =RACAHB / F**2,'
     5,' =RACAHC / F**4,',' = F(4)<=>F**6, '/
C
      DATA IDATA 
     1/1,4,1,1,4,2,1,4,3,1,4,5,1,4,6,1,4,4
     2,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     3,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     4,1,4,1,1,1,1,1,1,2,1,4,2,1,1,3,1,1,4
     5,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     6,1,4,1,1,1,1,1,1,2,1,4,2,1,2,3,1,2,4
     7,1,4,1,1,1,1,1,1,2,1,4,2,1,3,3,1,3,4
     8,1,4,1,1,1,1,1,1,2,1,4,2,1,3,3,1,3,4
     9,1,4,1,1,4,2,1,4,3,1,4,6,1,4,7,1,4,4
     1,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
     1,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
     2,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
C
     1,2,4,1,1,4,1,2,4,2,1,4,2,2,4,4,1,4,4
     1,2,4,3,1,4,3,2,4,5,1,4,5,2,4,6,1,4,6
     2,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     2,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     3,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     3,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     4,2,4,1,1,4,1,2,1,1,1,1,1,2,1,4,1,1,4
     4,2,1,2,1,1,2,2,4,2,1,4,2,2,1,3,1,1,3
     5,2,4,1,1,4,1,2,1,1,1,1,1,2,1,4,1,1,4
     5,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     6,2,4,1,1,4,1,2,1,1,1,1,1,2,2,4,1,2,4
     6,2,1,2,1,1,2,2,4,2,1,4,2,2,2,3,1,2,3
     7,2,4,1,1,4,1,2,1,1,1,1,1,2,3,4,1,3,4
     7,2,1,2,1,1,2,2,4,2,1,4,2,2,3,3,1,3,3
     8,2,4,1,1,4,1,2,1,1,1,1,1,2,3,4,1,3,4
     8,2,1,2,1,1,2,2,4,2,1,4,2,2,3,3,1,3,3
     9,2,4,1,1,4,1,2,4,2,1,4,2,2,4,4,1,4,4
     9,2,4,3,1,4,3,2,4,6,1,4,6,2,4,7,1,4,7
     1,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     1,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7
     1,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     1,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7
     2,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     2,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7/
C
      DATA KEND
     1/1,2,3,4,5,6,7,8,9,10,11,12,14,0,16,0,18,0,20,0,22,0,24,0,26,0,28,
     10,30,0,32,0,34,0,36,0/
C
      IF(J2.NE.J20)STOP 'J2.NE.J20'
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,31)
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
C
      SQX=SQXFIX
      CFMS=CFMSFX
      CFOS=CFOSFX
      CFOSJ=CFOSXJ
      IGR1=IGR1FX
      IGR2=IGR2FX
C
      NDAT=1
      NDAT=NDATAP
CRD      THETA=BWNULL(14)
      SILAMB=BWNULL(13)
      CHIDIA=BWNULL(15)
      GEWFAC=BWNULL(16)
      JTHETA=0
CRD      IF(THETA.NE.ZERO.OR.IBWWW(14).NE.0)JTHETA=1
      THETA=ZERO
      JALAMB=0
      IF(SILAMB.NE.ZERO.OR.IBWWW(13).NE.0)JALAMB=1
      JACHI0=0
      IF(CHIDIA.NE.ZERO.OR.IBWWW(15).NE.0)JACHI0=1
      JAFFAC=0
      IF(GEWFAC.NE.ONE.OR.IBWWW(16).NE.0)JAFFAC=1
C**   JAFFAK(!) IN COMMON, <=> 13 OR 15 OR 16.
C
      MFITTT=MFIT
      KURZTB=6
      KURZTB=2
      IF(MFIT.EQ.0)KURZTB=1
C     IF(JASTOP.GE.3)KURZTB=JASTOP !JASTOP=0
      IF(KURZTB.EQ.3)MFITTT=0
      IF(JASTOP.EQ.0.OR.MOROUT.NE.0)THEN
      IF(MFIT.EQ.0)THEN
      WRITE(*,829)
      WRITE(11,829)
  829 FORMAT(/,' HINT: OUTPUT CORRESPONDS TO "NO FITTING TAKES PLACE"')
      WRITE(11,831)
  832 WRITE(*,831)
  831 FORMAT(' INPUT 1, IF FORM OF OUTPUT => "<=> FITTING TAKES PLACE", 
     1',/,' BUT 3 (6) FOR "NO FITTING (FITTING), BUT 6 COLUMNS" (0 ELSE)
     2')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3414)MFITIN
      GOTO 4914
      ENDIF
 3414 READ(*,'(I1)',ERR=832,END=4576)MFITIN
      LMN=1
 4914 CONTINUE
      ELSE
      WRITE(*,830)
      WRITE(11,830)
  830 FORMAT(/,' HINT: OUTPUT CORRESPONDS TO "FITTING TAKES PLACE"')
      WRITE(11,828)
  827 WRITE(*,828)
  828 FORMAT(' INPUT 1, IF FORM OF OUTPUT => "<=> NO FITTING TAKES PLACE
     1"',/,' BUT 6 (3) FOR "FITTING (NO FITTING), BUT 6 COLUMNS" (0 ELSE
     2)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3415)MFITIN
      GOTO 4915
      ENDIF
 3415 READ(*,'(I1)',ERR=827,END=4576)MFITIN
      LMN=1
 4915 CONTINUE
      ENDIF
C
      WRITE(*,2377)MFITIN
      WRITE(11,2377)MFITIN
 2377 FORMAT(I2,' =MFITIN(FORM OF OUTPUT)!!!!!!!!!')
      WRITE(7,2376)MFITIN
 2376 FORMAT(I1,' =MFITIN(FORM OF OUTPUT)')
      MFITTT=MFITIN
      IF(MFIT.NE.0.AND.MFITIN.EQ.0)MFITTT=1
      IF(MFIT.NE.0.AND.MFITIN.EQ.1)MFITTT=0
      KURZTB=2
      IF(MFITTT.EQ.0)KURZTB=1
      IF(MFITTT.GE.3)KURZTB=6
      IF(MFITTT.EQ.3)MFITTT=0
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(JASTOP.EQ.0.OR.MOROUT.NE.0)THEN"
      IF(MFITTT.EQ.0)THEN
      WRITE(*,829)
      WRITE(11,829)
      ELSE
      WRITE(*,830)
      WRITE(11,830)
      ENDIF
      IF(MFITTT.EQ.0)THEN
C**   IF(JAFFAK.EQ.0.AND.JTHETA.EQ.0):
      KSTART=1
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=2
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=3
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=4
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=5
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=6
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=7
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=8
C
      ELSE IF(MFITTT.NE.0)THEN
C**   IF(JAFFAK.EQ.0.AND.JTHETA.EQ.0):
      KSTART=13
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=15
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=17
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=19
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=21
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=23
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=25
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=27
C
      ENDIF
      KKK=KSTART
C
      IF(MORTEX.GT.0.AND.KLICK1.EQ.0)THEN
      KLICK1=1
      WRITE(*,567)
      WRITE(11,567)
  567 FORMAT(' CHI((1)...(2),1:4,1:7):'
     1,' (1) CALCULATED VALUES, (2) VALUES BASED ON MEASURED ONES')
      WRITE(*,678)
      WRITE(11,678)
  678 FORMAT(' CHI(1,(1)...(4),1:7):'
     1,' (1) CALCULATED VALUES, E.G. FROM FORMULA FOR MAGN. MOMENT,'
     2,/,' (2) ... INCLUDING MOLECULAR FIELD PARAMETER,'
     3,/,' (3) INCLUDING IN ADDITION CHI-0,',/,' (4) INCLUDING'
     4,' FURTHERMORE A CORRECTION OF WEIGHT OF SAMPLE.')
      WRITE(*,789)
      WRITE(11,789)
  789 FORMAT(' CHI(2,(1)...(4),1:7):',/
     1,' MEASURED VALUES WITH (1) THREE, (2) TWO, (3) ONE, (4) WITHOUT'
     2,' (I.E. AS READ IN)',/,' CORRECTIONS (CORRECTIONS IN PRINCIPLE'
     3,' AS ABOVE, BUT REVERSED)')
      WRITE(*,890)
      WRITE(11,890)
  890 FORMAT(' CHI(1:2,1:4.(1)...(7)):'
     1,' (1) CHI IN SI UNIT M**3/MOL, (2) RECIPROCAL CHI,',/
     2,' (5) MAGNETISATION IN SI UNIT TESLA*M**3/MOL, (3) MAGNETIC'
     3,/,' MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G. SATURATION MOMENT),'
     4,/,' (4) EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS, (6) CHI IN',
     5' CGS UNIT CM**3/MOL,',/,' (7) CHI*T')
C** 1) CHI IN CGS UNIT CM**3/MOL = CHI IN SI UNIT M**3/MOL TIMES (VPREZ6
C    =79577.47)
C   2) TESLA*M**3 = VOLT*SECOND*M WITH VOLT = KG*M**2/(AMPERE*SECOND**3)
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(MORTEX.GT.0.AND.KLICK1.EQ.0)THEN"!
C
      LOOPNR=-1
C**   FROM BELOW (NEAR END):
  999 CONTINUE
C**   FOR EXTRA OUTPUT BELOW, IF "MORE DIRECTIONS" (DO 196), AND FOR
C     "MORE TABLES":
      LOOPNR=LOOPNR+1
      KKK=KKK+LOOPNR
      DO 1234 J=1,6
      DO 7149 I=1,3
      II(I,J)=IDATA(I,J,KKK)
 7149 CONTINUE
 1234 CONTINUE
      IF(KURZTB.GT.2.AND.LOOPNR.EQ.0)THEN
      WRITE(*,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(*,891)
      WRITE(11,891)
  891 FORMAT(
     1' ... THESE DIGITS MEAN THE FOLLOWING (DIMENSION CHI(2,4,7)):')
      WRITE(*,344)((II(I,J),I=1,3),J=1,6)
      WRITE(11,344)((II(I,J),I=1,3),J=1,6)
  344 FORMAT(
     1' CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,'), '
     1,'CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,'), '
     1,'CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,')')
      WRITE(*,567)
      WRITE(11,567)
C 567 FORMAT: SEE ABOVE!
      WRITE(11,3453)(QKK(I),I=1,7)
      WRITE(11,3454)(QJJ(I),I=1,4)
 3453 FORMAT(' CHI(,,1:7) MEANS: ',7A16)
 3454 FORMAT(' THE FORMER (TO COMPARE WITH THAT) BASED ON CHI(1,1:4, ):
     1',4A16) 
      WRITE(*,3457)(QKK(I),I=1,7)
      WRITE(*,3458)(QJJ(I),I=1,4)
 3457 FORMAT(' CHI( , ,1:7) MEANS:       ',1A16,/,3A16,/,3A16)
 3458 FORMAT(' THE FORMER (TO COMPARE WITH THAT) BASED ON CHI(1,1:4, ):
     1',/,4A16) 
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(KURZTB.GT.2.AND.LOOPNR.EQ.0)THEN!
C**   IF ERROR WHEN READING BELOW:
 8237 CONTINUE
      IF(KURZTB.GT.2.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN
      WRITE(11,892)
      WRITE(*,892)
  892 FORMAT(' INPUT IN 18I1 18 DIGITS, WHICH MAY BE DIFFERENT'
     1,' (0 <=> AS BEFORE)',/,
     1' (THE 1TH DIGIT =3,4,>4 <=> =1,2,0, BUT 2 COLUMNS => TERMINAL)')
      IF(LOOPNR.NE.0)WRITE(*,893)((IDATA(I,J,KKK),I=1,3),J=1,6)
      IF(LOOPNR.NE.0)WRITE(11,893)((IDATA(I,J,KKK),I=1,3),J=1,6)
  893 FORMAT(' E.G. THE FOLLOWING:',18I1)
      IF(LMN.EQ.0)THEN
      READ(77,'(18I1)',ERR=5588,END=3416)((IIN(I,J),I=1,3),J=1,6)
      GOTO 4916
      ENDIF
 3416 READ(*,'(18I1)',ERR=8237,END=4576)((IIN(I,J),I=1,3),J=1,6)
      LMN=1
 4916 WRITE(7,'(18I1)')((IIN(I,J),I=1,3),J=1,6)
      WRITE(*,'(I2,17I1)')((IIN(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((IIN(I,J),I=1,3),J=1,6)
      KURZZL=0
      IF(IIN(1,1).GT.2)THEN
      KURZZL=1
      IIN(1,1)=IIN(1,1)-2
      ENDIF
      DO 2243 J=1,6
      DO 234 I=1,3
      IF(IIN(I,J).NE.0)THEN
      IF(I.EQ.1.AND.IIN(I,J).LE.2)II(I,J)=IIN(I,J)
      IF(I.EQ.2.AND.IIN(I,J).LE.4)II(I,J)=IIN(I,J)
      IF(I.EQ.3.AND.IIN(I,J).LE.7)II(I,J)=IIN(I,J)
      ENDIF
  234 CONTINUE
 2243 CONTINUE
      WRITE(*,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      ENDIF
C
      IF(LOOPNR.EQ.0)THEN
      IF(NDATAM.EQ.0)THEN
      WRITE(*,3292)
      WRITE(11,3292)
 3292 FORMAT(' NDATAM.EQ.0: SQX REMAINS ZERO!')
      ELSE IF(NDATAM.NE.0)THEN
      IF(MORTEX.GE.0)THEN
C...
      IF(IOPT3.NE.0)THEN
      WRITE(*,3182)
      WRITE(11,3182)
 3182 FORMAT(
     1' CHI-0, AN ADDITIVE CONSTANT TO CHI IN SI UNITS, IS NOT ZERO',/
     2,' AND/OR WAS FITTED: CHI-0 WAS NOT ADDED TO THE CALC. CHI-START'
     3,/,' IN COMPARING CALCULATED AND MEASURED CHI TO GET SQX!')
      ENDIF
CRD      IF(NOPROZ.EQ.0)THEN
      WRITE(*,3119)
      WRITE(11,3119)
 3119 FORMAT(/,
     1' A (SUM OF) LEAST SQUARE(S) FIT WAS DONE (SQUARED WAS CHI-CALC./C
     2HI-MEAS.-ONE),',/,' BUT SQRT((THIS SUM)/(No.OF VAL. FITTED)) IS GI
     3VEN HERE AS SQX (*100<=>"%")!:')
CRD      ENDIF
      ENDIF
      ENDIF
      ENDIF
C
      IF(MORTEX.GT.0.AND.KLICK2.EQ.0)THEN
      KLICK2=1
      WRITE(*,3117)
      WRITE(11,3117)
 3117 FORMAT(
     1' SQX, CRYSTAL FIELD MINIMAL SPLITTING (CFMS) AND THE TWO DEGENERA
     2CIES',/,' BELONGING TO THESE TWO LEVELS, AND THE EIGENVALUE OF THE
     3 LEVEL "No. OF VAL.',/,' (NRVAL)", WHICH MAY BE THE CRYSTAL FIELD 
     4OVER ALL SPLITTING (CFOS), IF NRVAL',/,' HAS BEEN CHOSEN IN THE RI
     5GHT WAY! AND: CFOSJ(NRVALJ) <=> NRVALJ=2*J+1,',/,' IF F EL. AND <=
     6> NRVALJ=SPIN-MULTIPL.*ORB.-MULTIPL., ELSE.')
      ENDIF
      IF(LOOPNR.EQ.0)THEN
      WRITE(*,3120)SQX,CFMS,IGR1,IGR2,CFOS,NRVAL,CFOSJ,NRVALJ
      WRITE(11,3120)SQX,CFMS,IGR1,IGR2,CFOS,NRVAL,CFOSJ,NRVALJ
 3120 FORMAT(
     1' SQX, CFMS, DEGEN.1, DEGEN.2, CFOS, No. OF VAL., CFOSJ, NRVALJ ='
     1,/,2D12.4,2I3,D12.4,I6,D12.4,I6)
      WRITE(*,354)
      WRITE(11,354)
  354 FORMAT(/,' "00" MEANS: FITTED, "10": NOT (FROM INPUT), "01": NOT (
     1FROM CALC.)')
      IF(NOTONE.NE.0)THEN
      WRITE(*,3544)
      WRITE(11,3544)
 3544 FORMAT(' SUM OF 1/SIGMA**2 = No. OF VALUES!')
      ENDIF
      ENDIF
      IF(LOOPNR.EQ.0)THEN
C
      IF(KURZTB.GT.2)THEN
      WRITE(11,567)
      WRITE(*,567)
      WRITE(11,1945)
      WRITE(*,1945)
 1945 FORMAT(' "CHI-START" MEANS: CHI CALCULATED FROM ENERGIES AND MAGN.
     1 MOMENTS WITHOUT',/,' ANY FURTHER CORRECTIONS, "CHI-CALC." INCLUDE
     2S ALL THESE CORRECTIONS.',/,' FOR "MEASURED CHI" ALL CORRECTIONS '
     2,'(LAMBDA, CHI-0, WEIGHT) ARE APPLIED',/,' IN REVERSED ORDER, AND 
     3CHI-MEAS.=CHI(2,4,1) AND CHI(1,4,1) HAVE TO BE COMPARED!')
      ENDIF
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(11,3450)(QII(II(1,I)),I=1,6)
      WRITE(11,3451)(QKK(II(3,I)),I=1,6)
      WRITE(11,3452)(QJJ(II(2,I)),I=1,6)
 3450 FORMAT(/,'            CHI(*, , ) MEANS:       ',6A16)
 3451 FORMAT('            CHI( , ,*) MEANS:       ',6A16)
 3452 FORMAT('  (TO COMPARE WITH THAT) BASED ON: ',6A16)
      WRITE(*,3462)(QII(II(1,I)),I=1,6)
      WRITE(*,3455)(QKK(II(3,I)),I=1,6)
      WRITE(*,3456)(QJJ(II(2,I)),I=1,6)
 3462 FORMAT('            CHI(*, , ) MEANS:       ',2A16,4A14)
 3455 FORMAT('            CHI( , ,*) MEANS:       ',2A16,4A16)
 3456 FORMAT('  (TO COMPARE WITH THAT) BASED ON: ',2A16,4A16)
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(11,345)((II(I,J),I=1,3),J=1,6)
  345 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA    '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')')
      WRITE(*,346)((II(I,J),I=1,3),J=1,6)
  346 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA    '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')')
      ELSE
      WRITE(11,347)(QSS(I),I=KURZTB,1,-1)
      WRITE(*,347)(QSS(I),I=KURZTB,1,-1)
  347 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA',2A16)
      ENDIF
C
C**   SEE ABOVE: NDAT =1 OR =NDATAP!:
      DO 195 N=1,NDAT
CRD      NR=NRTEMP
      NR=N
C
      IF(TEMPIK(NR).LT.ZERO)THEN
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=CHISTA(NR)
      CHI(2,I,J)=CHIMEA(NR)
 4121 CONTINUE
 4122 CONTINUE
      GOTO 194
      ENDIF
C
      TEMPTH=TEMPIK(NR)-THETA !THETA=ZERO
C
C**   THE FOLLOWING 44 LINES ARE COPIED FROM SELECT (NRTEMP<=>NR, CHISTA(NRTEMP)
C     =CHI(1,1,1), BWYW=STBWWW (IN SUSC, =>"SELECT")), BUT WITHOUT COMMENT AND
C     WITHOUT 14 LINES "DO 3121...3121 CONTINUE"!:
      CHI(2,4,1)=CHIMEA(NR)
      CHI(1,1,1)=CHIFIX(NR,4)
      CHI(1,2,1)=CHI(1,1,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(1,1,1).NE.ZERO)DENOM=-SILAMB+ONE/CHI(1,1,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(1,2,1)=ONE/DENOM
      ENDIF
      CHI(1,3,1)=CHI(1,2,1)+CHIDIA
      CHI(1,4,1)=CHI(1,3,1)
      IF(GEWFAC.NE.ONE)CHI(1,4,1)=CHI(1,3,1)/GEWFAC
      TESLAS=TESDAT(NR)
      DO 3121 I=1,4
      CHI(1,I,2)=ZERO
      IF(CHI(1,I,1).NE.ZERO)CHI(1,I,2)=ONE/CHI(1,I,1)
      CHI(1,I,5)=CHI(1,I,1)*TESLAS
      CHI(1,I,3)=-CHI(1,I,5)/PREVOR
      CHI(1,I,4)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPIK(NR).GT.ZERO)CHI(1,I,4)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPIK(NR))
CRD      CHI(1,I,7)=ZERO
CRD      IF(CHI(1,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(1,I,7)
CRD     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPTH)
      CHI(1,I,7)=CHI(1,I,1)*TEMPIK(NR)
      CHI(1,I,6)=CHI(1,I,1)*VPREZ6
 3121 CONTINUE
C
      CHI(2,3,1)=CHI(2,4,1)
      IF(GEWFAC.NE.ONE)CHI(2,3,1)=CHI(2,4,1)*GEWFAC
      CHI(2,2,1)=CHI(2,3,1)-CHIDIA
      CHI(2,1,1)=CHI(2,2,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(2,2,1).NE.ZERO)DENOM=+SILAMB+ONE/CHI(2,2,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(2,1,1)=ONE/DENOM
      ENDIF
C
      DO 3122 I=1,4
      CHI(2,I,2)=ZERO
      IF(CHI(2,I,1).NE.ZERO)CHI(2,I,2)=ONE/CHI(2,I,1)
      CHI(2,I,5)=CHI(2,I,1)*TESLAS
      CHI(2,I,3)=-CHI(2,I,5)/PREVOR
      CHI(2,I,4)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPIK(NR).GT.ZERO)CHI(2,I,4)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPIK(NR))
CRD      CHI(2,I,7)=ZERO
CRD      IF(CHI(2,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(2,I,7)
CRD     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPTH)
      CHI(2,I,7)=CHI(2,I,1)*TEMPIK(NR)
      CHI(2,I,6)=CHI(2,I,1)*VPREZ6
 3122 CONTINUE
C
  194 CONTINUE
C
      IF(KURZTB.GT.2)THEN
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
      IF(KURZZL.EQ.0)THEN
      WRITE(*,457)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
      ELSE
      WRITE(*,475)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
  457 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,2D16.8,4D16.8)
  475 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,2D16.8)
      ELSE IF(KURZTB.EQ.1)THEN
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      WRITE(*,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      ELSE
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      WRITE(*,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
      IF(N.EQ.NDAT)THEN
      WRITE(*,5678)
      WRITE(11,5678)
 5678 FORMAT(
     1' THE TABLE PUT OUT HERE ALSO PUT OUT TO FILE fort.1!')
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
  456 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,6(E16.8))
      ELSE IF(KURZTB.EQ.1)THEN
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      ELSE
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
      IF(N.EQ.NDAT)THEN
      WRITE(1,5679)
 5679 FORMAT(
     1' THE TABLE PUT OUT HERE ALSO PUT OUT TO FILE fort.11!')
      ENDIF
C
  195 CONTINUE
C
      IF(LOOPNR.EQ.0)THEN
C**   DO 1971 I=27(!),35->44
C     IMIN=I-15
C     VLSTNG(I)=BWNULL(IMIN)
C1971 CONTINUE
      DO 1970 I=1,44 !=15+20+4+5
      WLSTNG(I)=VLSTNG(I)
      QQLIST(I)=QLIST(I)
 1970 CONTINUE
C**   GEWFAC:
      IF(WLSTNG(31).EQ.ONE)WLSTNG(31)=ZERO
      LISTNG=0
      DO 1972 I=1,44
      LSTNG1=LISTNG+1
      IF(WLSTNG(LSTNG1).NE.ZERO)THEN
      LISTNG=LISTNG+1
      ELSE
      LSTNG2=LISTNG+2
      DO 1973 IM=LSTNG2,44
      IMIN=IM-1
      WLSTNG(IMIN)=WLSTNG(IM)
      QQLIST(IMIN)=QQLIST(IM)
 1973 CONTINUE
      ENDIF
 1972 CONTINUE
      WRITE(*,1971)NREL,KLWERT,KASSUM,NRVAL
      WRITE(11,1971)NREL,KLWERT,KASSUM,NRVAL
 1971 FORMAT(I5,' ELECTRON(S), ',I5,' =l VALUE, '
     1,I5,' BASIS STATES, ',I5,' VALUES USED LATER ON, ')
      IF(LISTNG.NE.0)THEN
      WRITE(*,1980)(WLSTNG(I),QQLIST(I),I=1,LISTNG)
      WRITE(11,1980)(WLSTNG(I),QQLIST(I),I=1,LISTNG)
 1980 FORMAT(3(D16.8,A16))
      ENDIF
      WRITE(*,1989)SQX
      WRITE(11,1989)SQX
 1989 FORMAT(' SQX, REPEATED FROM ABOVE, =',D12.4,
     1/,' Have a look at a possible "WARNING: STOP INFOCX IGNORED!"!',/)
      ENDIF
C
      IF(LOOPNR.EQ.0.AND.IOPT1.EQ.1)THEN
      WRITE(11,197)
      WRITE(*,197)
  197 FORMAT(
     1' ... AND THE 1, 2 OR 3 DIRECTION(S) (Z-, X-, Y-) OF CHI(1,1,1) AN
     1D',/,' CHI(1,1,1) ITSELF, I.E. THE MEAN VALUE.')
      WRITE(11,1917)
      WRITE(*,1917)
 1917 FORMAT(' THE MEAN VALUE HERE IS THE SAME AS "CHI-START" OR'
     1,' THE CORRESPONDING',/,' VALUE ABOVE!')
      DO 1961 NR=1,NDAT
      TEMPTH=TEMPIK(NR)-THETA !THETA=ZERO
      WRITE(11,458)NR,TEMPIK(NR),TEMPTH,(CHIFIX(NR,I),I=1,4)
      WRITE(*,458)NR,TEMPIK(NR),TEMPTH,(CHIFIX(NR,I),I=1,4)
  458 FORMAT(I4,F7.2,F12.6,3D16.8,9X,D16.8)
 1961 CONTINUE
      ENDIF
C
C     IF(JASTOP.NE.0)THEN !JASTOP=0
C...   13 LINES REMOVED!
C     STOP 'JASTOP'
C     ENDIF
C**   STOP FOR THE CONDITIONS ABOVE!
C
C**   IF(JASTOP.EQ.0)THEN
      IF(KURZTB.GT.2)THEN
      WRITE(11,1302)
 1301 WRITE(*,1302)
 1302 FORMAT(/,
     1' INPUT 0 FOR ANOTHER SORT OF (FURTHER) OUTPUT, 1 TO RETURN (TO'
     1,/,' CALLING ROUTINE), >1 TO STOP!')
      IF(KKK.LT.KEND(KSTART))THEN
      WRITE(11,1308)
      WRITE(*,1308)
 1308 FORMAT(' HINT: POSSIBLY CHOOSE FURTHER OUTPUT!')
      ELSE IF(KKK.EQ.KEND(KSTART))THEN
      WRITE(11,1309)
      WRITE(*,1309)
 1309 FORMAT(' HINT: POSSIBLY CHOOSE NO FURTHER OUTPUT!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3417)JASTOR
      GOTO 4917
      ENDIF
 3417 READ(*,'(I1)',ERR=1301,END=4576)JASTOR
      LMN=1
 4917 WRITE(7,2378)JASTOR
      ELSE IF(KURZTB.LE.2)THEN
      WRITE(11,1320)
 1321 WRITE(*,1320)
 1320 FORMAT(/,
     1' INPUT 1 TO RETURN (TO CALLING ROUTINE), 0 OR >1 TO STOP!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3418)JASTOR
      GOTO 4918
      ENDIF
 3418 READ(*,'(I1)',ERR=1321,END=4576)JASTOR
      LMN=1
 4918 IF(JASTOR.EQ.0)JASTOR=2
      WRITE(7,2378)JASTOR
      ENDIF
C**   GOTO 1306
C**   ENDIF TO C** "IF(JASTOP.EQ.0)THEN" - JASTOP ALWAYS =0 ABOVE!
C
C1306 CONTINUE
 2378 FORMAT(I1,' =JASTOR(2=STOP)')
      WRITE(11,2783)JASTOR
      WRITE(*,2783)JASTOR
 2783 FORMAT(I2,' =JASTOR(2=STOP)!!!!!!!!!')
      IF(JASTOR.GT.1)THEN
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2179)LAUFNR,SQX
      WRITE(9,2179)LAUFNR,SQX
 2179 FORMAT(' JASTOR = 2 (=STOP),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,44)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWWXX(I),QB(I),I=1,44)
      WRITE(7,2179)LAUFNR,SQX
CRD      STOP 'JASTOR'
      ENDIF
      IF(JASTOR.EQ.0)GOTO 999
C**   RETURNS TO SUSFIT, IF...:
      IF(JASTOR.EQ.1)RETURN
      STOP 'JASTOR'
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND RESTBL
      END
      SUBROUTINE SCHEMA(
C**   CALLED BY TANABE!
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLNO,ND2002,MSMLNW)
C**   Subroutine SCHEMA - running only once - has been written to give
C     all KASSUM micro states of NREL electrons (max. 13 el., if f el.), and
C     the maximum of KASSUM according to DIMENSION is ND2002. KASSUM=0,
C     if NREL=0. KLWERT = 0/1/2/3 is the l value corr. to s, p , d 
C     and f electrons and is given, KLWER3=3 always. The result of SCHEMA, the
C     consecutively and not arbitrarily (see below) numbered micro
C     states, is given in MSML and in a different form in MSMLNW. See below for
C     the manner they are stored! Some special sums of elements of MSML are
C     given in MQUER (see below).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      CHARACTER*27 VORMAT,VORMAU,TAMROF(1:13),TAMROG(0:3)
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      DIMENSION MSML(ND2002,2,NREL14),MQUER(ND2002,3)
     1,MSMLNW(ND2002,NREL14),MSMLNO(*)
      DATA TAMROF /
     1'(I5,5X,3I5,12X,1I2,22X,1I2)','(I5,5X,3I5,11X,2I2,20X,2I2)'
     1,'(I5,5X,3I5,10X,3I2,18X,3I2)','(I5,5X,3I5,9X,4I2,16X,4I2)'
     2,'(I5,5X,3I5,8X,5I2,14X,5I2)','(I5,5X,3I5,7X,6I2,12X,6I2)'
     3,'(I5,5X,3I5,6X,7I2,10X,7I2)','(I5,5X,3I5,5X,8I2,8X,8I2)'
     4,'(I5,5X,3I5,5X,9I2,6X,9I2)','(I5,5X,3I5,5X,10I2,5X,10I2)'
     5,'(I5,5X,3I5,5X,11I2,5X,11I2)','(I5,5X,3I5,5X,12I2,5X,12I2)'
     6,'(I5,5X,3I5,5X,13I2,5X,13I2)'/
      DATA TAMROG /'(I5,3X,3I5,I14,I25)','(I5,3X,3I5,I12,2I2,I21,2I2)',
     1'(I5,3X,3I5,10,4I2,I17,4I2)','(I5,3X,3I5,I8,6I2,I13,6I2)'/ !10=I10
      DATA KLICKS,MOROUU/0,0/
C(NO) SAVE
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,32)
      IF(MORTEX.GT.0)THEN
      WRITE(*,9141)
      WRITE(11,9141)
 9141 FORMAT(' HERE IS SUBROUTINE SCHEMA TO PREPARE ALL MICRO STATES')
      ENDIF
      IF(NREL.EQ.0)THEN
      KASSUM=0
      RETURN
      ENDIF
      IF(KLICKS.EQ.0.AND.MOROUT.NE.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-SCHEMA IN I1!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3447)MOROUU
      GOTO 4947
      ENDIF
 3447 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4947 WRITE(*,2739)MOROUU
      WRITE(11,2739)MOROUU
 2739 FORMAT(I2,' =MOROUU IN SCHEMA!!!!!!!!!')
      WRITE(7,2397)MOROUU
 2397 FORMAT(I1,' =MOROUU IN SCHEMA')
      ENDIF
      VORMAT=TAMROF(NREL)
      VORMAU=TAMROG(KLWERT)
      NRMXDI=2*(2*KLWERT+1)
      DO 33 N=1,NREL
      MQUER(N,1)=NRMXDI-N
      MQUER(N,2)=NREL-N
   33 CONTINUE
C
      KASSUM=0
C**   INFINITE LOOP:
   99 CONTINUE
      II=NREL
      KASSUM=KASSUM+1
      IF(KASSUM.GT.ND2002)STOP 'KASSUM'
      DO 21 N=1,NREL
      MSML(KASSUM,1,N)=MQUER(N,1)
      MSMLNW(KASSUM,N)=MQUER(N,1)
   21 CONTINUE
      MQUER(II,1)=MQUER(II,1)-1
   22 CONTINUE
      IF(MQUER(II,1).LT.MQUER(II,2))THEN
      II=II-1
      IF(II.EQ.0)GOTO 55
      MQUER(II,1)=MQUER(II,1)-1
      GOTO 22
      ENDIF
      IIP1=II+1
      DO 3 I=IIP1,NREL
      IM1=I-1
      MQUER(I,1)=MQUER(IM1,1)-1
    3 CONTINUE
      GOTO 99
C
   55 CONTINUE
      DO 56 I=1,KASSUM
      DO 54 II=1,NREL
      MSML(I,2,II)=-1
      IF(((MSML(I,1,II)/2)*2-MSML(I,1,II)).NE.0)THEN
      MSML(I,2,II)=1
      MSML(I,1,II)=MSML(I,1,II)-1
      ENDIF
      MSML(I,1,II)=MSML(I,1,II)/2-KLWERT
   54 CONTINUE
   56 CONTINUE
C
      DO 112 I=1,KASSUM
      MQUER(I,1)=0
      MQUER(I,2)=0
      DO 111 N=1,NREL
      MQUER(I,1)=MQUER(I,1)+MSML(I,1,N)
      MQUER(I,2)=MQUER(I,2)+MSML(I,2,N)
  111 CONTINUE
      MQUER(I,3)=2*MQUER(I,1)+MQUER(I,2)
  112 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(11,9940)KASSUM
 8255 WRITE(*,9940)KASSUM
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3448)KASSUL
      GOTO 4948
      ENDIF
 3448 READ(*,'(I4)',ERR=8255,END=4576)KASSUL
      LMN=1
 4948 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
 2398 FORMAT(I4,' =KASSUL("No.OF ROWS")')
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
 2399 FORMAT(I5,' =KASSUL("No.OF ROWS")!!!!!!!!!')
      WRITE(*,9911)
      WRITE(11,9911)
      DO 9999 II=1,KASSUL
      WRITE(*,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I=1,NREL)
      WRITE(11,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I=1,NREL)
 9999 CONTINUE
 9911 FORMAT(
C - RESULT FROM FILE 11, FOR 3 (D)EL. HERE PARTLY INCLUDED, IS:
     1' No.OF STATE  SUM SUM SUM (MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I
     1=1,NREL)')
C    1         5    1   11           2 2 1                   1-1 1
C    2         5   -1    9           2 2 1                   1-1-1
C    3         4    1    9           2 2 0                   1-1 1
C    4         4   -1    7           2 2 0                   1-1-1
C    5         3    1    7           2 2-1                   1-1 1
C    6         3   -1    5           2 2-1                   1-1-1
C    7         2    1    5           2 2-2                   1-1 1
C    8         2   -1    3           2 2-2                   1-1-1
C    9         4    1    9           2 1 1                   1 1-1
C   10         3    3    9           2 1 0                   1 1 1
C   .........
C CONCERNING (MSML(II,1,I),I=1,NREL): THE NUMBERS PRINTED ABOVE ARE SUCH
C THAT EACH NUMBER (E.G. 1) IS EQUAL TO OR SMALLER THAN THE PRECEDING ONE!
C (MSML(II,2,I),I=1,NREL): THE FIRST NUMBER IS 1 OR -1; IF THERE ARE TWO
C NUMBERS EQUAL TO EACH OTHER IN (MSML(II,1,I),I=1,NREL), THE PAIR 1 -1
C BELONGS TO THESE!
C IF KLWERT IS ADDED TO EACH ML NUMBER, E.G.
C    8         2   -1    3      4 4 0      1-1-1
C    9         4    1    9      4 3 3      1 1-1
C   10         3    3    9      4 3 2      1 1 1
C EACH NUMBER BECOMES A DIGIT, AND IF E.G. 4 4 0 IS TAKEN AS THE NUMBER 440,
C EACH OF THESE NEW NUMBERS OF A GIVEN ROW IS SMALLER THAN OR EQUAL TO THE
C NUMBER OF A PRECEDING ROW!
C**   (ADDED IN 2006:) IN DO's 56/54:
C    7                  1-1 1 & 9 8 1 -> 8 8 0 -> 4 4 0 -> 2 2-2
C    8                  1-1-1 & 9 8 0 -> 8 8 0 -> 4 4 0 -> 2 2-2
C    9                  1 1-1 & 9 7 6 -> 8 6 6 -> 4 3 3 -> 2 1 1
C   10                  1 1 1 & 9 7 5 -> 8 6 4 -> 4 3 2 -> 2 1 0
C**  THE FIRST 12 ARE: (1-11)987;(1-1-1)986;(1-11)985;(1-1-1)984;(1-11)983;
C    (1-1-1)982;(1-11)981;(1-1-1)980;(11-1)976;(111)975;(11-1)974;(111)973.
      ENDIF
C
C**   "CHANGE OF STORE" TO MSMLNW(ND2002,2,-KLWER3:KLWER3), KLWER3=KLWERT!:
CK      DO 1 I=1,ND2002
C      DO 12 J=1,2
C      DO 123 K=-KLWER3,KLWER3
C      MSMLNW(I,J,K)=0
C  123 CONTINUE
C   12 CONTINUE
C      DO 2 K=1,NREL
C      IF(MSML(I,2,K).EQ.1)THEN
C      MSMLNW(I,1,MSML(I,1,K))=1
C      ELSE
C      MSMLNW(I,2,MSML(I,1,K))=-1
C      ENDIF
C    2 CONTINUE
CK    1 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,9941)
      WRITE(11,9941)
      WRITE(11,9940)KASSUM
 8256 WRITE(*,9940)KASSUM
 9940 FORMAT(
     1' THERE ARE',I5,' MICRO STATES! OUTPUT OF ALL OR OF .. (IN I4)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3449)KASSUL
      GOTO 4949
      ENDIF
 3449 READ(*,'(I4)',ERR=8256,END=4576)KASSUL
      LMN=1
 4949 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
      DO 9991 II=1,KASSUL
CK      WRITE(*,VORMAU)II,(MQUER(II,I),I=1,3)
      WRITE(*,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSMLNW(II,I),I=1,NREL)
CK     1,(MSMLNW(II,I),I=-KLWERT,KLWERT)
CK     2,(MSMLNW(II,2,I),I=-KLWERT,KLWERT)
CK      WRITE(11,VORMAU)II,(MQUER(II,I),I=1,3)
      WRITE(11,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSMLNW(II,I),I=1,NREL)
CK     1,(MSMLNW(II,1,I),I=-KLWERT,KLWERT)
CK     2,(MSMLNW(II,2,I),I=-KLWERT,KLWERT)
 9991 CONTINUE
      ENDIF
C
 9941 FORMAT(
     1' No.OF STATE  SUM SUM SUM (MSMLNW(II,I),I=1,NREL)')
CK 9941 FORMAT(' No.OF ST.  SUM',
C - RESULT FROM FILE 11, FOR 3 (D)EL. HERE PARTLY INCLUDED, IS:
CK     1' SUM SUM  MSMLNW(II,1,-KLWERT:+KL..) MSMLNW(II,2,-KL..:+KL..)')
C    1       5    1   11         1 1 0 0 0               -1 0 0 0 0
C    2       5   -1    9         1 0 0 0 0               -1-1 0 0 0
C   .........
C
C
C**   RETURNS TO TANABE OR TO CHANGE!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND SCHEMA
      END
      SUBROUTINE NUMERO(JJJ,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL
     1,MSMLNW)
C**   CALLED BY ELELWW, SPORCO, CRYSTF, MAGNF!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      INTEGER MSML(ND2002,2,*),MSMLNO(*),MSMLNW(ND2002,*)
C
C**   EVALUATION OF NR IN MSMLNW(NR, , ) FOR GIVEN MSMLNO( )!:
C     KLWERT = 0/1/2/3 is the l value corr. to s, p, d 
C     and f electrons and is given, KLWER3=3 always.
C**   Subroutine NUMERO has been written to evaluate the number NR of one
C     of a maximum of ND2002 micro states of NREL electons (actually the
C     number of states is KASSUM and in most cases lower than ND2002), which
C     are numbered consecutively and stored in MSMLNW. The micro state looked
C     for is given in MSMLNO.
      SAVE
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,33)
C**   BECAUSE ONLY STEP-DOWN OPERATORS:
      IHIGH=KASSUM
      ILOW=JJJ
      NR=JJJ+(1+IHIGH-ILOW)/2
      ISUM=0
    3 CONTINUE
      ISUM=ISUM+1
      IF(ISUM.GT.20)STOP 'ISUM.GT.'
      JAOBEN=0
      DO 2 I=1,NREL
      IF(MSMLNW(NR,I).EQ.MSMLNO(I))GOTO 2
      IF(MSMLNW(NR,I).GT.MSMLNO(I))THEN
      JAOBEN=1
      GOTO 4
      ELSE
      JAOBEN=-1
      GOTO 4
      ENDIF
    2 CONTINUE
      RETURN
    4 CONTINUE
      IF(JAOBEN.GT.0)THEN
      ILOW=NR
      NR=ILOW+(1+IHIGH-ILOW)/2
      ELSE
      IHIGH=NR
      NR=IHIGH-(1+IHIGH-ILOW)/2
      ENDIF
      GOTO 3
C**   RETURNS TO ELELWW, SPORCO, CRYSTF, MAGNF!
CEND NUMERO
      END
      FUNCTION DREIJ(FL1,FL2,FL3,FML1,FML2,FML3)
C**   HSCI VERSION, 3J-SYMBOLS;
C     BY MEANS OF THE COUPL. COEFFICIENTS OF WIGNER.
C**   CORRESP. TO THE FORMULA P.75 CONDON/SHORTLEY.
C**   A FUNCTION USED BY CKCOE; USES ITSELF FACTLR.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      DIMENSION INTABC(4),LL1L2A(5),LL1L2B(5)
      SAVE
      DATA ZERO/0.0D0/,
     1ONE/1.0D0/,
     2TWO/2.0D0/,
     3TWOM7/2.0D-7/,
     4PAR/0.1D0/
C**   THE J RESP. L VALUES CANNOT BE NEGATIV!:
      IF(FL1.LT.ZERO)STOP 'NEG.L1'
      IF(FL2.LT.ZERO)STOP 'NEG.L2'
      IF(FL3.LT.ZERO)STOP 'NEG.L3'
C**   AT FIRST DOUBLE AND MAKE INTEGER
C     (BECAUSE INTEGER AND HALF-INTEGER J VALUES ARE POSSIBLE!)
      L1=INT(TWO*FL1+PAR)
      L2=INT(TWO*FL2+PAR)
      L3=INT(TWO*FL3+PAR)
      M1=INT(TWO*DABS(FML1)+PAR)
      M2=INT(TWO*DABS(FML2)+PAR)
      M3=INT(TWO*DABS(FML3)+PAR)
      IF(FML1.LT.ZERO)M1=-M1
      IF(FML2.LT.ZERO)M2=-M2
      IF(FML3.LT.ZERO)M3=-M3
C**   IT MUST NECESSARELY BE:
      IF((M1+M2+M3).NE.0)STOP 'MSUM'
C**   TEST, IF DOUBLE-J VALUES ARE INTEGER:
      IF(DABS(DBLE(L1)-TWO*FL1).GT.PAR)STOP 'WRONL1'
      IF(DABS(DBLE(L2)-TWO*FL2).GT.PAR)STOP 'WRONL2'
      IF(DABS(DBLE(L3)-TWO*FL3).GT.PAR)STOP 'WRONL3'
      IF(DABS(DBLE(M1)-TWO*FML1).GT.PAR)STOP 'WRONM1'
      IF(DABS(DBLE(M2)-TWO*FML2).GT.PAR)STOP 'WRONM2'
      IF(DABS(DBLE(M3)-TWO*FML3).GT.PAR)STOP 'WRONM3'
C**   FIRST THE COUPL. COEFF. `COPPLC':
      K=L3
CKR       IF (K) 99,100,100
       IF(K.LT.0)GOTO 99
CKR  100  IF (L1) 99,101,101
  100  IF(L1.LT.0)GOTO 99
CKR  101  IF (L2) 99,102,102
  101  IF(L2.LT.0)GOTO 99
CKR  102  IF (L1-IABS(M1)) 29,103,103
  102  IF((L1-IABS(M1)).LT.0)GOTO 29
CKR  103  IF (L2-IABS(M2)) 29,104,104
  103  IF((L2-IABS(M2)).LT.0)GOTO 29
  104  M=M1+M2
CKR       IF (K-IABS(M)) 29,105,105
       IF((K-IABS(M)).LT.0)GOTO 29
C**   NOW THE TRIANGLE-INEQUALITY!:
CKR  105  IF (K-IABS(L1-L2)) 29,106,106
  105  IF((K-IABS(L1-L2)).LT.0)GOTO 29
CKR  106  IF (K-L1-L2) 107,107,29
  106  IF((K-L1-L2).GT.0)GOTO 29
  107 CONTINUE
      L=K
      ISTART=0
      SUM=ZERO
      IT=-1
C**   DIVIDE BY 2 (INTEGER DIVISION) AND STORE IN INT...:
      INTAA=(L+L2+M1)/2
      INTAB=(L-L1+L2)/2
      INTBA=(L1-M1)/2
      INTBB=(L+M)/2
      INTDB=(L1-L2-M)/2
      INTE=(L2+M2)/2
C**   NOW AN INFINITE LOOP:
    1 CONTINUE
      IT=IT+1
      IF(ISTART.EQ.0.AND.IT.GT.300)GOTO 300
      IF(IT.GT.1000)STOP 'INFINT'
CKR      IF (INTAA-IT) 200,2,2
      IF((INTAA-IT).LT.0)GOTO 200
CKR    2 IF (INTAB-IT) 200,3,3
    2 IF((INTAB-IT).LT.0)GOTO 200
CKR    3 IF (INTBB-IT) 200,4,4
    3 IF((INTBB-IT).LT.0)GOTO 200
CKR    4 IF (IT+INTDB) 200,5,5
    4 IF((IT+INTDB).LT.0)GOTO 200
    5 CONTINUE
C**   ORDERING OF INTAAM=(L+L2+M1)/2-IT AND INTBAP=(L1-M1)/2+IT:
      INTAAM=INTAA-IT
      INTBAP=INTBA+IT
      IF(INTAAM.LT.INTBAP)THEN
      IDUMMY=INTBAP
      INTBAP=INTAAM
      INTAAM=IDUMMY
      ENDIF
C**   ORDERING OF INTABC(1)=(L-L1+L2)/2-IT, INTABC(2)=(L+M)/2-IT,
C     IINTABC(3)=IT AND INTABC(4)=IT+(L1-L2-M)/2:
      INTABC(1)=INTAB-IT
      INTABC(2)=INTBB-IT
      INTABC(3)=IT
      INTABC(4)=IT+INTDB
      DO 44 I=1,3
      IP1=I+1
      DO 444 J=IP1,4
      IF(INTABC(J).GE.INTABC(I))GOTO 444
      IDUMMY=INTABC(J)
      INTABC(J)=INTABC(I)
      INTABC(I)=IDUMMY
  444 CONTINUE
   44 CONTINUE
      A=FACTLR(INTAAM,INTABC(1))
      B=FACTLR(INTBAP,INTABC(2))
      C=FACTLR(1,INTABC(3))
      D=FACTLR(1,INTABC(4))
      E=(-ONE)**((IT+INTE)-(((IT+INTE)/2)*2))
      F=A*B*C*D*E
      SUM=SUM+F
      ISTART=ISTART+1
      GOTO 1
  200 IF(ISTART.EQ.0)GOTO 1
  300 CONTINUE
C**   AND NOW ORDERING ONCE MORE:
      LL1L2A(1)=(L+L1-L2)/2
      LL1L2A(2)=(L-L1+L2)/2
      LL1L2A(3)=(L1+L2-L)/2
      LL1L2A(4)=(L+M)/2
      LL1L2A(5)=(L-M)/2
      DO 55 I=1,4
      IP1=I+1
      DO 555 J=IP1,5
      IF(LL1L2A(J).GE.LL1L2A(I))GOTO 555
      IDUMMY=LL1L2A(J)
      LL1L2A(J)=LL1L2A(I)
      LL1L2A(I)=IDUMMY
  555 CONTINUE
   55 CONTINUE
C**
      LL1L2B(1)=(L+L1+L2)/2+1
      LL1L2B(2)=(L1-M1)/2
      LL1L2B(3)=(L1+M1)/2
      LL1L2B(4)=(L2-M2)/2
      LL1L2B(5)=(L2+M2)/2
      DO 66 I=1,4
      IP1=I+1
      DO 666 J=IP1,5
      IF(LL1L2B(J).GE.LL1L2B(I))GOTO 666
      IDUMMY=LL1L2B(J)
      LL1L2B(J)=LL1L2B(I)
      LL1L2B(I)=IDUMMY
  666 CONTINUE
   66 CONTINUE
C**
      G=FACTLR(LL1L2A(1),LL1L2B(1))
      H=FACTLR(LL1L2A(2),LL1L2B(2))
      O=FACTLR(LL1L2A(3),LL1L2B(3))
      P=FACTLR(LL1L2A(4),LL1L2B(4))
      Q=FACTLR(LL1L2A(5),LL1L2B(5))
      R=DSQRT(G*H*O*P*Q*DBLE(L+1))
      COPPLC=SUM*R
      IF((DABS(COPPLC-ONE)-TWOM7).LT.ZERO)COPPLC=ONE
      IF((DABS(COPPLC)-TWOM7).LT.ZERO)COPPLC=ZERO
      GOTO 30
   99 STOP 'NEGATV'
   29 COPPLC=ZERO
   30 CONTINUE
C**   NOW THE 3J-SYMBOL WITH M=M3(FROM ABOVE)=-M1-M2:
C-ERR:      L1L2M3=(L1-L2+M3)/2
      L1L2M3=(L1-L2-M3)/2
      MPONE=(-1)**((L1L2M3)-((L1L2M3)/2)*2)
      DREIJ=DBLE(MPONE)*COPPLC/DSQRT(DBLE(K+1))
C**   RETURNS TO CKCOE!:
      RETURN
CEND DREIJ
      END
      FUNCTION FACTLR(L,M)
C**   A FUNCTION USED BY FUNCTION DREIJ
C**   RATIO OF L FACTORIAL TO M FACTORIAL,
C     L AND M ARE INTEGERS GREATER THAN OR EQUAL TO ZERO.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      SAVE
C      DATA LISLTM,IMIN,IMAX,I/4*0/
      IF(L.LT.0)STOP 'L-NEG'
      IF(M.LT.0)STOP 'M-NEG'
      FACTLR=1.0D0
      IF(L.EQ.M)RETURN
      LISLTM=0
      IF(L.GT.M)GOTO 40
      IMIN=L+1
      IMAX=M
      LISLTM=1
      GO TO 9
   40 IMIN=M+1
      IMAX=L
    9 DO 10 I=IMIN,IMAX
      FACTLR=FACTLR*DBLE(I)
   10 CONTINUE
      IF(LISLTM.NE.0)FACTLR=1.0D0/FACTLR
C**   RETURNS TO DREIJ!:
      RETURN
CEND FACTLR
      END
      FUNCTION CKCOE(K,L1,M1,L2,M2)
C**   FUNCTION NEEDED: DREIJ
C**   CKCOE IS USED BY TANABE, ELELWW, CRYSTF!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      SAVE
C      DATA M,DREIJ0,DREIJM,SQL1L2,FACTOR,ZERO/0,5*0.0D0/
      DATA ZERO/0.0D0/
      CKCOE=ZERO
      M=M1-M2
C**   THE FORMULA (3.26) P.43 SILVER (WITHOUT ANY COMPLEX-CONJ.!):
C     (LIT.: B.L.SILVER: IRREDUCIBLE TENSOR METHODS, ACADEMIC PRESS
C     NEW YORK ... 1976)
      DREIJ0=DREIJ(DBLE(K),DBLE(L1),DBLE(L2),ZERO,ZERO,ZERO)
      IF(DREIJ0.EQ.ZERO)RETURN
      DREIJM=DREIJ(DBLE(K),DBLE(L1),DBLE(L2),DBLE(M),DBLE(-M1),DBLE(M2))
      IF(DREIJM.EQ.ZERO)RETURN
      SQL1L2=DSQRT(DBLE((2*L1+1)*(2*L2+1)))
C**   A FACTOR OF (2K+1)/2 AND A FACTOR INCLUDING PHI CANCEL!
C**   A PHASE-FACTOR ARISES, BECAUSE THETA(M)=(-1)**M*THETA(-M)
C     AND BECAUSE THERE IS COMPLEX-CONJ. (IN PHI) IN THE CK-COEFF.:
      FACTOR=DBLE((-1)**(M1-((M1/2)*2)))
      CKCOE=FACTOR*SQL1L2*DREIJ0*DREIJM
C**   RETURNS TO TANABE, ELELWW, CRYSTF!:
      RETURN
CEND CKCOE
      END
      SUBROUTINE ELELWW(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,LMAL2,I7,NROFNT,NOFROY,EIVSHV,FLWRTH,MSML,MSMLNO,NRELDF)
C**   ... for interelectronic repulsion for the non-diagonal elements!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      DIMENSION NROFNT(ND2002),NOFROY(ND2002,*),EIVSHV(ND2002,I7,3)
     1,MSMLNW(ND2002,NREL14),MSML(ND2002,2,NREL14),MSMLNO(*),NRELDF(*)
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,34)
C**   This routine does not run for one electron or one hole in a (sub)shell!:
      IF(NREL.EQ.1.OR.NREL.EQ.(NRELMX-1))RETURN
C
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C     THE OPERATOR IS A TWO-EL. OPERATOR!:
C     See the formula for (ab/g_ij/cd) in Condon/Shortley!
C     ONLY CONCERNED: EQ.(4) CONDON/SH. P.173 - THERE MUST BE EXACTLY TWO
C     DIFFERING SETS, OR ELEMENTS ARE ZERO! - FOR FURTHER CONDITIONS FOR
C     NON-ZERO ELEMENTS SEE BELOW!
C
C     One individual set of a micro-state is given as a number!:
C     This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for ms=+1/2.
C     (The numer a is one(!) digit, if A, B, C, D are digits for f-el.!)
C
C**   For EACH MICRO-STATE (in its conventional order, i.e. "step down", e.g. 
C     953, i.e. MSMLNW(I,1)=9, MSMLNW(I,2)=5, MSMLNW(I,3)=3):
C     (The two individual sets a and b belong to this micro-state, i.e.
C     the micro-state is ...a...b..., with a>b.) (a and b are numbers, e.g.
C     for the micro-state before (3 electrons): 9(a=5)(b=3).)
C
C     ALL KASSUM MICRO-STATES:
      DO 1 I=1,KASSUM
      NROFNT(I)=0
C
C**   Non-diagonal non-zero matrix elements can exist only for all those states
C     (e.g. ...c...d... with c not equal to a or b and d not equal to a or b),
C     which differ in exactly two individual sets corresponding to (ab/r_12/cd),
C     but msa must be equal to msc, msb equal to msd, and (mla+mlb) must be 
C     equal to (mlc+mld).
C     c and d (either c>d or c<d) are therefore sets not belonging to the state 
C     ...a...b...!
C
C**   In the following DO 22 the NROFDE numbers possible for c and/or d are 
C     evaluated!:
C     (NRELMX=10 for d-el., =14 for f-el.!)
C     (DO 22 N=9,0,-1 for d-el.)
      NROFDE=0
      DO 22 N=NRELMX-1,0,-1
      DO 21 M=1,NREL
      IF(N.EQ.MSMLNW(I,M))GOTO 22
   21 CONTINUE
C**   MSMLNW(I,...)=N is missing, therefore!:
      NROFDE=NROFDE+1
C     This N is stored!:
      NRELDF(NROFDE)=N
   22 CONTINUE
C
C**   If two spaces ("holes") are taken for a and b, there is one possibility 
C     to do this for two electrons, there are three possibilities for three
C     electrons, six possibilities for four electrons, etc. (i.e. NREL!/2
C     possibilities for NREL electrons).
C**   HOLE No.1:
      DO 12 M=1,NREL-1
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED BY THE SECOND
C     (Spin of the el., that was in hole No.1:)
      LOCHS1=MOD(MSMLNW(I,M),2)
C     (Number of the hole No.1:)
      LOCH1=MSMLNW(I,M)
C**   HOLE No.2:
      DO 11 N=M+1,NREL
C     (Spin of the el., that was in hole No.2:)
      LOCHS2=MOD(MSMLNW(I,N),2)
C     (Number of the hole No.2:)
      LOCH2=MSMLNW(I,N)
C**   Into the first hole NROFDE values which are possible for c are inserted,
C     firstly the first value, then the second, ... (e.g. secondly 7): 
C     (For e.g. three d-electrons there are (10-3)=7 possibilities to do this.)
      DO 32 K=1,NROFDE
C     (Spin of the el. now in hole No.1:)
      INLOS1=MOD(NRELDF(K),2)
C     (Number of the el. now in hole No.1:)
      INLO1=NRELDF(K)
C**   The spins for a and c must be equal (e.g. 9<->7 "same spin"):
      IF(INLOS1.NE.LOCHS1)GOTO 32
C**   Into the second hole NROFDE values which are possible for d are inserted
C     (e.g. fistly 8):
      DO 31 L=1,NROFDE
C**   ... but c must not equal d (e.g. 7.NE.8):
      IF(L.EQ.K)GOTO 31
C     (Spin of the el. now in hole No.2:)
      INLOS2=MOD(NRELDF(L),2)
C     (Number of the el. now in hole No.2:)
      INLO2=NRELDF(L)
C**   The spins for b and d must be equal (e.g. 5<->8 "not the same spin"):
      IF(INLOS2.NE.LOCHS2)GOTO 31
C**   (mla+mlb) must be equal to (mlc+mld) (spins are already equal!):
C     For the 2nd and 3rd hole e.g. 5+3=7+1 or 5+3=1+7:
      IF((INLO1+INLO2).NE.(LOCH1+LOCH2))GOTO 31
C**   To get the right sign for these elements, the states ...c...d... are 
C     ordered to get the conventional order of the individual sets, and the
C     parity of the permutation to get this order (even or odd) determines
C     this sign (e.g. 1 7 => 7 1 <=> "odd"!)!
C**   JAODD:
      JAODD=0
      DO 40 J=1,NREL
      MSMLNO(J)=MSMLNW(I,J)
   40 CONTINUE
      MSMLNO(M)=INLO1
      MSMLNO(N)=INLO2
      DO 4 J=1,NREL-1
      DO 44 JJ=J,NREL
      IF(MSMLNO(JJ).GT.MSMLNO(J))THEN
C     JAODD=0 =>=1; JAODD=1 =>=0!:
      JAODD=IABS(JAODD-1)
      ITEMPE=MSMLNO(J)
      MSMLNO(J)=MSMLNO(JJ)
      MSMLNO(JJ)=ITEMPE
      ENDIF
   44 CONTINUE
    4 CONTINUE
C**   MSMLNO() became now 971 instead of 917 (compare both with 953),
C     but INLO1 and INLO2 still differ (and JAODD became different)!
      IF(JAODD.EQ.1)JAODD=-1
      IF(JAODD.EQ.0)JAODD=1
      FJAODD=DBLE(JAODD)
C**   MSMLNO, i.e. the micro-state, goes to SUBROUTINE NUMERO.
C     NR, i.e. the consecutive number
C     of this micro-state, RETURNs and is stored!:
      CALL NUMERO(1,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C**   BECAUSE FOR LOWER STORAGE MODE USED:
      IF(NR.LE.I)GOTO 31
C**   One more non-diagonal element has to be calculated:
      NROFNT(I)=NROFNT(I)+1
      IF(NROFNT(I).GT.I7)STOP '.GT.I7'
      NOFROY(I,NROFNT(I))=NR
C**   Now the ml's itself, to be used in FUNCTION CKCOE!:
      LOCHM1=LOCH1/2-KLWERT
      LOCHM2=LOCH2/2-KLWERT
      INLOM1=INLO1/2-KLWERT
      INLOM2=INLO2/2-KLWERT
C**   The element is now calculated, but really all its parts, the F's not yet 
C     included!:
C**   K in Condon/Shortley is KK here, KK=MDIF,LMAL2,2:
      MDIF=IABS(INLOM1-LOCHM1)
      DO 5 KK=2,LMAL2,2
      IF(KK.LT.MDIF)GOTO 5
      KKH=KK/2
C**   DATA EIVSHV/IVSHV*ZERO/; IVSHV=3432*I7*3; I7=36
      EIVSHV(I,NROFNT(I),KKH)=CKCOE(KK,KLWERT,LOCHM1,KLWERT,INLOM1)*
     1CKCOE(KK,KLWERT,INLOM2,KLWERT,LOCHM2)*FJAODD
C**   HINT: EQ.(7) CONDON/SH. P.175 IS IMPORTENT, BECAUSE,
C     SEE EQ.(9), (AB/Q/CD)=...CK(A,C)*CK(D(!),B(!))...!
    5 CONTINUE
C
   31 CONTINUE
   32 CONTINUE
   11 CONTINUE
   12 CONTINUE
C
    1 CONTINUE
      RETURN
CEND ELELWW
      END
      SUBROUTINE SPORCO(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,I6,NROFNS,NOFROX,EIVSHU,FLWRTH,MSML,MSMLNO)
C     CALLED BY TANABE!
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      INTEGER MSML(ND2002,2,NREL14),MSMLNW(ND2002,NREL14)
     1,MSMLNO(*),NROFNS(*),NOFROX(ND2002,*)
      DIMENSION EIVSHU(ND2002,*)
C**   SPORCO CALCULATES THE NON-DIAGONAL ELEMENTS FOR SPIN-ORBIT COUPLING:
C     (THE OPERATOR IS A SUM OF ONE-EL. OPERATORS, AND THESE ARE
C     = HALF*((l+.s-)+(l-.s+)), FOR EACH EL.!)
C     THE RESULT OF SUCH A ONE-EL. OPERATOR (CONDON/SH.,P.59,EQ.(3)OF 7**3)
C     AND/OR P.221,EQ.(1C)) IS:
C     (ONE-EL. OPERATOR FOR THE DIAGONAL ELEMENTS IS (lz.sz)!)
C     KRONECKERDELTA(ml+ms,ml'+ms')HALF*KRONECKERDELTA(ms,ms'+-ONE)*
C      SQRT((l+HALF-(ml+ms))(l+HALF+(ml+ms)))
C     ("HERE" FIRSTLY: ONE* INSTEAD OF HALF*; ONE=>HALF AFTER "RETURN"!
C     l+HALF=>FLWRTH)
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C     SEE pp.169-171 FOR MATRIX COMPONENTS OF ONE-EL. OPERATORS!
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,35)
C     ALL KASSUM MICRO-STATES:
      DO 1 I=1,KASSUM
      NROFNS(I)=0
C     ALL NREL ELECTRONS:
      DO 2 J=1,NREL
      MSMLNN=MSMLNW(I,J)
      FMLMS=DBLE(2*MSML(I,1,J)+MSML(I,2,J))*0.5D0
      IF((MSMLNN/2)*2.EQ.MSMLNN)THEN
C     EVEN NUMBERS; STEP-DOWN OPERATOR = HALF*(l-.s+):
C     (NO PROBLEMS WITH "CONVENTIONAL ORDER" HERE!)
      MSMLNN=MSMLNN-1
C     NO NEGATIVE NUMBERS POSSIBLE!:
      IF(MSMLNN.LT.0)GOTO 2
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
      IF((J.LT.NREL).AND.(MSMLNN.EQ.MSMLNW(I,J+1)))GOTO 2
      DO 3 K=1,NREL
      MSMLNO(K)=MSMLNW(I,K)
    3 CONTINUE
      MSMLNO(J)=MSMLNN
      CALL NUMERO(I,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C     ONE MORE MATRIX ELEMENT WAS FOUND (ITS NUMBER NR FROM NUMERO)!:
      NROFNS(I)=NROFNS(I)+1
      IF(NROFNS(I).GT.I6)STOP '.GT.I6'
      NOFROX(I,NROFNS(I))=NR
      PROD=DSQRT((FLWRTH-FMLMS)*(FLWRTH+FMLMS))
C     AND THE VALUE OF THE MATRIX ELEMENT!:
      EIVSHU(I,NROFNS(I))=PROD
C**   BECAUSE FOR LOWER STORAGE MODE USED:
C      ELSE
C     ODD NUMBERS; STEP-UP OPERATOR = HALF*(l+.s-):
C      "THESE MATRIX ELEMENTS NOT NEEDED"!
      ENDIF
    2 CONTINUE
    1 CONTINUE
      RETURN
CEND SPORCO
      END
      SUBROUTINE CRYSTF(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,LMAL2,J7,NROFN1,NOFRO1,EIVSH1,FLWRTH,MSML,MSMLNO,NRELDF
     2,NROFN2,NOFRO2,EIVSH2,NROFN3,NOFRO3,EIVSH3,NROFN4,NOFRO4,EIVSH4
     3,NROFN5,NOFRO5,EIVSH5,NROFN6,NOFRO6,EIVSH6)
C     CALLED BY TANABE!
C**   CRYSTF CALCULATES THE NON-DIAGONAL ELEMENTS (resp. FACTORS for these)
C     of the MATRIX of the CRYSTAL-FIELD/Ligand-field OPERATOR!
C     (THE OPERATOR IS A SUM OF ONE-EL. OPERATORS, 
C     SPIN AND ANYTHING ELSE MUST BE THE SAME, EXCEPT ONE
C     ML VALUE, WHICH IS NOT EQUAL TO ML-DASH (CONDON/SH.P.171 EQ.(8))!
C     This EQ.(8) in Condon/Shortley is the formula for +-(a/f/b)!)
C**   (FOR THE THE DIAGONAL ELEMENTS SEE CONDON/SH. P.171,EQ.(9)!)
C     (SEE ALSO GRIFFITH P.196,EQ.(8.4)!)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      DIMENSION NROFN6(ND2002),NOFRO6(ND2002,J7),EIVSH6(ND2002,J7)
      DIMENSION NROFN5(ND2002),NOFRO5(ND2002,J7),EIVSH5(ND2002,J7)
      DIMENSION NROFN4(ND2002),NOFRO4(ND2002,J7),EIVSH4(ND2002,J7,2)
      DIMENSION NROFN3(ND2002),NOFRO3(ND2002,J7),EIVSH3(ND2002,J7,2)
      DIMENSION NROFN2(ND2002),NOFRO2(ND2002,J7),EIVSH2(ND2002,J7,3)
      DIMENSION NROFN1(ND2002),NOFRO1(ND2002,J7),EIVSH1(ND2002,J7,3)
     1,MSMLNW(ND2002,NREL14),MSML(ND2002,2,NREL14),MSMLNO(*),NRELDF(*)
C     One individual set of a micro-state is given as a number!:
C     This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for ms=+1/2.
C
C**   For EACH MICRO-STATE (in its conventional order, i.e. "step down", e.g. 
C     976):
C     (The individual set a belongs to this micro-state, i.e.
C     the micro-state is ...a...) (a is a number, e.g.
C     for three electrons for the micro-state 531: 5(a=3)1.)
C
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,36)
C     ALL KASSUM MICRO-STATES:
      DO 1 I=1,KASSUM
      NROFN6(I)=0
      NROFN5(I)=0
      NROFN4(I)=0
      NROFN3(I)=0
      NROFN2(I)=0
      NROFN1(I)=0
C
C**   Non-diagonal non-zero matrix elements exist for all those states (e.g. 
C     ...b...),
C     which differ in exactly one individual set corresponding to (a/f/b),
C     but msa must be equal to msb, i.e. the spin must be the same.
C     b is therefore a set not belonging to the state ...a...!
C     In the following DO 22 the NROFDE numbers possible for b are evaluated!:
      NROFDE=0
C     NRELMX=10 for d-el., =14 for f-el.!:
C     (DO 22 N=9,0,-1 for d-el.)
      DO 22 N=NRELMX-1,0,-1
      DO 21 M=1,NREL
      IF(N.EQ.MSMLNW(I,M))GOTO 22
   21 CONTINUE
C**   MSMLNW(I,...)=N is missing, therefore!:
      NROFDE=NROFDE+1
C     This N is stored!:
      NRELDF(NROFDE)=N
   22 CONTINUE
C
C**   If a space ("hole") is taken for a, there is one possibility to do this
C     for one electron, there are two possibilities for two electrons,
C     etc. (i.e. NREL possibilities for NREL electrons).
C**   M<=>HOLE:
      DO 12 M=1,NREL
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED BY THE SECOND
C     (Spin of the hole:)
      LOCHS1=MOD(MSMLNW(I,M),2)
C     (Number of the hole:)
      LOCH1=MSMLNW(I,M)
      DO 32 K=1,NROFDE
C**   Into this hole b will be inserted.
C     For e.g. three p-electrons there are 3 possibilities to do this,
C     and altogether the number of possibilities is in this case 3*(6-3)=9.
C**   OCCUPATION OF HOLE:
C     (Spin:)
      INLOS1=MOD(NRELDF(K),2)
C     (Number:)
      INLO1=NRELDF(K)
C**   The spins for a and b must be equal:
      IF(INLOS1.NE.LOCHS1)GOTO 32
C**   One more non-diagonal element has to be calculated:
C     NROFN.(I)=NROFN.(I)+1: SEE BELOW!
C**   To get the right sign for these elements, the state ...b... is ordered 
C     to get the conventional order of the individual sets, and the parity of 
C     the permutation to get this order (even or odd) determines this sign!
C**   JAODD:
      JAODD=0
      DO 40 J=1,NREL
      MSMLNO(J)=MSMLNW(I,J)
   40 CONTINUE
      MSMLNO(M)=INLO1
      DO 4 J=1,NREL-1
      DO 44 JJ=J,NREL
      IF(MSMLNO(JJ).GT.MSMLNO(J))THEN
C     JAODD=0 =>=1; JAODD=1 =>=0!:
      JAODD=IABS(JAODD-1)
      ITEMPC=MSMLNO(J)
      MSMLNO(J)=MSMLNO(JJ)
      MSMLNO(JJ)=ITEMPC
      ENDIF
   44 CONTINUE
    4 CONTINUE
      IF(JAODD.EQ.1)JAODD=-1
      IF(JAODD.EQ.0)JAODD=1
      FJAODD=DBLE(JAODD)
C**   MSMLNO(1..NREL), i.e. the micro-state, goes to SUBROUTINE NUMERO.
C     NR, i.e. the consecutive number
C     of this micro-state, RETURNs and is stored!:
      CALL NUMERO(1,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C**   CALL NUMERO(1,..., BECAUSE FOR LOWER STORAGE MODE USED! THEREFORE:
      IF(NR.LE.I)GOTO 32
C**   Now the ml's itself, to be used in FUNCTION CKCOE!:
      LOCHM1=LOCH1/2-KLWERT
      INLOM1=INLO1/2-KLWERT
      NK=IABS(INLOM1-LOCHM1)
C**   The elements are now calculated!:
      IF(NK.EQ.6)THEN
      NROFN6(I)=NROFN6(I)+1
      IF(NROFN6(I).GT.J7)STOP '.GT.J7'
      NOFRO6(I,NROFN6(I))=NR
      EIVSH6(I,NROFN6(I))=CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.5)THEN
      NROFN5(I)=NROFN5(I)+1
      IF(NROFN5(I).GT.J7)STOP '.GT.J7'
      NOFRO5(I,NROFN5(I))=NR
      EIVSH5(I,NROFN5(I))=-CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.4)THEN
      NROFN4(I)=NROFN4(I)+1
      IF(NROFN4(I).GT.J7)STOP '.GT.J7'
      NOFRO4(I,NROFN4(I))=NR
      IF(KLWERT.EQ.3)
     1EIVSH4(I,NROFN4(I),2)=CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      EIVSH4(I,NROFN4(I),1)=CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.3)THEN
      NROFN3(I)=NROFN3(I)+1
      IF(NROFN3(I).GT.J7)STOP '.GT.J7'
      NOFRO3(I,NROFN3(I))=NR
      IF(KLWERT.EQ.3)
     1EIVSH3(I,NROFN3(I),2)=-CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      EIVSH3(I,NROFN3(I),1)=-CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.2)THEN
C     B.2:
      NROFN2(I)=NROFN2(I)+1
      IF(NROFN2(I).GT.J7)STOP '.GT.J7'
      NOFRO2(I,NROFN2(I))=NR
      IF(KLWERT.EQ.3)
C     B62:
     1EIVSH2(I,NROFN2(I),3)=CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      IF(KLWERT.NE.1)
C     B42:
     1EIVSH2(I,NROFN2(I),2)=CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
C     B22:
      EIVSH2(I,NROFN2(I),1)=CKCOE(2,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.1)THEN
C     B.1:
      NROFN1(I)=NROFN1(I)+1
      IF(NROFN1(I).GT.J7)STOP '.GT.J7'
      NOFRO1(I,NROFN1(I))=NR
      IF(KLWERT.EQ.3)
C     B61:
     1EIVSH1(I,NROFN1(I),3)=-CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      IF(KLWERT.NE.1)
C     B41:
     1EIVSH1(I,NROFN1(I),2)=-CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
C     B21:
      EIVSH1(I,NROFN1(I),1)=-CKCOE(2,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE
      STOP 'ERR.NK'
      ENDIF
C
   32 CONTINUE
   12 CONTINUE
C
    1 CONTINUE
C**   RETURNS TO TANABE!:
      RETURN
CEND CRYSTF
      END
      SUBROUTINE MAGNF(
C**   CALLED BY TANABE!
     1NREL,KASSUM,KLWERT,MSML,NREL14,MSMLNO,ND2002,MSMLNW
     9,NOFROW,NROFNR,EIVSHT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      PARAMETER(ZERO=0.0D0)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,MFIT
     1,IOPT3,IOPT1,IOPT2,NRDIRE,NDATA,NDATAP
      DIMENSION MSML(ND2002,2,NREL14)
     1,MSMLNW(ND2002,NREL14),MSMLNO(*)
     9,NOFROW(ND2002,*),NROFNR(*),EIVSHT(ND2002,*)
      DATA KLICKS,MOROUU/0,0/
C(NO) SAVE
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,37)
      IF(KLICKS.EQ.0.AND.MOROUT.NE.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-MAGNF IN I1!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3447)MOROUU
      GOTO 4947
      ENDIF
 3447 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4947 WRITE(*,2739)MOROUU
      WRITE(11,2739)MOROUU
 2739 FORMAT(I2,' =MOROUU IN MAGNF!!!!!!!!!')
      WRITE(7,2397)MOROUU
 2397 FORMAT(I1,' =MOROUU IN MAGNF')
      ENDIF
C
C**   FOR X- AND Y-DIRECTION OF MAGNETIC FIELD:
C     (TO BE USED IN REDUCT TO CALCULATE FMAT AND GMAT)
C
C**   ONLY ONE-EL. STEP-DOWN OPERATORS WILL BE USED HERE NOW, FIRSTLY SPIN,
C     THEN ORBITAL! - SUBR. NUMERO IS IMPORTANT HERE!
C
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL!)
      KLWRTP=KLWERT+1
C     ALL KASSUM MICRO-STATES:
      DO 642 J=1,KASSUM
      NROFNR(J)=0
C
C**   NOW FIRSTLY S-OPERATORS ON MSMLNO!:
C     ... COEFF. ARE ONLY =1 AND =0, 1 FOR ms=1/2, 0 FOR ms=-1/2,
C     SO THAT THIS OPERATION GIVES JUST THE SUM OF THE
C     STATES RESULTING WHEN SUCCESSIVE ml+ ARE CHANGED TO ml- (FROM:
C     CONDON/SHORTLEY P.227).
C
C     ALL NREL ELECTRONS:
      DO 66 N=1,NREL
C     IF "EVEN NUMBER":
      IF(((MSMLNW(J,N)/2)*2).EQ.MSMLNW(J,N))GOTO 66
C     (THEREFORE HERE "ODD NUMBERS" ONLY!)
C     THE MOST RIGHT EL., IF(!) THIS IS "SPIN-UP"!:
      IF(N.EQ.NREL)THEN
      NR=J+1
C     (NUMERO NOT NEEDED TO GET NR!)
      ELSE
      DO 5567 I=1,NREL
      MSMLNO(I)=MSMLNW(J,I)
 5567 CONTINUE
C     ms=1/2 => ms=-1/2:
      MSMLNO(N)=MSMLNO(N)-1
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
C     ("N=NREL" CANNOT ARRIVE HERE!)
      IF(MSMLNO(N).EQ.MSMLNO(N+1))GOTO 66
      CALL NUMERO(J,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
      ENDIF
C     ONE MORE MATRIX ELEMENT WAS FOUND (ITS NUMBER IS NR)!:
C
      NROFNR(J)=NROFNR(J)+1
      IF(NROFNR(J).GT.10)STOP '.GT.10'
C     (NOT USED ELSEWHERE!:)
      EIVSHT(J,NROFNR(J))=ZERO
C**   LABEL FOR SPIN IS "MINUS"!:
      NOFROW(J,NROFNR(J))=-NR
C
   66 CONTINUE
C
C**   ORBITAL OP. WORKS NOT SO SIMPLY AS SPIN OP.! - ONLY STEP-DOWN
C     OPERATORS HERE ONCE MORE!:
C     (FROM: CONDON/SHORTLEY P.227 - EQ.(3))
C
      DO 6 N=1,NREL
      DO 567 I=1,NREL
      MSMLNO(I)=MSMLNW(J,I)
  567 CONTINUE
C     ml => ml-1:
      MSMLNO(N)=MSMLNO(N)-2
C     NO NEGATIVE NUMBERS POSSIBLE!:
      IF(MSMLNO(N).LT.0)GOTO 6
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
      IF((N.LT.NREL).AND.(MSMLNO(N).EQ.MSMLNO(N+1)))GOTO 6
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
      IF((N+1.LT.NREL).AND.(MSMLNO(N).EQ.MSMLNO(N+2)))GOTO 6
      NOML=MSML(J,1,N)
      QUOTTT=DSQRT(DBLE((KLWERT+NOML)*(KLWRTP-NOML)))
      IF((N.LT.NREL).AND.(MSMLNO(N).LT.MSMLNO(N+1)))THEN
C     CHANGE TO THE CONVENTIONAL ORDER (AND A FACTOR OF MINUS ONE)!:
      ITEMPM=MSMLNO(N)
      MSMLNO(N)=MSMLNO(N+1)
      MSMLNO(N+1)=ITEMPM
      QUOTTT=-QUOTTT
      ENDIF
C
C     ONE MORE MATRIX ELEMENT WAS FOUND (ITS NUMBER BECOMES NR)!:
      CALL NUMERO(J,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C
      NROFNR(J)=NROFNR(J)+1
      IF(NROFNR(J).GT.10)STOP '.GT.10'
      EIVSHT(J,NROFNR(J))=QUOTTT
      NOFROW(J,NROFNR(J))=NR
C
    6 CONTINUE
  642 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(11,9940)KASSUM
 8255 WRITE(*,9940)KASSUM
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3448)KASSUL
      GOTO 4948
      ENDIF
 3448 READ(*,'(I4)',ERR=8255,END=4576)KASSUL
      LMN=1
 4948 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
 2398 FORMAT(I4,' =KASSUL("No.OF ROWS")')
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
 2399 FORMAT(I5,' =KASSUL("No.OF ROWS")!!!!!!!!!')
 9940 FORMAT(
     1' THERE ARE',I5,' MICRO STATES! OUTPUT OF ALL OR OF .. (IN I4)?')
      WRITE(*,6421)
      WRITE(11,6421)
 6421 FORMAT(
     1' J,NROFNR(J),(NOFROW(J,I),EIVSHT(J,I),I=1,NROFNR(J)),J=1,KASSUL')
      DO 6422 J=1,KASSUL
      WRITE(*,6423)J,NROFNR(J),(NOFROW(J,I),EIVSHT(J,I),I=1,NROFNR(J))
      WRITE(11,6423)J,NROFNR(J),(NOFROW(J,I),EIVSHT(J,I),I=1,NROFNR(J))
 6423 FORMAT(I6,I3,10(I5,D10.2))
 6422 CONTINUE
      ENDIF
C
C**   RETURNS TO TANABE!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND MAGNF
      END
      SUBROUTINE ZHPEVK(IONE,DBLCPX,EIWVAL,EIGENV,ND2028,KASVAL)
COMMENT: SUBROUTINE ZHPEVK is a link to ZHPEVD.
CO:   (from e.g. dsdzhd.f)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C      INTEGER OMP_GET_THREAD_NUM
      CHARACTER*1 JOBZ,UPLO
      COMPLEX*16 DBLCPX,EIGENV !EIGENVECTOR
      DIMENSION DBLCPX(ND2028,ND2028),EIGENV(ND2028,*),EIWVAL(*) !EIGENVALUE
      COMMON/ALLGEM/MOROUT,MORTEX,MIST(7)
      COMPLEX*16 WORK
      ALLOCATABLE WORK(:),RWORK(:),IWORK(:)
      SAVE
      DATA KLICK /0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,38)
      JOBZ='V'
      UPLO='L'
      LWORK=2*KASVAL
      LRWORK=1 + 5*KASVAL + 2*KASVAL**2
      LIWORK=3 + 5*KASVAL
      K=0
      DO 4321 J=1,KASVAL
      DO 4323 I=J,KASVAL
      K=K+1
      DBLCPX(K,1)=DBLCPX(I,J)
 4323 CONTINUE
 4321 CONTINUE
      ALLOCATE (WORK(LWORK),RWORK(LRWORK),IWORK(LIWORK))
COMMENT: from e.g. dsdzhd.f:
C      SUBROUTINE ZHPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK,
C     $                   RWORK, LRWORK, IWORK, LIWORK, INFO )
C      LAPACK driver routine (version 3.0) --
C      *     Univ. of Tennessee, Univ. of California Berkeley, NAG Ltd.,
C      *     Courant Institute, Argonne National Lab, and Rice University
C      *     June 30, 1999
      CALL ZHPEVD(JOBZ,UPLO,KASVAL,DBLCPX,EIWVAL,EIGENV,ND2028
     1,WORK,LWORK,RWORK,LRWORK,IWORK,LIWORK,INFO)
      IF(KLICK.EQ.0.OR.(KLICK.NE.0.AND.RWORK(1).GT.RWORKO))THEN
      RWORKO=RWORK(1)
C      WRITE(*,168)RWORKO,OMP_GET_THREAD_NUM()
C      WRITE(11,168)RWORKO,OMP_GET_THREAD_NUM()
C  168 FORMAT(' FROM ZHPEVD: RWORK(1)=',D16.8,I2)
      WRITE(*,168)RWORKO
      WRITE(11,168)RWORKO
  168 FORMAT(' FROM ZHPEVD: RWORK(1)=',D16.8)
      IF(INT(RWORKO).GT.LRWORK)STOP 'RWORKO'
      KLICK=KLICK+1
      ENDIF
      IF(INFO.NE.0)THEN
      WRITE(*,1119)INFO
      WRITE(11,1119)INFO
 1119 FORMAT(I9,' WARNING: STOP INFOCX IGNORED!')
      ENDIF
      DEALLOCATE (WORK,RWORK,IWORK)
      RETURN
CEND ZHPEVK
      END
      SUBROUTINE TEXT2D(LMN,NEWSUB,MARKE)
      INTEGER MEHR(50),MEHR2(50)
      CHARACTER*7 QNAME(50)
      SAVE
      DATA MEHR/50*0/
      DATA MEHR2/50*0/
      DATA QNAME/
     110*'       ',
     1'CONCORD','SHORTL ','SUSFIT ','LEVMAR ','LEVDER ',
     1'GAUSS  ','LEVSQX ','SUSC   ','TANABE ','BLOCUT ',
     1'REDUCT ','SELECT ','SUGANO ','SUGANC ','SUGAND ',
     1'SUGANY ','SUGANK ','SUPONG ','KOMBII ','CHIMAG ',
     1'RESTBL ','SCHEMA ','NUMERO ','ELELWW ','SPORCO ',
     1'CRYSTF ','MAGNF  ','ZHPEVK ','STR00  ','STR001 ',
     110*'       '
     1/
C
      IF(MARKE.EQ.-1)THEN
      WRITE(*,1111)
      WRITE(11,1111)
 1111 FORMAT(
     1' HINT: MORTEX=2 => CALL subroutine TEXT2D. Its text =>TERMINAL'
     1,' AND => fort.1!',/
     1,' (FILEs fort.7 AND OLDf7.DAT ARE NOT INVOLVED HERE!)',/)
      RETURN
      ENDIF !IF(MARKE.EQ.-1)THEN
C
      IF(NEWSUB.EQ.1.AND.MEHR(MARKE).GE.0)THEN
C**   "NEWSUB" <=> (E.G.) NEW SUBROUTINE (SHOULD HAVE A NUMBER WITH 2 DIGITS)!
 8248 WRITE(*,8128)MARKE,MARKE,QNAME(MARKE)
 8128 FORMAT(
     1' MORTEX.GT.1: Put in in I1 for "no text"/"text" for this part',
     1' No.',I6,/,I6,' <=> (PROGRAM)/SUBROUTINE ',A7
     1,/,' (0 for "no", 1 for "text", however 9 or 2 instead of 0 or 1'
     1,/,' in order not to ask for INPUT for this No. furtheron!')
      READ(*,'(I1)',ERR=8248,END=8576)MEHR1
      WRITE(*,8838)MEHR1,MARKE,QNAME(MARKE)
      WRITE(11,8838)MEHR1,MARKE,QNAME(MARKE)
      WRITE(1,8838)MEHR1,MARKE,QNAME(MARKE)
 8838 FORMAT(I2,' =MEHR1 IN PART No.',I6,'  =',A7,'!!!!!!!!!')
C
      MEHR2(MARKE)=MEHR1
      IF(MEHR1.EQ.9)MEHR1=-1
      MEHR(MARKE)=MEHR1
      ENDIF !IF(NEWSUB.EQ.1.AND.MEHR(MARKE).GE.0)THEN
C
 2323 FORMAT(/,' NOW TEXT FROM SUBROUTINE TEXT2D ( => TERMINAL AND =>'
     1,' fort.1)!:')
 2324 FORMAT(' END OF TEXT FROM SUBROUTINE TEXT2D!',/)
C
      IF(MEHR(MARKE).LE.0)RETURN
      MARKE2=MARKE-10
      GOTO (11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
     131,32,33,34,35,36,37,38,39,40)MARKE2
C
   11 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,711)
      WRITE(1,711)
  711 FORMAT(/,
     1' Here is PROGRAM CONCORD (".MAIN.")!',/
     1,' CONCORD is a modified version of CONDOR, on one file,',/
     1,' mainly with new and improved comments!',/
     2' PROGRAM CONCORD CALCULATES ENERGIES AND PARAMAGNETIC'
     2,' SUSCEPTIBILITIES',/
     1,' AS A FUNCTION OF TEMPERATURE AND MAGNETIC FIELD STRENGTH',/,
     1' OF D BLOCK ATOMS OR IONS WITH ND**N ELECTRONIC CONFIGURATION IN'
     1,/,' CUBIC, CYLINDRICAL, TETRAGONAL, TRIGONAL AND OTHER LIGAND',/,
     1' FIELDS OF ANY STRENGTH AND DIRECTION, WITH RESPECT TO INTERELEC'
     2,'TRONIC',/,
     1' REPULSION AND SPIN-ORBIT COUPLING.',/,
     1' THE PROGRAM CONCORD WORKS ALSO FOR F (AND FOR S AND P) ELECTRON'
     2,'S!',/,
     1' LITERATURE DATA FOR RACAH PARAMETERS AND SPIN-ORBIT COUPLING',/,
     1' CONSTANTS ARE USED WHICH MAY BE CHANGED ACCORDING TO REQUIREMEN'
     2,'TS.',/,
     1' THE PROGRAM USES FORMULAS OF CONDON - SHORTLEY (THE THEORY OF',/
     1,' ATOMIC SPECTRA) AND OF GRIFFITH (THE THEORY OF TRANSITION-',/,
     1' METAL IONS) AND IS WRITTEN IN STANDARD FORTRAN 95.',/
     1,' IOPT1=0 => WRITE(13) AND STOP "IOPT1.EQ.0: START of pingPONG":'
     1,/,' NO MAGN. FIELD APPLIED AS YET (IOPT2=2 required),'/
     1,' =1 for mean value of CHI, CHI calculated for 1,2 OR 3',/
     1,' direction(s) according to point group.',/
     1,' IOPT1=2 <=> 1 direction, a linear combination of up to',/
     1,' 3 directions, where the direction cosinus is put in.',/
     1,' The action of IOPT1=2 was extended for the case, that 0./0./0.'
     2,/,' is put in for the direction of the magnetic field and LOWDAT'
     3,/,' in the first column of CHIINP.DAT is greater than 1.',/
     4,' In CONDOR MOD(LOWDAT(N),2).EQ.0 means "to be fitted", ....NE.0'
     5,/,' means "not to be fitted". LOWDAT=2 or =3 mean "z-direction",'
     6,/,' =4 or =5 mean "x-direction", and =6 or =7 mean "y-direction"'
     7,/,' (meaning of =0 and =1 not altered, =8 or =9 -> STOP).',/,
     1' IOPT2=1 for symmetrical dimers, =2 for not symmetrical dimers',/
     1,' ("pingPONG") with extra INPUT from fort.15 (a copy of fort.13)'
     1,'.',/,' Heisenberg coupling is used for dimers, but an option',
     2' "COMBINED',/
     1,' MODEL II" runs always for dimers, at least vitually,',/,
     1' and coupling may be omitted for "higher" energies.',/,
     1' To diagonalize a complex Hermitian matrix see SUBROUTINE ZHPEVK'
     1,'!',/,
     1' For DIMENSIONs see SUBROTINE SHORTL!',/,
     1' THE ONLY RELEVANT FILE TO BE LINKED IS dsdzhd.f, IF AN ORIGINAL'
     1,/,' LIBRARY IS NOT AVAILABLE /NOT USED!',/,
     1' THE PROGRAM ASKS FOR INPUT IN A SELF-EXPLAINING MANNER',/
     1' AND IS WELL COMMENTATED.',/,
     1' CONCORD calls SHORTL. There is no RETURN from SHORTL to CONCORD'
     1,'!',//,
     1' Because the definitions in magnetism are partly very special,',/
     1'  a list of key words, ordered as they appear, is here appended,'
     1,/,'  and some INTERFACEs and HINTs are included, too!',/,
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES CHI in ',
     2'm**3/mol',/,
     1' magnetic field in Tesla (TESLAS=TESDAT(I=No.of line of INPUT))',
     1/,'  TESLAS is the (abs.) value of the magn. field vector,',/,
     1'  also called FIELD',/,
     1' END PROGRAM CONCORD',/,
     1' INTERFACE (No.1) (in SHORTL):',/,
     1' NEXT LINE IN SOURCE CODE: CALL SUSFIT',/,
     1' END SUBROUTINE SHORTL!',/,
     1' INTERFACE (No.2) (in SUSC):',/,
     1' Previously: DATA STATEMENT of SUBROUTINE SUSC',/,
     1' END SUBROUTINE SUSC!',/,
     1' (in REDUCT:) magn. moment operators (magn. dipol moments)',/,
     1' (step operators for magn. moment operators in MAGNF)',/,
     1' (neg.)magn.momentMATrices FMAT(,,I) with I=1,2,3 in atomic unit'
     1,/,'  Bohr magneton muB',/,
     1' muB in SI units J/Tesla = SIMUBA or in SI units V*s*m = SIMUBC',
     1/,'  = mu0*SIMUBA (mu0 magn. constant)',/,
     1' (neg.)spinmagn.momentMATrices GMAT(,,1), GMAT(,,2) and'
     2,' GMAT(,,3),',/,
     1'  GMAT(,,2) and GMAT(,,3) corresponding to FMAT(,,4) and'
     2,' FMAT(,,5)',/,
     1' INTERFACE (No.3) (in REDUCT):',/,
     1' NEXT LINE IN SOURCE CODE: CALL SELECT',/,
     1' END SUBROUTINE REDUCT!',/,
     1' SUBROUTINE SELECT',/,
     1' direction(s) of the magn. field, either one or up to 3 (z,x,y)',
     1/,' (CALLs SUGANC:)',/,
     1' MATRIX CFDMMM (ComplexFieldDirectionMagn.MomentMatrix)',/,
     1'  (According to DIRECZ the corresponding linear combination of'
     2,' the',/,
     1'  (neg.)magn.momentMATrices FMAT)',/,
     1' CFDMMM serves to add the energy resulting from the (abs. value',
     1/,'  of the) magn. field to the already computed energies:',/,
     1' A diagonalization yields new energies and eigenvectors!',/,
     1' (CALLs SUGANY:)',/,
     1' (TRANSVERS) (neg.) INDUCED MAGN. MOMENTS and',/,
     1'  z-, x-, y-Cartesian coordinates and the lenght of the vector',/
     1,'  of the magnetic moment (in SI unit Tesla*m**3/mol)',/,
     1' END SUBROUTINE SUGANY!',/,
     1' A similarity transformation of MATRIX CFDMMM with help of the',/
     1' (new) eigenvectors yields (see also ZE.MAN)',/,
     1'  EFTIMM(I) = (neg.) induced magn. moments in Bohr magnetons',/,
     1'  (=EnergyFieldTemperatureInducedMagn.Moment)',/,
     1' END SUBROUTINE SUGANC!',/,
     1' INTERFACE (No.4) (in SELECT) - after it:',/,
     1' (A MEAN VALUE OF TWO OR THREE DIRECTIONS WAS CALCULATED OR NOT,'
     1,/,' one single CHI for each line of INPUT is the result in any',
     2' case!)',
     1/,' CHISTA(NRTEMP)=CHI(1,1,1)=CHI111 ("result for CHI")',/
     1,' END SUBROUTINE SELECT!',/,
     1' Now for SUBROUTINEs CHIMAG and SUGANY:',/,
     1' POPART=PartOfPARTitionfunction',/,
     1' PARTI=PARTItion function = SUM(POPART)',/,
     1' EFTSUM=SUM(EFTIMM(I)*POPART)',/,
     1' (neg.) mean induced magn. moment in muB = EFTSUM/PARTI',/,
     1' (neg.) saturation moment = (neg.) mean induced magn. moment,',/,
     1'  if "ground state only", resp. = EFTIMM(1)*POPART!',/,
     1' (Change to molar values here:)',/,
     1' (molar) mean induced magn. moment in Tesla*m**3/mol',/,
     1'  = (molar) magnetisation, "CHI*FIELD"',/,
     1' Now in SUBROUTINE RESTBL (RESult-TaBLe):',/,
     1' (for every line of the INPUT file, values "corrected" or not:)',
     1/,'  CHI IN SI UNIT M**3/MOL, RECIPROCAL CHI,',/,
     1'  MAGNETISATION IN SI UNIT TESLA*M**3/MOL,',/,
     1'  MAGNETIC MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G.',/,
     1'  SATURATION MOMENT), EFFECTIVE MAGNETIC MOMENT IN BOHR',/,
     1'  MAGNETONS, CHI IN CGS UNIT CM**3/MOL, CHI*T',/,
     1' (THE CALCULATION OF THE MEAN VALUE OF TWO OR THREE DIRECTIONS',/
     1,'  (RESP. ONE VALUE ONLY) IS NOT REPEATED HERE!)'
     1,/) 
Cc CONCORD
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   12 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,712)
      WRITE(1,712)
  712 FORMAT(/,
     1' Here is SUBROUTINE SHORTL, called by CONCORD.',/
     1,' The dimension ND2002 is determined, = 1110 for d electrons,',/,
     1' according to the number of f electrons = 2002, =3003, =3432 for'
     1,/,'  5 or 9, for 6 or 8, for 7 electrons, respectively, =1110',/,
     2' else. Dimension ND2002 for EIWERT, DBLMAT, EIVECV, and BLOMAT.',
     2/,'C',/, 
     2' AN INTERFACE (No.1) IS HERE!:',/,
     2' THERE IS NO RETURN FROM SUSFIT TO SHORTL!',/,
     2' BWWWIN AND STBWWW=BWWWIN BEFORE! NO BWWWIN NOW, BUT STBWWW!',/,
     2' NEXT LINE IN SOURCE CODE: CALL SUSFIT',/,
     3' (See INTERFACE (No.3) for dimensions of CPXMAT, EIVECC, CFDMMM,'
     4,/,' CFMATY!)',/,
     1' COMMENT: THE MATRIX TO BE DIAGONALIZED FOR UP TO 4 f-EL. HAS',/,
     1' DIMENSION 1001*1001. INSTEAD OF 1001, ND2002=1110 IS USED AS A',
     2' MINIMUM.',/,
     1' ND2828=28*28 IS THE DIMENSION OF MATRICES TO BE USED FOR DIMERS'
     2,',',/,
     1' WHERE THE MONOMER IS RESTRICTED TO 28 CORRESPONDING TO A',
     2' QUARTET-F',/,
     1' STATE. ND252=252 IS THE MAXIMUM NUMBER OF MICRO STATES OCCURING'
     2,' FOR d-EL.',/
     1,/)
Cc SHORTL
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   13 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,713)
      WRITE(1,713)
  713 FORMAT(/,
     1' Here is SUBROUTINE SUSFIT',/,
     1' THIS ROUTINE IS CALLED BY SUBROUTINE SHORTL (NO RETURN TO',/,
     1' SHORTL) AND IS THE FIRST ROUTINE WHICH WILL REALLY RUN AFTER',/,
     1' STARTING WITH CONCORD!',/,
     1' FIRSTLY SUBROUTINE LEVSQX IS CALLED TO CALCULATE CHI WITH HELP'
     2,' OF',/,
     1' THE PARAMETERS, WHICH WERE READ IN, AND SQX AS A MEASURE FOR'
     2,' THE',/,
     1' QUALITY OF A FIT, EVEN WHEN NO FIT IS MADE, AND DEFINED AS SQX='
     1,/,' SQRT(SUM((1-CHIBER/CHIGEM)**2)/NDATA) (CALCULATED AND',/,
     1' MEASURED CHI ARE COMPARED).',/,
     1' (E.G. WYBOURNE) PARAMETERS MAY BE FITTED SO AS TO MINIMIZE SQX,'
     1,/,' USING THE LEVENBERG-MARQUARDT METHOD IN SUBROUTINES (LEVSQX)'
     2,',',/,
     1' LEVMAR AND LEVDER. IF FITTING IS DONE, SUSFIT CALLS LEVMAR,',/,
     1' WHICH CALLS LEVDER AND GAUSS.',/,
     1' THE MAX. (AND MIN.) NUMBER OF ITERATIONS IS PUT IN, AND SUSFIT',
     1/,' DECIDES FOR CONVERGENCE OF A FIT.',/,
     1' TO THE VERY END, E.G. AFTER CONVERGENCE, BUT MAY BE BEFORE,',/,
     1' SUBROUTINE RES(ULT)T(A)BL/ES) IS CALLED TO GIVE THE RESULTS',/,
     1' IN FORM OF TABLES!',/,
     1' RETURN TO SUBROUTINE SUSFIT FROM RESTBL CAN BE CHOSEN!'
     1,/)
Cc SUSFIT
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   14 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,714)
      WRITE(1,714)
  714 FORMAT(/,
     1' Here is SUBROUTINE LEVMAR',/,
     1' To apply the LEVenbergMARquardt method!',/,
     1' CALLED BY SUBROUTINE SUSFIT! - CALLS LEVDER, IF THERE WAS "SUCC'
     2,'ESS"',/,
     1' IN SUBROUTINE LEVSQX, RESPECTIVELY ALWAYS FOR THE FIRST ITERATI'
     2,'ON.',/,
     1' (LEVDER WIL CALL SUSC, THE ROUTINE WHICH EVALUATES THE DERIVATI'
     2,'VES',/,
     1' OF THE FITTING FUNCTION (THE SUSCEPTIBILITY)). THIS SUBROUTINE '
     2,'HERE',/,
     1' NEEDS GAUSS TO SOLVE A SYSTEM OF LINEAR EQUATIONS AND TO MAKE',/
     1,' A PROPOSAL FOR NEW PARAMETERS.',/,
     1' TO ALTER LINEARIZED FITTING MATRIX, BY AUGMENTING DIAGONAL ELEM'
     2,'ENTS,',/,
     1' AN INPUT OF OMEGA, A PARAMETER OF LEVENBERG/MARQUARDT, IS',/,
     1' REQUIRED. BECAUSE A PROPOSAL FOR OMEGA CANNOT BE MADE,',/,
     1' A SPECIAL TEST IS ENABLED, IF "NOSUCC.NE.0" IS PUT IN! SUBROUTI'
     2,'NE',/,
     1' LEVDER IS CALLED ONLY FOR THE 1ST ITERATION THEN, BECAUSE THE',/
     1,' QUESTION "WAS THE ITERATION SUCCESSFUL", I.E. "IS SQX '
     2,'LOWERED",',/,
     1' IS ALWAYS ANSWERED WITH "NOT SUCCESSFUL"!',/,
     1'C',/,
     1'    LEVENBERG-MARQUARDT METHOD: PAGE -526-  NUMERICAL RECIPES,',/
     1,'    THE ART OF SCIENTIFIC COMPUTING, CAMBRIDGE UNIVERSITY PRESS'
     2,' 1992.',/,
     1' LEVENBERG-MARQUARDT METHOD, ATTEMPTING TO REDUCE CHISQ, THE'
     2,' SUM OF',/,
     1' THE DIFFERENCES OF CHI(I)-MEASURED AND CHI(I)-CALCULATED'
     2,' SQUARED.',/,
     1' THERE ARE NDATA POINTS TEMPIK(I), CHI(I)-MEASURED WITH'
     2,' INDIVIDUAL',/,
     1' STANDARD DEVIATIONS SIG(I), AND A FIT IS REQUIRED BETWEEN THESE'
     1,/,' NDATA POINTS AND CHI(I)-CALCULATED. THE STANDARD DEVIATIONS'
     2,' ARE OFTEN',/,
     1' EQUAL TO CHI(I)-MEASURED. CHI(I)-CALCULATED DEPENDS ON UP TO 31'
     1,/,' COEFFICIENTS, AND UP TO 27 OF THESE ARE WYBOURNE'
     2,' COEFFICIENTS OF',/,
     1' A LIGAND FIELD. THE ACTUAL, I.E. POSSIBLY CHANGED, COEFFICIENTS'
     1,/,' (TRUE WYBOURNE VALUES) ARE STORED IN BWYW AND IN BWWWXX'
     2,' (IN COMMON),',/,
     1' THE FIXED ONES IN BWNULL. ONLY MFIT COEFFICIENTS ARE ACTUALLY',/
     1' BEEN ADJUSTED.',/,
     1' SUBROUTINE SUSC EVALUATES CHI(I) AND ITS DERIVATIVES WITH'
     2,' RESPECT TO THE',/,
     1' FITTING PARAMETERS, CHI(I) ITSELF USING SUBROUTINE LEVSQX'
     2,' AND THE',/,
     1' DERIVATIVES OF CHI(I) USING SUBROUTINE LEVDER.',/,
     1' A PROPOSAL FOR THE FITTING PARAMETERS (NOT FOR THE 0TH'
     2,' ITERATION!) IS',/,
     1' MADE HERE WITH HELP OF THE ABOVE MENTIONED DERIVATIVES (BUT'
     2,' NOT ALWAYS,',/,
     1' EXCEPT THERE IS THE FIRST ITERATION), AND WITH HELP OF'
     2,' SUBROUTINE GAUSS.',/,
     1' IF, IN SUBROUTINE LEVSQX, SQX BECOMES "BETTER" (FORMALLY ALWAYS'
     2,' IN THE',/,
     1' 0TH ITERATION!), NEW DERIVATIVES ARE CALCULATED AND A NEW'
     2,' PROPOSAL IS',/,
     1' MADE WITH HELP OF THESE DERIVATIVES AND SUBROUTINE GAUSS. IN'
     2,' THE OPPOSITE',/,
     1' CASE, A NEW PROPOSAL IS MADE WITH HELP OF THE "OLD" DERIVATIVES'
     2,' AGAIN',/,
     1' AND SUBROUTINE GAUSS, BUT IN A DIFFERENT WAY WITH AN INCREASED',
     2' OMEGA,',/,
     1' A PARAMETER OF THE LEVENBERG-MARQUARDT METHOD.',/,
     1' THIS PARAMETER DECREASES IN THE CASE, THAT SQX BECOMES SMALLER.'
     1,/,' IF SQX REMAINS PRACTICALLY CONSTANT DURING FURTHER'
     2,' ITERATIONS,',/,
     1' CONVERGENCE IS ACHIEVED (OR IF OMEGA HAS BECOME VERY BIG!).'
     1,/)
Cc LEVMAR
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   15 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,715)
      WRITE(1,715)
  715 FORMAT(/,
     1' Here is SUBROUTINE LEVDER',/,
     1' USED BY LEVMAR TO EVALUATE THE LINEARIZED FITTING MATRIX ALPHA',
     1/,' AND VECTOR BETA. IN ADDITION TO THE FIRST TERM, WHICH IS',/,
     1' CALCULATED IN SUBROUTINE LEVSQX, THE SECOND TERM FOR CALCULAT'
     2,'ING',/,
     1' DERIVATIVES NUMERICALLY IS CALCULATED HERE BY CALLING SUSC!',/,
     1' EVALUATED IN SUSC: THE (DERIVATIVES OF THE) FITTING FUNCTION',/,
     1' (THE SUSCEPTIBILITY).',/,
     1' DERIVATIVES ARE ALWAYS CALCULATED FOR THE FIRST ITERATION',/,
     1' (FOLLOWING A "0TH" ITERATION), BUT ARE CALCULATED FOR FURTHER',/
     1,' ITERATIONS ONLY, IF SQX HAS BECOME "BETTER"!'
     1,/)
Cc LEVDER
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   16 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,716)
      WRITE(1,716)
  716 FORMAT(/,
     1' HERE IS SUBROUTINE GAUSS, CALLED BY LEVMAR,',/,
     1' NEEDED TO MAKE A PROPOSAL FOR NEW PARAMETERS.',/,
     1' LINEAR EQUATION SOLUTION BY THE ALGORITHM OF GAUSS WITH',/,
     1' PIVOTING. THE INPUT MATRIX OF DIMENSION=KDIM*KDIM IS NAMED',/,
     1' WATRIX, AND THE RIGHT HAND SIDE OF THE SYSTEM OF LINEAR',/,
     1' EQUATIONS IS NAMED COLUMN. THERE ARE N EQUATIONS OF N UNKNOWNS.'
     1,/,' THE SOLUTION, I.E. THE UNKNOWNS, IS / ARE IN COLUMN, WHEN',/,
     1' GAUSS RETURNS, AND KOLUMN IS USED TO REARRANGE THE SOLUTION',/,
     1' VECTOR.'
     1,/)
Cc GAUSS
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   17 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,717)
      WRITE(1,717)
  717 FORMAT(/,
     1' Here is SUBROUTINE LEVSQX',/,
     1' CALLS SUBROUTINE SUSC, WHICH EVALUATES THE FITTING FUNCTION',/,
     1' (THE SUSCEPTIBILITY), AND RETURNS TO SUSFIT.',/,
     1' SUBROUTINE LEVSQX CALCULATES CHI WITH HELP OF THE PARAMETERS,',/
     1,' WHICH WERE READ IN OR EVALUATED BY SUBROUTINE LEVMAR IN THE',/,
     1' CASE OF ITERATIONS.',/,
     1' CALCULATED AND MEASURED CHI ARE COMPARED IN ORDER TO GET SQX',/,
     1' =SQRT(SUM((1-CHIBER/CHIGEM)**2)/NDATA) (A LEAST SQUARE FIT)',/,
     1' AS A MEASURE OF THE QUALITY OF A FIT (READY IN SUSFIT!).',/,
     1' (E.G. WYBOURNE) PARAMETERS MAY BE FITTED SO AS TO MINIMIZE SQX,'
     1,/,' USING THE LEVENBERG-MARQUARDT METHOD. THE LATTER STARTS HERE'
     1,/,' FOR THE FIRST TERM OF NUMERICALLY CALCULATED DERIVATIVES,',/,
     1' AND THE SECOND TERM IS CALCULATED IN SUBROUTINE LEVDER, WHICH',/
     1,' IS CALLED BY LEVMAR, AND LEVMAR IS CALLED BY SUSFIT FOLLOWING',
     1/,' THE CALL OF LEVSQX HERE.'
     1,/)
Cc LEVSQX
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   18 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,718)
      WRITE(1,718)
  718 FORMAT(/,
     1' Here is SUBROUTINE SUSC, called by LEVDER and LEVSQX.',/,
     1' Previously: LAST DATA STATEMENT',/,
     1' AN INTERFACE (No.2) IS HERE!: NO BWYW BEFORE, NOW BWYW=STBWWW',/
     1,'  RESP. = BWWOMP FOR JAABLT.NE.0! - IF(IBWWW(6).LT.0)BWYW(6)='
     2,'BWYW(6)*...',/,
     1'  (E.G.), THEN AFTERWARDS: BWWWXX(J)=BWYW(J) (TRUE WYBOURNE'
     2,' VALUES)!',/,
     1'  (BWWWXX IS IN COMMON, BWYW IS NOT!)',/,
     1' END OF INTERFACE!',/,
     2' THE CRYSTAL FIELD PARAMETERS ("WYBOURNE PARAMETERS") ARE',/,
     2'  CALCULATED HERE, IF "FUNCTIONS" OF THESE, E.G. B44=B40*FACTOR,'
     2,/,'  ARRIVE HERE! If INPUT of JASTRU, STR00 is CALLed, where',/,
     2'  CRYSTAL FIELD PARAMETERS are calculated!',/,
     2'  (THIS PART OF SUSC RUNS ALWAYS, E.G. ALSO FOR THE DERIVATI',
     3'VES!)',/,
     2' CALLS TANABE, WHERE THE CALCULATION OF THE SUSCEPTIBILITY',/,
     2' REALLY STARTS.'
     1,/)
Cc SUSC
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   19 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,719)
      WRITE(1,719)
  719 FORMAT(/,
     1' Here is SUBROUTINE TANABE, called by SUBROUTINE SUSC.',/
     1,' In TANABE starts the calculation of molar susceptibility',/
     1,' in fact, after SUSC has prepared all parameters!',/
     1,' A full basis of micro states is set up in SCHEMA, and then',/
     1,' the subroutines ELELWW, SPORCO, CRYSTF and MAGNF run once',/
     1,' and return a set of parameters needed for the step operators',/
     1,' to be applied here in TANABE: Interelectronic repulsion,',/
     1,' spin-orbit coupling, crystal/ligand field, and "MAGNF".',/
     1,' So called "imaginary" B''s may be applied in PROGRAM'
     1,/,' CONCORD as in CONDOR, but not in CONDON, and',/
     1,' therefore a complex matrix is set up in CONCORD!',/
     1,' After all diagonal and non-diagonal matrix elements were',/
     1,' calculated, the matrix will be diagonalized! Either blocking',/
     1,' of the matrix is attempted by calling SUBROUTINE BLOCUT,',/
     1,' or it will be diagonalized directly, however a link routine',/
     1,' to the diagonalization routine is called firstly!',/
     1,' In PROGRAM CONDON there is a special option for calling',
     1/,' a SUBROUTINE RUSSEL (no RETURN!), which with help of',
     1/,' SUBROUTINE SAUNDE analyses the eigenfunctions with respect to'
     1,/,' a basis of Russell-Saunders states!',/
     1,' Lastly SUBROUTINE REDUCT is called, where the basis is'
     2,' changed.'
     1/,/
     1,' Step operators work on each micro state in subroutines ELELWW,'
     2,/,' SPORCO, CRYSTF and MAGNF and help to determine all those micr
     3o',/,' states, which give non-diagonal matrix elements for the',/
     4,' corresponding operators. If for these elements fixed factors',/
     5,' occur, these are determined and stored once and for all.',/
     1,/,
     1'    Micro states and the conventional order:',/,
     1' A state function is often given as a linear combination of micro
     2',/,' states. A micro state is an antisymmetrical function: It',
     1' changes',/,' sign,'
     3,' if two electron indices are exchanged. Mostly a micro state',/
     4,' is given as a determinant of a matrix, and the main diagonal',/
     1,' of the matrix serves to define the micro state.',/
     1,' The rows of the matrix are numbered 1,2,3,..., and these number
     3s',/,' mean 1st,2nd,3rd,... electron.',/
     1,' The columns of the matrix are numbered, too, the numbering is',
     2/,' downwards, the numbers are 2*(l+ml)+ms+1/2, and they stand for
     3',/,' the ocupied individual sets, e.g. 9,8,7,...,0 for the ten d-
     4',/,' electrons or 9,8 for two d-electrons with antiparallel spins
     5',/,' with ml=2. More than 10 digits are used for f-electrons, and
     6',/,' these are A,B,C,D for 10,11,12,13, respectively.',/
     1,' If the two kinds of numbering are 1,2,3,... and "downwards",',/
     2,' the individual sets are said to be in conventional order!',/
     1,' If only the occupied individual sets are given, as is mostly',/
     2,' the case, the numbering of the electrons 1,2,3,... is tacitly',
     3/,' assumed.',/
     1,' E.g. are 9(1)*8(2) and 8(2)*9(1) as abbreviations for the',/
     2,' determinant 9(1)8(2)-8(2)*9(1) of course abbreviations for the'
     3,/,' same determinant, but only the first is in conventional order
     4',/,' and may be written |98>.',/
     1,/
     1,'    Step operators:',/
     1,' One-electron operators:',/
     1,' If a step-down operator on ml-values of d-electrons of 4 steps'
     2,/,' works on the first electron of 9(1)*8(2)=|98>, the result may
     3',/,' be Factor*1(1)*8(2)=Factor*|18> (=Factor*8(2)*1(1)), but',/
     1,' |18> is not in conventional order.',/
     1' A matrix element is <81|Operator|98> = <81|Factor|18>. One, i.e.
     2',/,' an odd number of interchanges gives |18> = -|81>, and',
     1' therefore',/
     2,' the matrix element is -<81|Factor|81> = -Factor. The position',
     3/,' of the matrix element is in the lower triangle of the matrix,'
     4,/,' in the first column ("|98>") and in the 16nd row ("<81|").',/
     1,/
     1,' For two-electron operators see SUBROUTINE ELELWW!'
     1,/)
Cc TANABE
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   20 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,720)
      WRITE(1,720)
  720 FORMAT(/,
     1' Here is SUBROUTINE BLOCUT,',/,
     1' CALLED BY TANABE.',/,
     1' INSTEAD OF CALLING THE DIAGONALIZATION ROUTINE DIRECTLY,',/,
     1' SUBROUTINE BLOCUT MAY BE CALLED FIRSTLY TO BLOCK-OUT',/,
     1' THE MATRIX BEFORE DIAGONALIZING THE BLOCKS ONE AFTER ANOTHER!',/
     1,' IF THE ELEMENT OF THE MATRIX IS ABS. LOWER THEN PARR=1.0E-12,',
     1/,' IT IS SET TO ZERO (PARR MAY BE CHANGED).',/,
     1'C',/,
     1' ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE FORM',/,
     1' "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY QUANTUM NUMBERS!',/,
     1' ALSO OCCUP. OF SPINORBITALS ARE CALCULATED IN SUBR. BLOCUT:',/,
     1' OCCUP. OF SPINORB., 1...TH EIGENVEC., E.G. (ML=)3 WITH',/,
     1' (SPIN)UP, (ML=)3 WITH (SPIN)DOWN, ...',/,
     1'C',/,
     1' FOR D ORBITALS (ONLY) MAY BE CALCULATED, IN ADDITION:',/,
     1' OCCUP. OF SPINORB., 1...TH EIGENVEC., DX2-Y2-(SPIN)UP,',/,
     1' DX2-Y2-DOWN, DXZ-UP, DXZ-DOWN, DZ**2-UP, DZ**2-DOWN,',/,
     1' DYZ-UP, DYZ-DOWN, DXY-UP, DXY-DOWN.',/,
     1' INSTEAD, IF NGROUP.EQ.8(D3d).OR.NGROUP.EQ.22(cubII):',/,
     1' ORBITALS MAY BE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS',/
     1,' AS Z-AXIS:',/,
     1' EITHER: DX2-Y2-(SPIN)UP, DX2-Y2-DOWN, etc.',/,
     1' OR: OCCUP. OF SPINORB., 1...TH EIGENVEC., E.G. (ML=)2 WITH',/,
     1' (SPIN)UP, (ML=)2 WITH (SPIN)DOWN, ...'
     1,/)
Cc BLOCUT
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   21 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,721)
      WRITE(1,721)
  721 FORMAT(/,
     1' Here is SUBROUTINE REDUCT (REDUC-T(ANABE)), called by TANABE.',/
     1,' INPUT are the eigenfunctions calculated in TANABE',/
     1,' and the results from MAGNF.',/
     1,' Calculated are (neg.)magn.momentMATrices FMAT. Firstly their',/
     1,' z-components for the z-component of the magnetic field are',/
     1,' calculated, although the magnetic field is not yet included.',/
     1,' Firstly a matrix FMAT(,,1) is calculated, 1 for z-direction,',/
     1,' with help of MQUER(,1) and MQUER(,2), which contain the sum',/
     1,' of ml- and twice the sum of ms-values, respectively, for each',
     1/,' micro state. These sums are the result of the work of magn.',/
     1,' moment operators.',/
     2,' The matrices FMAT(,,2) and FMAT(,,3) for x-and y-direction,',
     2/,' respectively, are not so easily calculated!',/ 
     2,' From MAGNF comes the information, how the micro states are',/
     2,' connected by step operators. With help of step operators',/
     2,' FMAT(,,4) and FMAT(,,5) are calculated. FMAT(,,2) and FMAT(,,3)
     2',/,' are linear combinations of the former!',/
     3,' For complex eigenfunctions all matrices FMAT are complex.',/
     3,' For real eigenfunctions the matrices FMAT(,,1) and FMAT(,,2)',/
     4,' are real, FMAT(,,3) is hermitian (all are complex here)!',/
     3,' Matrices GMAT(,,1..3), corresponding to FMAT(,,4..5) and',/
     3,' needed for e.g. Heisenberg coupling, are calculated in this',/
     3,' manner, too. They deal with spinmagnetic moments only!',/
     3,' The g-factor is formally one here, else it is exactly',/
     3,' ("integer!") two in all cases!',/
     4,' Effectively a new basis is introduced in REDUCT, namely that',/
     4,' of the eigenfunctions! This basis may be truncated in many',/
     4,' cases, and FMAT and GMAT are calculated then only with the',/
     4,' remaining eigenfunctions, those which belong to the lowest',/
     2,' energies! (The DIMENSION ("NRVAL") is up to ND252=252',/,
     2' = the maximum number of micro states occuring for d electrons.)'
     1,/,'C',/,
     1' COMMENT: AN INTERFACE (No.3) IS HERE!: ONLY MATRICES EIWERT,',/,
     1' FMAT, GMAT PASS BY, AND ND252=252 for FMAT AND GMAT!',/,
     1' Previously: Dimension ND2002 for EIWERT, DBLMAT and EIVECV',/,
     1' After it: Dimension NDNEW=252 for EIVAL.(NDNEW,3) and',/,
     1' ZEEMN.(NDNEW,3) in SELECT, dimension ND2828=28*28=784 for',/,
     1' CPXMAT, EIVECC, CFDMMM, CFMATY, dimension N63504=63504=NDNEW**2'
     1,/,' for EI2VAL(N63504,3) and ZE2MAN(N63504,3)',/,
     1' NEXT LINE IN SOURCE CODE: CALL SELECT',/,
     1'C',/,
     6' REDUCT calls SUBROUTINE SELECT and RETURNs to TANABE.'
     1,/)
Cc REDUCT
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   22 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,722)
      WRITE(1,722)
  722 FORMAT(/,
     1' Here is SUBROUTINE SELECT, called by REDUCT.',/
     1,' In SUBROUTINE SELECT the subroutine SUGANC is selected with',/
     1,' different parameters, e.g. the resulting CHI''s of three calls'
     1,/,' for three different directions of the magnetic field are',/
     1,' calculated, stored in three different stores CHIZXY(I,NRTEMP),'
     1,/,' and combined to one mean value of CHI.',/
     1,' One single CHI for each line of INPUT is the result in',/
     1,' any case, CHIZXY(I,NRTEMP) is for OUTPUT only and never used',/
     1,' else!',/
     2' TESLAC=TESLAS*TESLCM used instead of TESLAS, if energies in',/,
     2' cm**(-1) are calculated from e.g. FMAT''s, which are in Bohr',/
     2,' magnetons. (TESLCM=SIMUBA*(5.03411*10**22)(Joule/Tesla)*',/
     2,' (cm**(-1)/Joule), SIMUBA=9.27402*10**(-24)(Joule/Tesla) is',/
     2,' the Bohr magneton named after Ampere in SI values Joule and',/
     2,' Tesla.)',/
     3,'C',/
     4,' AN INTERFACE (No.4) IS HERE!: THE 1 OR 2 OR 3 RESULTS FOR CHI',
     4/,' ARE READY AND, FOR 2 OR 3 RESULTS, THEIR MEAN VALUE IS CALCU',
     5'LATED.',/
     4,' THIS VALUE IS THE ONLY VALUE, WHICH ENTERS FURTHER',
     5' CALCULATIONS',/
     4,' (REMARK: ONE VALUE FOR EACH TEMPERATURE AND EACH FIELD IN THE',
     5' INPUT).',/
     1,' After it: CHISTA(NRTEMP)=CHI(1,1,1)=CHI111',/
     4,'C',/
     5,' If IOPT1=1, the 1 or 2 or 3 results for CHI are the CHI11,',
     6' CHI22,',/
     5,' CHI33 diagonal values of the CHI tensor: CHI33=CHI22 in the',
     6' case',/
     5,' of 2, CHI33=CHI22=CHI11 in the case of 1 value. This is true',
     6' even',/
     5,' in the case, that the tensor is not diagonal!',/
     5,' If the tensor is diagonal, IOPT1=2 with the direction cosinus',
     5/,' of the magn. field "1./1./1." yields one result for CHI which'
     6,' is',/
     5,' the mean value of CHI11, CHI22, and CHI33. (If concerned,',/
     5,' "1./2./0." gives the mean value of CHI11 and 2*CHI22.)'/
     5,'C',/
     5,' For the CHI tensor and the magn. moment vector see SUBROUTINE',
     5/,' SUGANY!',/
     5,'C',/
     1,' SELECT returns to REDUCT.'
     1,/)
Cc SELECT
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   23 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,723)
      WRITE(1,723)
  723 FORMAT(/,
     1' Here is SUBROUTINE SUGANO',/,
     1' SUBROUTINE SUGANO is only for more O(!)utput for the',/,
     1' 3 subroutines SUGANC, SUGAND, SUGANK ("HEISENBERG").',/,
     1' These 3 ROUTines are numbered: NRROUT=2,3,4! SUGANC',/,
     1' calls SUGANK for "HEISENBERG", and SUGANK calls SUGAND.',/,
     1' Subroutine SUGANC may be called, for the same temperature,',/,
     1' once (NRSTOR=1) or max. 3 times: NRSTOR=1...3 <=>',/,
     1' z-, x-, and y-direction, and output is for all directions.',/,
     1' SUGANO is called, if MOROUT.NE.0, however then "more output"',/,
     1' appears always, for (STANDARD:) RETURN only a minimum of',/,
     1' output, i.e. "USED EIGENVALUES OF THE INTERFACE" and',/,
     1' "(NEG.) MAGNETIC MOMENTS (EFTIMM(I) = (neg.) induced magn.',/,
     1' moments in Bohr magnetons)", and "2nd CALL" is omitted.'
     1,/)
Cc SUGANO
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   24 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,724)
      WRITE(1,724)
  724 FORMAT(/,
     1' HERE IS SUBROUTINE SUGANC,',/,
     1' CALLed by SELECT with IOPT1, DIRECZ(1:3), EIWERT(=energy).',/,
     1' (SUGANK for (coupled) dimers calls SUGAND instead of SUGANC!)',/
     1,' Runs for monomers and for dimers, but for dimers only, if',/,
     1' KOMBII really works (combined model: KOMBIN<NRVAL',/,
     1' OR KOMBIC<NRVALC: "JACOMB=1").',/,
     1' CALLs TEXT2D, where a description of SUGANC will be found.',/,
     1' (The text here belongs to TEXT2D, see also below!)',/,
     1' CALLs SUPONG, if IOPT2=2 for unsymmetrical dimers ("Pingpong"),'
     1,/,' but only, if KOMBII really works (combined model: KOMBIC<',
     2'NRVALC).',/,
     1' CALLs SUGANO for more OUTPUT.',/,
     1' CALLs ZHPEVK, a link to a diagonalization routine.',/,
     1' CALLs SUGANY to get the transverse components of the induced',/,
     1' magnetic moments (for information only, not furtheron used here'
     2,')',/,
     1' and the transverse (molar) magnetisation.',/,
     1' CALLs SUGANK for (coupled) dimers.',/,
     1' CALLs KOMBII for "combined model" always, but this works really'
     1,/,' only, if KOMBIN<NRVAL (resp. KOMBIC<NRVALC) for combined',
     2' model.',/,
     1' Hint: See text to SUBROUTINE SUGANC for the two parts of EICVAL'
     1,/,' and of ZECMAN, resp.! (See below!)',/,
     1'C',/,
     1' For the same temperature and the same magn. field it is called',
     1/,' either once (for IOPT1=2) or up to three times (for IOPT1=1).'
     1,/,' NURTMP and NURTMQ (temperature and magn. field the same or',
     2' not)',/,
     1' are calculated in SELECT.',/,
     1' SUGANC does effectively not work, if NURTMP=NURTMQ=1, but ',
     2'CHIMAG',/,
     2' is called, and the result is "CHI" for the given',/,
     1' temperature, field, and for the valid DIRECZ.',/,
     1'C',/,
     1' To the end, if IOPT2=0, SUBROUTINE CHIMAG is CALLed, and RETURN'
     2,/,' follows!',/,
     1' If IOPT2>0, SUBROUTINE SUGANK is CALLed!',/,
     1' To the end and in any case SUBROUTINE CHIMAG is CALLed!',/,
     1' SUGANC RETURNs to SELECT.',/,
     1' (Here is the end of the header of SUBROUTINE SUGANC!)',/,
     2'C',/,
     1'C',/,
     2' SUBROUTINE SUGANC calculates, if it works, eigenvalues EIWERT('
     3,'=energies)',/,
     2' and (neg.) induced magn. moments in Bohr magnetons, i.e. it',
     3' calculates',/,
     2' EFTIMM(I)=EnergyFieldTemperatureInducedMagn.Moment.',/,
     2'C',/,
     2' According to DIRECZ the corresponding linear combination of the'
     2,/' (neg.)magn.momentMATrices FMAT, the matrix CFDMMM(I,J), is',
     3' set up.',/, 
     2' (DIRECZ(1)=ZERO means "no field in z-direction", =ONE means ',
     3'"field is',/,
     2' (only) in z-direction". The sum of the squares of DIRECZ(1:3)',
     2/,' is always =ONE.)',/,
     2' THE MAGNETIC FIELD WILL NOW BE TAKEN INTO ACCOUNT EXPLICITLY:',
     2/,' (SEE IN SELECT FOR TESLAS AND FOR TESLAC!)',/,
     2' CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CFDMMM(I,J), and the already',
     3' known',/,
     2' eigenvalues EIWERT(=energies) are added to the diagonal of',/,
     2' CPXMAT: CPXMAT is now the new energy matrix!',/,
     2' (The DIMENSION ("NRVAL") is up to ND252=252 (= the maximum',/,
     2' number of micro states occuring for d electrons).)',/,
     2' The energy matrix CPXMAT is diagonalized, and new eigenvalues',/
     2' (=energies) and eigenvectors EIVECC result. (See below for',/,
     2' JACOMB=1)',/,
     2'C',/,
     2' A Similarity transformation of MATRIX CFDMMM',/,
     2' (ComplexFieldDirectionMagn.MomentMatrix)',/,
     2' with help of the eigenvectors EIVECC is calculated, however',/,
     2' only the diagonal of the matrix is needed and calculated here:',
     2/,' EFTIMM(I) = (neg.) induced magn. moments in Bohr magnetons.',/
     2,' (EFTIMM IN SUBROUTINE CHIMAG, <->ZE1MAN here) Induced means:',/
     2,' Projection of the magn. moment on the direction of the magn.',/
     2,' field. To the end, if IOPT2=0, SUBROUTINE CHIMAG is CALLed',/
     2,' with the (new) energies EI1VAL and ZE1MAN, and RETURN follows!'
     2,/,' Remember: EI1VAL is EIVAL1(1,NRSTOR) with NRSTOR = 1 or 2 or'
     3,' 3!',/,
     2'C',/,
     2' If IOPT2>0, SUBROUTINE SUGANK is CALLed!',/,
     2' If combined model II really works (JACOMB=1), SUGANC works',/,
     2' and EI1VAL and ZE1MAN are used in SUBROUTINE KOMBII.',/,
     2' In this case however firstly KOMBIN is used instead of NRVAL',/,
     2' and in an extra part the values for KOMBIN+1 ... NRVAL of',/,
     2' EI1VAL and ZE1MAN are calculated. An option KOKURZ in KOMBII',/,
     2' is offered, which serves to ignore these values completely',/,
     2' for tests, i.e. simply to cancel the combined model II!',/,
     2' The reason for choosing these two parts for EI1VAL and ZE1MAN',/
     2,' is, that the basis for the product state basis in SUGANK',/,
     2' remains the same in the case of JACOMB=1 and JACOMB=0!',/,
     2' To the end and in any case SUBROUTINE CHIMAG is CALLed!',/,
     2' SUGANC RETURNs to SELECT.',/
     2)
Cc SUGANC
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   25 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,725)
      WRITE(1,725)
  725 FORMAT(/,
     1' Here is SUBROUTINE SUGAND,',/,
     1' CALLed by SUGANK, where Heisenberg coupling is involved!',/,
     1' SUGAND is a copy of the second part of SUGANC, a little modifie'
     2,'d,',/,
     1' and CALLs SUGANY as SUGANC does!',/,
     1' SUBROUTINE SUGAND, if it works, CALLs (SUGANO for more OUTPUT',/
     1,' and) ZHPEVK, a link to a routine to diagonalize the matrix'
     2,' CPXMAT!',/,
     1' Eigenvalues EI2VAL are calculated and (neg.) induced magn. mome'
     2,'nts',/,
     1' ZE2MAN from the corresponding eigenvectors and matrix CFDMMM,',/
     1,' which was calculated in SUGANK together with CPXMAT.',/,
     1' If only temperature has changed (NURTMQ.NE.0), SUGAND does',/,
     1' effectively not work!',/,
     1' More OUTPUT may be produced (only) in SUBROUTINE SUGANO,',/,
     1' if MOROUT.NE.0!',/,
     1' To the end SUBROUTINE CHIMAG is CALLed, which calculates CHI!',/
     1,' SUGAND RETURNs to SUGANK.'
     1,/)
Cc SUGAND
      WRITE(*,2324)
      WRITE(11,2324)
      GOTO 9999
   26 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,726)
      WRITE(1,726)
  726 FORMAT(/,
     1' Here is SUBROUTINE SUGANY, called by SUGANC or SUGAND.',/
     1' This SUBROUTINE is for information only:',/,
     1' The results are not used furtheron!',/,
     1' Only (neg.) induced magn. moments enter further calculations',
     2' here,',/,
     1' here called (pseudo) ZEEMAN (EFTIMM IN SUBROUTINE CHIMAG with',/
     1,' EFTIMM=EnergyFieldTemperatureInducedMagn.Moment)',/,
     1' = (neg.) induced magn. moments in Bohr magnetons)',/,
     1' In SUGANC/SUGAND are, after CALL ZHPEVK, eigenvalues EI.VAL',/,
     1' and eigenvectors EIVECC ready to be used here!',/,
     1' ZEEMAN is calculated for 3 directions corresponding to the',/,
     1' direction of the magn. field, for all lines of the INPUT file:',
     1/,' For the direction of the magn. field (repeated later on),',/,
     1' in a (special) direction transverse to this direction, and',/,
     1' in a direction transverse to both directions before!',/,
     1' To get these components, the corresponding linear combination,',
     1/,' according to DIRECZ, of the (neg.)magn.momentMATrices FMAT,',/
     1,' the matrix CFMATY(I,J) (CFDMMM(I,J) in SUGANC) is set up.',/,
     1' ZEEMAN(I) is calculated as in SUGANC, as the result of',/,
     1' a similarity transformation of CFMATY with help of EIVECC,',/,
     1' and the "FORMULA TO CALCULATE MAGN. MOMENT" is applied as in',/,
     2' CHIMAG. The results are put out!',/,
     1' The results here are not used to calculate susceptibilities',/,
     1' used in fitting procedures, but they may be used to compute',/,
     1' susceptibility tensors!',/,
     1' In addition the components of the magnetic moment vector',/,
     1' in the z-, x-, and y-direction of the Cartesian coordinate',/,
     1' system are calculated and put out!',/,
     1'C',/,
     1' The CHI tensor times the vector of the magn. field yields',/,
     1' the magnetic moment vector (times some factors to get (molar)',/
     1,' SI values). This vector times the direction of the magn. field'
     1,/,' is the desired component in the direction of the magn. field'
     1,',',/,' the (molar) magnetisation, "CHI*FIELD=CHI*TESLAS"!',/,
     1' SUGANY returns to SUGANC or SUGAND.'
     1,/)
Cc SUGANY
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   27 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,727)
      WRITE(1,727)
  727 FORMAT(/
     1,' Here is SUBROUTINE SUGANK',/
     1,' for Heisenberg coupling within a dimer. SUBROUTINE SUGANK is',/
     1,' CALLed by SUGANC! - CALLS (SUGANO for more OUTPUT and) SUGAND',
     1/,' to diagonalize a matrix CPXMAT set up here and to calculate',/
     1,' ZE2MAN, the (neg.) induced magnetic moments, which are also',/,
     1' called EFTIMM (EFTIMM(I)=EnergyFieldTemperatureInducedMagn.Mome'
     2,'nt),',/,
     1' with help of a matrix CFDMMM, which is also set up here and ser'
     2,'ves',/,
     1' to add the energy resulting from the (abs. value of the) magn.',
     1/,' field to the already computed energies!',/,
     1' If only temperature has changed, i.e. if also FKWERT has not',/,
     1' changed (NURTMQ.NE.0), SUGANK does effectively not work, and',/,
     1' SUGAND is CALLed with NURTMQ!',/,
     1' More OUTPUT may be produced (only) in SUBROUTINE SUGANO,',/,
     1' if MOROUT.NE.0!',/,
     1' For the same temperature and the same magn. field it is called',
     1/,' either once (for IOPT1=2) or up to three times (for IOPT1=1)',
     2'.',
     1/,' Heisenberg coupling is taken into account here in CPXMAT with'
     1,/,' FAKGQK=-TWO*FKWERT for symmetrical or not symmetrical',/,
     1' dimers.',/,
     1' The g-factor for spin is contained in FMAT. GMAT(ND252,ND252,1:'
     2,'3),',/,
     1' which containes only spin, but without g-factor, will be used',/
     1,' for Heisenberg coupling (for not symmetrical dimers',/,
     1' GMATCU(ND252,ND252,1:3) is needed, too).',/,
     1'C',/,
     1' In order to be able to take into account not symmetrical dimers'
     2,',',/,
     1' POINTERS are used here, although, because the sequence of the',/
     1,' two parts of dimers is all the same, these are not necessary!',
     1/,' However an extension of the PROGRAM to e.g. trimers would be',
     1/,' enabled, if POINTERS are used! (Use of pointers reduces in',/,
     1' any case the lenght of the code to calculate CPXMAT(LINCOL,LINR'
     2,'OW)',/,
     1' and CFDMMM(LINCOL,LINROW)!)',/,
     1' Product states are used as the new basis here, and the dimensio'
     2,'n',/,
     1' is KOMBIQ=ZOMBIN*ZOMBIC with ZOMBIN=>KOMBIN and ZOMBIC=>KOMBIN',
     1/,' for symmetrical dimers.',/,
     1' For not symmetrical dimers, INPUT of "the other part" comes',/,
     1' from file fort.15, a copy of fort.13, and is marked using',/,
     1' "C<->Cuprum"! ZOMBIN=>KOMBIN and ZOMBIC=>KOMBIC or ZOMBIN=>',/,
     1' KOMBIC and ZOMBIC=>KOMBIN is set corresponding to KENNNG,',/,
     1' but for dimers this is all the same, although the sequence is',/
     1,' different of course!',/,
     1' Subroutine KOMBII for "combined model II" is always called,',/
     1,' but it runs only formally, not really, if KOMBIN=NRVAL and',/,
     1' KOMBIC=NRVALC, i.e. if SUBROUTINE KOMBII not really works.',/,
     1' In this case SUBROUTINE SUGANC calculates nothing, else',/
     1,' it calculates for the NRVAL values of the monomer within',
     2/,' the dimer (JACOMB=1 then)!',/,
     1' Dimensions of CFDMMM and CPXMAT are (ND2828,ND2828) with',/,
     1' ND2828=28**2=784 <=> 4*7 <=> quartet-F state - d electrons!',/,
     1' See SUBROUTINE SUGAND resp. SUGANC for more information!',/,
     ,'C',/,
     1' The following text is valid only for symmetrical dimers:',/,
     1' The Kronecker product of the matrix of the kets, which',/,
     1' represent the eigenvectors, with itself is used as a new',/,
     1' basis, a basis of product states.',/,
     1' The matrix CFDMMM(I,J) (ComplexFieldDirectionMagn.MomentMatrix)'
     1,/,' is now the sum of two matrices: The Kronecker product of',/,
     1' a matrix CFDMMM as in SUGANC with the unit matrix and the',/,
     1' Kronecker product of the unit matrix with this matrix.',/,
     1' The matrix CPXMAT(I,J) is TESLAC*CFDMMM(I,J)',/,
     1' (See in SELECT for TESLAS and for TESLAC!)',/,
     1' with the eigenvalues added as the sum of the Kronecker product',
     1/,' of the corresponding diagonal matrix with the unit matrix and'
     1,/,' the Kronecker product of the unit matrix with the diagonal',/
     1,' matrix!',/
     1,' Matrices GMAT(,,1..3), corresponding to FMAT(,,2..3), are',/
     1,' used for Heisenberg coupling, and they deal with spin only.'/
     1,' The matrix of the Heisenberg operator is a sum of three Kronec'
     1,'ker'/
     1,' products, and it is multiplied with a coupling parameter',/,
     1' FAKGQK=-TWO*FKWERT.'/
     1,' The sum is the sum of the Kronecker product of GMAT(,,1) with',
     1/,' itself and of two Kronecker products of linear combinations',/
     1,' of GMAT(,,2) and GMAT(,,3) with itself, respectively.',/
     1,/
     1,' SUGANK calls SUGAND and RETURNs to SUGANC.'
     1,/)
Cc SUGANK
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   28 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,728)
      WRITE(1,728)
  728 FORMAT(/,
     1' Here is SUBROUTINE SUPONG.',/
     1' SUBROUTINE SUPONG is CALLed by SUBROUTINE SUGANC and',/,
     1' RETURNs to SUGANC.',/,
     1' It runs only, if IOPT2=2 ("pingPONG"), if JACOMB.NE.0',/,
     1' ("combined model II runs really for this condition"),',/,
     1' and if (NEWFLD.NE.0) ("new value of the magn. field").',/,
     1' (JACOMB=0, IF((NRVALC.EQ.KOMBIC).AND.(KOMBIN=NRVAL)).)',/,
     1' It is a modified copy of SUGANC with EICVAL, ZECMAN, EIWECU,',/,
     1' FMATCU, NRVALC ("C<-> Cuprum") instead of EI1VAL, ZE1MAN,',/,
     1' EIWERT, FMAT, NRVAL in SUGANC.',/,
     1' SUPONG serves to include the magn. field in CPXMAT, using',/,
     1' FMATCU and CFDMMM, in order to get EICVAL and ZECMAN',/,
     1' for KOMBII, if combined model II really works (JACOMB=1).',/,
     1' Hint: See SUBROUTINE SUGANC for the two parts of EICVAL and',/,
     1' of ZECMAN, resp. (KOMBIC instead of KOMBIN)!'
     1,/)
Cc SUPONG
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   29 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,729)
      WRITE(1,729)
  729 FORMAT(/,
     1' Here is SUBROUTINE KOMBII, called by SUGANC.',/
     1' COMBINED MODEL II runs here always for',/,
     1' (IOPT2.GT.0).and.(NURTMQ.EQ.0), however "virtually",',/,
     1' i.e. not "really", if KOMBIN=NRVAL and,',/,
     1' if IOPT2=2, KOMBIC=NRVALC.',/,
     1' (Heisenberg) coupling may be omitted for "higher"',/,
     1' energies, but these "higher" energies must not',/,
     1' be omitted, i.e. they have to be handled as if',/,
     1' they would be coupled with coupling constant "zero"!',/,
     1' To have the same sequence of the two parts of not',/,
     1' symmetrical dimers as in SUGANK, pointers are used,',/,
     1' although this is not necessary! (Use of pointers',/,
     1' reduces in any case the lenght of the code!)',/,
     1' SUBROUTINE KOMBII RETURNs to SUGANC.'
     1,/)
Cc KOMBII
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   30 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,730)
      WRITE(1,730)
  730 FORMAT(/,
     1' Here is SUBROUTINE CHIMAG, called by SUGANC',/
     1,' CHIMAG, for CHI and MAGnetisation, runs always, not only',/
     1,' formally, if it is arrived at, e.g. for each temperature!',/
     2' Calculates (molar) paramagnetic susceptibility chi in SI units',
     2/,'  (CHI=CHISI) and magnetisation chi*FIELD=CHI*TESLAS=CHIFLD,',/
     2,'  for given temperature TEMPTH (in Kelvin) and "magnetic field"'
     2,/,'  FIELD=TESLAS (in Tesla).',/,
     3' As input needed: The energy eigenvalues EIWERT and the (neg.)',/
     3,'  magnetic moments EFTIMM (see also ZE.MAN) for the lowest',/,
     3'  energy eigenvalues ("niveaus") taken in account, their number',
     3/,'  being NRVAL. The lowest EIWERT is set to zero. The result/s',
     3/,'  is/are divided by ZWEI12 (put in), if NRROUT.GT.2 (symmetric'
     3,/,'  dimer yes or no!).',/,
     1' (THE G-FACTOR FOR SPIN (=2) IS CONTAINED IN EFTIMM.)',/
     1,' Boltzmann statistics is applied using the chosen number of',/
     1,' lowest energy eigenvalues ("niveaus"). The (neg.)',/
     1,' induced magnetic moments are called EFTIMM (see also ZE.MAN).',
     1/,' The sum of EFTIMM times e**(-energy/(const.of Boltzmann*temp.'
     2,'))',/,
     1'  is divided by the partition function, i.e. the sum of',/,
     1'  e**(-energy/(const.of Boltzmann*temp.)), to get -FMAGNB',/,
     1'  ((neg.) mean induced magn. moment) in Bohr magnetons.',/,
     1'  The terms of the partition function work as a weighting',/,
     1'  function, therefore "mean" induced magn. moment!',/,
     1'  Induced means: Projection of the (neg.) magn. moment on the',/,
     1'  direction of the magn. field!',/,
     1'  (EFTIMM=EnergyFieldTemperatureInducedMagn.Moment)',/,
     1' CHIFLD=PREVOR*(-FMAGNB) (>0, FOR PREVOR SEE "PARAMETER"!) and',/
     1,' CHISI=CHIFLD/TESLAS are calculated then, but',/,
     2' only CHI enters further calculations (See SELECT for more',/,
     2' information!)!',/,
     2' CHIMAG returns to SUGANC.'
     1,/)
Cc CHIMAG
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   31 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,731)
      WRITE(1,731)
  731 FORMAT(/,
     1' Here is SUBROUTINE RESTBL',/,
     1' <=> RES(ALT)T(A)BL(ES)!',/,
     1' CALLed by SUBROUTINE SUSFIT, RETURNs to SUSFIT, if',/,
     1' JASTOR.EQ.1 (JASTOR put in here!).',/,
     1' JASTOR>1: STOP ''JASTOR'', END of the calculation,',/,
     1' all results are put out in form of 1 table or more tables.',/,
     1' Hint: For each line (<->NRTEMP) of the INPUT file is firstly',/,
     1' only one single result calculated (CHI-START=CHI(1,1,1)),',/,
     1' corresponding to the "measured" CHI (CHI(2,1,1)),',/,
     1' however CHI(2,4,1)=CHIMEA(NRTEMP) is the measured CHI',/,
     1' from the INPUT file!',/,
     1' Derived are (up to) 27 values from CHI(1,1,1) and',/,
     1' (the corresponding) 27 values from CHI(2,4,1),',/,
     1' e.g. CHI(1,4,1) corresponds to CHI(2,4,1),',/,
     1' and CHI(1,4,1) is the resulting corrected calculated CHI!',/,
     1' (CHI(,,1..7) are:',/,
     1' (1) CHI IN SI UNIT M**3/MOL,',/,
     1' (2) RECIPROCAL CHI,',/,
     1' (3) MAGNETIC MOMENT OF 1 ATOM IN BOHR MAGNETONS,',/,
     1' (4) EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS,',/,
     1' (5) MAGNETISATION IN SI UNIT TESLA*M**3/MOL,',/,
     1' (6) CHI IN CGS UNIT CM**3/MOL,',/,
     1' (7) CHI*T)',/,
     1' In addition are put out, to file fort.11 and to fort.1,',/,
     1' the 1, 2 or 3 terms ("direction(s)": z-, x-, y-), which',/,
     1' are combined to CHI(1,1,1).',/,
     1' A lot of text is put out for information on the results,',/,
     1' when the SUBROUTINE is running!'
     1,/)
Cc RESTBL
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   32 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,732)
      WRITE(1,732)
  732 FORMAT(/,
     1' Here is SUBROUTINE SCHEMA, called by TANABE.',/
     1,' Subroutine SCHEMA - running only once - has been written to'
     2,' give',/
     1,' all KASSUM micro states of NREL electrons (max. 13 el., if'
     2,' f el.),',/
     1,' and the maximum of KASSUM according to DIMENSION is ND2002,',/
     1,' with a maximum of 3432 (KASSUM=0, if NREL=0).',/
     1,' KLWERT = 0/1/2/3 is the l value corr. to s, p, d, and f',/ 
     1,' electrons and is given. The result of SCHEMA, the',/
     1,' consecutively and not arbitrarily (see below) numbered micro',/
     1,' states, is given in MSML and in a different form in MSMLNW:',/
     1,' There one individual set of a micro-state is given as a num'
     2,'ber!:',/
     1,' This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for'
     2,' ms=+1/2.',/
     1,' (This number is one(!) digit, if A, B, C, D are digits for'
     2,' f-el.!)',/
     1,' Each micro-state is in its conventional order, and this is',/
     2,' "step down", e.g. 975 for MSMLNW(10,1..3) for 3 (d)el.!',/ 
     1,' MSMLNW serves to calculate MSML, and some special sums of',/
     1,' elements of MSML are given in MQUER(II,1..3):',/
     1,' The first 10 of 120 micro states for 3 (d)el. are:',/
     1,' No.OF STATE  MQUER(II,1..3) (MSML(II,1,I),I=1,NREL),'
     2,'(MSML(II,2,I),',/
     1,' I=1,NREL)',/
     1,'  1         5    1   11           2 2 1                 1-1 1',/
     1,'  2         5   -1    9           2 2 1                 1-1-1',/
     1,'  3         4    1    9           2 2 0                 1-1 1',/
     1,'  4         4   -1    7           2 2 0                 1-1-1',/
     1,'  5         3    1    7           2 2-1                 1-1 1',/
     1,'  6         3   -1    5           2 2-1                 1-1-1',/
     1,'  7         2    1    5           2 2-2                 1-1 1',/
     1,'  8         2   -1    3           2 2-2                 1-1-1',/
     1,'  9         4    1    9           2 1 1                 1 1-1',/
     1,' 10         3    3    9           2 1 0                 1 1 1',/
     1,'   .........',/
     1,' Concerning (MSML(II,1,I),I=1,NREL): The numbers printed are'
     2,' such',/
     1,' that each number (e.g. 1) is equal to or lower than the'
     2,' preceding one,',/
     1,' if the set of numbers to the left is the same!',/
     1,' (MSML(II,2,I),I=1,NREL): All numbers are 1 or -1;'
     2,' if there are two',/
     1,' numbers equal to each other in (MSML(II,1,I),I=1,NREL),',/
     1,' the pair 1 -1 belongs to these!',/
     1,' If KLWERT (=2) is added to each ml number, e.g.',/
     1,'    7         2    1    5      4 4 0      1-1 1',/
     1,'    8         2   -1    3      4 4 0      1-1-1',/
     1,'    9         4    1    9      4 3 3      1 1-1',/
     1,'   10         3    3    9      4 3 2      1 1 1,',/
     1,' each number becomes a digit, and if e.g. 4 4 0 is taken as'
     2,' the number 440,',/
     1,' each of these new numbers of a given row is lower than or'
     2,' equal to the',/
     1,' number of a preceding row!',/
     1,' Twice e.g. 440 is 880, and 2*ms, if ms=1/2, i.e. 101 resp.',/
     1,' 100, can be added to get 981 resp. 980.',/
     1,' The digits 0...9 occur for d-electrons! For f-electrons there',
     1/,' are the further digits A, B, C, and D!',/
     1,' An idea, how MSML is calculated, give the following lines:',/
     1,'  7                  1-1 1 & 9 8 1 -> 8 8 0 -> 4 4 0 -> 2 2-2',/
     1,'  8                  1-1-1 & 9 8 0 -> 8 8 0 -> 4 4 0 -> 2 2-2',/
     1,'  9                  1 1-1 & 9 7 6 -> 8 6 6 -> 4 3 3 -> 2 1 1',/
     1,' 10                  1 1 1 & 9 7 5 -> 8 6 4 -> 4 3 2 -> 2 1 0',/
     1,' The first 12 are: (1-11)987;(1-1-1)986;(1-11)985;(1-1-1)984;',/
     1,' (1-11)983;(1-1-1)982;(1-11)981;(1-1-1)980;',/
     1,' (11-1)976;(111)975;(11-1)974;(111)973.'
     1,/)
Cc SCHEMA
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   33 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,733)
      WRITE(1,733)
  733 FORMAT(/,
     1' Here is SUBROUTINE NUMERO,',/
     1,' called by ELELWW, SPORCO, CRYSTF, MAGNF, BLOCUT,',/
     1,' which has been written to evaluate the number NR of one',/
     1,' of a maximum of ND2002 micro states of NREL electrons',/
     1,' (actually the number of states is KASSUM and in most cases',/
     1,' lower than ND2002), which are numbered consecutively and',/
     1,' stored in MSMLNW(NR,1..NREL). The micro state looked for',/
     1,' is given in MSMLNO(1..NREL).',/
     1,' NUMERO cuts the range of 1...KASSUM in half and looks,',/
     1,' where the the micro state in MSMLNO is! This half is cut',/
     1,' again in half etc., untill the NR of MSMLNO in MSMLNW was'
     2,' found!',/
     1,' One individual set of a micro-state is given as a number!:',/
     1,' This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for'
     2,' ms=+1/2.',/
     1,' (This number is one(!) digit, if A, B, C, D are digits for'
     2,' f-el.!)',/
     1,' Each micro-state is in its conventional order, and this is',/
     2,' "step down", e.g. 953 for MSMLNO(1..3).',/ 
     1,' If a step-down operator works on a micro state, the number',/
     1,' defining it decreases, but its consecutive number increases.',/
     1,' Therefore NUMERO can start, instead with 1, with this first'
     2,' number,',/
     1,' given as JJJ. NUMERO RETURNs to ELELWW, SPORCO, CRYSTF, MAGNF,'
     1,/,' BLOCUT!'
     1,/)
Cc NUMERO
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   34 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,734)
      WRITE(1,734)
  734 FORMAT(/,
     1' Here is SUBROUTINE ELELWW, called by TANABE,',/
     1,' to calculate the non-diagonal matrix elements',/
     1,' of interelectronic repulsion, resp. FACTORs for',/
     2,' these, omitting the Slater-Condon parameters here.',/
     1,' This routine does not run for one electron or one hole',/
     2,' in a (sub)shell!',/
     4,' ELELWW is called only once. It returns to SUBROUTINE',/
     4,' TANABE, where the results are always available.',/
     1,' The operator is a sum of two-electron operators:',/
     1,' See the formula for (ab/g_ij/cd) in Condon/Shortley,',/
     1,' resp. (ab/q/cd) Condon/Shortley p.175!',/
     1,' One individual set of a micro-state is given as a digit:',/
     1,' This digit is (ml+l)*2+ms+1/2 (A=10,B=11,C=12,D=13 are',/
     2,' digits for f-electrons).',/
     1,' The conventional order of the individual sets of a micro-',/
     2,' state is "step down", e.g. 953 (the numbering of the',/ 
     1,' electrons is always 1,2,3,...), and 953 is the label',/
     1,' of the micro-state.',/
     9,' The micro-states are ordered, too: The label of the first',/
     9,' micro-state is a greater number then that of the 2nd, etc.',/
     1,' Two individual sets a and b belong to this micro-state, i.e.',/
     1,' the micro-state is ...a...b... with a>b. a and b are digits,',/
     1,' e.g. for the micro-state before (3 electrons): 9(a=5)(b=3).',/
     3,' Non-diagonal non-zero matrix elements can exist only for all',/
     1,' those states ...c...d... with c not equal to a or b and d not',
     1/,' equal to a or b, which differ in exactly two individual sets',
     2/,' corresponding to (ab/q/cd), but msa must be equal to msc,',/
     1,' msb equal to msd, and (mla+mlb) must be equal to (mlc+mld).',/
     1,' c and d (either c>d or c<d) are therefore sets not belonging',/
     1,' to the state ...a...b...!',/
     1,' For each micro-state the number of micro-states, with which',/
     1,' it is connected by non-zero matrix elements, is evaluated,',/
     2,' and in addition the ordinal numbers of these micro-states',/
     2,' and all FACTORs needed later on are calculated and stored.',/
     1,' Because (mla+mlb) must be equal to (mlc+mld), the operators',/
     1,' may be regarded as step operators on ml-values:',/
     2,' a is stepped up the same number of steps as b is stepped down,'
     2,/,' or a is stepped down the same number of steps as b is stepped
     2',' up.'/,/
     1,' An outer DO-LOOP goes over the ordinal numbers of all micro-',/
     2,' states, which are in conventional order, i.e. 1st, 2nd, ...',/
     2,' micro-state.',/
     1,' For each micro-state of the outer DO-LOOP the individual sets',
     1/,' not belonging to it are determined, i.e. the number of these',
     1/,' sets and the digits, which define it, are stored.',
     1/,' If two spaces ("holes") are taken for a and b, there is one', 
     2/,' possibility to do this for two electrons, there are three',
     3/,' possibilities for three electrons, six possibilities for four'
     4,/,' electrons, etc. (i.e. NREL choose 2 possibilities for NREL',
     5/,' electrons).',/
     1,' The next DO-LOOP goes over all electrons of the micro-state,',/
     1,' i.e. over all its individual sets, and the corresponding',/
     1,' individual set is called LOCH1 and replaced by a space',/
     2,' ("LOCH"=hole).',/
     1,' The next DO-LOOP goes once more over the individual sets of',/
     2,' the micro-state, however only those with a smaller digit than',
     3/,' that of the DO-LOOP before. This set is called LOCH2 and',/
     4,' replaced by a space, too.',/
     1,' In the next DO-LOOP the first hole is filled with the 1st, the'
     1,/,' 2nd, etc. individual set not belonging to the micro-state of'
     1,/,' the outer DO-LOOP, which is called INLO1, but only if the',/
     1,' spins of INLO1 and LOCH1 are the same. (For e.g. three d-',/ 
     2,' electrons there are (10-3)=7 possibilities to do this, if',/
     3,' spin is not taken into consideration.)',/
     1,' In the next DO-LOOP the second hole is filled with the 1st,'/
     1,' the 2nd, etc. individual set not belonging to the micro-state',
     1/,' of the outer DO-LOOP, which is called INLO2, but only if the',
     1/,' spins of INLO2 and LOCH2 are the same, if INLO2 is not equal',
     1/,' to INLO1, and if (mla+mlb) is equal to (mlc+mld).',/
     1,' This micro-state, which may be not in its conventional order,',
     1/,' is used for all further calculations, but the parity of',/
     1,' permutations to get the conventional order as well as the',/
     1,' label of the ordered state are determined. JAODD becomes -1',/
     1,' for odd and 1 for even parity, the label goes into SUBROUTINE',
     1/,' NUMERO, and its ordinal number returns. It is the ordinal',/
     1,' number of a micro-state, with which the micro-state of the',/
     1,' outer DO-LOOP is connected!',/
     1,' The calculation continues only, if this ordinal number is',/
     1,' greater than that of the micro-state of the outer DO-LOOP,',/
     1,' because only the lower triangle of the Hamiltonian matrix',/
     1,' is actually computed!',/
     1,' If the calculation continues, the ml-values of LOCH1 and',/
     1,' INLO1, called LOCHM1 and INLOM1, respectively, and of LOCH2',/
     2,' and INLO2, called LOCHM2 and INLOM2, respectively, are',/
     3,' determined, and the absolute value of the difference of',/
     4,' LOCHM1 and INLOM1, called MDIF.',/
     1,' For K=2, =4, =6, if concerned, but K not lower than MDIF,',/
     2,' the FACTORs of the F''s, the Slater-Condon parameters,',/
     3,' are now calculated. They are the above JAODD times Condon-',/
     4,' Shortley coefficient cK(l-value,LOCHM1,l-value,INLOM1) times',/
     5,' Condon-Shortley coefficient cK(l-value,INLOM2,l-value,LOCHM2).'
     1,/,' For the micro-state of the outer DO-LOOP 1 is added to a',/
     1,' counter, the ordinal number of the evaluated micro-state is',/
     1,' stored, and the up to three FACTORs, which have been',/
     1,' calculated, are stored. Hint: The two terms, which have to',/
     2,' be added for parallel spins, are separately stored here!',/
     2,/
     1,' See the source code for more information!',/
     9,/
     1,' Two-electron operators for interelectronic repulsion:',/
     2,' Non-diagonal, non-zero matrix elements exist only, if',/
     3,' a step-down operator on ml-values works on one electron',/
     4,' and the corresponding step-up operator works simultanously',/
     5,' on a second electron.',/
     1,' As an example all matrix elements connected with |54> are',/
     2,' now calculated for d-electrons (l=2):',/
     1,' i) One-step operators:',/
     2,' One result is |72>, and the corresponding matrix element is',/
     3,' <72|Op1uOp1d|54> with (ab|q|cd) corresponding to mla=1,',/
     4,' mlb=-1, mlc=0, mld=0. The matrix element is the sum of two',/
     5,' terms, one with k=2 and a second one with k=4, and each term',/
     6,' is the product of a Slater-Condon parameter Fk times Condon-',/
     7,' Shortley coefficient ck(l,mla,l,mlc) times Condon-Shortley',/
     8,' coefficient ck(l,mld,l,mlb).',/
     1,' A second result is |36>, but the corresponding matrix element',
     2/,' is <63|Op1dOp1u|54> with however (ab|q|cd) corresponding to',/
     3,' mla=-1, mlb=1, mlc=0, mld=0. Each of the two terms is the',/
     6,' product of a Slater-Condon parameter Fk times Condon-',/
     7,' Shortley coefficient ck(l,mla,l,mlc) times Condon-Shortley',/
     8,' coefficient ck(l,mld,l,mlb) times (-1), because an odd number',
     9/,' of interchanges, i.e. one interchange, was needed to get the',
     1/,' conventional order.',/
     1,' ii) Two-step operators:',/
     2,' The corresponding matrix elements are <90|Op2uOp2d|54> and',/
     3,' <81|Op2dOp2u|54>. Because |54> is to the right of <72|, <63|,',
     4/,' <90| and <81|, all these matrix elements are in the upper',/
     5,' triangle of the resulting matrix, and they are actually not',/
     6,' computed therefore!',/
     1,' Step operators and parallel spins:',/
     1,' As an example all matrix elements connected with |64> are',/
     2,' now calculated for d-electrons (l=2):',/
     2,' The corresponding matrix elements are <82|Op1uOp1d|64> and',/
     3,' <82|Op2dOp2u|64> here, but these two are added to become one',/
     4,' matrix element, which actually enters the matrix. For parallel'
     5,/,' spins there are always two terms to be added!',/
     1,' A second example with f-electrons is <C2|Op2uOp2d|86>',/
     2,' and <C2|Op3dOp3u|86>, with C=12.',/
     1,' An example with three p-electrons:',/
     2,' An operator may work on the second and third electron of the',/
     3,' ket |432> to give |450>. (10|q|00) corresponds to (ab|q|cd).',
     4/,' Because the bra <450| is not in conventional order and there',
     5/,' is an odd number of interchanges needed to get it so, the',/
     6,' matrix element is minus one times F2 times c2(1,1,1,0) times',/
     7,' c2(1,0,1,1).'
     1,/)
Cc ELELWW
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   35 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,735)
      WRITE(1,735)
  735 FORMAT(/
     1,' Here is SUBROUTINE SPORCO, called by TANABE.',/
     1,' Subroutine SPORCO calculates the non-diagonal elements',/
     1,' of the spin-orbit coupling matrix for spin-orbit coupling.',/
     1,' The operator is a sum of one-electron operators.',/
     1,' (For a one-el. operator see Condon/Shortley p.59,eq.(3)',/
     1,' (of 7**3) and/or p.221,eq.(1c).',/
     1,' See pp.169-171 for matrix components of one-el. operators!)',/
     1,' (Hint: The one-electron operator for the diagonal elements'
     1,' is (lz.sz).)',/
     1,' An outer loop goes over all micro states, an inner loop goes',/
     1,' over all electrons, and electrons labeled with odd digits are',
     1/,' ignored, because these have spin-up.',/,/ 
     2,' The one-electron operator which is used here is (l-.s+).',/
     2,' It works on a ket, and the result is a different ket times',/
     2,' a factor 1/2*SQRT((l-(ml+ms)+1/2)(l+(ml+ms)+1/2)).',/
     2,' Because it is a step-up operator for electron spin,',/
     2,' it does not work on electrons with spin up resp. the result '
     2,'is zero.',/
     2,' Only one half of the symmetric spin-orbit coupling matrix',/
     2,' will be calculated in this way, and the operator (l+.s-) for',/
     2,' the second half is not needed.'/
     3,' The operator (l-.s+) is used as one(!) operator, e.g.',/
     3,' it works on the 8-th electron of a state of 9 d-electrons',/
     3,' with label 987654320 (remember: any digit = 2*ml+4+ms+1/2)',/
     3,' with the result 987654310. The result is zero for the 9-th',/
     3,' electron, because a "negative digit" is not possible, and',/
     3,' it is zero for e.g. the 1-th electron, because the formally',/
     3,' resulting digit 8 is already present ("zero determinant").',/
     3,/
     4,' If a micro state results (the conventional order is always',/
     4,' kept here), it is stored for the micro state of the outer',/
     4,' loop (the sum of ms and ml is the same):',/
     4,' 1 is added to a counter, the above factor is calculated and',/
     4,' stored (twice of it is stored here), and the label of the',/
     4,' micro state, resulting from a CALL of subroutine NUMERO,',/
     4,' is stored. SPORCO is called only once. It returns to',/
     4,' subroutine TANABE, where the results are always available.'
     9,/)
Cc SPORCO
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   36 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,736)
      WRITE(1,736)
  736 FORMAT(/
     1,' Here is SUBROUTINE CRYSTF, called by TANABE.',/
     1,' CRYSTF calculates the NON-DIAGONAL elements (resp. FACTORs'
     1,' for',/,' these)',
     1' of the MATRIX of the CRYSTAL-FIELD/Ligand-field OPERATOR!',/
     1,' The operator is a sum of ONE-EL. operators, and for non-'
     1,'diagonal',/
     1,' elements spin and anything else must be the same, except one',/
     1,' ml value, which is not equal to ml-dash. See the formula for',/
     1,' +-(a/f/b), EQ.(8), in Condon/Shortley!',/
     1,' (For the diagonal elements see EQ.(9)!)',/
     9,' The absolute value of the difference of ml and ml-dash',/
     9,' corresponds to a step operator working on ml-values.',/
     2,' One individual set of a micro-state is given as a digit:',/
     2,' This digit is (ml+l)*2+ms+1/2 (A=10,B=11,C=12,D=13 are',
     9/,' digits for f-electrons).',/
     2,' The conventional order of the individual sets of a micro-',/
     9,' state is "step down", e.g. 976 (the numbering of the',
     9/,' electrons is always 1,2,3,...), and 976 is the label',
     9/,' of the micro-state.',/
     9,' These micro-states are ordered, too: The label of the first',/
     9,' micro-state is a greater number then that of the 2nd, etc.',/
     2,' An outer DO-LOOP goes over the ordinal numbers of all micro-',/
     9,' states, which are in conventional order, i.e. 1st, 2nd, ...',/
     9,' micro-state.',/
     2,' For each micro-state the number of micro-states, with which',/
     2,' it is connected, is evaluated with help of step operators,'
     9,/,' and in addition the ordinal numbers of these micro-states',/
     9,' and all FACTORs needed later on are calculated and stored.',/ 
     1,/
     1,' For each micro-state of the outer DO-LOOP the individual sets',
     1/,' not belonging to it are determined, i.e. the number of these',
     1/,' sets and the digits, which define it, are stored.',/
     1,' The next DO-LOOP goes over all electrons of the micro-state,',/
     1,' i.e. over all its individual sets, and the corresponding',/
     1,' individual set is called LOCH1 and replaced by a space',/
     2,' ("LOCH"=hole).',/
     1,' In the next DO-LOOP this hole is filled with the 1st, the 2nd,'
     1,/,' etc. individual set not belonging to the micro-state of the',
     1/,' outer DO-LOOP, which is called INLO1, but only if the spins',/
     1,' of INLO1 and LOCH1 are the same.',/ 
     1,' This micro-state, which may be not in its conventional order,',
     1/,' is used for all further calculations, but the parity of',/
     1,' permutations to get the conventional order as well as the',/
     1,' label of the ordered state are determined. JAODD becomes -1',/
     1,' for odd and 1 for even parity, the label goes into SUBROUTINE',
     1/,' NUMERO, and its ordinal number returns. It is the ordinal',/
     1,' number of a micro-state, with which the micro-state of the',/
     1,' outer DO-LOOP is connected!',/
     1,' The calculation continues only, if this ordinal number is',/
     1,' greater than that of the micro-state of the outer DO-LOOP,',/
     1,' because only the lower triangle of the Hamiltonian matrix',/
     1,' is actually computed!',/
     1,' If the calculation continues, the ml-values of LOCH1 and',/
     1,' INLO1, called LOCHM1 and INLOM1, respectively, are determined'
     1,/,' and the absolute value of their difference, called NK.',/
     1,' NK is the number of steps of the step operators to be applied,'
     1,/,' and it corrsponds to the second digit of the Wybourne',/
     1,' parameters, e.g. NK=1 belongs to B21, B''21, B41, B''41, B61,',
     1/,' B''61, but NK=6 belongs to B66 and B''66 only (the first',/
     1,' digit is called K).',/
     1,' For the NK concerned, and for the micro-state of the outer',/
     1,' DO-LOOP, 1 is added to a counter, the ordinal number of the',/
     1,' evaluated micro-state is stored, and up to three FACTORs are',/
     1,' calculated and stored. The FACTORs are the above JAODD times',/
     1,' a Condon-Shortley coefficient cK(l-value,LOCHM1,l-value,INLOM1)
     1',/,' times ((-1) for NK odd). Because K may be 6, 4, 2 for NK=1,'
     1,/,' but 6 for NK=5, only one FACTOR has to be determined for',/
     1,' NK=5, but three FACTORs have to be determined for NK=1!',/
     2,/
     1,' The ligand field operator is',/
     1,' = SUM(k=0...inf)(SUM(q=-k...k)((Bkqcompl)complconj times Ckq))'
     1,/,' with Ckq = SQRT(4PI/(2k+1))Ykq,',/
     5,' (Bkqcompl)complconj = Bk-qcompl * (-1)**q, and',/
     6,' (Ckq)complconj = Ck-q * (-1)**q.',/
     1,' With Bk0=Bk0compl and Bkq=(-1)**q Re(Bkqcompl) and',/
     2,' B''kq=(-1)**q Im(Bkqcompl)',/
     2,' becomes the ligand field operator',/
     1,' = SUM(k=0...inf)(',/
     1,' Bk0Ck0 + SUM(q=1...k)(',/
     2,' Bkq((-1)**q Ckq + Ck-q)',/
     3,' +iB''kq(-(-1)**q Ckq + Ck-q))),',/
     4,' with i=SQRT(-1).'
     9,/)
Cc CRYSTF
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   37 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,737)
      WRITE(1,737)
  737 FORMAT(/,
     1' Here is SUBROUTINE MAGNF, called by TANABE.',/
     1,' Subroutine MAGNF calculates, using step operators for magn.',/
     1,' moment operators and in order to store these results',/
     1,' once and for all, NROFNR, NOFROW, and EIVSHT, to be used in',/
     1,' REDUCT to calculate (neg.)magn.momentMATrices FMAT(,,I) with',/
     1,' I=2,3 for x- and y-direction via FMAT(,,4) and FMAT(,,5) and',/
     1,' GMAT(,,I) with I=2,3 for spin corresponding to FMAT(,,4) and',/
     1,' FMAT(,,5).',/
     1,' (FMAT(,,1) and GMAT(,,1) for the z-direction are calculated in'
     1,/,' REDUCT, because the results of the magn. moment operator for'
     1,/,' this direction are in MQUER for each micro-state!)',/
     1,' Here (only!) one-electron step-down operators, both for spin',/
     1,' and for orbital, are involved, which work on the electrons of',
     1/,' each micro-state! Into NROFNR the number of micro-states, the'
     1,/,' present micro-state is connected with, is written. For each',
     1/,' of the NROFNR micro-states its consecutive number, determined'
     1,/,' by SUBROUTINE NUMERO, is written into NOFROW, with a minus',/
     1,' sign in front of it, if spin is concerned. EIVSHT contains 0.0'
     1,/,' for spin and an especially calculated factor else. This',
     2' factor',/,' is SQRT((l+ml)*(l+1-ml))*(+-ONE), where ml is that'
     3,' of the',/,' electron the operator works on, and (+-ONE) is'
     4,' according to the',/,' "conventional order".',/
     1,' The coefficients of the step-down operator for spin are only',/
     1,' =1 and =0, 1 for ms=1/2, 0 for ms=-1/2, so that this operation'
     1,/,' gives just the sum of the states resulting when successive',/
     1,' ml+ are changed to ml- (From: Condon/Shortley p.227).',/
     1,' Step operators for orbital work not so simply as those for',/
     1,' spin (See: Condon/Shortley p.227 eq.(3)):',/
     1,' For all J micro states and all N electrons:',/,
     1' The number 2 is subtracted from the number, which defines the',/
     1,' electron (e.g. 9 for a d el. with ml=2, ms=1/2, remember: any',
     1/,' digit =2*ml+4+ms+1/2, ->9-2), corresponding to the step-down',
     1/,' operator for orbital. If a micro state results, conventional',
     1/,' ordered or not (a -ONE factor may be needed, if not), the',/,
     1' above mentioned consecutive number and factor are determined',/,
     1' resp. calculated, and 1 is added to the number of micro-states,'
     1,/,' the micro state is connected with!'
     1,/)
Cc MAGNF
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   38 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,738)
      WRITE(1,738)
  738 FORMAT(/,
     1' Here is SUBROUTINE ZHPEVK, a link to ZHPEVD.',/
     1' (from e.g. dsdzhd.f:)',/,
     1'  SUBROUTINE ZHPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK,',
     1/,' $                   RWORK, LRWORK, IWORK, LIWORK, INFO )',/,
     1'  LAPACK driver routine (version 3.0) --',/,
     1'  *     Univ. of Tennessee, Univ. of California Berkeley, NAG'
     2,' Ltd.,',/,
     1'  *     Courant Institute, Argonne National Lab, and Rice',
     2' University',/,
     1'  *     June 30, 1999',/,
     1'C',/,
     1'  JOBZ=''V''',/,
     1'  UPLO=''L''',/,
     1'  CALL ZHPEVD (JOBZ,UPLO,KASVAL,DBLCPX,EIWVAL,EIGENV,ND2028',/,
     1' 1,WORK,LWORK,RWORK,LRWORK,IWORK,LIWORK,INFO)',/,
     1'C',/,
     1' ZHPEVD computes all the eigenvalues and, optionally,',
     2' eigenvectors of',/,
     1' a complex Hermitian matrix A in packed storage.',
     2'  If eigenvectors are',/,
     1' desired, it uses a divide and conquer algorithm.',/
     *' ',/,
     *' Arguments',/,
     *' =========',/,
     *' ',/,
     *' JOBZ    (input) CHARACTER*1',/,
     *'         = ''V'':  Compute eigenvalues and eigenvectors.',/,
     *' ',/,
     *' UPLO    (input) CHARACTER*1',/,
     *'         = ''L'':  Lower triangle of A is stored.',/,
     *' ',/,
     *' N       (input) INTEGER',/,
     *'         The order of the matrix A.  N >= 0.',/,
     *' ',/,
     *' AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)',
     */,'         On entry, the upper or lower triangle of the',
     2' Hermitian matrix',/,
     *'         A, packed columnwise in a linear array.',/,
     *' ',/,
     *' W       (output) DOUBLE PRECISION array, dimension (N)',/,
     *'         If INFO = 0, the eigenvalues in ascending order.',/,
     *' ',/,
     *' Z       (output) COMPLEX*16 array, dimension (LDZ, N)',/,
     *'         If JOBZ = ''V'', then if INFO = 0, Z contains the',
     2' orthonormal',/,
     *'         eigenvectors of the matrix A, with the i-th column of Z'
     *,/,'         holding the eigenvector associated with W(i).',/,
     *' ',/,
     *' LDZ     (input) INTEGER',/,
     *'         The leading dimension of the array Z.  LDZ >= 1, and if'
     *,/,'         JOBZ = ''V'', LDZ >= max(1,N).',/,
     *' ',/,
     *' INFO    (output) INTEGER',/,
     *'         = 0:  successful exit',/,
     *'         < 0:  if INFO = -i, the i-th argument had an illegal',
     2' value.',/,
     *'         > 0:  if INFO = i, the algorithm failed to converge; i',
     */,'               off-diagonal elements of an intermediate',
     2' tridiagonal',/,
     *'               form did not converge to zero.'
     1,/,' (HINT: ZHPEVD IS F08GQF OF LIBRARY NAG)'
     1,/,' Have a look at a possible "WARNING: STOP INFOCX IGNORED!",',/
     1,' if INFO.NE.0!'
     1,/)
Cc ZHPEVK
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   39 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,739)
      WRITE(1,739)
  739 FORMAT(/,
     1' Here is SUBROUTINE STR00, called by SUSC.',/
     1,' CALL of STR00 for Point Charge Electrostatic Model PCEM.',/,
     1' STR00 itself is only a link to SUBROUTINE STR001!',/,
     1' RETURNs to SUSC!'
     1,/)
Cc STR00
      WRITE(*,2324)
      WRITE(1,2324)
      GOTO 9999
   40 CONTINUE
      WRITE(*,2323)
      WRITE(1,2323)
      WRITE(*,740)
      WRITE(1,740)
  740 FORMAT(/,
     1' Here is SUBROUTINE STR001, called by STR00.',/,
     1' PointChargeElectrostaticModel ("PCEM") is used to calculate',/,
     1' crystal field/ligand field parameters (Wybourne parameters)',/,
     1' with help of an operator, which can be found in SUBROUTINE',/,
     1' TEXT2D/SUBROUTINE TANABE!',/,
     1' Coord./Bohr OF 1, 2 or 3 sorts of ligands are read in from',/,
     1' a special file, e.g. (pre-occupied:) str00.dat.',/,
     1' The charges of the ligands are put in as BWWW(2), BWWW(3),',/,
     1' BWWW(4) and can be fitted. STR001 RETURNs to STR00 with BWWW(1',
     1':11)',/,' (B2,B22,B40,B42,B43,B44,B60,B62,B63,B64,B66) and, if',/
     1,' NGROUP.EQ.20, with 21/21''/22''/41/41''/42''/43''/44''/',/,
     1' 61/61''/62''/63''/64''/65/65''/66''!',/,
     1' (B-WYBOURNE VALUES ARE ALSO PUT OUT ->fort.9)'
     1,/)
Cc STR001
      WRITE(*,2324)
      WRITE(1,2324)
C
 9999 CONTINUE
      IF(MEHR2(MARKE).EQ.2)MEHR(MARKE)=-1
      RETURN
CCC
 8576 CALL FINISH
 9588 CALL FINISI
CEND TEXT2D
      END
      SUBROUTINE STR00(JASTRU,
C     called by SUBROUTINE SUSC.
C     CALL of STR00 for Point Charge Electrostatic Model PCEM.
C     STR00 itself is only a link to SUBROUTINE STR001!
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20) !I20 was J20
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/CBWWWS/BWWWS
      COMMON/ALLGEM/MORMST,MORTEX,MIST(7)
      DIMENSION XYZ(10,3,3),IANZ(3),BWWWS(16)
      SAVE
      DATA XYZ/90*0.0D0/
      DATA IANZ/0,0,0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,39)
      CALL STR001(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,
     2XYZ,NSORT,IANZ,BWWWS)
      RETURN
CEND STR00
      END
      SUBROUTINE STR001(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,
     2XYZ,NSORT,IANZ,BWWWS)
C     PointChargeElectrostaticModel ("PCEM") is used to calculate
C     crystal field/ligand field parameters (Wybourne parameters)
C     with help of an operator, which can be found in SUBROUTINE
C     TEST2D/SUBROUTINE TANABE!
C     Coord./Bohr OF 1, 2 or 3 sorts of ligands are read in from
C     a special file, e.g. (pre-occupied:) str00.dat.
C     The charges of the ligands are put in as BWWW(2), BWWW(3),
C     BWWW(4) and can be fitted. STR001 RETURNs to STR00 with BWWW(1:11)
C     (B2,B22,B40,B42,B43,B44,B60,B62,B63,B64,B66) and, if
C     NGROUP.EQ.20, with 21/21'/22'/41/41'/42'/43'/44'/
C     61/61'/62'/63'/64'/65/65'/66'!
C     (B-WYBOURNE VALUES ARE ALSO PUT OUT ->fort.9)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      CHARACTER*5 QB(28),QW(26),QS(16)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MORMST,MORTEX,MIST(7)
      CHARACTER*2 LANTHA(13),TRANS1(10),TRANS2(10)
      CHARACTER*11 URAN(3)
      CHARACTER*15 QMPC
      CHARACTER DF(2),DF12
      CHARACTER QTEXT1(60)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,VIERTL=0.25D0,FF=219470.D0,BOHRPM=0.529177249D+2)
      DIMENSION XYZ(10,3,3),IANZ(3),ABC(3,11,3),DEF(3,16,3)
      DIMENSION BWWW(I20),ABST(10,3),QBST(10,3)
     1,IBWWW(I20),KMASKE(20),ABSTMN(3),QLMFAK(3,3),ABSTB(10,3),BWWWS(16)
      DIMENSION RRT12(10,9),RRT14(10,9),RRT22(10,9),RRT24(10,9)
     1,RRLA2(13),RRLA4(13),RRLA6(13),RRU2(3),RRU4(3),RRU6(3)
     1,QLIG(3),FAK246(3,3)
      SAVE
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'B22'' ','B42'' ','B43'' ','B44'' ','B62'' ','B63'' ','B64'' '
     2,'B66'' ','     ','B21  '
     3,'B41  ','B61  ','B65  ','B21'' ','B41'' ','B61'' ','B65'' '/
C
      DATA QW/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'B21  ','B41  ','B61  ','B65  ','     ','     '/
C**   (21)/21'/22'/(41)/41'/42'/43'/44'/(61)/61'/62'/63'/64'/(65)/65'/66':
      DATA QS/'    ','B21'' ','B22'' ','    ','B41'' ','B42'' '
     1,'B43'' ','B44'' ','    ','B61'' ','B62'' ','B63'' '
     2,'B64'' ','    ','B65'' ','B66'' '/
C
      DATA ABSTMN/ZERO,ZERO,ZERO/
      DATA DF/'D','F'/
      DATA TRANS1/
     1'Sc','Ti',' V','Cr','Mn','Fe','Co','Ni','Cu','Zn'/
      DATA RRT12/
     13.0010D0,ZERO,1.3768D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,ZERO,2.4472D0,ZERO,1.2266D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,9.9462D0,ZERO,2.0702D0,1.4470D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,6.3481D0,2.8186D0,1.7808D0,1.2864D0,0.9997D0,ZERO,ZERO,ZERO
     1,ZERO
     5,ZERO,ZERO,4.5167D0,ZERO,1.5482D0,1.1500D0,0.9080D0,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,3.6643D0,2.0257D0,1.3926D0,1.0492D0,0.8371D0,ZERO
     1,ZERO
     7,ZERO,ZERO,ZERO,ZERO,2.9992D0,ZERO,1.2509D0,0.9582D0,0.7719D0,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,2.5370D0,ZERO,1.1300D0,0.8763D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.1450D0,ZERO,1.0275D0,ZERO/
      DATA RRT14/
     119.213D0,ZERO,3.5926D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,ZERO,13.171D0,ZERO,2.9055D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,281.93D0,ZERO,9.6047D0,4.2967D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,125.03D0,20.7145D0,7.2112D0,3.4457D0,1.9861D0,ZERO,ZERO,ZERO
     1,ZERO
     5,ZERO,ZERO,65.293D0,ZERO,5.5127D0,2.7894D0,1.6592D0,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,43.1345D0,10.8718D0,4.4958D0,2.3423D0,1.4230D0
     1,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,28.931D0,ZERO,3.6552D0,1.9708D0,1.2209D0,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,20.617D0,ZERO,3.0034D0,1.6623D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,14.704D0,ZERO,2.4978D0,ZERO/
      DATA TRANS2/
     1' Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd'/
      DATA RRT22/
     15.5883D0,3.8567D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,7.6007D0,4.5260D0,3.3077D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,ZERO,ZERO,3.8291D0,2.9052D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,ZERO,ZERO,3.3185D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     5,ZERO,ZERO,ZERO,3.9538D0,2.9033D0,2.3132D0,ZERO,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,ZERO,ZERO,2.6276D0,2.1171D0,ZERO,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.3736D0,1.9390D0,ZERO,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.1584D0,1.7820D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,1.9717D0,1.6424D0/
      DATA RRT24/
     158.9978D0,25.3281D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,133.9293D0,37.8608D0,18.6001D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,ZERO,ZERO,26.9820D0,14.3861D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,ZERO,ZERO,20.2190D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     5,ZERO,ZERO,ZERO,32.9845D0,15.4096D0,9.1689D0,ZERO,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,ZERO,ZERO,12.8668D0,7.7851D0,ZERO,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,10.5999D0,6.5906D0,ZERO,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,8.8319D0,5.6099D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,7.4098D0,4.8032D0/
C**   DATA FOR FIRST AND SECOND TRANSITION SERIES
C     AND DATA FOR LANTHANIDES FROM:
C     A.J.FREEMAN, R.E.WATSON, HYPERFINE INTERACTIONS IN MAGNETIC
C     MATERIALS, in G.T.RADO, H.SUHL (eds.), MAGNETISM, VOL.IIA,
C     ACADEMIC PRESS, NEW YORK 1965.
      DATA LANTHA/
     1'Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb'/
C** - ALL 3+
C**   DATA FOR LANTHANIDES(3+):
C     Eu(2+) and Tm(2+):
C     RRLA2/0.938,0.728/
C     RRLA4/2.273,1.552/
C     RRLA6/11.670,7.510/
      DATA RRLA2/1.2D0,1.086D0,1.001D0,0.0D0,0.883D0,0.832D0,0.785D0
     1,0.755D0,0.726D0,0.695D0,0.666D0,0.646D0,0.613D0/
      DATA RRLA4/3.455D0,2.822D0,2.401D0,0.0D0,1.897D0,1.697D0,1.515D0
     1,1.419D0,1.322D0,1.219D0,1.126D0,1.067D0,0.960D0/
      DATA RRLA6/21.226D0,15.726D0,12.396D0,0.0D0,8.775D0,7.442D0
     1,6.281D0,5.688D0,5.102D0,4.502D0,3.978D0,3.647D0,3.104D0/
      DATA URAN/'URANIUM(5+)','URANIUM(4+)','URANIUM(3+)'/
C**   DATA FOR URANIUM:
      DATA RRU2/1.85739D0,2.07377D0,2.39241D0/
      DATA RRU4/5.99605D0,7.87311D0,1.134654D1/
      DATA RRU6/3.098195D1,5.001814D1,9.603445D1/
C**   DATA FOR ACTINIDES - (ONLY) URAN5+/4+/3+ (5f**1/5f**2/5f**3):
C     J.P. DESCLAUX AND A.J. FREEMAN: HANDBOOK ON THE PHYSICS AND
C     CHEMISTRY OF THE ACTINIDES, ELSEVIER 1984, P.24 (TABLE 4).
C     (RELATIVISTIC VALUES - 5f (NOT: 5f***))
C
      DATA KLICK,KLICKZ,KLICKB/0,0,0/
      DATA LAUF,LAUFIN,LAUF1/3*0/
      IF(MORTEX.GT.1)CALL TEXT2D(LMN,1,40)
C
      IF(LAUF.GT.0)GOTO 4
      LAUF=1
      DO 3353 K=1,3
      DO 3352 J=1,16
      DO 3351 I=1,3
      DEF(I,J,K)=ZERO
      IF(J.LE.11)ABC(I,J,K)=ZERO
 3351 CONTINUE
 3352 CONTINUE
 3353 CONTINUE
C
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,
     1' IS THE NAME OF THE NEXT FILE str00.dat IN FORMAT(5D16.8)?',
     2/,' "RETURN" OR GIVE ITS NAME!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3800)QMPC
      GOTO 4800
      ENDIF
 3800 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4800 IF(QMPC.EQ.'               ')QMPC='str00.dat      '
      WRITE(7,5163)QMPC
 5163 FORMAT(A15,'  (str00)')
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1X,A15,'  (str00)!!!!!!!!!')
      WRITE(*,5160)BOHRPM
      WRITE(11,5160)BOHRPM
 5160 FORMAT(/,' EACH ROW OF THIS FILE (FIRST ROW MUST BE TEXT!):'
     1,/,' 5 COORD./BOHR IN FORMAT 5D16.8: FIRSTLY 10 X-COORD. OF 1 ST S
     2ORT OF LIG.,',/,' THEN 10 Y-COORD. AND 10 Z-COORD., THEN 2 ND SORT
     3 OF LIG.; BOHR/PM= ',F7.4)
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(' COORD./BOHR OF 3 SORTS OF LIGANDS ARE READ IN FROM ',A15)
      OPEN(12,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(12,63,ERR=33)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,'HEADER:',1X,60A1)
      DO 655 K=1,3
      KK=K
      READ(12,61,END=333,ERR=33)((XYZ(I,J,K),I=1,10),J=1,3)
   61 FORMAT(5D16.8)
  655 CONTINUE
      KK=4
      GOTO 3339
  333 IF((J.NE.1.AND.J.NE.4).OR.(I.NE.1.AND.I.NE.11))THEN
      WRITE(*,3335)
      WRITE(11,3335)
 3335 FORMAT(' WARNING: THERE MAY BE AN ERROR IN DATA FILE!')
      ENDIF
      IF(KK.EQ.3)THEN
      WRITE(*,3337)
      WRITE(11,3337)
 3337 FORMAT(' WARNING: END OF FILE: ONLY 2 SORTS OF LIGANDS!')
      GOTO 3339
      ELSE IF(KK.EQ.2)THEN
      WRITE(*,3336)
      WRITE(11,3336)
 3336 FORMAT(' WARNING: END OF FILE: ONLY 1 SORT OF LIGANDS!')
      GOTO 3339
      ELSE
      WRITE(*,3330)
      WRITE(11,3330)
 3330 FORMAT(' END OF DATA FILE!')
      GOTO 3333
      ENDIF
 3339 CONTINUE
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(' THE VALUES READ IN ARE:')
      KKM1=KK-1
      WRITE(*,6161)(((XYZ(I,J,K),I=1,10),J=1,3),K=1,KKM1)
      WRITE(11,6161)(((XYZ(I,J,K),I=1,10),J=1,3),K=1,KKM1)
 6161 FORMAT(5D16.8)
      CLOSE(12)
 3338 CONTINUE
      GOTO 3334
 3331 PRINT*,' ERROR WHILE READING!'
      GOTO 3333
 3332 PRINT*,' DATA FILE NOT FOUND'
      GOTO 3333
   33 PRINT*,' ERROR IN DATA FILE!'
      GOTO 3333
 3334 CONTINUE
C
      DF12=DF(1)
      IF(KLWERT.EQ.3)DF12=DF(2)
C
      WRITE(*,3114)NREL,DF12
      WRITE(11,3114)NREL,DF12
 3114 FORMAT(' NREL ("No. OF EL.") =',I3,' (',A1,' EL.)')
C
      IF(KLWERT.LE.1)STOP 'L-VAL.'
      IF(KLWERT.EQ.2)THEN
      WRITE(11,4510)(TRANS1(I),I=1,10)
      WRITE(11,4511)(RRT12(I,NREL),I=1,10)
      WRITE(11,4512)(RRT14(I,NREL),I=1,10)
      WRITE(11,4510)(TRANS2(I),I=1,10)
      WRITE(11,4511)(RRT22(I,NREL),I=1,10)
      WRITE(11,4512)(RRT24(I,NREL),I=1,10)
 4510 FORMAT(8X,10(4X,A2,3X))
 4511 FORMAT(' <R**2>:',10(F9.4))
 4512 FORMAT(' <R**4>:',10(F9.4))
      WRITE(*,4510)(TRANS1(I),I=1,10)
      WRITE(*,4511)(RRT12(I,NREL),I=1,10)
      WRITE(*,4512)(RRT14(I,NREL),I=1,10)
      WRITE(*,4510)(TRANS2(I),I=1,10)
      WRITE(*,4511)(RRT22(I,NREL),I=1,10)
      WRITE(*,4512)(RRT24(I,NREL),I=1,10)
C
      WRITE(11,4513)
 4514 WRITE(*,4513)
 4513 FORMAT(' INPUT IN 2I1: (1 OR 2 OR 0 FOR 1ST OR 2ND OR ?TH TRANS.SE
     1R., RESP.)',/,' AND CONSEC.No.(0=>10). ?<=>2 ROWS INPUT REQUIRED')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3801)NRROW,NRCOL
      GOTO 4801
      ENDIF
 3801 READ(*,'(2I1)',ERR=4514,END=4576)NRROW,NRCOL
      LMN=1
 4801 NRCOL0=NRCOL
      IF(NRCOL.EQ.0)NRCOL=10
      WRITE(*,4515)NRROW,NRCOL
      WRITE(11,4515)NRROW,NRCOL
 4515 FORMAT(2I3,' =NRROW,NRCOL!!!!!!!!!')
      WRITE(7,4516)NRROW,NRCOL0
 4516 FORMAT(2I1,' =NRROW,NRCOL0')
C
      IF(NRROW.EQ.1)THEN
      IF(RRT12(NRCOL,NREL).EQ.ZERO.OR.RRT14(NRCOL,NREL).EQ.ZERO)
     1GOTO 4514
      R2=RRT12(NRCOL,NREL)
      R4=RRT14(NRCOL,NREL)
      ELSE IF(NRROW.EQ.2)THEN
      IF(RRT22(NRCOL,NREL).EQ.ZERO.OR.RRT24(NRCOL,NREL).EQ.ZERO)
     1GOTO 4514
      R2=RRT22(NRCOL,NREL)
      R4=RRT24(NRCOL,NREL)
      ELSE
      WRITE(11,4517)
 4518 WRITE(*,4517)
 4517 FORMAT(' INPUT IN F9.4, ONE ROW EACH, <R**2> AND <R**4>')
      IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3802)R2
      GOTO 4802
      ENDIF
 3802 READ(*,'(F9.4)',ERR=4518,END=4576)R2
      LMN=1
 4802 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3803)R4
      GOTO 4803
      ENDIF
 3803 READ(*,'(F9.4)',ERR=4518,END=4576)R4
      LMN=1
 4803 WRITE(7,4519)R2
      WRITE(7,4519)R4
 4519 FORMAT(F9.4,' =R2 OR R4')
      ENDIF
C
      WRITE(*,4520)R2,R4
      WRITE(11,4520)R2,R4
 4520 FORMAT(' R2,R4 =',2D16.8)
C
      ELSE IF(KLWERT.EQ.3)THEN
C
      WRITE(*,4521)LANTHA(NREL),RRLA2(NREL),RRLA4(NREL),RRLA6(NREL)
      WRITE(11,4521)LANTHA(NREL),RRLA2(NREL),RRLA4(NREL),RRLA6(NREL)
 4521 FORMAT('<R**2>,<R**4>,<R**6> OF ',A2,'3+',3F7.3)
      IF(NREL.LE.3)THEN
      WRITE(*,4522)URAN(NREL),RRU2(NREL),RRU4(NREL),RRU6(NREL)
      WRITE(11,4522)URAN(NREL),RRU2(NREL),RRU4(NREL),RRU6(NREL)
 4522 FORMAT('<R**2>,<R**4>,<R**6> OF ',A11,3F9.5)
      ENDIF
C
      WRITE(11,4523)
 4524 WRITE(*,4523)
 4523 FORMAT(' INPUT IN I1: 1 OR 2 OR 0 FOR LN OR U OR DIRECT INPUT, RES
     1P.',/,' 3 ROWS INPUT REQUIRED FOR "DIRECT INPUT" AND U WITH NREL >
     23!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3804)NRROW
      GOTO 4804
      ENDIF
 3804 READ(*,'(I1)',ERR=4524,END=4576)NRROW
      LMN=1
 4804 IF(NRROW.EQ.1.AND.NREL.EQ.4)NRROW=0
      IF(NRROW.EQ.2.AND.NREL.GT.3)NRROW=0
      WRITE(*,4525)NRROW
      WRITE(11,4525)NRROW
 4525 FORMAT(I2,' =LN/U/?!!!!!!!!!')
      WRITE(7,4526)NRROW
 4526 FORMAT(I1,' =LN/U/?')
C
      IF(NRROW.EQ.1)THEN
      R2=RRLA2(NREL)
      R4=RRLA4(NREL)
      R6=RRLA6(NREL)
      ELSE IF(NRROW.EQ.2)THEN
      R2=RRU2(NREL)
      R4=RRU4(NREL)
      R6=RRU6(NREL)
      ELSE
      WRITE(11,4527)
 4528 WRITE(*,4527)
 4527 FORMAT(' INPUT IN F9.4, ONE ROW EACH, <R**2>, <R**4> AND <R**6>')
      IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3805)R2
      GOTO 4805
      ENDIF
 3805 READ(*,'(F9.4)',ERR=4528,END=4576)R2
      LMN=1
 4805 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3806)R4
      GOTO 4806
      ENDIF
 3806 READ(*,'(F9.4)',ERR=4528,END=4576)R4
      LMN=1
 4806 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3807)R6
      GOTO 4807
      ENDIF
 3807 READ(*,'(F9.4)',ERR=4528,END=4576)R6
      LMN=1
 4807 WRITE(7,4529)R2
      WRITE(7,4529)R4
      WRITE(7,4529)R6
 4529 FORMAT(F9.4,' =R2, R4 OR R6')
      ENDIF
C
      WRITE(*,1277)R2,R4,R6
      WRITE(11,1277)R2,R4,R6
 1277 FORMAT(' R2,R4,R6 =',3D16.8)
C
      ENDIF
C
C**   J=1,3 <=> 3 SORTS OF LIGANDS:
      DO 234 J=1,3
      ABSTMN(J)=ZERO
C**   I=1,10 <=> 10 LIGANDS EACH SORT:
      DO 233 I=1,10
      IF(XYZ(I,1,J).EQ.ZERO.AND.XYZ(I,2,J).EQ.ZERO.AND.XYZ(I,3,J)
     1.EQ.ZERO)GOTO 234
      QBST(I,J)=XYZ(I,1,J)**2+XYZ(I,2,J)**2+XYZ(I,3,J)**2
      ABST(I,J)=DSQRT(QBST(I,J))
      ABSTB(I,J)=ABST(I,J)*BOHRPM
      ABSTMN(J)=ABSTMN(J)+ABST(I,J)
      IANZ(J)=IANZ(J)+1
  233 CONTINUE
  234 CONTINUE
      NSORT=3
      IF(IANZ(3).EQ.0)NSORT=2
      IF(IANZ(2).EQ.0.AND.IANZ(3).EQ.0)NSORT=1
      NSOR2=NSORT+2
      DO 2006 I=NSOR2,11
      IF(IBWWW(I).NE.0)THEN
      WRITE(*,2345)
      WRITE(11,2345)
 2345 FORMAT(
     1' ATTEMPT TO FIT LIGANDS OF ..ND SORT, BUT THERE ARE NONE: STOP!')
      STOP 'IBWWW()=1'
      ENDIF
 2006 CONTINUE
      IF(IANZ(1).EQ.0.AND.IANZ(2).EQ.0.AND.IANZ(3).EQ.0)STOP 'NSORT=0'
      DO 235 J=1,NSORT
      IF(IANZ(J).NE.0)ABSTMN(J)=ABSTMN(J)/IANZ(J)
  235 CONTINUE
      FMINIM=ABSTMN(1)
      IF(ABSTMN(2).NE.ZERO)FMINIM=ABSTMN(2)
      IF(ABSTMN(3).NE.ZERO)FMINIM=ABSTMN(3)
      IF(ABSTMN(2).NE.ZERO.AND.ABSTMN(2).LT.FMINIM)FMINIM=ABSTMN(2)
      IF(ABSTMN(1).NE.ZERO.AND.ABSTMN(1).LT.FMINIM)FMINIM=ABSTMN(1)
      WRITE(*,1246)(IANZ(I),I=1,3)
      WRITE(11,1246)(IANZ(I),I=1,3)
 1246 FORMAT(' NUMBER OF LIGANDS OF EACH SORT =',3I5)
C
C**   OUTPUT OF DISTANCES OF ALL ATOMS:
      DO 1183 J=1,NSORT
      WRITE(*,1182)
      WRITE(11,1182)
      WRITE(*,'(6D16.8)')(ABST(I,J),I=1,IANZ(J))
      WRITE(11,'(6D16.8)')(ABST(I,J),I=1,IANZ(J))
 1182 FORMAT(' DISTANCES OF ATOMS IN BOHR:')
 1183 CONTINUE
C
      DO 1184 J=1,NSORT
      WRITE(*,1185)
      WRITE(11,1185)
      WRITE(*,'(6D16.8)')(ABSTB(I,J),I=1,IANZ(J))
      WRITE(11,'(6D16.8)')(ABSTB(I,J),I=1,IANZ(J))
 1185 FORMAT(' DISTANCES OF ATOMS IN PM:')
 1184 CONTINUE
C
      WRITE(*,1181)(ABSTMN(I),I=1,NSORT)
      WRITE(11,1181)(ABSTMN(I),I=1,NSORT)
 1181 FORMAT(' MEAN VALUE(S) =',3D16.8)
C
   44 CONTINUE
C
C**   NOW CALCULATION OF STRUCTURE FACTORS:
C
C**   NOW IN PRINCIPLE THE FORMULA P.200 GRIFFITH (RESP. (2.7)P.240
C     HUTCHINGS) FOR GAMMA(Q,(4*PI/(2N+1)),(D-OF Q)**(N+1),Z(N,ALPHA=0...N))!
C**   TESSERAL HARMONICS: FOR EXAMPLE Z20 = Z(N=2,ALPHA=0) =
C     0.25*SQRT(5./PI)*((3.*Z**2-D**2)/D**2)
C**   GAMMA = (A(Q,4*PI/(2N+1)))*(NUMERICAL FACTOR OCCURING IN Z)
C**   FF = PARAMETER = 219470. = 1 HARTREE = E**2/BOHR IN CM**-1
C**   NOTATION OF STEVENS (AND ALSO IN LEA, LEASK, WOLF!):
C     CRYSTAL-FIELD PARAMETERS = A*<R**N>; ONE TERM OF THE OPERATOR =
C     B*(OP.-EQ.) = (A*<R**N>*THETA)*(OP.-EQ.) WITH THETA=ALPHA,BETA,GAMMA!
C
      DO 245 J=1,NSORT
      DO 244 I=1,IANZ(J)
      DZUBQ=QBST(I,J)
      XKOO=XYZ(I,1,J)
      XKOOQ=XKOO**2
      XKOOQQ=XKOOQ**2
      YKOO=XYZ(I,2,J)
      YKOOQ=YKOO**2
      YKOOQQ=YKOOQ**2
      ZKOO=XYZ(I,3,J)
      ZKOOQ=ZKOO**2
      ZKOOQQ=ZKOOQ**2
      DZUB=ABST(I,J)
      DZUBQQ=DZUBQ**2
      DDU=ABST(I,J)
      DD2=QBST(I,J)
      DD3=DDU*DD2
      DD5=DD2*DD3
      DD7=DD2*DD5
C**   B20:
C     "-HALF", BECAUSE THE CHARGE IS E.G. -2 FOR OXYGEN(2-)!
      ABC(J,1,1)=
     1ABC(J,1,1)-HALF*FF*R2*(DREI*ZKOOQ-DZUBQ)/(DZUBQ*DD3)
C**   B22:
      ABC(J,2,1)=
     1ABC(J,2,1)-HALF*FF*DSQRT(1.5D0)*R2*(XKOOQ-YKOOQ)/(DZUBQ*DD3)
C**   B40:
CCC      ABC(J,3,2)=
CCC     1ABC(J,3,2)
      ABCDEA=ZKOOQQ/DZUBQQ
      ABCDEA=ABCDEA*35.0D0
      ABCDEB=ZKOOQ/DZUBQ
      ABCDEB=ABCDEB*(-30.0D0)
      ABCDEF=ABCDEA+ABCDEB+DREI
      ABCDEF=ABCDEF*0.125D0
      ABCDEF=ABCDEF*R4
      ABCDEF=ABCDEF*(-FF)
      ABCDEF=ABCDEF/DD5
      ABC(J,3,2)=
     1ABC(J,3,2)+ABCDEF
C**   B42:
      ABC(J,4,2)=
     1ABC(J,4,2)-VIERTL*FF*DSQRT(2.5D0)*R4*(XKOOQ-YKOOQ)
     1*(7.D0*ZKOOQ-DZUBQ)/(DZUBQQ*DD5)
C**   B43:
      ABC(J,5,2)=
     1ABC(J,5,2)-VIERTL*FF*DSQRT(35.0D0)*R4*(XKOOQ-DREI*YKOOQ)*XKOO*ZKOO
     1/(DZUBQQ*DD5)
C**   B44:
      ABC(J,6,2)=
     1ABC(J,6,2)-(FF/16.D0)*DSQRT(70.0D0)*R4*(XKOOQQ-6.D0*XKOOQ*YKOOQ
     1+YKOOQQ)/(DZUBQQ*DD5)
      IF(KLWERT.EQ.2)GOTO 244
C**   B60:
      ABC(J,7,3)=
     1ABC(J,7,3)-(FF/16.D0)*R6*(231.D0*ZKOOQ*ZKOOQQ
     1-315.D0*ZKOOQQ*DZUBQ+105.D0*ZKOOQ*DZUBQQ-5.D0*DZUBQ*DZUBQQ)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B62:
      ABC(J,8,3)=
     1ABC(J,8,3)-(FF/32.0D0)*DSQRT(105.D0)*R6*(XKOOQ-YKOOQ)
     1*(16.D0*ZKOOQQ-16.D0*(XKOOQ+YKOOQ)*ZKOOQ+(XKOOQ+YKOOQ)**2)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B63
      ABC(J,9,3)=
     1ABC(J,9,3)-(FF/16.0D0)*DSQRT(105.D0)*R6
     1*(8.0D0*ZKOOQ-DREI*XKOOQ-DREI*YKOOQ)*(XKOOQ-DREI*YKOOQ)*XKOO*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B64:
      ABC(J,10,3)=
     1ABC(J,10,3)-DREI*(FF/16.0D0)*DSQRT(3.5D0)*R6*(11.D0*ZKOOQ-DZUBQ)
     1*(XKOOQQ-6.D0*XKOOQ*YKOOQ+YKOOQQ)/(DZUBQ*DZUBQQ*DD7)
C**   B66:
      ABC(J,11,3)=
     1ABC(J,11,3)-(FF/32.0D0)*DSQRT(231.D0)*R6
     1*(XKOOQ*XKOOQQ-15.D0*XKOOQQ*YKOOQ+15.D0*XKOOQ*YKOOQQ
     1-YKOOQ*YKOOQQ)/(DZUBQ*DZUBQQ*DD7)
  244 CONTINUE
  245 CONTINUE
C
      DO 254 J=1,NSORT
      DO 255 I=1,IANZ(J)
      DZUBQ=QBST(I,J)
      XKOO=XYZ(I,1,J)
      XKOOQ=XKOO**2
      XKOOQQ=XKOOQ**2
      YKOO=XYZ(I,2,J)
      YKOOQ=YKOO**2
      YKOOQQ=YKOOQ**2
      ZKOO=XYZ(I,3,J)
      ZKOOQ=ZKOO**2
      ZKOOQQ=ZKOOQ**2
      DZUB=ABST(I,J)
      DZUBQQ=DZUBQ**2
      DDU=ABST(I,J)
      DD2=QBST(I,J)
      DD3=DDU*DD2
      DD5=DD2*DD3
      DD7=DD2*DD5
C***  B21:
      DEF(J,1,1)=
     1DEF(J,1,1)-FF*DSQRT(1.5D0)*R2*XKOO*ZKOO/(DZUBQ*DD3)
C***  B'21:
      DEF(J,2,1)=
     1DEF(J,2,1)-FF*DSQRT(1.5D0)*R2*YKOO*ZKOO/(DZUBQ*DD3)
C**   B'22:
      DEF(J,3,1)=
     1DEF(J,3,1)-HALF*FF*DSQRT(1.5D0)*R2*TWO*XKOO*YKOO/(DZUBQ*DD3)
C***  B41:
      DEF(J,4,2)=
     1DEF(J,4,2)-VIERTL*FF*DSQRT(5.0D0)*R4*XKOO*ZKOO
     1*(7.D0*ZKOOQ-DREI*DZUBQ)/(DZUBQQ*DD5)
C***  B'41:
      DEF(J,5,2)=
     1DEF(J,5,2)-VIERTL*FF*DSQRT(5.0D0)*R4*YKOO*ZKOO
     1*(7.D0*ZKOOQ-DREI*DZUBQ)/(DZUBQQ*DD5)
C**   B'42:
      DEF(J,6,2)=
     1DEF(J,6,2)-VIERTL*FF*DSQRT(2.5D0)*R4*TWO*XKOO*YKOO
     1*(7.D0*ZKOOQ-DZUBQ)/(DZUBQQ*DD5)
C**   B'43:
      DEF(J,7,2)=
     1DEF(J,7,2)-VIERTL*FF*DSQRT(35.0D0)*R4*(DREI*XKOOQ-YKOOQ)*YKOO*ZKOO
     1/(DZUBQQ*DD5)
C**   B'44:
      DEF(J,8,2)=
     1DEF(J,8,2)-VIERTL*FF*DSQRT(70.0D0)*R4*(XKOOQ-YKOOQ)*XKOO*YKOO
     1/(DZUBQQ*DD5)
      IF(KLWERT.EQ.2)GOTO 255
C***  B61:
      DEF(J,9,3)=
     1DEF(J,9,3)-(FF/8.0D0)*DSQRT(10.5D0)*R6*XKOO
     1*(8.D0*ZKOOQQ*ZKOO-20.0D0*ZKOOQ*ZKOO*(XKOOQ+YKOOQ)+5.0D0*ZKOO
     1*(XKOOQ+YKOOQ)**2)/(DZUBQ*DZUBQQ*DD7)
C***  B'61:
      DEF(J,10,3)=
     1DEF(J,10,3)-(FF/8.0D0)*DSQRT(10.5D0)*R6*YKOO
     1*(8.D0*ZKOOQQ*ZKOO-20.0D0*ZKOOQ*ZKOO*(XKOOQ+YKOOQ)+5.0D0*ZKOO
     1*(XKOOQ+YKOOQ)**2)/(DZUBQ*DZUBQQ*DD7)
C**   B'62:
      DEF(J,11,3)=
     1DEF(J,11,3)-(FF/32.0D0)*DSQRT(105.D0)*R6*TWO*XKOO*YKOO
     1*(16.D0*ZKOOQQ-16.D0*(XKOOQ+YKOOQ)*ZKOOQ+(XKOOQ+YKOOQ)**2)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'63
      DEF(J,12,3)=
     1DEF(J,12,3)-(FF/16.0D0)*DSQRT(105.D0)*R6
     1*(8.0D0*ZKOOQ-DREI*XKOOQ-DREI*YKOOQ)*(DREI*XKOOQ-YKOOQ)*YKOO*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'64:
      DEF(J,13,3)=
     1DEF(J,13,3)-DREI*VIERTL*FF*DSQRT(3.5D0)*R6*(11.D0*ZKOOQ-DZUBQ)
     1*(XKOOQ*XKOO*YKOO-XKOO*YKOOQ*YKOO)/(DZUBQ*DZUBQQ*DD7)
C***  B65:
      DEF(J,14,3)=
     1DEF(J,14,3)-DREI*(FF/16.0D0)*DSQRT(77.D0)*R6
     1*(XKOOQQ*XKOO-10.0D0*XKOOQ*XKOO*YKOOQ+5.0D0*XKOO*YKOOQQ)*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C***  B'65:
      DEF(J,15,3)=
     1DEF(J,15,3)-DREI*(FF/16.0D0)*DSQRT(77.D0)*R6
     1*(YKOOQQ*YKOO-10.0D0*YKOOQ*YKOO*XKOOQ+5.0D0*YKOO*XKOOQQ)*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'66:
      DEF(J,16,3)=
     1DEF(J,16,3)-(FF/32.0D0)*DSQRT(231.D0)*R6
     1*(DREI*XKOOQ-YKOOQ)*(XKOOQ-DREI*YKOOQ)*TWO*XKOO*YKOO
     1/(DZUBQ*DZUBQQ*DD7)
  255 CONTINUE
  254 CONTINUE
C
    4 CONTINUE
C
      QLIG(1)=BWWW(2)
      QLIG(2)=ZERO
      IF(NSORT.GE.2)QLIG(2)=BWWW(3)
      QLIG(3)=ZERO
      IF(NSORT.GT.2)QLIG(3)=BWWW(4)
C**   START VALUE OF RHO:
C     RHO1=BWWW(1) !REMOVED
      IF(LAUF1.EQ.0)THEN
      LAUF1=1
      WRITE(*,249)QLIG(1),QLIG(2),QLIG(3)
      WRITE(11,249)QLIG(1),QLIG(2),QLIG(3)
C  249 FORMAT(' START: COV.-FAC.("RHO") AND CHARGES:',4D12.4) !removed
  249 FORMAT(' START: CHARGES:',3D12.4)
      ENDIF
C
      DO 250 I=1,16
      IF(I.LE.11)BWWW(I)=ZERO
      BWWWS(I)=ZERO
  250 CONTINUE
C      RHO(1)=RHO1*(FMINIM/ABSTMN(1))**3.5
C      RHO(2)=ZERO
C      IF(ABSTMN(2).NE.ZERO)RHO(2)=RHO1*(FMINIM/ABSTMN(2))**3.5
C      RHO(3)=ZERO
C      IF(ABSTMN(3).NE.ZERO)RHO(3)=RHO1*(FMINIM/ABSTMN(3))**3.5
CC**   RHO's VARY FROM 0.05D0 TO 0.08D0 FOR LANTHANIDES!
C
      IF(LAUFIN.EQ.0)THEN
      LAUFIN=1
      JAPCEM=JASTRU-1
      IF(JAPCEM.NE.0)THEN
      WRITE(*,1375)
      WRITE(11,1375)
 1375 FORMAT(' "PCEM" (PointChargeElectrostaticModel) was chosen!')
      GOTO 1376
      ENDIF
C**  50 LINES CONC. MODEL OF MALTA (with COV.F) REMOVED!
C
      ENDIF
C**   ENDIF BELONGS TO "IF(LAUFIN.EQ.0)THEN"
C**  6 LINES CONC. MODEL OF MALTA (with COV.F) REMOVED!
C
 1376 CONTINUE
C**   NOW CALCULATION OF B-WYBOURNE VALUES WITH CHARGES AS INPUT
C     AND WITH STRUCTURE FACTORS FROM COORDINATES AS INPUT!:
C
      DO 137 J=1,3
      DO 136 I=1,NSORT
      FAK246(I,J)=ONE
C      IF(JAPCEM.EQ.0)FAK246(I,J)=RHO(I)*BETA12(I)**(2*J+1) !removed
      QLMFAK(I,J)=QLIG(I)*FAK246(I,J)
  136 CONTINUE
  137 CONTINUE
C
C      IF(KLICK.EQ.0.AND.JAPCEM.EQ.0)THEN
      IF(KLICK.EQ.0)THEN
      KLICK=1
      DO 130 I=1,NSORT
      WRITE(*,131)I,NSORT,QLIG(I)
      WRITE(11,131)I,NSORT,QLIG(I)
  131 FORMAT(' No. of SORT =',I2,' OF',I2,' SORTS',/
     1,' QLMFAK(J)=CHARGE(J)=',D12.4)
  130 CONTINUE
C     6 LINES "JAPCEM.EQ.0" removed!
      ENDIF
C
      DO 135 K=1,3
      DO 134 J=1,11
      SUM=ZERO
      DO 133 I=1,NSORT
      SUM=SUM+QLMFAK(I,K)*ABC(I,J,K)
  133 CONTINUE
      BWWW(J)=BWWW(J)+SUM
  134 CONTINUE
  135 CONTINUE
C
      DO 1351 K=1,3
      DO 1341 J=1,16
      SUM=ZERO
      DO 1331 I=1,NSORT
      SUM=SUM+QLMFAK(I,K)*DEF(I,J,K)
 1331 CONTINUE
      BWWWS(J)=BWWWS(J)+SUM
 1341 CONTINUE
 1351 CONTINUE
C
C**   B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66, NOW "WYBOURNE":
      IF(KLICKZ.EQ.0)THEN
      KLICKZ=1
      WRITE(*,2456)
      WRITE(11,2456)
 2456 FORMAT(' BWWW VALUES 20/22/40/42/43/44/60/62/63/64/66:')
      WRITE(*,'(4D16.8)')(BWWW(I),I=1,11)
      WRITE(11,'(4D16.8)')(BWWW(I),I=1,11)
C
      WRITE(*,1332)
      WRITE(11,1332)
 1332 FORMAT(' FURTHER B-VALUES (BWWWS, MOSTLY ONLY FOR CONTROL):',/,
     1' 21/21''/22''/41/41''/42''/43''/44''/61/61''/62''/63''/64''/65'
     2,'/65''/66''':)
      WRITE(*,'(4D16.8)')(BWWWS(I),I=1,16)
      WRITE(11,'(4D16.8)')(BWWWS(I),I=1,16)
C
      JABWWS=0
      IF(NGROUP.EQ.20)THEN
      WRITE(11,1712)
 3514 WRITE(*,1712)
 1712 FORMAT(
     1' LIGAND FIELD PARAMETERS CALCULATED HERE ARE WYBOURNE VALUES,',
     1/,' BUT ARE NOT ROTATIONALLY INVARIANT (*(-1)**q to become so)',/,
     1' INPUT YES/NO(0): ROTATIONAL NOT INVARIANT (B-WYBOURNE)',/
     2,' VALUES => fort.9 IN A SPECIAL ORDER, AND STOP?',/
     4,' (ELSE: B-WYBOURNE VALUES ARE POSSIBLY MASKED, AND',/
     5,' GO IN DIFFERENT ORDER => FORT.9, AND => CONCORD.)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3901)JABWWS
      GOTO 4901
      ENDIF
 3901 READ(*,'(I1)',ERR=3514,END=4576)JABWWS
      LMN=1
 4901 WRITE(*,'(I2)')JABWWS
      WRITE(11,'(I2)')JABWWS
      WRITE(7,4902)JABWWS
 4902 FORMAT(I1,' =JABWWS')
      ENDIF
C
      ENDIF
      REWIND(9)
C
      IF(JABWWS.NE.0)THEN
      WRITE(9,1721)
 1721 FORMAT(' STR00.F!:')
      BWWW(12)=BWWWS(3)
      BWWW(13)=BWWWS(6)
      BWWW(14)=BWWWS(7)
      BWWW(15)=BWWWS(8)
      BWWW(16)=BWWWS(11)
      BWWW(17)=BWWWS(12)
      BWWW(18)=BWWWS(13)
      BWWW(19)=BWWWS(16)
      BWWW(20)=0.0D0
      BWWW(21)=BWWWS(1)
      BWWW(22)=BWWWS(4)
      BWWW(23)=BWWWS(9)
      BWWW(24)=BWWWS(14)
      BWWW(25)=BWWWS(2)
      BWWW(26)=BWWWS(5)
      BWWW(27)=BWWWS(10)
      BWWW(28)=BWWWS(15)
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QB(I),I=1,28)
C05    WRITE(9,'(I2,D16.8,2X,A5)')0,BWWWS(10),QB(27),0,BWWWS(15),QB(28)
C
      WRITE(11,1713)
      WRITE(*,1713)
 1713 FORMAT(' 28-1',
     1' BWWW (WYB.-) VALUES =>fort.9 FINISHED, STOP "fort.9" LATER ON!')
C
      ENDIF
C
      DO 2556 I=1,11
      IF(KMASKE(I).NE.0)BWWW(I)=ZERO
 2556 CONTINUE
C
      IF(NGROUP.EQ.21)THEN
      BWWW(6)=BWWW(3)*DSQRT(5.0D0/14.0D0)
      ELSE IF(NGROUP.EQ.22)THEN
C**   THE SIGN IN FRONT OF DSQRT IS MINUS! THE C3-STEP-UP OPERATOR WITH MINUS
C     SIGN IN FRONT OF IT IS USED (AS USUAL!)!
      BWWW(5)=BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      ENDIF
      IF(KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWWW(10)=BWWW(7)*(-DSQRT(3.5D0))
      ELSE IF(NGROUP.EQ.22)THEN
      BWWW(9)=BWWW(7)*DSQRT(210.0D0)/24.0D0
C**   FORMULA FROM M.T. HUTCHINGS, SOLID STATE PHYSICS VOL.16(1964),227
C     ACADEMIC PRESS NEW YORK AND LONDON; FORMULA (2.15) PAGE 246;
C     (THE OPERATOR IS (Y6-3) - (Y6+3)).
      BWWW(11)=BWWW(7)*DSQRT(231.0D0)/24.0D0
      ENDIF
      ENDIF
C
      IF(NGROUP.EQ.20)THEN
      BWWW(21)=BWWWS(1)
      BWWW(22)=BWWWS(4)
      BWWW(23)=BWWWS(9)
      BWWW(24)=BWWWS(14)
      ENDIF
C
      IF(KLICKZ.EQ.1)THEN
      KLICKZ=2
C
      IF(NGROUP.EQ.21.OR.NGROUP.EQ.22)THEN
      WRITE(*,2459)
      WRITE(11,2459)
 2459 FORMAT(' CUBIC: B4Q RE-CALCULATED (AND B6Q FOR F EL.)!')
      IF(NGROUP.EQ.22)THEN
      WRITE(*,2495)
      WRITE(11,2495)
 2495 FORMAT(' GROUP-No.=22: IF OCTAHEDRON, B43 <=> OCTAHEDRON WITH',
     1/,' ONE OF ITS CORNERS AT x>0, y=0, z>0 ("STANDARD")!')
      ENDIF
      ENDIF
C
      WRITE(*,2457)NGROUP
      WRITE(11,2457)NGROUP
 2457 FORMAT(' B-WYBOURNE VALUES AFTER MASKING <=> GROUP-No.=',I3,/
     1,' 20/22/40/42/43/44/60/62/63/64/66:')
      WRITE(*,'(4D16.8)')(BWWW(I),I=1,11)
      WRITE(11,'(4D16.8)')(BWWW(I),I=1,11)
      IF(NGROUP.EQ.20)THEN
      WRITE(*,2475)
      WRITE(11,2475)
 2475 FORMAT(' AND FOR GROUP-No.=20:',/
     1,' 21/41/61/65/21''/22''/41''/42''/43''/44''/61''/62''/63''/64''/'
     2,'65''/66'':')
      WRITE(*,'(4(D16.8,1X,A5))')(BWWW(I),QW(I),I=21,24)
      WRITE(11,'(4(D16.8,1X,A5))')(BWWW(I),QW(I),I=21,24)
      WRITE(*,'(4(D16.8,1X,A5))')(BWWWS(I),QS(I),I=2,3)
     1,(BWWWS(I),QS(I),I=5,8)
     2,(BWWWS(I),QS(I),I=10,13),(BWWWS(I),QS(I),I=15,16)
      WRITE(11,'(4(D16.8,1X,A5))')(BWWWS(I),QS(I),I=2,3)
     1,(BWWWS(I),QS(I),I=5,8)
     2,(BWWWS(I),QS(I),I=10,13),(BWWWS(I),QS(I),I=15,16)
      ENDIF
      NSORT1=NSORT+1
      WRITE(*,2458)(IBWWW(I),I=2,NSORT1)
      WRITE(11,2458)(IBWWW(I),I=2,NSORT1)
 2458 FORMAT(
     1' (MAX.) 3 CHARGES FITTED YES/NO(0):',3I3)
      ENDIF
C
      IF(JABWWS.NE.0)THEN
      STOP 'fort.9'
      ENDIF
C**   IF(JABWWS.EQ.0)THEN
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      WRITE(11,2460)
      WRITE(*,2460)
 2460 FORMAT(' B-WYBOURNE VALUES => FILE fort.9!')
      WRITE(9,1721)
C1721 FORMAT(' STR00.F!:')
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QW(I),I=1,20)
      IF(NGROUP.EQ.20)THEN
C**   21/41/61/65:
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QW(I),I=21,24)
C**   (21)/21'/22'/(41)/41'/42'/43'/44'/(61)/61'/62'/63'/64'/(65)/65'/66':
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWWS(I),QS(I),I=2,3)
     1,(0,BWWWS(I),QS(I),I=5,8)
     2,(0,BWWWS(I),QS(I),I=10,13),(0,BWWWS(I),QS(I),I=15,16)
      ENDIF
      WRITE(11,1711)
 3515 WRITE(*,1711)
 1711 FORMAT(
     1' INPUT YES/NO(0): STOP')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3902)ISTOP9
      GOTO 4903
      ENDIF
 3902 READ(*,'(I1)',ERR=3515,END=4576)ISTOP9
      LMN=1
 4903 WRITE(*,'(I2)')ISTOP9
      WRITE(11,'(I2)')ISTOP9
      WRITE(7,4904)ISTOP9
 4904 FORMAT(I1,' =ISTOP9')
      IF(ISTOP9.NE.0)STOP 'ISTOP9'
      ENDIF
C**   ENDIF
C
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND STR001
      END
      SUBROUTINE SHOWW
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(/,'               NO WARRANTY',/
     1,' 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     2 WARRANTY',/
     1,' FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.',  
     2' EXCEPT WHEN',/
     1,' OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHE',
     2'R PARTIES',/
     1,' PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EIT',
     2'HER EXPRESSED',/
     1,' OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRAN',
     2'TIES OF',/
     1,' MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE EN',
     2'TIRE RISK AS',/
     1,' TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  S',
     2'HOULD THE',/
     1,' PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY',
     2' SERVICING',/
     1,' REPAIR OR CORRECTION.,'//
     1,' 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED T',
     2'O IN WRITING')
      WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(
     1' WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY A',
     2'ND/OR',/
     1,' REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU',
     2' FOR DAMAGES,',/
     1,' INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL D',
     2'AMAGES ARISING',/
     1,' OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT',
     2' NOT LIMITED',/
     1,' TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES S',
     2'USTAINED BY',/
     1,' YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE W',
     2'ITH ANY OTHER',/
     1,' PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISE',
     2'D OF THE',/
     1,' POSSIBILITY OF SUCH DAMAGES.',/)
      RETURN
CEND SHOWW
      END
      SUBROUTINE SHOWC
      CHARACTER Q
      COMMON/FLAG/LMN
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(/,'  GNU GENERAL PUBLIC LICENSE',/
     1,' Version 2, June 1991',//
     1,' Copyright (C) 1989, 1991 Free Software Foundation, Inc.',/
     1,'            59 Temple Place, Suite 330, Boston, MA  02111-1307',
     2'  USA',/
     1,' Everyone is permitted to copy and distribute verbatim copies,',
     1/,' of this license document, but changing it is not allowed.',//
     1,'                      Preamble',//
     1,'   The licenses for most software are designed to take away yo',
     2'ur',/
     1,' freedom to share and change it.  By contrast, the GNU General',
     2' Public',/
     1,' License is intended to guarantee your freedom to share and ch',
     2'ange free',/
     1,' software--to make sure the software is free for all its users',
     2'.  This',/
     1,' General Public License applies to most of the Free Software,',/
     1,' Foundation''s software and to any other program whose authors '
     2,'commit to')
      WRITE(*,2006)
      WRITE(11,2006)
 2006 FORMAT(
     1' using it.  (Some other Free Software Foundation software is co',
     2'vered by',/
     1,' the GNU Library General Public License instead.)  You can app',
     2'ly it to',/
     1,' your programs, too.',//
     1,'  When we speak of free software, we are referring to freedom,',
     2' not',/
     1,' price.  Our General Public Licenses are designed to make sure',
     2' that you',/
     1,' have the freedom to distribute copies of free software (and c',
     2'harge for',/
     1,' this service if you wish), that you receive source code or ca',
     2'n get it',/
     1,' if you want it, that you can change the software or use piece',
     2's of it',/
     1,' in new free programs; and that you know you can do these thin',
     2'gs.',//
     1,'   To protect your rights, we need to make restrictions that f',
     2'orbid')
      WRITE(*,2007)
      WRITE(11,2007)
 2007 FORMAT(
     1' anyone to deny you these rights or to ask you to surrender the',
     2' rights.',/
     1,' These restrictions translate to certain responsibilities for ',
     2'you if you',/
     1,' distribute copies of the software, or if you modify it.',//
     1,'   For example, if you distribute copies of such a program, wh',
     2'ether',/
     1,' gratis or for a fee, you must give the recipients all the rig',
     2'hts that',/
     1,' you have.  You must make sure that they, too, receive or can ',
     2'get the',/
     1,' source code.  And you must show them these terms so they know',
     2' their',/
     1,' rights.',//
     1,'   We protect your rights with two steps: (1) copyright the so',
     2'ftware, and',/
     1,' (2) offer you this license which gives you legal permission t',
     2'o copy,')
      WRITE(*,2008)
      WRITE(11,2008)
 2008 FORMAT(
     1' distribute and/or modify the software.',//
     1,'   Also, for each author''s protection and ours, we want to mak'
     2,'e certain',/
     1,' that everyone understands that there is no warranty for this ',
     2'free',/
     1,' software.  If the software is modified by someone else and pa',
     2'ssed on, we',/
     1,' want its recipients to know that what they have is not the or',
     2'iginal, so',/
     1,' that any problems introduced by others will not reflect on th',
     2'e original',/
     1,' authors'' reputations.',//
     3,'   --- Type <return> to continue ---')
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3858)Q
      GOTO 4858
      ENDIF
 3858 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4858 WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT('   GNU GENERAL PUBLIC LICENSE',/
     1,'   Finally, any free program is threatened constantly by softw',
     2'are',/
     1,' patents.  We wish to avoid the danger that redistributors of ',
     2'a free',/
     1,' program will individually obtain patent licenses, in effect m',
     2'aking the',/
     1,' program proprietary.  To prevent this, we have made it clear ',
     2'that any',/
     1,' patent must be licensed for everyone''s free use or not licens'
     2,'ed at all.',//
     1,'   The precise terms and conditions for copying, distribution ',
     2'and',/
     1,' modification follow.',//
     1,'   GNU GENERAL PUBLIC LICENSE',/
     1,'   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICA',
     2'TION',//
     1,'  0. This License applies to any program or other work which c',
     2'ontains')
      WRITE(*,2009)
      WRITE(11,2009)
 2009 FORMAT(
     1' a notice placed by the copyright holder saying it may be distr',
     2'ibuted',/
     1,' under the terms of this General Public License.  The "Program',
     2'", below,',/
     1,' refers to any such program or work, and a "work based on the',
     2' Program"',/
     1,' means either the Program or any derivative work under copyrig',
     2'ht law:',/
     1,' that is to say, a work containing the Program or a portion of',
     2' it,',/
     1,' either verbatim or with modifications and/or translated into ',
     2'another',/
     1,' language.  (Hereinafter, translation is included without limi',
     2'tation in',/
     1,' the term "modification".)  Each license is addressed as "you',
     2'".',//
     1,' Activities other than copying, distribution and modification ',
     2'are not')
      WRITE(*,2010)
      WRITE(11,2010)
 2010 FORMAT(
     1' covered by this License; they are outside its scope.  The act ',
     2'of',/
     1,' running the Program is not restricted, and the output from th',
     2'e Program',/
     1,' is covered only if its contents constitute a work based on th',
     2'e',/
     1,' Program (independent of having been made by running the Progr',
     2'am).',/
     1,' Whether that is true depends on what the Program does.',//
     1,'   1. You may copy and distribute verbatim copies of the Progr',
     2'am''s',/
     1,' source code as you receive it, in any medium, provided that y',
     2'ou',/
     1,' conspicuously and appropriately publish on each copy an appro',
     2'priate',/
     1,' copyright notice and disclaimer of warranty; keep intact all ',
     2'the',/
     1,' notices that refer to this License and to the absence of any ',
     2'warranty;')
      WRITE(*,2011)
      WRITE(11,2011)
 2011 FORMAT(
     1' and give any other recipients of the Program a copy of this Li',
     2'cense',/
     1,' along with the Program.',//
     1,' You may charge a fee for the physical act of transferring a c',
     2'opy, and',/
     1,' you may at your option offer warranty protection in exchange ',
     2'for a fee.',//
     1,'   2. You may modify your copy or copies of the Program or any',
     2' portion',/
     1,' of it, thus forming a work based on the Program, and copy and')
      WRITE(*,2012)
      WRITE(11,2012)
 2012 FORMAT(
     1' distribute such modifications or work under the terms of Secti',
     2'on 1',/
     1,' above, provided that you also meet all of these conditions:',/
     2/
     1,'     a) You must cause the modified files to carry prominent n',
     2'otices',/
     1,'     stating that you changed the files and the date of any ch',
     2'ange.',//
     3,'   --- Type <return> to continue ---')
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3859)Q
      GOTO 4859
      ENDIF
 3859 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4859 WRITE(*,2002)
      WRITE(11,2002)
 2002 FORMAT(
     1'    b) You must cause any work that you distribute or publish, ',
     2'that in',/
     1,'     whole or in part contains or is derived from the Program ',
     2'or any',/
     1,'     part thereof, to be licensed as a whole at no charge to a',
     2'll third',/
     1,'     parties under the terms of this License.',//
     1,'     c) If the modified program normally reads commands intera',
     2'ctively',/
     1,'     when run, you must cause it, when started running for suc',
     2'h',/
     1,'     interactive use in the most ordinary way, to print or dis',
     2'play an',/
     1,'     announcement including an appropriate copyright notice an',
     2'd a',/
     1,'     notice that there is no warranty (or else, saying that yo',
     2'u provide',/
     1,'     a warranty) and that users may redistribute the program u',
     2'nder')
      WRITE(*,2013)
      WRITE(11,2013)
 2013 FORMAT(
     1'     these conditions, and telling the user how to view a copy ',
     2'of this',/
     1,'     License.  (Exception: if the Program itself is interactiv',
     2'e but',/
     1,'     does not normally print such an announcement, your work b',
     2'ased on',/
     1,'     the Program is not required to print an announcement.)',//
     1,' These requirements apply to the modified work as a whole. ', 
     2'If',/
     1,' identifiable sections of that work are not derived from the P',
     2'rogram,',/
     1,' and can be reasonably considered independent and separate wor',
     2'ks in',/
     1,' themselves, then this License, and its terms, do not apply to',
     2' those',/
     1,' sections when you distribute them as separate works.  But whe',
     2'n you',/
     1,' distribute the same sections as part of a whole which is a wo',
     2'rk based')
      WRITE(*,2014)
      WRITE(11,2014)
 2014 FORMAT(
     1' on the Program, the distribution of the whole must be on the t',
     2'erms of',/
     1,' this License, whose permissions for other licenses extend to',
     2' the',/
     1,' entire whole, and thus to each and every part regardless of w',
     2'ho wrote it.',//
     1,' Thus, it is not the intent of this section to claim rights or',
     2' contest',/
     1,' your rights to work written entirely by you; rather, the inte',
     2'nt is to',/
     1,' exercise the right to control the distribution of derivative ',
     2'or',/
     1,' collective works based on the Program.',//
     1,' In addition, mere aggregation of another work not based on th',
     2'e Program',/
     1,' with the Program (or with a work based on the Program) on a v',
     2'olume of',/
     1,' a storage or distribution medium does not bring the other wor',
     2'k under')
      WRITE(*,2015)
      WRITE(11,2015)
 2015 FORMAT(
     1' the scope of this License.',//
     1,'   3. You may copy and distribute the Program (or a work based',
     2' on it,',/
     1,' under Section 2) in object code or executable form under the ',
     2'terms of',/
     1,' Sections 1 and 2 above provided that you also do one of the f',
     2'ollowing:',//
     1,'     a) Accompany it with the complete corresponding machine-r',
     2'eadable',/
     1,'     source code, which must be distributed under the terms of',
     2' Sections',/
     1,'     1 and 2 above on a medium customarily used for software i',
     2'nterchange; or,',//
     1,'     b) Accompany it with a written offer, valid for at least ',
     2'three',/
     1,'     years, to give any third party, for a charge no more than',
     2' your')
      WRITE(*,2016)
      WRITE(11,2016)
 2016 FORMAT(
     1'     cost of physically performing source distribution, a compl',
     2'ete',//
     3,'   --- Type <return> to continue ---')
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3860)Q
      GOTO 4860
      ENDIF
 3860 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4860 WRITE(*,2003)
      WRITE(11,2003)
 2003 FORMAT(
     1'     machine-readable copy of the corresponding source code, to',
     2' be',/
     1,'     distributed under the terms of Sections 1 and 2 above on ',
     2'a medium',/
     1,'     customarily used for software interchange; or,',//
     1,'     c) Accompany it with the information you received as to t',
     2'he offer',/
     1,'     to distribute corresponding source code.  (This alternati',
     2've is',/
     1,'     allowed only for noncommercial distribution and only if y',
     2'ou',/
     1,'     received the program in object code or executable form wi',
     2'th such',/
     1,'     an offer, in accord with Subsection b above.)',//
     1,' The source code for a work means the preferred form of the wo',
     2'rk for',/
     1,' making modifications to it.  For an executable work, complete',
     2' source')
      WRITE(*,2017)
      WRITE(11,2017)
 2017 FORMAT(
     1' code means all the source code for all modules it contains, pl',
     2'us any',/
     1,' associated interface definition files, plus the scripts used ',
     2'to',/
     1,' control compilation and installation of the executable.  Howe',
     2'ver, as a',/
     1,' special exception, the source code distributed need not inclu',
     2'de',/
     1,' anything that is normally distributed (in either source or bi',
     2'nary',/
     1,' form) with the major components (compiler, kernel, and so on)',
     2' of the',/
     1,' operating system on which the executable runs, unless that co',
     2'mponent',/
     1,' itself accompanies the executable.',//
     1,' If distribution of executable or object code is made by offer',
     2'ing',/
     1,' access to copy from a designated place, then offering equival',
     2'ent')
      WRITE(*,2018)
      WRITE(11,2018)
 2018 FORMAT(
     1' access to copy the source code from the same place counts as',/
     1,' distribution of the source code, even though third parties ar',
     2'e not',/
     1,' compelled to copy the source along with the object code.',//
     1,'   4. You may not copy, modify, sublicense, or distribute the ',
     2'Program',/
     1,' except as expressly provided under this License.  Any attempt',
     2/
     1,' otherwise to copy, modify, sublicense or distribute the Progr',
     2'am is',/
     1,' void, and will automatically terminate your rights under this',
     2' License.',/
     1,' However, parties who have received copies, or rights, from yo',
     2'u under',/
     1,' this License will not have their licenses terminated so long ',
     2'as such',/
     1,' parties remain in full compliance.',//
     1,'  5. You are not required to accept this License, since you h',
     2'ave not')
      WRITE(*,2019)
      WRITE(11,2019)
 2019 FORMAT(
     1' signed it.  However, nothing else grants you permission to mod',
     2'ify or',/
     1,' distribute the Program or its derivative works.  These action',
     2's are',/
     1,' prohibited by law if you do not accept this License.  Therefo',
     2're, by',/
     1,' modifying or distributing the Program (or any work based on t',
     2'he',/
     1,' Program), you indicate your acceptance of this License to do ',
     2'so, and',/
     1,' all its terms and conditions for copying, distributing or mod',
     2'ifying',/
     1,' the Program or works based on it.',//
     1,'   6. Each time you redistribute the Program (or any work base',
     2'd on the',/
     1,' Program), the recipient automatically receives a license from',
     2' the',/
     1,' original licensor to copy, distribute or modify the Program s',
     2'ubject to')
      WRITE(*,2020)
      WRITE(11,2020)
 2020 FORMAT(
     160H these terms and conditions.  You may not impose any further,/
     3/,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3861)Q
      GOTO 4861
      ENDIF
 3861 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4861 WRITE(*,2004)
      WRITE(11,2004)
 2004 FORMAT(
     1' restrictions on the recipients'
     2,''' exercise of the rights granted'' herein.',/
     1,' You are not responsible for enforcing compliance by third par',
     2'ties to',/
     1,' this License.',//
     1,'   7. If, as a consequence of a court judgment or allegation o',
     2'f patent',/
     1,' infringement or for any other reason (not limited to patent i',
     2'ssues),',/
     1,' conditions are imposed on you (whether by court order, agreem',
     2'ent or',/
     1,' otherwise) that contradict the conditions of this License, th',
     2'ey do not',/
     1,' excuse you from the conditions of this License.  If you canno',
     2't',/
     1,' distribute so as to satisfy simultaneously your obligations u',
     2'nder this',/
     1,' License and any other pertinent obligations, then as a conseq',
     2'uence you')
      WRITE(*,2021)
      WRITE(11,2021)
 2021 FORMAT(
     1' may not distribute the Program at all.  For example, if a pate',
     2'nt',/
     1,' license would not permit royalty-free redistribution of the P',
     2'rogram by',/
     1,' all those who receive copies directly or indirectly through y',
     2'ou, then',/
     1,' the only way you could satisfy both it and this License would',
     2' be to',/
     1,' refrain entirely from distribution of the Program.',//
     1,' If any portion of this section is held invalid or unenforceab',
     2'le under',/
     1,' any particular circumstance, the balance of the section is in',
     2'tended to',/
     1,' apply and the section as a whole is intended to apply in othe',
     2'r',/
     1,' circumstances.',//
     1,' It is not the purpose of this section to induce you to infrin',
     2'ge any')
      WRITE(*,2022)
      WRITE(11,2022)
 2022 FORMAT(
     1' patents or other property right claims or to contest validity ',
     2'of any',/
     1,' such claims; this section has the sole purpose of protecting ',
     2'the',/
     1,' integrity of the free software distribution system, which is',
     2/
     1,' implemented by public license practices.  Many people have ma',
     2'de',/
     1,' generous contributions to the wide range of software distribu',
     2'ted',/
     1,' through that system in reliance on consistent application of ',
     2'that',/
     1,' system; it is up to the author/donor to decide if he or she i',
     2's willing',/
     1,' to distribute software through any other system and a license',
     2' cannot',/
     1,' impose that choice.',//
     1,' This section is intended to make thoroughly clear what is bel',
     2'ieved to')
      WRITE(*,2023)
      WRITE(11,2023)
 2023 FORMAT(
     1' be a consequence of the rest of this License.',//
     1,'   8. If the distribution and/or use of the Program is restric',
     2'ted in',/
     1,' certain countries either by patents or by copyrighted interfa',
     2'ces, the',/
     1,' original copyright holder who places the Program under this L',
     2'icense',/
     1,' may add an explicit geographical distribution limitation excl',
     2'uding',/
     1,' those countries, so that distribution is permitted only in or',
     2' among',/
     1,' countries not thus excluded.  In such case, this License inco',
     2'rporates',/
     1,' the limitation as if written in the body of this License.',//
     1,'   9. The Free Software Foundation may publish revised and/or ',
     2'new versions',/
     1,' of the General Public License from time to time.  Such new ve',
     2'rsions will')
      WRITE(*,2024)
      WRITE(11,2024)
 2024 FORMAT(
     1' be similar in spirit to the present version, but may differ in',
     2' detail to',/
     1,' address new problems or concerns.',//
     3,'   --- Type <return> to continue ---')
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3862)Q
      GOTO 4862
      ENDIF
 3862 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4862 WRITE(*,2005)
      WRITE(11,2005)
 2005 FORMAT(
     1' Each version is given a distinguishing version number.  If the',
     2' Program',/
     1,' specifies a version number of this License which applies to i',
     2't and "any',/
     1,' later version", you have the option of following the terms an',
     2'd conditions',/
     1,' either of that version or of any later version published by t',
     2'he Free',/
     1,' Software Foundation.  If the Program does not specify a versi',
     2'on number of',/
     1,' this License, you may choose any version ever published by th',
     2'e Free Software',/
     1,' Foundation.',//
     1,'   10. If you wish to incorporate parts of the Program into ot',
     2'her free',/
     1,' programs whose distribution conditions are different, write t',
     2'o the author',/
     1,' to ask for permission.  For software which is copyrighted by ',
     2'the Free')
      WRITE(*,2025)
      WRITE(11,2025)
 2025 FORMAT(
     1' Software Foundation, write to the Free Software Foundation; we',
     2' sometimes',/
     1,' make exceptions for this.  Our decision will be guided by the',
     2' two goals',/
     1,' of preserving the free status of all derivatives of our free ',
     2'software and',/
     1,' of promoting the sharing and reuse of software generally.',//)
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SHOWC
      END
      SUBROUTINE SHOWM
      CHARACTER Q
      COMMON/FLAG/LMN
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(
     1' Program CONCORD is written on one file!',/ 
     1,' File CONCORD.f consists of the .MAIN. PROGRAM CONCORD,',/
     1,' many SUBROUTINEs, FUNCTIONs and BLOCKDATA subprograms,',/
     1,' but 3 subroutines are text only, concerning WARRANTY,',/
     1,' GNU GENERAL PUBLIC LICENSE, and this OUTLINE of CONCORD.',/
     1,' Subroutine ZHPEVK serves to link a library routine',/
     1,' for diagonalizing complex hermitian matrices,',/
     1,' which may be a routine on file dsdzhd.f (has to be linked),',/
     1,' which contains the relevant part of library LAPACK in source', 
     2'code,',/
     1,' or the corresponding routine of library NAG (and BLAS).',
     2//)
      WRITE(*,2002)
      WRITE(11,2002)
 2002 FORMAT(
     1' The matrix to be firstly diagonalized has dimension 1001*1001 ',
     2'for',/
     1,' Ho(3+), 2002*2002 for Dy(3+), 3003*3003 for Tb(3+) and',/
     1,' 3432*3432 for Gd(3+), respectively. A PARAMETER ND2002 is',/
     1,' introduced in subroutine SHORTL,',/ 
     1,' but instead of ND2002=1110, which is the minimum for ND2002, ',
     2'ND2002=2002',/
     1,' or ND2002=3003 or ND2002=3432 is set, if necessary, in SHORTL',
     2'.',/)
 4863 WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(
     1' SUBROUTINEs STR00 and STR001, routines to calculate ligand',
     2' field',/,
     1' parameters from coordinates of ligands, are also included!',
     2//)
      WRITE(*,2090)
      WRITE(11,2090)
 2090 FORMAT(' One more SUBROUTINE is text only: TEXT2D.',/,
     1' It containes descriptions of all SUBROUTINEs, and these',/,
     2' can be read here on the terminal (also ->fort.1) if "1" is',/,
     3' put in now ("0" or RETURN else)!')
      READ(*,'(I1)')JATEXT
      IF(JATEXT.EQ.0)RETURN
      WRITE(*,2080)
      WRITE(11,2080)
 2080 FORMAT(/,' PROGRAM CONCORD',/,
     1' with INPUT for l-value, point group, some options,',/,
     1' 2 names of files to be read, number of electrons,',/,
     1' charge and no. of trans.-state of the ion.'
     1,/)
      CALL TEXT2D(LMN,1,11)  !=CONCORD
      WRITE(*,2081)
      WRITE(11,2081)
 2081 FORMAT(/,' SUBROUTINE SHORTL',/,
     1' where some dimensions are chosen.'
     1,/)
      CALL TEXT2D(LMN,1,12)  !=SHORTL
      WRITE(*,2082)
      WRITE(11,2082)
 2082 FORMAT(/,' SUBROUTINE SUSFIT',/,
     1' Here is SQX as a measure for the quality of a fit calculated,',/
     1,' and SUSFIT decides for convergence of a fit.',/,
     1' The (max.) number of iterations is put in here!'
     1,/)
      CALL TEXT2D(LMN,1,13)  !=SUSFIT
      WRITE(*,2083)
      WRITE(11,2083)
 2083 FORMAT(/,' SUBROUTINE LEVSQX',/,
     1' Here CHISQ (->SQX) AS A MEASURE OF THE QUALITY OF A FIT IS',/,
     1' EVALUATED, AND THE LEVENBERG-MARQUARDT METHOD STARTS HERE.'
     1,/)
      CALL TEXT2D(LMN,1,17)  !=LEVSQX
      WRITE(*,2084)
      WRITE(11,2084)
 2084 FORMAT(/,' SUBROUTINE SUSC',/,
     1' This SUBROUTINE calculates either nothing, or it calculates',/,
     1' true Wybourne parameters from functions of these, which can',/,
     1' be fitted instead of the true parameters. A special case is',/,
     1' the CALL STR00 (->STR001), where Wybourne values are calculated'
     1,/,' from charges, which can be fitted, and coordinates of ligand'
     1,'s,',/,' which are read in.'
     1,/)
      CALL TEXT2D(LMN,1,18)  !=SUSC
      WRITE(*,2085)
      WRITE(11,2085)
 2085 FORMAT(/,' SUBROUTINE STR00',/,
     1' This SUBROUTINE is a link to SUBROUTINE STR001'
     1,/)
      CALL TEXT2D(LMN,1,39)  !=STR00
      WRITE(*,2086)
      WRITE(11,2086)
 2086 FORMAT(/,' SUBROUTINE STR001',/,
     1' SUBROUTINE STR001 uses the PointChargeElectrostaticModel',/,
     1' ("PCEM") to calculate  crystal field/ligand field',/,
     1' parameters (Wybourne parameters).'
     1,/)
      CALL TEXT2D(LMN,1,40)  !=STR001
      WRITE(*,2087)
      WRITE(11,2087)
 2087 FORMAT(/,' SUBROUTINE TANABE',/,
     1' TANABE starts the calculation of molar susceptibility',/,
     1' and deals with interelectronic repulsion, spin-orbit coupling,',
     1/,' and crystal/ligand fields. Eigenvalues and eigenfunctions are'
     1,/,' the result!'
     1,/)
      CALL TEXT2D(LMN,1,19)  !=TANABE
      WRITE(*,2088)
      WRITE(11,2088)
 2088 FORMAT(/,' SUBROUTINE SCHEMA',/,
     1' A full basis of micro states is set up in SCHEMA,',/,
     1' and the result are consecutively numbered micro states.'
     1,/)
      CALL TEXT2D(LMN,1,32)  !=SCHEMA
      WRITE(*,2089)
      WRITE(11,2089)
 2089 FORMAT(/,' SUBROUTINE ELELWW',/,
     1' SUBROUTINE ELELWW calculates the non-diagonal matrix elements',/
     1,' of interelectronic repulsion, resp. FACTORs for these.'
     1,/) 
      CALL TEXT2D(LMN,1,34)  !=ELELWW
      WRITE(*,2070)
      WRITE(11,2070)
 2070 FORMAT(/,' SUBROUTINE NUMERO',/,
     1' SUBROUTINE NUMERO has been written to evaluate the number',/,
     1' (NR) of one of KASSUM micro states of NREL electrons,',/,
     1' which are numbered consecutively.'
     1,/)
      CALL TEXT2D(LMN,1,33)  !=NUMERO
      WRITE(*,2071)
      WRITE(11,2071)
 2071 FORMAT(/,' SUBROUTINE SPORCO',/,
     1' Subroutine SPORCO calculates the non-diagonal elements',/,
     1' of the spin-orbit coupling matrix for spin-orbit coupling.'
     1,/)
      CALL TEXT2D(LMN,1,35)  !=SPORCO
      WRITE(*,2072)
      WRITE(11,2072)
 2072 FORMAT(/,' SUBROUTINE CRYSTF',/,
     1' CRYSTF calculates the NON-DIAGONAL elements (resp. FACTORs for',
     1/,' these) of the MATRIX of the CRYSTAL-FIELD/Ligand-field OPERA'
     1,'TOR!'
     1,/)
      CALL TEXT2D(LMN,1,36)  !=CRYSTF
      WRITE(*,2073)
      WRITE(11,2073)
 2073 FORMAT(/,' SUBROUTINE MAGNF',/,
     1' MAGNF is used in REDUCT to calculate (neg.)magn.momentMATrices',
     1/,' FMAT(,,I) with I=2,3 for x- and y-direction via FMAT(,,4)',/,
     1' and FMAT(,,5) and GMAT(,,I) with I=2,3 for spin.'
     1,/) 
      CALL TEXT2D(LMN,1,37)  !=MAGNF
      WRITE(*,2074)
      WRITE(11,2074)
 2074 FORMAT(/,' SUBROUTINE BLOCUT',/,
     1' SUBROUTINE BLOCUT MAY BE CALLED TO BLOCK-OUT THE MATRIX BEFORE',
     1/,' DIAGONALIZING. ALSO SYMMETRY QUANTUM NUMBERS AND OCCUP. OF',/,
     1' SPINORBITALS ARE CALCULATED. D ORBITALS CAN BE TRANSFORMED TO',/
     1' REAL BASIS ORBITALS AS E.G. DX2-Y2-(SPIN)UP.'
     1,/)
      CALL TEXT2D(LMN,1,20)  !=BLOCUT
      WRITE(*,2075)
      WRITE(11,2075)
 2075 FORMAT(/,' SUBROUTINE ZHPEVK',/,
     1' SUBROUTINE ZHPEVK is a link to ZHPEVD, linked from a library,',/
     1,' to diagonalize a complex Hermitian matrix.'
     1,/)
      CALL TEXT2D(LMN,1,38)  !=ZHPEVK
      WRITE(*,2076)
      WRITE(11,2076)
 2076 FORMAT(/,' SUBROUTINE REDUCT',/,
     1' Calculated are (neg.)magn.momentMATrices FMAT(,,I) with',/,
     1' I=1,2,3 for z-, x- and y-direction of the magn. field via',/,
     1' FMAT(,,I) with I=4,5 and GMAT(,,I) with I=1,2,3. FMAT',/,
     1' and GMAT are calculated within the basis of eigenfunctions,',/,
     1' which come from TANABE: A new basis is introduced!'
     1,/)
      CALL TEXT2D(LMN,1,21)  !=REDUCT
      WRITE(*,2077)
      WRITE(11,2077)
 2077 FORMAT(/,' SUBROUTINE SELECT',/,
     1' In SUBROUTINE SELECT the subroutine SUGANC is selected with',/,
     1' different parameters, e.g. the resulting CHI''s of three calls',
     1/,' for three different directions of the magnetic field are',/
     1,' calculated and combined to one mean value of CHI.'
     1,/)
      CALL TEXT2D(LMN,1,22)  !=SELECT
      WRITE(*,2078)
      WRITE(11,2078)
 2078 FORMAT(/,' SUBROUTINE SUGANC',/,
     1' SUBROUTINE SUGANC calculates eigenvalues (energies) and (neg.)',
     1/,' induced magn. moments for monomers or dimers, but for dimers',
     1/,' only, if combined model II really works.'
     1,/)
      CALL TEXT2D(LMN,1,24)  !=SUGANC
      WRITE(*,2079)
      WRITE(11,2079)
 2079 FORMAT(/,' SUBROUTINE SUPONG',/,
     1' It is a modified copy of SUGANC and runs only, if IOPT2=2',/,
     1' ("pingPONG"), if combined model II runs for the 2nd part of',/,
     1' the not symmetrical dimer, and if the magn. field has changed!',
     1/,' SUPONG serves to include the magn. field for these conditions'
     1,'!',/)
      CALL TEXT2D(LMN,1,28)  !=SUPONG
      WRITE(*,2050)
      WRITE(11,2050)
 2050 FORMAT(/,' SUBROUTINE SUGANO',/,
     1' SUBROUTINE SUGANO is only for more O(!)utput for the',/,
     1' 3 subroutines SUGANC, SUGANK, and SUGAND!',/,
     1' (STANDARD:) "USED EIGENVALUES OF THE INTERFACE" and',/,
     1' "(NEG.) MAGNETIC MOMENTS (EFTIMM)".'
     1,/)
      CALL TEXT2D(LMN,1,23)  !=SUGANO
      WRITE(*,2051)
      WRITE(11,2051)
 2051 FORMAT(/,' SUBROUTINE SUGANK',/,
     1' This SUBROUTINE works for Heisenberg coupling within a dimer.',/
     1,' Calls SUGAND to calculate eigenvalues and (neg.) induced',/,
     1' magnetic moments.'
     1,/)
      CALL TEXT2D(LMN,1,27)  !=SUGANK
      WRITE(*,2052)
      WRITE(11,2052)
 2052 FORMAT(/,' SUBROUTINE SUGAND',/,
     1' CALLed by SUGANK, where Heisenberg coupling is involved!',/,
     1' SUGAND is a copy of the second part of SUGANC, a little modifie'
     2,'d,',/,
     1' and calculates eigenvalues and (neg.) induced magn. moments.'
     1,/)
      CALL TEXT2D(LMN,1,25)  !=SUGAND
      WRITE(*,2053)
      WRITE(11,2053)
 2053 FORMAT(/,' SUBROUTINE SUGANY',/,
     1' This SUBROUTINE calculates transverse (neg.) induced magnetic',/
     1,' moments, transverse to the direction of the magnetic field.',/,
     1' The results are not used furtheron!'
     1,/)
      CALL TEXT2D(LMN,1,26)  !=SUGANY
      WRITE(*,2054)
      WRITE(11,2054)
 2054 FORMAT(/,' SUBROUTINE KOMBII',/,
     1' SUBROUTINE KOMBII runs for COMBINED MODEL II for dimers,',/,
     1' if Heisenberg coupling is omitted  for "higher" energies.'
     1,/)
      CALL TEXT2D(LMN,1,29)  !=KOMBII
      WRITE(*,2055)
      WRITE(11,2055)
 2055 FORMAT(/,' SUBROUTINE CHIMAG',/,
     1' Calculates (molar) paramagnetic susceptibility chi in SI units',
     2' (CHI)',/,
     1' for the given temperature, field, and for the valid DIRECZ.'
     1,/)
      CALL TEXT2D(LMN,1,30)  !=CHIMAG
      WRITE(*,2056)
      WRITE(11,2056)
 2056 FORMAT(/,' SUBROUTINE LEVMAR',/,
     1' LEVENBERG-MARQUARDT METHOD, with',/,
     1' INPUT of its PARAMETER OMEGA'
     1,/)
      CALL TEXT2D(LMN,1,14)  !=LEVMAR
      WRITE(*,2057)
      WRITE(11,2057)
 2057 FORMAT(/,' SUBROUTINE LEVDER',/,
     1' USED BY LEVMAR TO EVALUATE THE LINEARIZED FITTING MATRIX ALPHA'
     1,/,' AND VECTOR BETA. IN ADDITION TO THE FIRST TERM, THE SECOND'
     2,' TERM',/,
     1' FOR CALCULATING DERIVATIVES NUMERICALLY IS CALCULATED HERE!'
     1,/)
      CALL TEXT2D(LMN,1,15)  !=LEVDER
      WRITE(*,2058)
      WRITE(11,2058)
 2058 FORMAT(/,' SUBROUTINE GAUSS',/,
     1' LINEAR EQUATION SOLUTION BY THE ALGORITHM OF GAUSS,',/,
     1' NEEDED TO MAKE A PROPOSAL FOR NEW PARAMETERS.'
     1,/)
      CALL TEXT2D(LMN,1,16)  !=GAUSS
      WRITE(*,2059)
      WRITE(11,2059)
 2059 FORMAT(/,' SUBROUTINE RESTBL',/,
     1' In SUBROUTINE RESTBL (RESult-TaBLe) are all results put out',/,
     1' in form of 1 table or more tables. (Up to) 27 values are',/,
     1' derived from one single calculated CHI(1,1,1), and (up to)',/,
     1' 27 values are derived from one measured CHI(2,4,1).'
     1,/)
      CALL TEXT2D(LMN,1,31)  !=RESTBL
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SHOWM
      END
