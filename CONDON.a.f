      PROGRAM CONDON
 1920 FORMAT(
     1' PROGRAM CONDON written in STANDARD FORTRAN 77.',/,
     2' Copyright 2000 Helmut SCHILDER, Fachhochschule Aachen Germany.',
     3/,' PROGRAM CONDON is free software, covered by the GNU General Pu
     4blic License,',/,' and you are welcome to change it and/or distrib
     5ute copies of it',/,' under certain conditions.',/,
     6' Type "show copying" to see the conditions.',/,
     7' There is absolutely no warranty for PROGRAM CONDON.  Type "show 
     8warranty" for details.',/,' Type "show more" to see some hints.'
     9,/,' Scientific use of computational results or program code shoul
     4d include the citation:',/,
     5' Helmut Schilder: PROGRAM CONDON, Fachhochschule Aachen 2000.'
     6,/,' RETURN to start calculation, type "9" to stop.')
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   "ABOUT THIS PROGRAM" SEE TEXT BELOW STARTING AT LINE 1048 (THIS TEXT
C     ONLY CONCERNING D BLOCK ATOMS OR IONS). FOR F BLOCK ATOMS OR IONS
C     SEE LINE 172 AND LINE 158. IN ADDITION THERE ARE MANY "TESTS" INCOR-
C     PORATED, ESPECIALLY TESTS CONCERNING BASIS CHANGES!
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW (E.G. BWW(STEVENS)=>BWWW(WYBOURNE))
C     IN SUBROUTINE SUSC:
      PARAMETER(J20=36,K24=24,K25=24)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      COMMON/RRF/RACAHB,RACAHC,FKSIDA
      COMMON/RF/RACAKB(9),FKSIDK(9)
      COMMON/FINTE/FINT(4,13),FKSIWI(13)
      COMMON/BWWOLT/BWWOLD(J20)
      COMMON/KLIXYZ/ISTZXY
      CHARACTER XYZ
      CHARACTER QTEXT1(60)
      CHARACTER*13 QTEXT0
      CHARACTER*15 DATEI,QMPC
      CHARACTER*50 QUIVAR,QUIVAQ
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,VIER=4.0D0,I16=36
     1,VPREZ6=1.0D6/(4.D0*3.1415926D0))
C**   I16 NOT(!) FOR DIMENSIONS OF BWW, BWWW AND IBWWW, BECAUSE THESE ARE
C     IN COMMON! - "17" IS FOR "MOL(ECULAR)F(IE)LD" AND "18" FOR "MIXTURE OF
C     SINGLE ION WITH ITS DIMER" OR "SPIN CROSSOVER"!
      DIMENSION FINTEG(4),RACAHB(9,5,3),RACAHC(9,5,3),FKSIDA(9,5,3)
     1,REDFAZ(3),DIRECZ(3),SIGMA0(601),FKSIU(3),FINTEU(3,2)
C**   THERE ARE 19 DIFFERENT POSSIBILITIES OF INPUT OF (MAX.11) B-VALUES
C     ("MASKE")! (SYMMETRIES DOWN TO ORTHO-RHOMBIC - NO 5-FOLD AXES - NO
C     "IMAGINARY" OPERATORS RESP. B-VALUES!):
C     LIT.: HANDBOOK ON THE PHYSICS AND CHEMISTRY OF RARE EARTHS VOL.23
C     CHAPTER 155. 1996 ELSEVIER SCIENCE B.V.
      DIMENSION IGROUP(23,4),MASKE(11,19),KMASKE(20),MINPLS(3)
     1,MASKED(23,4),MULMUD(9),MULMUP(5)
      COMMON/MAINPR/ZETA,ABST,FINTEG,REDFAZ,DIRECZ,SIGMA0
     1,JASTRU,KLWERT,NREL,JAWIGN,NGROUP,JAVANV,MOLFLD,MIST16,KMASKE
      DATA FKSIU/2113.D0,1926.D0,1748.D0/
      DATA JACHI0,NEUORB/0,0/
      DATA MINPLS/1,1,1/
      DATA FINTEU/76557.D0,50078.D0,36429.D0,71278.D0,46251.D0,33423.D0/
C**   DATA INBWWW/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/ ... (..BWW..) AND
C     DATA NDATAM,NOPROZ,JAFFAK,NOANAL: SEE COMMON WWWWWW!
      DATA MULMUD/10,21,28,25,6,25,28,21,10/
      DATA MULMUP/6,9,4,9,6/
      DATA IGROUP
C**   S EL. - KLWERT=0, KLWER1=1 (19TH COLUMN OF MASKE, ALL ZEROS,
C     I.E NO B-VALUES NO MATTER WHICH POINT GROUP IS GIVEN):
     1/19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
     1,19,19,19
C**   P EL. - KLWERT=1, KLWER1=2 (ONLY THREE CLASSES OF POINT GROUPS):
     2,18,17,17,17,17,17,17,17,17,17,18,17,17,17,18,17,17,17,17,18
     2,19,19,19
C**   D EL. - KLWERT=2, KLWER1=3 (11TH COLUMN IDENTICAL 10TH COLUMN!):
     3,9,10,12,11,10,11,12,13,11,11,9,13,12,10,9,13,12,10,11,16
     3,14,15,19
C**   F EL. - KLWERT=3, KLWER1=4:
     4,1,2,4,3,2,3,4,5,3,3,1,5,4,2,1,5,4,2,3,8
     4,6,7,19/
      DATA MASKE
C - F EL.:
     1/1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1
     3,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0
     5,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0
     7,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1
C - D EL.:
     1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
     3,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0
     5,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
     7,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
C - P EL.:
     9,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
C - S EL. AND FREE ION (SPH(ERICAL) <=> MASKE(,19)): (ALL =0 <=> NO B-VALUES APPEAR!)
     1,0,0,0,0,0,0,0,0,0,0,0/
C**   MASKED <=> NUMBER OF DIRECTION(S), FOR WHICH CHI IS CALCULATED,
C     IF IOPT1=1 (NRDIRE =1, =2 OR =3) (DIMENSION OF MASKED = 23,4 <=> NGROUP,KLWER1),
C     OR WHERE CHI WILL BE STORED, IF IOPT1.EQ.0!
C**   FOR IOPT1.GT.1 CHI WILL BE STORED (E.G.) IN CHI1(2) OR CHI1(3)!
      DATA MASKED
C**   FIRST LINE S EL., THEN P, D AND F EL.!
     1/1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1
     3,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1
     4,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1/
C
      OPEN(77,ERR=4577,FILE='OLDf7.DAT',STATUS='OLD')
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.I16)STOP 'J.NE.I'
      IF(K24.LT.20)STOP'K.LT20'
      IF(K24.NE.20.AND.K24.NE.24)STOP '24NE24'
      IF(K25.LT.K24)STOP'K.LT.K'
      IN24=K24
      IN25=K25
      LMN=0
 1921 CONTINUE
      WRITE(*,1920)
      WRITE(11,1920)
      IF(LMN.EQ.0)THEN
      READ(77,'(A13)',ERR=5588,END=3801)QTEXT0
      WRITE(*,5599)
      WRITE(11,5599)
 5599 FORMAT(
     1' ATTENTION: (PART OF) INPUT COMES FROM FILE OLDf7.DAT!')
      GOTO 4801
      ENDIF
 3801 READ(*,'(A13)',ERR=1921,END=4576)QTEXT0
      LMN=1
 4801 IF(QTEXT0(1:1).EQ.'9')THEN
      STOP
      ELSE IF(QTEXT0(1:6).EQ.'show c')THEN
      CALL SHOWC
      GOTO 1921
      ELSE IF(QTEXT0(1:6).EQ.'show w')THEN
      CALL SHOWW
      GOTO 1921
      ELSE IF(QTEXT0(1:6).EQ.'show m')THEN
      CALL SHOWM
      GOTO 1921
      ENDIF
      WRITE(7,1922)QTEXT0(1:1)
 1922 FORMAT(A1,' "NO WARRANTY"')
      WRITE(*,1298)
      WRITE(11,1298)
 1298 FORMAT(
     1/,' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF ATOMS OR'
     1,' IONS',/,' WITH NS**N, NP**N, ND**N OR NF**N ELECTRONIC'
     2,' CONFIGURATION,',/,' AND WITH 4F**N ELECTRONIC CONFIGURATION',
     3' WITH SPECIFIC GROUND TERM (2S+1)L,',/,' I.E. FOR THE CASE 4F**N'
     4,' THERE ARE TWO ESSENTIALLY DIFFERENT ROUTINES.',/)
C
      WRITE(11,3321)
 3320 WRITE(*,3321)
 3321 FORMAT(' INPUT 4 DIGITS: L VALUE OF 1 EL.(0..3), FOR MORE (OR LESS
     1) OUTPUT',/,' OF INTERMEDIATE VALUES (1(9)), OF MORE (OR LESS) TEX
     2T (1(9)),',/,' FOR MORE (OR LESS) POSSIBILITIES OF TESTS (1(9))')
      IF(LMN.EQ.0)THEN
      READ(77,'(4I1)',ERR=5588,END=3802)KLWERT,MOROUT,MORTEX,JATEST
      GOTO 4802
      ENDIF
 3802 READ(*,'(4I1)',ERR=3320,END=4576)KLWERT,MOROUT,MORTEX,JATEST
      LMN=1
 4802 IF(KLWERT.GT.3)KLWERT=3
      WRITE(7,3322)KLWERT,MOROUT,MORTEX,JATEST
 3322 FORMAT(4I1,' =KLWERT,...,...,...')
      WRITE(*,3323)KLWERT,MOROUT,MORTEX,JATEST
      WRITE(11,3323)KLWERT,MOROUT,MORTEX,JATEST
 3323 FORMAT(I2,3I1,' =KLWERT,...,...,...!!!!!!!!!')
      LESS=0
      IF(MOROUT.EQ.9)THEN
      MOROUT=0
      LESS=1
      ENDIF
      IF(MOROUT.GT.1)MOROUT=1
      LTS=0
      IF(JATEST.EQ.9)THEN
      JATEST=0
      LTS=1
      ENDIF
      IF(JATEST.GT.1)JATEST=1
      IF(MORTEX.EQ.9)MORTEX=-1
      IF(MORTEX.GT.1)MORTEX=1
      IF(MORTEX.GT.0)THEN
      WRITE(*,6232)
      WRITE(11,6232)
 6232 FORMAT(' "4 DIGITS" MEANS "FORTRAN FORMAT 4I1".'
     1,/,' !!!!!!!!! MEANS "ALSO TO FILE fort.7".')
      ENDIF
      IF(MOROUT.NE.0.OR.LESS.NE.0.OR.JATEST.NE.0.OR.LTS.NE.0.OR.MORTEX.
     1GT.0)THEN
      WRITE(*,6233)MOROUT,LESS,JATEST,LTS,MORTEX
      WRITE(11,6233)MOROUT,LESS,JATEST,LTS,MORTEX
 6233 FORMAT(' RESULTING VALUES FOR MOROUT,LESS,JATEST,LTS,MORTEX:',5I2)
      ENDIF
      KLWER1=KLWERT+1
C
      JAWIGN=0
      IF(KLWERT.EQ.3)THEN
      IF(LTS.EQ.0)THEN
      WRITE(11,560)
 3319 WRITE(*,560)
  560 FORMAT(' YOU MAY CHOOSE THE SPECIAL ROUTINE FOR 4F**N ELECTRONIC'
     1,' CONFIGURATION',/,' WITH SPECIFIC GROUND TERM (2S+1)L (OR WITH '
     2,' SPECIFIC J VALUE IN ADDITION):',/,' INPUT 1 FOR YES')
C**   SUBROUTINE (WIGNER-)ECKART - THIS IS ALSO FOR D EL.-TESTS, BUT THEN
C     F EL. HAVE TO BE CHOSEN ABOVE AND (OF COURSE) THIS SUBROUTINE HERE.
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3803)JAWIGN
      GOTO 4803
      ENDIF
 3803 READ(*,'(I1)',ERR=3319,END=4576)JAWIGN
      LMN=1
 4803 WRITE(7,561)JAWIGN
  561 FORMAT(I1,' =JAWIGN (SPEC.ROUTINE)')
      WRITE(*,562)JAWIGN
      WRITE(11,562)JAWIGN
  562 FORMAT(I2,' =JAWIGN (SPEC.ROUTINE)!!!!!!!!!')
      IF(JAWIGN.NE.0)THEN
      WRITE(*,1299)
      WRITE(11,1299)
 1299 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF 4F BLOCK'
     1,' ATOMS OR IONS',/,' WITH 4F**N ELECTRONIC CONFIGURATION WITH',
     1' SPECIFIC GROUND TERM (2S+1)L;',/,' SPIN-ORBIT COUPLING'
     1,' CONSTANT MAY BE 10**6 FOR SPECIFIC J VALUE',/,' IN ADDITION'
     1,' (A SPECIAL OPTION IN SUBROUTINE ECKART):'
     1,/,' FOR INSTANCE ALL (3+) IONS OF THE FOLLOWING LANTHANIDES:'
     1,/,' CE, PR, ND, PM, SM, EU, GD, TB, DY, HO, ER, TM, YB.',/)
      ENDIF
C**   ENDIF FOLLOWING FOR "IF(LTS.EQ.0)THEN"!:
      ENDIF
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,1289)
      WRITE(11,1289)
 1289 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF F BLOCK'
     2,' ATOMS OR IONS',/,' WITH NF**N ELECTRONIC CONFIGURATION,'
     3,' SIMILAR TO D BLOCK ATOMS OR IONS!',/)
      ENDIF
      ELSE IF(KLWERT.EQ.2)THEN
      WRITE(*,1297)
      WRITE(11,1297)
 1297 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF D BLOCK'
     1,' ATOMS OR IONS',/,' WITH ND**N ELECTRONIC CONFIGURATION:'
     1,' THE ATOMS OR IONS WILL BE LISTED,',/,' IF ONE CHOOSES DATA'
     1,' FOR RACAH PARAMETERS AND SPIN-ORBIT COUPLING CONSTANTS',/
     1,' FROM THE BOOK BY GRIFFITH LATER ON.',/)
      ENDIF
C**   ENDIF BEFORE FOR "IF(KLWERT.EQ.3)THEN - ELSE IF(KLWERT.EQ.2)"!:
C** BREAK OF ALL IF's!
      WRITE(11,768)
 7689 WRITE(*,768)
  768 FORMAT(' THERE'
     1,' ARE 23 DIFFERENT POSSIBILITIES OF INPUT OF (POINT) GROUPS:',
     2/,' D2H,D3H,D4H,D5H,D6H,D-INF-H,D2D,D3D,D4D,D6D',/,' D2,D3,D4',
     3',D6,C2V,C3V,C4V,C6V,C-INF-V,???,CUB(I),CUB(II),O(3)',/,' INPUT ',
     4'IN I2 THE (CONSECUTIVE) NUMBER (0 => 21 <=> CUB-4FOLD ROT.AXIS)')
      IF(MORTEX.GT.0)THEN
      WRITE(*,769)
      WRITE(11,769)
  769 FORMAT(' C-INF-V MEANS: AXIAL WITH VERTICAL PLANES;',
     1' ??? MEANS: "ALL B-VALUES"',/,' ((MORE THAN) "REAL" PART OF C3)')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3804)NGROUP
      GOTO 4804
      ENDIF
 3804 READ(*,'(I2)',ERR=7689,END=4576)NGROUP
      LMN=1
 4804 IF(NGROUP.LT.1.OR.NGROUP.GT.23)NGROUP=21
      WRITE(7,771)NGROUP
  771 FORMAT(I2,' =NGROUP (POINT GROUP)')
      WRITE(*,772)NGROUP
      WRITE(11,772)NGROUP
  772 FORMAT(I3,' =NGROUP (POINT GROUP)!!!!!!!!!')
      IF(NGROUP.EQ.3.OR.NGROUP.EQ.8.OR.NGROUP.EQ.21.OR.NGROUP.EQ.22)THEN
      WRITE(*,770)
      WRITE(11,770)
  770 FORMAT(' SOME USEFUL HINTS FOR THE GROUP CHOSEN: CHOOSE "MORTEX"')
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,1221)
      WRITE(11,1221)
 1221 FORMAT(' B40=21.DQ FOR CUB(I); NEG. B40 FOR CUB(I), IF 4-FOLD COOR
     1D.;',/,' FOR THE TETRAG. CASE, B44=SQRT(5./14.)*B40 => CUB(I), IF 
     2B20=0 (FOR D EL.;',/,' B64=-SQRT(3.5)*B60);',/,' FOR THE TRIG. CAS
     3E, B43=-SQRT(10./7.)*B40 => CUB(II), IF B20=0 (FOR D EL.;',/,' B63
     4=SQRT(210.)*B60/24., B66=SQRT(231.)*B60/24.)',/,' (IT IS THEN B40-
     5CUB(II)=-(2/3)*B40-CUB(I) (FOR D EL.; B60-CUB(II)=',/,' (16/9)*B60
     6-CUB(I)!)')
      ENDIF
      KOLUMN=IGROUP(NGROUP,KLWER1)
      DO 759 I=1,11
      KMASKE(I)=0
      IF(MASKE(I,KOLUMN).EQ.0)KMASKE(I)=1
  759 CONTINUE
C**   IN ADDITION THERE ARE SOME FIXED B-VALUES IN CUBIC SYMMETRY!
C**   PRE-OCCUPATION (REMAINS NEARLY ALWAYS):
      NRDIRE=MASKED(NGROUP,KLWER1)
C**   NRDIRE = No. OF DIRECTIONS CONCERNED
      WRITE(*,760)
      WRITE(11,760)
  760 FORMAT(' FROM THE FOLLOWING LIST OF POSSIBLE B-VALUES THOSE'
     1,' MARKED WITH 1 ARE EXCLUDED:',/
     2,' B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66 ')
      WRITE(*,'(11I5)')(KMASKE(I),I=1,11)
      WRITE(11,'(11I5)')(KMASKE(I),I=1,11)
C
      JAVANV=0
      IOPT1=0
      IOPT2=0
      IOPT3=0
      IOPT4=1
      IF(LTS.NE.0)THEN
C
      WRITE(11,605)
  604 WRITE(*,605)
  605 FORMAT(/,' INPUT IN I1 IOPT2=1 FOR (SYMM.)DIMER OR =2 FOR DIMER CO
     1MB. MODEL FOR F EL.',/,' (IOPT2=0 FOR (SINGLE) ION)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3805)IOPT2
      GOTO 4805
      ENDIF
 3805 READ(*,'(I1)',ERR=604,END=4576)IOPT2
      LMN=1
 4805 IF(IOPT2.GT.2)IOPT2=2
      WRITE(7,606)IOPT2
  606 FORMAT(I1,' =IOPT2 ("DIMER")')
      WRITE(*,607)IOPT2
      WRITE(11,607)IOPT2
  607 FORMAT(I2,' =IOPT2 ("DIMER")!!!!!!!!!')
      IF(IOPT2.EQ.2.AND.KLWERT.NE.3)THEN
      IOPT2=1
      WRITE(*,652)
      WRITE(11,652)
      ENDIF
      IF(NRDIRE.NE.1)THEN
      WRITE(11,6522)
 6523 WRITE(*,6522)
 6522 FORMAT(' INPUT IN I1 IOPT1=1 FOR MEAN VALUE OF CHI WITH CHI CALCUL
     1ATED FOR',/,' 2 OR 3 DIRECTIONS (IOPT1=0 FOR 1 (MEAN) DIRECTION)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3806)IOPT1
      GOTO 4806
      ENDIF
 3806 READ(*,'(I1)',ERR=6523,END=4576)IOPT1
      LMN=1
 4806 IF(IOPT1.GT.1)IOPT1=1
      WRITE(7,6524)IOPT1
 6524 FORMAT(I1,' =IOPT1 (1 OR MORE DIR.)')
      WRITE(*,6525)IOPT1
      WRITE(11,6525)IOPT1
 6525 FORMAT(I2,' =IOPT1 (1 OR MORE DIR.)!!!!!!!!!')
      ENDIF
      I=1
      IF(IOPT1.EQ.1)I=NRDIRE
      IF(NRDIRE.NE.1)THEN
      WRITE(*,706)NRDIRE,I
      WRITE(11,706)NRDIRE,I
      ENDIF
C
      ELSE IF(LTS.EQ.0)THEN
C
      WRITE(11,650)
 6501 WRITE(*,650)
  650 FORMAT(/,' INPUT IN 3I1: "JAVANV(LECK)"=1 FOR FORMULA OF VAN VLECK
     1,',/,' IOPT1=0...3  FOR DIRECTION(S) OF FIELD, MOSTLY =0 FOR ONE (
     2MEAN) DIRECTION',/,' OR =1 FOR MEAN VALUE OF CHI CALCULATED FOR 1,
     32,3 DIRECTION(S)',/,' (DIRECTION AT WILL INCL. Y-DIRECTION: =2, NO
     4 Y-DIR.: =3)',/,' (IOPT1=0 AND IOPT1=1 ARE NOT ALWAYS REALLY DIFFE
     5RENT!)',/,' AND IOPT2=0...2 FOR (SINGLE) ION/ (SYMM.)DIMER/ COMB.M
     6OD. FOR F EL.')
      IF(MORTEX.GT.0)THEN
      WRITE(*,651)
      WRITE(11,651)
  651 FORMAT(
     1' (THERE ARE 12(!) DIFFERENT OPTIONS IOPT12 IN SUBROUTINE SELECT,'
     2,/,' WHICH RESULT FROM 4*3=12 INPUT-OPTIONS, AND THE LATTER ARE:'
     3,/,' (IOPT1=:) ONE (MEAN) DIRECTION (=0), MEAN VALUE OF CHI WITH',
     4/,' CHI CALCULATED FOR 1,2,3 DIRECTION(S) (=1), DIRECTION AT WILL'
     5,/,' (WITH Y: =2; WITHOUT Y: =3), - (IOPT1=0 AND IOPT1=1 ARE NOT'
     6,/,' ALWAYS REALLY DIFFERENT!) - ,'
     7,/,' (IOPT2=:) SINGLE ION (=0), (SYMM.)DIMER (=1), DIMER COMB.MOD.
     8',/,' FOR F EL. (=2)! (IOPT12=3*IOPT1+IOPT2+1=1...12))')
      ENDIF
C
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3807)JAVANV,IOPT1,IOPT2
      GOTO 4807
      ENDIF
 3807 READ(*,'(3I1)',ERR=6501,END=4576)JAVANV,IOPT1,IOPT2
      LMN=1
 4807 IF(IOPT1.GT.3)IOPT1=3
      IF(IOPT2.GT.2)IOPT2=2
      WRITE(7,653)JAVANV,IOPT1,IOPT2
  653 FORMAT(3I1,' =JAVANV,IOPT1,IOPT2')
      WRITE(*,654)JAVANV,IOPT1,IOPT2
      WRITE(11,654)JAVANV,IOPT1,IOPT2
  654 FORMAT(I2,2I1,' =JAVANV,IOPT1,IOPT2!!!!!!!!!')
      IF(IOPT2.EQ.2.AND.KLWERT.NE.3)THEN
      IOPT2=1
      WRITE(*,652)
      WRITE(11,652)
  652 FORMAT(' COMB. MODEL POSS. ONLY FOR F EL.: IOPT2 => 1')
      ENDIF
      IF(IOPT1.LE.1)THEN
      I=1
      IF(IOPT1.EQ.1)I=NRDIRE
      WRITE(*,706)NRDIRE,I
      WRITE(11,706)NRDIRE,I
  706 FORMAT(' DIRECTION(S) CONCERNED AND TO BE CALCULATED:',2I2)
      ENDIF
      IF(IOPT1.EQ.2)THEN
C**   ZXY DIRECTIONS:
      WRITE(11,4711)
 1147 WRITE(*,4711)
 4711 FORMAT(
     1' INPUT 3 DIRECTIONCOS**2 (Z,X,Y) IN 3E8.0 (INCL. FACT. AT WILL)',
     2/,' (A SIGN IS TRANSFERRED TO THE RESP. ROOT OF THE SQUARE!)')
      IF(LMN.EQ.0)THEN
      READ(77,1146,ERR=5588,END=3808)(DIRECZ(I),I=1,3)
      GOTO 4808
      ENDIF
 3808 READ(*,1146,ERR=1147,END=4576)(DIRECZ(I),I=1,3)
      LMN=1
 4808 WRITE(*,1146)(DIRECZ(I),I=1,3)
      WRITE(7,1146)(DIRECZ(I),I=1,3)
 1146 FORMAT(3D8.2)
      IF(DIRECZ(1).EQ.ZERO.AND.DIRECZ(2).EQ.ZERO.AND.DIRECZ(3).EQ.ZERO)
     1THEN
      DIRECZ(1)=ONE
      DIRECZ(2)=ONE
      DIRECZ(3)=ONE
      ELSE
      DO 7411 I=1,3
      IF(DIRECZ(I).LT.ZERO)THEN
      MINPLS(I)=-1
      DIRECZ(I)=DABS(DIRECZ(I))
      ENDIF
 7411 CONTINUE
      ENDIF
      WRITE(*,1246)(DIRECZ(I),I=1,3)
      WRITE(11,1246)(DIRECZ(I),I=1,3)
 1246 FORMAT(' 3 DIRECTIONCOS**2 (Z,X,Y) INCL. FACT. AT WILL =',3D16.8)
      IF(MINPLS(1).LT.0.OR.MINPLS(2).LT.0.OR.MINPLS(3).LT.0)THEN
      WRITE(*,7413)(MINPLS(I),I=1,3)
      WRITE(11,7413)(MINPLS(I),I=1,3)
 7413 FORMAT(' 3 SIGNS OF THE DIRECTIONCOS ITSELF ARE:',3I3)
      ENDIF
      FNENN=DIRECZ(1)+DIRECZ(2)+DIRECZ(3)
      DIRECZ(1)=DBLE(MINPLS(1))*DSQRT(DIRECZ(1)/FNENN)
      DIRECZ(2)=DBLE(MINPLS(2))*DSQRT(DIRECZ(2)/FNENN)
      DIRECZ(3)=DBLE(MINPLS(3))*DSQRT(DIRECZ(3)/FNENN)
      VLSTNG(1)=DIRECZ(1)
      VLSTNG(2)=DIRECZ(2)
      VLSTNG(3)=DIRECZ(3)
      ENDIF
      IF(IOPT1.EQ.3)THEN
C**   ZX DIRECTIONS:
      DIRECZ(3)=ZERO
      WRITE(11,4712)
 2247 WRITE(*,4712)
 4712 FORMAT(
     1' INPUT 2 DIRECTIONCOS**2 (Z,X) IN 2E8.0 (INCL. FACT. AT WILL)',
     2/,' (A SIGN IS TRANSFERRED TO THE RESP. ROOT OF THE SQUARE!)')
      IF(LMN.EQ.0)THEN
      READ(77,1146,ERR=5588,END=3809)(DIRECZ(I),I=1,2)
      GOTO 4809
      ENDIF
 3809 READ(*,1146,ERR=2247,END=4576)(DIRECZ(I),I=1,2)
      LMN=1
 4809 WRITE(*,1146)(DIRECZ(I),I=1,2)
      WRITE(7,1146)(DIRECZ(I),I=1,2)
      IF(DIRECZ(1).EQ.ZERO.AND.DIRECZ(2).EQ.ZERO)
     1THEN
      DIRECZ(1)=ONE
      DIRECZ(2)=TWO
      ELSE
      DO 7412 I=1,2
      IF(DIRECZ(I).LT.ZERO)THEN
      MINPLS(I)=-1
      DIRECZ(I)=DABS(DIRECZ(I))
      ENDIF
 7412 CONTINUE
      ENDIF
      WRITE(*,2248)(DIRECZ(I),I=1,2)
      WRITE(11,2248)(DIRECZ(I),I=1,2)
 2248 FORMAT(' 2 DIRECTIONCOS**2 (Z,X) INCL. FACT. AT WILL =',2D16.8)
      IF(MINPLS(1).LT.0.OR.MINPLS(2).LT.0)THEN
      WRITE(*,7414)(MINPLS(I),I=1,2)
      WRITE(11,7414)(MINPLS(I),I=1,2)
 7414 FORMAT(' 2 SIGNS OF THE DIRECTIONCOS ITSELF ARE:',2I3)
      ENDIF
      FNENN=DIRECZ(1)+DIRECZ(2)
      DIRECZ(1)=DBLE(MINPLS(1))*DSQRT(DIRECZ(1)/FNENN)
      DIRECZ(2)=DBLE(MINPLS(2))*DSQRT(DIRECZ(2)/FNENN)
      VLSTNG(1)=DIRECZ(1)
      VLSTNG(2)=DIRECZ(2)
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(LTS.NE.0)THEN - ELSE IF(LTS.EQ.0)THEN!
C** BREAK OF ALL IF'S!
      ABST=ZERO
      ISTZXY=0
      IF(IOPT2.NE.0.AND.LTS.EQ.0)THEN
      WRITE(11,764)
 7641 WRITE(*,764)
  764 FORMAT(' IOPT2>0: IF'
     1,' MAGNETIC DIPOL DIPOL INTERACTION WILL BE TAKEN INTO',/,' ACCOUN
     2T, INPUT IN F7.2 THE DISTANCE OF THE TWO IONS (IN PM, E.G.422.5),'
C05     3/,' (WARNING: ANISOTROPIC PART IS CALCULATED IN Z-DIRECTION,',/,
C05     3' BUT X- OR Y-DIRECTION ARE ALSO IMPLEMENTED: CHOOSE "TESTS"!)',/,
     3,/,' HOWEVER IN FRONT OF IT ONE OF THE LETTERS Z, X, OR Y.',/,
     3' (IF ANISOTROPIC PART IS CALCULATED, THEN IN THIS DIRECTION)',/,
     4' (A NEGATIVE DISTANCE => ANISOTROPIC PART IS SET TO ZERO!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A1,F7.2)',ERR=5588,END=3810)XYZ,ABST
      GOTO 4810
      ENDIF
 3810 READ(*,'(A1,F7.2)',ERR=7641,END=4576)XYZ,ABST
      LMN=1
 4810 WRITE(7,763)XYZ,ABST
  763 FORMAT(A1,F7.2,' ZXY & ABST IN DIMER')
      WRITE(*,7763)XYZ,ABST
      WRITE(11,7763)XYZ,ABST
 7763 FORMAT(A1,F9.2,' ZXY & ABST IN DIMER!!!!!!!!!')
      IF(XYZ.EQ.'Z')ISTZXY=1
      IF(XYZ.EQ.'X')ISTZXY=2
      IF(XYZ.EQ.'Y')ISTZXY=3
      IF(ISTZXY.NE.0)VLSTNG(4)=ABST
C05      IF(ABST.NE.ZERO.AND.NRDIRE.EQ.1)THEN
      IF(ISTZXY.NE.0.AND.NRDIRE.EQ.1)THEN
      NRDIRE=2
      WRITE(*,765)
      WRITE(11,765)
  765 FORMAT(' BECAUSE MAGNETIC DIPOL DIPOL INTERACTION IS TAKEN INTO AC
     1COUNT,',/,' No. OF DIRECTIONS BECOMES 2 INSTEAD OF 1!')
      ENDIF
C05      IF(JATEST.NE.0.AND.ABST.NE.ZERO.AND.NRDIRE.EQ.2)THEN
      IF((ISTZXY.EQ.2.OR.ISTZXY.EQ.3).AND.NRDIRE.EQ.2)THEN
      WRITE(11,7655)
 7642 WRITE(*,7655)
 7655 FORMAT(' IF MAGNETIC DIPOL DIPOL INTERACTION IS IN X- OR IN Y-',
     1'DIRECTION,',/,' 3 DIRECTIONS ARE NECESSARY!: NRDIRE => 3!')
C05     2' PUT IN 1 IN I1 FOR THESE!')
C      IF(LMN.EQ.0)THEN
C      READ(77,'(I1)',ERR=5588,END=3910)JA3
C      GOTO 4911
C      ENDIF
C 3910 READ(*,'(I1)',ERR=7642,END=4576)JA3
C      LMN=1
C 4911 WRITE(7,7633)JA3
C 7633 FORMAT(I1,' JA3<=>3 DIR.')
C      WRITE(*,7733)JA3
C      WRITE(11,7733)JA3
C 7733 FORMAT(I2,' Ja3<=>3 DIR.!!!!!!!!!')
C05      IF(JA3.NE.0)NRDIRE=3
      NRDIRE=3
      ENDIF
      ENDIF
C**   BREAK OF ALL IFS!
C***********************************************************************
      WRITE(11,391)
   10 WRITE(*,391)
  391 FORMAT(/,' WHERE ARE THE VALUES FOR: "TO BE FITTED YES(0)/NO(1)",'
     1,/,' TEMP. IN K, CHI-MEASURED IN SI, SIGMA, FIELD IN TESLA?',
     2/,' "RETURN" FOR CHIINP.DAT; H OR h FOR "H ATOM" <=> NO INPUT HERE
     3!',/,' INPUT OF "CGS OR cgs" (E.G. CGSCHI.DAT) <=> CHI-MEASURED IN
     1 CGS UNITS!',/,' INPUT OF 888 FOR "STOP"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3811)DATEI
      GOTO 4811
      ENDIF
 3811 READ(*,'(A15)',ERR=29,END=4576)DATEI
      LMN=1
 4811 IF(DATEI.EQ.'               ')DATEI='CHIINP.DAT     '
      WRITE(7,301)DATEI
  301 FORMAT(A15,' (OF CHI ..)')
      WRITE(*,30)DATEI
      WRITE(11,30)DATEI
   30 FORMAT(' NAME READ IN WAS:',1X,A15,'!!!!!!!!!')
      IF(DATEI.EQ.'888            ')STOP '888'
      QUIVAR='(I1,F7.2,3D17.6)'
      IF(DATEI.EQ.'H              '.OR
     1.DATEI.EQ.'h              ')THEN
C**   FOR HYDROGEN (MU-EFF./MU-BOHR=SQRT(3.0)):
      NDATA=71
      IF(LESS.EQ.0)THEN
      WRITE(11,3929)
 3930 WRITE(*,3929)
 3929 FORMAT(
     1' HOW MANY DIFFERENT TEMPERATURES? INPUT IN I2 (0 OR >71 =>71)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3812)NDATA
      GOTO 4812
      ENDIF
 3812 READ(*,'(I2)',ERR=3930,END=4576)NDATA
      LMN=1
 4812 IF(NDATA.LE.0.OR.NDATA.GT.71)NDATA=71
      WRITE(7,3931)NDATA
 3931 FORMAT(I2,' =NDATA (OF H-ATOM)')
      WRITE(*,3932)NDATA
      WRITE(11,3932)NDATA
 3932 FORMAT(I3,' =NDATA (OF H-ATOM)!!!!!!!!!')
      ENDIF
      NDATAP=NDATA
      DO 3012 I=1,NDATA
      CHIMEA(I)=3.0D0/(797.730D0**2*TEMPIK(I))
 3012 CONTINUE
      GOTO 3030
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,392)
      WRITE(11,392)
  392 FORMAT(' THERE IS NO NEED TO FIT ANY VALUES! THE STANDARD'
     1,' INPUT HERE IS CHI',/,' IN SI UNIT M**3/MOL. THE INDIVIDUAL'
     2,' STANDARD DEVIATIONS SIGMA CANNOT BE ZERO'
     3,/,' AND ARE E.G. SET TO ONE. FIRST LINE MUST BE TEXT!')
      ENDIF
      WRITE(11,221)
 2212 WRITE(*,221)
  221 FORMAT(' "RETURN",'
     1,' IF FORMAT(I1,F7.2,3D17.6), OR INPUT "FORMAT" IN A50')
      IF(LMN.EQ.0)THEN
      READ(77,'(A50)',ERR=5588,END=3813)QUIVAQ
      GOTO 4813
      ENDIF
 3813 READ(*,'(A50)',ERR=2212,END=4576)QUIVAQ
      LMN=1
 4813 IF(QUIVAQ.NE.'                  ')QUIVAR=QUIVAQ
      WRITE(7,'(A50)')QUIVAR
      WRITE(*,5050)QUIVAR
      WRITE(11,5050)QUIVAR
 5050 FORMAT(1H ,A50,'!!!!!!!!!')
      OPEN(14,ERR=31,FILE=DATEI,STATUS='OLD')
      GOTO 35
   29 PRINT*,' ERROR WHILE READING!'
      GOTO 10
   31 PRINT*,' DATA FILE NOT FOUND'
      GOTO 10
   32 PRINT*,' ERROR(S) IN DATA FILE'
      GOTO 10
   35 CONTINUE
C
      N=1
      NMIN=0
      READ(14,63,ERR=32)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,'HEADER:',1X,60A1)
C
   50 CONTINUE
      IF(N.GT.601)STOP '.GT.601'
      READ(14,QUIVAR,END=70,ERR=32)
     1LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
      IF(LOWDAT(N).EQ.0)NMIN=NMIN+1
      N=N+1
      GOTO 50
C**   MAXIMUM OF DATA READ IN:
   70 NDATAP=N-1
      IF(NDATAP.LE.0)STOP 'NO DATA'
C**   TO BE FITTED (MAY BE 0!):
      NDATA=NMIN
      CLOSE(14)
C
 3030 CONTINUE
      WRITE(*,6588)
      WRITE(11,6588)
 6588 FORMAT(' HERE THE FIRST MAX. 3 ROWS OF VALUES ("NOT", TEMPIK, CHI,
     1 SIGMA, FIELD)')
      IDREI=3
      IF(NDATAP.LT.3)IDREI=NDATAP
C**   BUT FIRSTLY:
      IF(DATEI(1:3).EQ.'CGS'.OR.DATEI(1:3).EQ.'cgs')THEN
      WRITE(*,5757)
      WRITE(11,5757)
 5757 FORMAT(
     1' CHI VALUES PUT IN WILL BE CHANGED TO SUCH IN SI UNITS!')
      DO 5758 I=1,NDATAP
      IF(TEMPIK(I).GT.ZERO)CHIMEA(I)=CHIMEA(I)/VPREZ6
 5758 CONTINUE
      ENDIF
C
      DO 2022 I=1,IDREI
      WRITE(*,QUIVAR)LOWDAT(I),TEMPIK(I),CHIMEA(I),SIGMA0(I),TESDAT(I)
      WRITE(11,QUIVAR)LOWDAT(I),TEMPIK(I),CHIMEA(I),SIGMA0(I),TESDAT(I)
 2022 CONTINUE
C
      IF(MORTEX.GE.0.AND.NDATAP.GT.3)THEN
      WRITE(11,7575)
   75 WRITE(*,7575)
 7575 FORMAT(' NO FURTHER VALUES TO FILE 11 AND/OR TERMINAL (0), VALUES 
     1(ONLY) TO',/,' FILE 11 (1), TO FILE 11 & TERMINAL (2), (ONLY) TO T
     2ERMINAL (3)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3814)JANO
      GOTO 4814
      ENDIF
 3814 READ(*,'(I1)',ERR=75,END=4576)JANO
      LMN=1
 4814 WRITE(7,7574)JANO
 7574 FORMAT(I1,' =JANO(OUTPUT)')
      WRITE(*,7573)JANO
      WRITE(11,7573)JANO
 7573 FORMAT(I2,' =JANO(OUTPUT)!!!!!!!!!')
      IF(JANO.EQ.0)GOTO 7576
      DO 7577 N=4,NDATAP
      IF(JANO.EQ.2.OR.JANO.EQ.3)
     1WRITE(*,QUIVAR)LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
      IF(JANO.EQ.1.OR.JANO.EQ.2)
     1WRITE(11,QUIVAR)LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
 7577 CONTINUE
      ENDIF
 7576 CONTINUE
C
      JAFELD=1
      SUMSIG=ZERO
      NOSIGM=0
      DO 7578 I=1,NDATAP
      IF(TESDAT(I).EQ.ZERO.AND.TEMPIK(I).GT.ZERO)JAFELD=0
      IF(LOWDAT(I).NE.0)GOTO 7578
C
      IF(SIGMA0(I).LE.ZERO)THEN
      IF(NOSIGM.EQ.0)THEN
      WRITE(*,7558)
      WRITE(11,7558)
 7558 FORMAT(' (SIGMA.LE.ZERO) => SIGMA =ONE!')
      ENDIF
      NOSIGM=1
      SIGMA0(I)=ONE
      ENDIF
      SUMSIG=SUMSIG+ONE/SIGMA0(I)**2
C
 7578 CONTINUE
      IF(NDATA.EQ.0)SUMSIG=ONE
      IF(NDATA.NE.0)SUMSIG=DSQRT(SUMSIG/DBLE(NDATA))
C**   SUMSIG NOW =ONE, IF ALL SIGMA =ONE! - NOW NORMALIZATION OF SIGMA!:
      DO 7579 I=1,NDATAP
      SIGMA(I)=ZERO
      IF(LOWDAT(I).NE.0)GOTO 7579
      SIGMA(I)=SIGMA0(I)*SUMSIG
 7579 CONTINUE
C**   NO COMPUTATION POSSIBLE WITHOUT MAGNETIC FIELD, IF NOT "VANVLECK"!:
      IF(JAVANV.EQ.0.AND.(JATEST.NE.0.OR.JAFELD.EQ.0))THEN
      WRITE(11,7597)JAFELD
 7598 WRITE(*,7597)JAFELD
 7597 FORMAT(' THE MAGNETIC FIELD: MUST BE (IF 0) OR MAY BE (IF 1) CHANG
     1ED:',I2,/,' INPUT IN E14.6 (ONE AND THE SAME FOR ALL CASES) FIELD 
     2IN TESLA')
      IF(LMN.EQ.0)THEN
      READ(77,'(D14.6)',ERR=5588,END=3815)TESLAN
      GOTO 4815
      ENDIF
 3815 READ(*,'(D14.6)',ERR=7598,END=4576)TESLAN
      LMN=1
 4815 WRITE(*,7599)TESLAN
      WRITE(11,7599)TESLAN
      WRITE(7,7599)TESLAN
 7599 FORMAT(D14.6,' =TESLAN')
      IF(TESLAN.EQ.ZERO)THEN
      WRITE(*,7600)
      WRITE(11,7600)
 7600 FORMAT(' FIELD(S) NOT CHANGED!')
      ELSE
      JAFELD=1
      DO 7587 I=1,NDATAP
      TESDAT(I)=TESLAN
 7587 CONTINUE
      VLSTNG(5)=TESLAN
      ENDIF
      ENDIF
      IF(JAFELD.EQ.0.AND.JAVANV.EQ.0)STOP 'NOFELD'
C**   BREAK OF ALL IFS!
C-----------------------------------------------------------------------
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,
     1' IS THE NAME OF THE NEXT FILE BWYBIN.DAT IN FORMAT(I2,D16.8)?',
     2/,' "RETURN" OR GIVE ITS NAME! (8 => STOP, H OR h "NO INPUT FROM F
     3ILE")')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3816)QMPC
      GOTO 4816
      ENDIF
 3816 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4816 IF(QMPC.EQ.'               ')QMPC='BWYBIN.DAT     '
      WRITE(7,5163)QMPC
 5163 FORMAT(A15,' (BWYBIN)')
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,' (BWYBIN)!!!!!!!!!')
      IF(QMPC.EQ.'8              ')STOP '8'
      IF(QMPC.EQ.'h              '.OR.
     1QMPC.EQ.'H              ')THEN
      WRITE(11,5162)
      WRITE(*,5162)
 5162 FORMAT(' h OR H FOR H ATOM OR TESTS: ZERO''s ONLY!')
      IN24=20
      IN25=20
      GOTO 3338
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,5160)
      WRITE(11,5160)
 5160 FORMAT(/,' EACH ROW OF THIS FILE (FIRST ROW MUST BE TEXT!):'
     1,/,' "TO BE FITTED YES(01)/NO(00)" (THERE IS NO NEED TO FIT'
     1,' ANY COEFFICIENTS!),',/,' AND COEFF. OF LIG. FIELD (WYBOURNE C',
     2'OEFFICIENTS SHOULD BE PREFERRED,',/,' BUT OTHERS ARE POSS. TOO!):
     3 11 SUCH COEFF. PLUS 9 FURTHER ROWS (B20,B22,',/,' B40,B42,B43,'
     4,'B44,B60,B62,B63,B64,B66+J,LAM,THET,CHI0,F,MOLF,MIX,...) ARE NEED
     5ED!',/,' (09/08 INSTEAD OF 01/00 AS SPECIAL OPTION FOR B43,B44,B63
     6,B64,B66: ',/,' INPUT MEANS "FACTOR" IN E.G. B44=B40*SQRT(5./14.)*
     7FACTOR)')
      WRITE(*,5159)
      WRITE(11,5159)
 5159 FORMAT(' J <=> HEISENBERG COUPLING IN A (SYMMETRICAL) DIMER'
     2,/,' LAM <=> MOLECULAR FIELD PARAMETER'
     3,/,' THET <=> THETA OF CURIE WEISS LAW'
     4,/,' CHI0 <=> CHI DIAMAGNETIC',
     5/,' F <=> CORR. OF WEIGHT OF SAMPLE MEASURED CHI COMES FROM
     6',/,' MOLF <=> PARAMETER OF MOLECULAR FIELD THEORY OF WEISS'
     6,/,' (FIELD WILL BE ITERATED UNTIL CONVERGENCE HAS ACHIEVED)',/
     7,' MIX/CROSSOVR <=> A MIXTURE OF SINGLE ION AND DIMER OR',/
     7,' DENOMINATOR OF "SPIN CROSSOVER" (ONLY D EL.!),',/
     8,' ENTHALPY <=> ENTHALPY FOR "SPIN CROSSOVER",',/
     9,' ENTROPY <=> ENTROPY FOR "SPIN CROSSOVER".')
      ENDIF
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(' CRYSTAL FIELD PARAMETERS ETC. ARE READ IN FROM ',A15)
      OPEN(14,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(14,63,ERR=33)(QTEXT1(I),I=1,60)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
      IF(NGROUP.NE.20)IN24=20
      IF(NGROUP.NE.20)IN25=20
      DO 8581 N=1,IN25
      READ(14,61,END=33,ERR=33)INBWWW(N),BWWWIN(N)
   61 FORMAT(1X,I1,D16.8)
 8581 CONTINUE
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(' THE VALUES READ IN ARE:')
      WRITE(*,6161)(INBWWW(I),BWWWIN(I),I=1,IN25)
      WRITE(11,6161)(INBWWW(I),BWWWIN(I),I=1,IN25)
 6161 FORMAT(3(I3,D16.8))
      CLOSE(14)
 3338 CONTINUE
      IF(NDATA.EQ.0)THEN
      JANO0=0
      IF(LTS.EQ.0)THEN
      WRITE(11,3344)
 3342 WRITE(*,3344)
 3344 FORMAT(' NDATA=0 => INBWWW(I)=0/=8? INPUT YES(0)/NO IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3817)JANO0
      GOTO 4817
      ENDIF
 3817 READ(*,'(I1)',ERR=3342,END=4576)JANO0
      LMN=1
 4817 WRITE(11,3340)JANO0
      WRITE(*,3340)JANO0
 3340 FORMAT(I2,' =JANO0(0 DATA)!!!!!!!!!')
      WRITE(7,3343)JANO0
 3343 FORMAT(I1,' =JANO0(0 DATA)')
      ENDIF
      IF(JANO0.EQ.0)THEN
      DO 3345 I=1,11
      IF(INBWWW(I).LT.8)INBWWW(I)=0
      IF(INBWWW(I).GE.8)INBWWW(I)=8
 3345 CONTINUE
      DO 3354 I=12,20
      INBWWW(I)=0
 3354 CONTINUE
      IF(IN24.GT.20)THEN
      DO 3346 I=21,IN24
      IF(INBWWW(I).LT.8)INBWWW(I)=0
      IF(INBWWW(I).GE.8)INBWWW(I)=8
 3346 CONTINUE
      IN241=IN24+1
      DO 3355 I=IN241,IN25
      INBWWW(I)=0
 3355 CONTINUE
      ENDIF
      ENDIF
      ENDIF
      GOTO 3334
 3331 PRINT*,' ERROR WHILE READING!'
      GOTO 3333
 3332 PRINT*,' DATA FILE NOT FOUND'
      GOTO 3333
   33 PRINT*,' ERROR IN DATA FILE!'
      GOTO 3333
 3334 CONTINUE
C**   BREAK OF ALL IFS!
C
C**   BWWWIN(12:I16) <=> (12) FKWERT (HEISENBERG COUPLING IN A SYMM. DIMER),
C     (13) LAMBDA (MOLECULARFIELD PARAMETER),
C     (14) THETA (OF CURIE-WEISS LAW),
C     (15) CHI-0 ("CHI DIAMAGNETIC"),
C     (16) CORR. OF WEIGHT OF THE SAMPLE, WHERE MEASURED CHI COMES FROM,
C     AND(!)
C     (17) LAMBDA FOR "MOL(ECULAR)F(IE)LD" (I16>18!) AND
C     (18) WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF DIMER AND SINGLE ION
C     OR DENOMINATOR OF "SPIN CROSSOVER" (ONLY D EL.!)!
C     (19) AND (20): ENTHALPY AND ENTROPY FOR (18)!
C
      IF(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO)THEN
      IF(IOPT2.EQ.0)THEN
      IF(KLWERT.EQ.2)THEN
      WRITE(*,716)
      WRITE(11,716)
  716 FORMAT(' IOPT2=0.AND.(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO): SPIN
     1 CROSSOVER",',/,' NOT COMPATIBLE WITH ANY OF THE PARAMETERS 12...1
     27!:')
      JAOVER=2
      DO 7166 I=12,17
      KMASKE(I)=1
 7166 CONTINUE
      DO 7167 I=18,20
      KMASKE(I)=0
 7167 CONTINUE
      ELSE IF(KLWERT.NE.2)THEN
      WRITE(*,715)
      WRITE(11,715)
  715 FORMAT(' WARNING: IOPT2=0, THEREFORE BWWW(18) BECOMES ZERO',
     1' AND MUST NOT',/,' BE FITTED): "NO MIXTURE WITHOUT ANY DIMER"!')
C**   KMASKE(18)=1
      ENDIF
      ELSE IF(IOPT2.NE.0)THEN
      WRITE(*,717)
      WRITE(11,717)
  717 FORMAT(' IOPT2>0.AND.(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO):',/
     1,' "A MIXTURE OF DIMER AND SINGLE ION"!')
      MIXTUR=1
      KMASKE(18)=0
      ENDIF
      ELSE
      IF(IOPT2.NE.0)KMASKE(18)=0
      ENDIF
C
      IF(BWWWIN(16).EQ.ZERO)THEN
      BWWWIN(16)=ONE
      WRITE(*,1313)
      WRITE(11,1313)
 1313 FORMAT(' CORR. FACTOR OF CHI-MEAS. IS ZERO, BUT BECOMES ONE!')
      ENDIF
C**   (13), (14) AND (17) ARE NOT COMPATIBLE!:
      IF(((BWWWIN(13).NE.ZERO.OR.INBWWW(13).NE.0).AND.KMASKE(13).EQ.0).
     1AND.((BWWWIN(14).NE.ZERO.OR.INBWWW(14).NE.0).AND.KMASKE(14).EQ.0))
     2THEN
      KMASKE(13)=1
      WRITE(*,1314)
      WRITE(11,1314)
 1314 FORMAT(' "THETA" INSTED OF MOLECULARFIELD PARAMETER, WHICH LATTER'
     1,' BECOMES ZERO!')
      ENDIF
C
      IF(((BWWWIN(14).NE.ZERO.OR.INBWWW(14).NE.0).AND.KMASKE(14).EQ.0).
     1AND.((BWWWIN(17).NE.ZERO.OR.INBWWW(17).NE.0).AND.KMASKE(17).EQ.0))
     2THEN
      KMASKE(14)=1
      WRITE(*,1315)
      WRITE(11,1315)
 1315 FORMAT(' "THETA" BECOMES ZERO, BECAUSE "MOL(ECULAR)F(IE)LD"!')
      ENDIF
C
      IF(((BWWWIN(13).NE.ZERO.OR.INBWWW(13).NE.0).AND.KMASKE(13).EQ.0).
     1AND.((BWWWIN(17).NE.ZERO.OR.INBWWW(17).NE.0).AND.KMASKE(17).EQ.0))
     2THEN
      KMASKE(13)=1
      WRITE(*,1316)
      WRITE(11,1316)
 1316 FORMAT(' MOLECULARFIELD PARAMETER BECOMES ZERO, BECAUSE'
     1,' "MOL(ECULAR)F(IE)LD"!')
      ENDIF
C
C**   (15) AND (17) ARE NOT COMPATIBLE!:
      IF(((BWWWIN(15).NE.ZERO.OR.INBWWW(15).NE.0).AND.KMASKE(15).EQ.0).
     1AND.((BWWWIN(17).NE.ZERO.OR.INBWWW(17).NE.0).AND.KMASKE(17).EQ.0))
     2THEN
      KMASKE(15)=1
      WRITE(*,1317)
      WRITE(11,1317)
 1317 FORMAT(' "MOL(ECULAR)F(IE)LD": CHI0 THEREFORE BECOMES ZERO!')
      ENDIF
C
      IF(IOPT2.EQ.0.AND.(((BWWWIN(12).NE.ZERO).OR.(INBWWW(12).NE.0).AND.
     1KMASKE(12).EQ.0)))THEN
      WRITE(*,761)
      WRITE(11,761)
  761 FORMAT(' WARNING: IOPT2=0, THEREFORE BWWW(12) BECOMES ZERO',
     1' (AND MUST NOT',/,' BE FITTED: "NOT A DIMER" CANNOT BE COUPLED!')
      KMASKE(12)=1
      ENDIF
C
C**   SPECIAL FITS / SPECIAL CONDITIONS? (I.E. 13: LAMB, 15: CHI-0, 16: F):
      IF((INBWWW(15).NE.0.OR.BWWWIN(15).NE.ZERO).AND.KMASKE(15).EQ.0)
     1JACHI0=1
      IF(JACHI0.NE.0.OR.((INBWWW(13).NE.0.OR.BWWWIN(13).NE.ZERO).AND.
     1KMASKE(13).EQ.0).OR.((INBWWW(16).NE.0.OR.BWWWIN(16).NE.ONE).AND.
     2KMASKE(16).EQ.0))JAFFAK=1
C
      IF((INBWWW(17).NE.0.OR.BWWWIN(17).NE.ZERO).AND.KMASKE(17).EQ.0)
     1MOLFLD=1
C
      IF(LTS.NE.0.OR.KLWERT.LE.1)THEN
      JASTRU=0
      ELSE
      WRITE(11,6788)
 6787 WRITE(*,6788)
 6788 FORMAT(' INPUT IN I1 YES/NO(0): CALL OF STR00 (1=SOM, 2=PCEM)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3818)JASTRU
      GOTO 4818
      ENDIF
 3818 READ(*,'(I1)',ERR=6787,END=4576)JASTRU
      LMN=1
 4818 IF(JASTRU.GT.2)JASTRU=2
      WRITE(7,6786)JASTRU
 6786 FORMAT(I1,' =JASTRU(cture)')
      WRITE(*,6768)JASTRU
      WRITE(11,6768)JASTRU
 6768 FORMAT(I2,' =JASTRU(cture)!!!!!!!!!')
      ENDIF
C**   NOW CHANGE TO STBWWW AND IBWWW; KMASKE IS USED!:
      DO 762 I=1,20
      IF(KMASKE(I).EQ.0)THEN
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
C**   THE NEXT LINE FOR THE CASE THAT E.G. B44 IS GIVEN AS B40*FACTOR!:
C     ("FITTED" <=> IABS(INBWWW())=1)
      IF(I.LE.11
     1.AND.INBWWW(I).GE.8)IBWWW(I)=INBWWW(I)-10
      ENDIF
  762 CONTINUE
      IF(KMASKE(16).NE.0)STBWWW(16)=ONE
      IF(IN24.GT.20)THEN
      DO 7631 I=21,IN25
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
      IF(I.LE.IN24.AND.INBWWW(I).GE.8)IBWWW(I)=INBWWW(I)-10
 7631 CONTINUE
      ENDIF
      IF(JASTRU.NE.0)THEN
      IF(JASTRU.GT.1)THEN
      STBWWW(1)=ZERO
      IBWWW(1)=0
      ENDIF
      DO 7622 I=JASTRU,11
C2006      DO 7622 I=JASTRU,3
C FITTING OF 3rd SORT OF LIG. IN STR00 WAS IMPOSS.!
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
 7622 CONTINUE
C2006      DO 7623 I=4,11
C2006      STBWWW(I)=ZERO
C2006      IBWWW(I)=0
C2006 7623 CONTINUE
      IF(IN24.GT.20)THEN
      DO 7624 I=21,IN24
      STBWWW(I)=ZERO
      IBWWW(I)=0
 7624 CONTINUE
      ENDIF
      ENDIF
C
C**   JA SPECial FITS (SEE BELOW!) - PRE-OCC.:
      JASPEC=0
      IF(NDATA.EQ.0)THEN
      WRITE(*,1150)
      WRITE(11,1150)
 1150 FORMAT(' THERE IS NO FIT REQUIRED, BECAUSE NDATA=0!')
      GOTO 1155
      ENDIF
C**   NOW FOLLOWING: INPUT (ONLY) FOR FITS!
C
      IF(LTS.EQ.0)THEN
      WRITE(11,1151)
 1116 WRITE(*,1151)
 1151 FORMAT(/,
     1' THERE ARE TWO ESSENTIALLY DIFFERENT POSSIBILITIES FOR A LEAST SQ
     2UARE FIT:',/,' THE MEASURED VALUES AND THE CALCULATED VALUES ARE B
     3OTH DIVIDED BY THE MEASURED',/,' VALUES (THE RESULT FOR THE QUALIT
     4Y OF THE FIT IS IN %, AND THIS SHOULD BE',/,' PREFERRED HERE: INPU
     5T 0) OR THIS DIVISION IS NOT DONE (INPUT 1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3819)NOPROZ
      GOTO 4819
      ENDIF
 3819 READ(*,'(I1)',ERR=1116,END=4576)NOPROZ
      LMN=1
 4819 WRITE(7,1125)NOPROZ
 1125 FORMAT (I1,' =NOPROZ (IN % YES/NO)')
      WRITE(*,1152)NOPROZ
      WRITE(11,1152)NOPROZ
 1152 FORMAT(' THE RESULT ',
     1'FOR THE QUALITY OF THE FIT IS IN % YES(0)/NO(1):',I2,'!!!!!!!!!')
      ENDIF
C
C**   IOPT3 IS 0 HERE, BUT MAY BECOME 1 (I.E. .NE.0)!
C     (IOPT31=-2*IOPT3+4=4 OR 2 <=> CHI( ,IOPT31, ))
      IF(JACHI0.EQ.0)THEN
      IF(MORTEX.GE.0)THEN
      WRITE(11,1134)
      WRITE(*,1134)
 1134 FORMAT(/,' BECAUSE CHI-0 IS NOT CONCERNED, IOPT3 REMAINS 0 <=> FIT
     1TING IS BASED ON',/,' UNCORRECTED MEASURED CHI!')
      ENDIF
      ELSE IF(JACHI0.NE.0)THEN
      IF(LTS.EQ.0)THEN
      WRITE(11,1153)
 1135 WRITE(*,1153)
 1153 FORMAT(/,
     1' CHI-0, AN ADDITIVE CONSTANT TO CHI IN SI UNITS, IS NOT ZERO',/
     2,' AND/OR WILL BE FITTED! THERE IS AN OPTION IOPT3 (=0 AS A STAN'
     3,'DARD):',/,' INPUT 1, IF FITTING SHALL NOT BE BASED ON '
     4,'UNCORRECTED MEASURED CHI!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3820)IOPT3
      GOTO 4820
      ENDIF
 3820 READ(*,'(I1)',ERR=1135,END=4576)IOPT3
      LMN=1
 4820 IF(IOPT3.NE.0)IOPT3=1
      WRITE(7,1319)IOPT3
 1319 FORMAT(I1,' =IOPT3 ("CHI-0")')
      WRITE(*,1318)IOPT3
      WRITE(11,1318)IOPT3
 1318 FORMAT(I2,' =IOPT3 ("CHI-0")!!!!!!!!!')
      ENDIF
      ENDIF
C
      IF(MOLFLD.NE.0)THEN
      IOPT3=0
      WRITE(*,1312)
      WRITE(11,1312)
 1312 FORMAT(/,
     1' IOPT3 BECOMES 0, BECAUSE "MOL(ECULAR)F(IE)LD" (JACHI0=0)!')
      ENDIF
C
C**   IOPT4 IS 1 HERE, BUT MAY BECOME 2 OR 3 OR 4!:
      IF(LTS.EQ.0)THEN
      WRITE(11,1154)
 1136 WRITE(*,1154)
 1154 FORMAT(/,
     1' CHI ITSELF MAY BE FITTED OR ONE/CHI OR MAGNETIC MOMENT OF 1 ATOM
     2 OR',/,' EFFECTIVE MAGNETIC MOMENT (BOTH IN BOHR MAGNETONS): INPUT
     3 (IOPT4=)1...4 (0=>1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3821)IOPT4
      GOTO 4821
      ENDIF
 3821 READ(*,'(I1)',ERR=1136,END=4576)IOPT4
      LMN=1
 4821 IF(IOPT4.EQ.0.OR.IOPT4.GT.4)IOPT4=1
      WRITE(7,1320)IOPT4
 1320 FORMAT(I1,' =IOPT4 (CHI,1/CHI,..)')
      WRITE(*,1321)IOPT4
      WRITE(11,1321)IOPT4
 1321 FORMAT(I2,' =IOPT4 (CHI,1/CHI,..)!!!!!!!!!')
      ENDIF
C
C"DATA" NOANAL=1
      IF(LTS.NE.0)GOTO 1163
C**   SPECIAL FITS (I.E. 13: LAMB, 15: CHI-0, 16: F):
      IF(IBWWW(13).NE.0.OR.IBWWW(15).NE.0.OR.IBWWW(16).NE.0)THEN
C**   IN GENERAL, IF CONCERNED (I.E. ONLY "HERE"),
C     BUT ALSO FOR "TEST" (SEE "ABOVE"): 
      JASPEC=1
      JCASE=0
C**   NOANAL=1 <=> JAANAL=0: SEE BELOW! THIS IS THE CASE FOR MOST CASES,
C     BUT THESE ALL ARE LESS IMPORTANT (EXCEPTION: MU-EFFECTIVE IS
C     FITTED)! MOSTLY THE FEW IMPORTANT CASES WILL APPEAR, AND FOR THESE
C     NOANAL=0 IS POSSIBLE (MAY BE REGARDED AS POSSIBILITY OF A TEST)!
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(IBWWW(13/15/16).NE.0)THEN"!
C
C**   THE CASE NOW FOLLOWING IS LATER ON CALLED "NOGEW2=0"! (.AND.NOANAL=0!):
      IF(JASPEC.NE.0.AND.NOPROZ.EQ.0.AND.IOPT4.EQ.1.AND.IOPT3.EQ.0)THEN
C**   IOPT31=-2*IOPT3+4=4 OR 2 <=> CHI( ,IOPT31,IOPT4)!
      WRITE(*,1156)
      WRITE(11,1156)
 1156 FORMAT(' THE RESULT FOR THE QUALITY OF THE FIT IS IN %, CHI ITSELF
     1 IS FITTED',/,' WITH IOPT3=0.')
      JCASE=1
      ENDIF
C**   THE TWO CASES NOW FOLLOWING ARE LATER ON CALLED "NOGEW2=+-1"!:
      IF(JASPEC.NE.0.AND.NOPROZ.NE.0.AND.(
     2IOPT4.EQ.1.OR.IOPT4.EQ.2).AND.IOPT3.EQ.0)THEN
C**   IOPT31=-2*IOPT3+4=4 OR 2 <=> CHI( ,IOPT31,IOPT4)!
      WRITE(*,1157)
      WRITE(11,1157)
 1157 FORMAT(' THE RESULT FOR THE QUALITY OF THE FIT IS NOT IN %,',/
     1,' CHI ITSELF IS FITTED WITH OPTION IOPT3=0 OR ONE/CHI IS FITTED'
     2,/,' WITH OPTION IOPT3=0.')
      JCASE=1
      ENDIF
C**   THE TWO CASES STILL MISSING CONCERN IOPT3=1!:
C**   THE CASE NOW FOOLOWING IS LATER ON CALLED "NOGEW2=2"!:
      IF(JASPEC.NE.0.AND.NOPROZ.EQ.0.AND.IOPT4.EQ.1.AND.IOPT3.NE.0)THEN
      WRITE(*,1160)
      WRITE(11,1160)
 1160 FORMAT(' THE RESULT FOR THE QUALITY OF THE FIT IS IN %, CHI ITSELF
     1 IS FITTED',/,' WITH IOPT3=1.')
      JCASE=1
      ENDIF
C**   THE CASE NOW FOLLOWING IS LATER ON CALLED "NOGEW2=-2"!:
      IF(JASPEC.NE.0.AND.NOPROZ.NE.0.AND.IOPT4.EQ.2.AND.IOPT3.NE.0)THEN
      WRITE(*,1161)
      WRITE(11,1161)
 1161 FORMAT(' THE RESULT FOR THE QUALITY OF THE FIT IS NOT IN %,'
     1,' ONE/CHI IS FITTED',/,' WITH OPTION IOPT3=1.')
      JCASE=1
      ENDIF
C
      IF(JCASE.NE.0.AND.JASPEC.NE.0)THEN
      WRITE(11,1158)
      WRITE(*,1158)
 1158 FORMAT(
     1' FOR SPECIAL FITS (13: LAMB, 15: CHI-0, 16: F), BUT NOT IN ALL CA
     2SES, THERE IS',/,' THE POSSIBILITY OF AVOIDING THE CALCULATION OF 
     3SOME DERIVATIVES NUMERICALLY,',/,' IF NOT "MOL(ECULAR)F(IE)LD".'
     4,' NUMERICALLY IS STANDARD, ANALYTICALLY',/,' IS POSSIBLE AS A TES
     5T, IF "JATEST" WAS CHOSEN.',/,' IN THIS CASE AN INPUT OF 1 FOR "AN
     6ALYTIC." SPECIAL FIT IS POSSIBLE!')
C
      IF(JATEST.NE.0)THEN
      WRITE(11,1173)
 1137 WRITE(*,1173)
 1173 FORMAT(' INPUT IN I1 1 (YES, "ANALYT.") FOR "ANALYTICALLY"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3822)JAANAL
      GOTO 4822
      ENDIF
 3822 READ(*,'(I1)',ERR=1137,END=4576)JAANAL
      LMN=1
 4822 WRITE(7,1126)JAANAL
 1126 FORMAT(I1,' =JAANAL (YES, "ANALYT.")')
      WRITE(*,1127)JAANAL
      WRITE(11,1127)JAANAL
 1127 FORMAT(I2,' =JAANAL (YES, "ANALYT.")!!!!!!!!!',/)
      IF(JAANAL.NE.0)NOANAL=0
      ENDIF
C
      IF(MORTEX.GT.0)THEN
      WRITE(*,1159)
      WRITE(11,1159)
 1159 FORMAT(' THE 5 CASES CONCERNED, IF IN GENERAL CHI(,IOPT31,IOPT4) W
     1ITH IOPT31=-2*IOPT3+4,',/,' ARE (NOPROZ=0:) CHI(,4,1), CHI(,2,1) A
     2ND (NOPROZ=1:) CHI(,4,1),CHI(,4,2) AND',/,' CHI(,2,2)! - THE 5 CAS
     3ES ARE LATER ON GIVEN BY NOGEW2 = 0, +-1, +-2:',/,' =0, =1 <=> CHI 
     4 "ITSELF" (IN %, NOT IN %) IS FITTED, =-1 <=> RECIPR. CHI',/,' "IT
     5SELF" IS FITTED (NOT IN %), =2 <=> CHI "SHIFTED BY CHI-0" (IN %)',
     6/,' IS FITTED, =-2 <=> FIT OF A "CURIE-WEISS STRAIGHT LINE", I.E. 
     7SHIFT',/,' BY CHI-0 (NOT IN %).')
      ENDIF
C
      ELSE
      WRITE(*,1162)
      WRITE(11,1162)
 1162 FORMAT(
     1' BECAUSE THERE ARE NO SPECIAL FITS, OR "ANALYTICALLY" IS NOT POSS
     1IBLE,',/,' NO INPUT IS REQUIRED FOR "ANALYTICALLY"!')
      ENDIF
C
      IF(MOLFLD.NE.0.AND.NOANAL.EQ.0)THEN
      NOANAL=1
      WRITE(*,1311)
      WRITE(11,1311)
 1311 FORMAT(' NOANAL BECOMES 1, BECAUSE "MOL(ECULAR)F(IE)LD"!')
      ENDIF
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(LTS.NE.0)GOTO"!:
 1163 CONTINUE
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(NDATA.EQ.0)THEN ... GOTO"!:
 1155 CONTINUE
C***********************************************************************
      IF(KLWERT.EQ.0)THEN
      NREL=1
      IF(JATEST.NE.0)THEN
      WRITE(11,1165)
 1164 WRITE(*,1165)
 1165 FORMAT(' ONE S EL.! IF "NONE", INPUT 2 IN I1! ("RETURN" => 1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3823)NONE
      GOTO 4823
      ENDIF
 3823 READ(*,'(I1)',ERR=1164,END=4576)NONE
      LMN=1
 4823 IF(NONE.EQ.0)NONE=1
      WRITE(7,1133)NONE
 1133 FORMAT(I1,' =NONE (S EL.)')
      WRITE(*,1132)NONE
      WRITE(11,1132)NONE
 1132 FORMAT(I2,' =NONE (S EL.)!!!!!!!!!')
      IF(NONE.GE.2)NREL=0
      ENDIF
      GOTO 9999
      ENDIF
C
      IF(KLWERT.EQ.1)THEN
      WRITE(11,2130)
 1138 WRITE(*,2130)
 2130 FORMAT(' INPUT IN I1 NUMBER OF P EL.; 0 OR .GT.5 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3824)NREL
      GOTO 4824
      ENDIF
 3824 READ(*,'(I1)',ERR=1138,END=4576)NREL
      LMN=1
 4824 IF(NREL.EQ.0.OR.NREL.GT.5)NREL=1
      WRITE(7,2103)NREL
 2103 FORMAT(I1,' = No.OF P EL.')
      WRITE(11,1119)NREL
 4140 WRITE(*,1119)NREL
 1119 FORMAT(' THE NUMBER OF P ELECTRONS IS =',I3,'!!!!!!!!!')
      IF(NREL.EQ.1.OR.NREL.EQ.5)THEN
      WRITE(*,4141)
      WRITE(11,4141)
 4141 FORMAT(' ZETA FOR BOR (ONE P ELECTRON!) IS 2.6(?) CM**-1'
     1,/,' INPUT IN D16.8 ZETA!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3825)ZETA
      GOTO 4825
      ENDIF
 3825 READ(*,'(D16.8)',ERR=4140,END=4576)ZETA
      LMN=1
 4825 WRITE(7,2104)ZETA
 2104 FORMAT(D16.8,' =ZETA')
      WRITE(*,2104)ZETA
      WRITE(11,2104)ZETA
      VLSTNG(11)=ZETA
      ELSE
      WRITE(11,1120)
 1139 WRITE(*,1120)
 1120 FORMAT(' MORE THEN 1 (<6) P EL.: INPUT IN 2D16.8 F-INTEG. AND ZETA
     1! E.G. FROM CONDON/SHORTLEY,',/,' P.274/275/301, FOR GE/SN/PB/AS/S
     2B/BI/TE F(**2);ZETA: 25423.;880.1',/,' /22965.;2097.3/23038.;7294.
     3/30250.;1500./26250.;3400./24750.;10100./30675.;4203.')
      IF(MORTEX.GT.0)THEN
      WRITE(*,3025)
      WRITE(11,3025)
 3025 FORMAT(
     1' F(INDEX 2 BELOW) = F(**2)/25. FOR P EL.; ZETA FOR ONE(!) P EL.')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(2D16.8)',ERR=5588,END=3826)FIN,ZETA
      GOTO 4826
      ENDIF
 3826 READ(*,'(2D16.8)',ERR=1139,END=4576)FIN,ZETA
      LMN=1
 4826 WRITE(7,2105)FIN,ZETA
 2105 FORMAT(2D16.8,' =FIN,ZETA')
      WRITE(*,2105)FIN,ZETA
      WRITE(11,2105)FIN,ZETA
      FINTEG(2)=FIN
      VLSTNG(8)=FIN
      VLSTNG(11)=ZETA
      ENDIF
      GOTO 8889
      ENDIF
C
      IF(KLWERT.NE.2)GOTO 6666
C
C THE PROGRAM CONDON CALCULATES ENERGIES, EIGENFUNCTIONS AND PARAMAGNETIC
C SUSCEPTIBILITIES AS A FUNCTION OF TEMPERATURE AND MAGNETIC FIELD STRENGTH
C OF D BLOCK ATOMS OR IONS WITH ND**N ELECTRONIC CONFIGURATION IN CUBIC,
C CYLINDRICAL, TETRAGONAL, TRIGONAL AND OTHER LIGAND FIELDS OF ANY STRENGTH AND
C DIRECTION. WITH RESPECT TO INTERELECTRONIC REPULSION AND SPIN-ORBIT COUPLING
C LITERATURE DATA FOR RACAH PARAMETERS AND SPIN-ORBIT COUPLING CONSTANTS
C ARE USED WHICH MAY BE CHANGED ACCORDING TO REQUIREMENTS. IN ADDITION
C THE MAGNETIC SUSCEPTIBILITY CAN BE CALCULATED USING THE VAN VLECK
C EQUATION. THE PROGRAM USES FORMULAS OF CONDON - SHORTLEY (THE THEORY
C OF ATOMIC SPECTRA) AND OF GRIFFITH (THE THEORY OF TRANSITION-METAL IONS)
C AND IS WRITTEN IN STANDARD FORTRAN77. A DIAGONALIZATION ROUTINE (DSPEV
C OF LIBRARY ESSL (BLAS)) MUST BE AVAILABLE FOR A MATRIX OF MAX. DIMENSION
C 252*252, AND FOR SOME CASES A ROUTINE ZHPEV FOR HERMITIAN MATRICES.
C THE PROGRAM ASKS FOR INPUT IN A SELF-EXPLAINING MANNER AND IS
C WELL COMMENTATED.
C THE PROGRAM CONDON HAS BEEN EXTENDED FOR F ELECTRONS! THEREFORE THE MATRIX
C TO BE DIAGONALIZED HAS DIMENSION 1001*1001 OR EVEN MORE - UP TO 3432*3432.
C INSTEAD OF ND2002=1001 ND2002=1110 IS USED AS A MINIMUM, BECAUSE THERE IS
C A FURTHER DIMENSION ND1110=1110 IMPORTANT FOR OTHER PURPOSES. THE DIMENSION
C ND2002 IS SET IN SUBROUTINE SHORTL ON FILE shortL.f =1110, OR IN SUBROUTINE
C SHORTL ON ANOTHER FILE short..f = E.G. 2002, AND THE RELEVANT FILE IS LINKED!
C FOR USING A PC UNDER LINUX, INSTEAD OF ESSL, LIBRARIES LAPACK AND BLAS MUST
C BE AVAILABLE, AND BECAUSE THE TWO ROUTINES DSPEV AND ZHPEV ARE NOT CALLED IN
C THE SAME WAY, TWO LINK-ROUTINES DSPEVW AND ZHPEVW HAVE BEEN WRITTEN IN TWO
C DIFFERENT WAYS EACH, BOTH ON FILE rzdszh.f (UNIX) AND FILE pcdszh.f (LINUX),
C RESPECTIVELY! THE RELEVANT FILE HAS TO BE LINKED!
C
      WRITE(11,9119)
 8201 WRITE(*,9119)
 9119 FORMAT(' INPUT IN I1 NUMBER OF D EL.; 0 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3827)NREL
      GOTO 4827
      ENDIF
 3827 READ(*,'(I1)',ERR=8201,END=4576)NREL
      LMN=1
 4827 IF(NREL.EQ.0.OR.NREL.GT.9)NREL=1
      WRITE(7,2106)NREL
 2106 FORMAT(I1,' = No.OF D EL.')
      WRITE(*,1110)NREL
      WRITE(11,1110)NREL
 1110 FORMAT(' THE NUMBER OF D ELECTRONS IS =',I3,'!!!!!!!!!')
C
      JANOC=0
      IF(LTS.EQ.0)THEN
      WRITE(11,2131)
 8202 WRITE(*,2131)
 2131 FORMAT(' INPUT IN I1 YES/NO(0), IF DATA FROM KOENIG/KREMER, I.E. '
     1,'DIFFERENT ZETA,',/,' AND RACAHC WILL BECOME =4.*RACAHB!'
     2,' - STANDARD: 0<=>GRIFFITH')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3828)JANOC
      GOTO 4828
      ENDIF
 3828 READ(*,'(I1)',ERR=8202,END=4576)JANOC
      LMN=1
 4828 WRITE(7,2107)JANOC
 2107 FORMAT(I1,' =JANOC ("RACAHC=4*B")')
      WRITE(*,2710)JANOC
      WRITE(11,2710)JANOC
 2710 FORMAT(I2,' =JANOC ("RACAHC=4*B")!!!!!!!!!')
      ENDIF
      RACAHP=RACAKB(NREL)
      RACAHQ=VIER*RACAHP
      ZETA=FKSIDK(NREL)
      IF(JANOC.NE.0)THEN
      WRITE(*,2123)
      WRITE(11,2123)
 2123 FORMAT(
     1' DATA FROM KOENIG/KREMER (RACAHC=4.*RACAHB) HAVE BEEN CHOSEN!')
      ELSE
      WRITE(11,2132)
 8203 WRITE(*,2132)
 2132 FORMAT(
     1' DATA FROM GRIFFITH INCL. RACAHC AND COUPL.-CONST. HAVE BEEN'
     1,' CHOSEN!',/,' INPUT IN 2I1 CHARGE+1 OF THE ION AND 1ST,2ND,'
     1,'3RD TRANS.-SERIES')
C**   IN THE FOLLOWING: LDG1=CHARGE+1 AND NRSR=No.OF TRANS.-SERIES; BOTH
C     FOR GRIFFITH ONLY:
      LDG1=3
      NRSR=1
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3829)LDG1IN,NRSRIN
      GOTO 4829
      ENDIF
 3829 READ(*,'(2I1)',ERR=8203,END=4576)LDG1IN,NRSRIN
      LMN=1
 4829 WRITE(*,'(2I2)')LDG1IN,NRSRIN
      WRITE(7,2108)LDG1IN,NRSRIN
 2108 FORMAT(2I1,' =LDG1IN,NRSRIN(CHARGE+)')
      IF(LDG1IN.NE.0)LDG1=LDG1IN
      IF(LDG1.GT.5)LDG1=5
      IF(NRSRIN.NE.0)NRSR=NRSRIN
      IF(NRSR.GT.3)NRSR=3
      LDG=LDG1-1
      WRITE(*,3232)LDG,NRSR
      WRITE(11,3232)LDG,NRSR
 3232 FORMAT(' CHARGE OF THE ION (0=ATOM) AND No.OF TRANS.-SERIES=',2I2,
     1'!!!!!!!!!')
C
      IF(LDG.GE.1.AND.NRSR.EQ.3)THEN
      WRITE(*,2133)
      WRITE(11,2133)
 2133 FORMAT(
     1' ((CHARGE.GE.1).AND.(3RD TRANS.-SERIES)): WITH GRIFFITH-DATA'
     1,/,' POSSIBLE ARE ONLY RE3+, BUT WITH DATA OF RE+-0,'
     1,/,' AND HF1+, THE LAST ONE WITH S ORB.**2!')
      ENDIF
C
      IF(LDG.EQ.0)THEN
      IF(NRSR.EQ.1)WRITE(*,2136)
      IF(NRSR.EQ.1)WRITE(11,2136)
 2136 FORMAT(' SC TI  V %% MN FE CO %% %%; ALL WITH S ORB.**2')
      IF(NRSR.EQ.2)WRITE(*,2137)
      IF(NRSR.EQ.2)WRITE(11,2137)
 2137 FORMAT('  Y ZR %% %% %% %% %% %% %%; ALL WITH S ORB.**2')
      IF(NRSR.EQ.3)WRITE(*,2138)
      IF(NRSR.EQ.3)WRITE(11,2138)
 2138 FORMAT(' LU %% TA  W RE %% %% %% %%; ALL WITH S ORB.**2')
      ENDIF
C
      IF(LDG.EQ.1)THEN
      IF(NRSR.EQ.1)WRITE(*,2139)
      IF(NRSR.EQ.1)WRITE(11,2139)
 2139 FORMAT(' %% %% %%  V CR %% %% CO NI; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2140)
      IF(NRSR.EQ.2)WRITE(11,2140)
 2140 FORMAT(' %% %% %% NB MO %% RU RH %%; ALL WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.2)THEN
      IF(NRSR.EQ.1)WRITE(*,2151)
      IF(NRSR.EQ.1)WRITE(11,2151)
 2151 FORMAT(' SC TI  V CR MN FE CO NI CU; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2152)
      IF(NRSR.EQ.2)WRITE(11,2152)
 2152 FORMAT('  Y ZR NB %% %% %% RH PD %%; ALL WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.3)THEN
      IF(NRSR.EQ.1)WRITE(*,2153)
      IF(NRSR.EQ.1)WRITE(11,2153)
 2153 FORMAT(' TI  V CR MN %% %% %% %% %%; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2154)
      IF(NRSR.EQ.2)WRITE(11,2154)
 2154 FORMAT(' NB %% %% %% %% %% %% %% %%; WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.4)THEN
      IF(NRSR.EQ.1)WRITE(*,2155)
      IF(NRSR.EQ.1)WRITE(11,2155)
 2155 FORMAT('  V CR %% FE %% %% %% %% %%; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2156)
      IF(NRSR.EQ.2)WRITE(11,2156)
 2156 FORMAT(' %% %% %% %% %% %% %% %% %%; NOTHING IS THERE!')
      ENDIF
C
      IF(FKSIDA(NREL,LDG1,NRSR).EQ.ZERO)THEN
      WRITE(*,2134)
      WRITE(11,2134)
 2134 FORMAT(' GRIFFITH-DATA NOT'
     1,' AVAILABLE: DATA FROM KOENIG/KREMER, I.E. RACAHC=4.*RACAHB!')
      ELSE
      IF(LTS.EQ.0)WRITE(*,2135)
      IF(LTS.EQ.0)WRITE(11,2135)
 2135 FORMAT(
     1' DATA FROM GRIFFITH ARE USED INCL. RACAHC AND COUPL.-CONST.!')
      RACAHP=RACAHB(NREL,LDG1,NRSR)
      RACAHQ=RACAHC(NREL,LDG1,NRSR)
      ZETA=FKSIDA(NREL,LDG1,NRSR)
      ENDIF
C**   THE FOLLOWING ENDIF BELONGS TO "IF(JANOC.NE.0)THEN ... ELSE ..."!:
      ENDIF
C
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
C**   IN PRACTICE RACAHA AND FINTEG(1)=F(**0) ARE BOTH ZERO (SHIFT ONLY)!
C     - FORMULA: RACAHA=F(**0)-49.*F(**4)/441.
C
      NEURAH=0
      IF(LTS.EQ.0.AND.NREL.EQ.1)THEN
      WRITE(11,9121)
 9204 WRITE(*,9121)
 9121 FORMAT(' RACAHB RESP. RACAHC ARE AND REMAIN ZERO!',/,' BECAUSE '
     2,'ANY CHANGE IS NOT POSSIBLE, INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3830)NEURAH
      GOTO 4830
      ENDIF
 3830 READ(*,'(I1)',ERR=9204,END=4576)NEURAH
      LMN=1
 4830 NEURAH=0
      WRITE(7,2109)NEURAH
      WRITE(*,2100)NEURAH
      WRITE(11,2100)NEURAH
      ENDIF
      IF(LTS.EQ.0.AND.NREL.NE.1)THEN
C**   THE RACAH-PARAMETERS MAY BE CHANGED!:
      WRITE(11,2121)RACAHP,RACAHQ
 8204 WRITE(*,2121)RACAHP,RACAHQ
 2121 FORMAT(' INPUT IN I1'
     1,' YES/NO(0), IF NEW-INPUT OF RACAHB RESP. RACAHC - STANDARD: 0',
     2/,' (THESE ARE = ',2D16.8,')',
     3/,' (HINT: LIGANDS MAY BE IMPORTANT, TOO!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3831)NEURAH
      GOTO 4831
      ENDIF
 3831 READ(*,'(I1)',ERR=8204,END=4576)NEURAH
      LMN=1
 4831 WRITE(7,2109)NEURAH
 2109 FORMAT(I1,' =NEURAH(NEW RACAH)')
      WRITE(*,2100)NEURAH
      WRITE(11,2100)NEURAH
 2100 FORMAT(I2,' =NEURAH(NEW RACAH)!!!!!!!!!')
      ENDIF
      IF(NEURAH.NE.0)THEN
      WRITE(11,2113)
 8205 WRITE(*,2113)
 2113 FORMAT(
     1' INPUT NEW RACAHB AND C (IF REQ.) IN 1 RESP. 2 ROWS IN E16.8')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3832)RACAHP
      GOTO 4832
      ENDIF
 3832 READ(*,'(D16.8)',ERR=8205,END=4576)RACAHP
      LMN=1
 4832 WRITE(7,2110)RACAHP
 2110 FORMAT(D16.8,' =RACAHP')
      WRITE(*,2110)RACAHP
      WRITE(11,2110)RACAHP
      IF(JANOC.EQ.0)THEN
      GOTO 8207
 8206 WRITE(*,8208)
 8208 FORMAT(' INPUT RACAHC!:')
 8207 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3833)RACAHQ
      GOTO 4833
      ENDIF
 3833 READ(*,'(D16.8)',ERR=8206,END=4576)RACAHQ
      LMN=1
 4833 WRITE(7,2111)RACAHQ
 2111 FORMAT(D16.8,' =RACAHQ')
      WRITE(*,2111)RACAHQ
      WRITE(11,2111)RACAHQ
      ELSE
      RACAHQ=VIER*RACAHP
      ENDIF
      ENDIF
      VLSTNG(6)=RACAHP
      VLSTNG(7)=RACAHQ
C**   CALCULATION OF THE F'S:
      FINTEG(3)=(RACAHQ/35.0D0)*441.0D0
CF1   FINTEG(1)=RACAHA+49.D0*FINTEG(3)/441.D0
C**   FINTEG(1)=F(**0) (OR INDEX 0 BELOW: IS THE SAME THING!)
C     =49.*F(**4)/441.=49.*F-(INDEX 4 BELOW)
      FINTEG(2)=(RACAHP+5.D0*FINTEG(3)/441.D0)*49.0D0
C**   FINTEG(2)=F(**2)
C**   FINTEG(3)=F(**4)!
C**   FINTEG(4)=F(**6) - FOR F EL.!
C**   RACAHC IS OR IS NOT (THEN: RACAHC=FOUR*RACAHB) USED!
      IF(MOROUT.NE.0)THEN
      WRITE(*,3168)
      WRITE(11,3168)
 3168 FORMAT(/,' F-INTEG(RAL),I=2,3:')
      WRITE(*,'(2D16.8)')(FINTEG(I),I=2,3)
      WRITE(11,'(2D16.8)')(FINTEG(I),I=2,3)
      ENDIF
C
      IF(JANOC.EQ.0.AND.JATEST.NE.0.AND.NREL.EQ.1)THEN
      WRITE(11,9122)
 9205 WRITE(*,9122)
 9122 FORMAT(' INPUT OF NEW F''S IS NOT POSSIBLE! INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3834)NEUEFS
      GOTO 4834
      ENDIF
 3834 READ(*,'(I1)',ERR=9205,END=4576)NEUEFS
      LMN=1
 4834 NEUEFS=0
      WRITE(7,2112)NEUEFS
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
      ENDIF
      IF(JANOC.EQ.0.AND.JATEST.NE.0.AND.NREL.NE.1)THEN
C**   IN THE FOLLOWING THE POSSIBILITY FOR DIRECT INPUT OF
C     THE F'S-(TO THE KTH) OF CONDON/SHORTLEY (FINTEG(1)=F(**0)!):
      WRITE(11,21)
 8209 WRITE(*,21)
   21 FORMAT(' DIRECT INPUT OF NEW F''S IN I1 YES/NO(0); (OR THESE'
     1,/,' ARE QUASI PREOCC./THOSE OF BEFORE)! - STANDARD: 0 (9=STOP)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3835)NEUEFS
      GOTO 4835
      ENDIF
 3835 READ(*,'(I1)',ERR=8209,END=4576)NEUEFS
      LMN=1
 4835 WRITE(7,2112)NEUEFS
 2112 FORMAT(I1,' =NEUEFS(NEW F''S)')
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
 2101 FORMAT(I2,' =NEUEFS(NEW F''S)!!!!!!!!!')
      IF(NEUEFS.EQ.9)STOP 'END-9'
      IF(NEUEFS.NE.0)THEN
      WRITE(11,211)
 8210 WRITE(*,211)
  211 FORMAT(' INPUT (ONE ROW EACH!) IN E16.8. F(**2) AND F(**4)')
CF1   READ(*,'(D16.8)')FIN
CF1   FINTEG(1)=FIN (NOT USED!)
C**   ATTENTION: FINTEG(3)=F(**4)!
      IF(MORTEX.GT.0)THEN
      WRITE(*,2118)
      WRITE(11,2118)
 2118 FORMAT(
     1' F(INDEX 2 (4) BELOW) = F(**2 (**4))/49. (/441.) FOR D EL.!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3836)FIN
      GOTO 4836
      ENDIF
 3836 READ(*,'(D16.8)',ERR=8210,END=4576)FIN
      LMN=1
 4836 WRITE(*,2270)FIN
      WRITE(7,2270)FIN
 2270 FORMAT(D16.8,' =FIN(TEGRAL)')
      FINTEG(2)=FIN
      GOTO 8212
 8211 WRITE(*,8213)
 8213 FORMAT(' INPUT 2ND ROW!:')
 8212 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3837)FIN
      GOTO 4837
      ENDIF
 3837 READ(*,'(D16.8)',ERR=8211,END=4576)FIN
      LMN=1
 4837 WRITE(*,2270)FIN
      WRITE(7,2270)FIN
      FINTEG(3)=FIN
      WRITE(*,'(2D16.8)')(FINTEG(I),I=2,3)
      WRITE(11,'(2D16.8)')(FINTEG(I),I=2,3)
      ENDIF
      VLSTNG(8)=FINTEG(2)
      VLSTNG(10)=FINTEG(3)
      ENDIF
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.NE.2)GOTO"!:
 6666 CONTINUE
      IF(KLWERT.NE.3)GOTO 7777
      WRITE(11,9118)
 8214 WRITE(*,9118)
 9118 FORMAT(/,' INPUT IN I2 NUMBER OF F EL.; .LT.1 OR .GT.13 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3838)NREL
      GOTO 4838
      ENDIF
 3838 READ(*,'(I2)',ERR=8214,END=4576)NREL
      LMN=1
 4838 IF(NREL.LE.0.OR.NREL.GT.13)NREL=1
      WRITE(7,9117)NREL
 9117 FORMAT(I2,' = No.OF F EL.')
      WRITE(*,1111)NREL
      WRITE(11,1111)NREL
 1111 FORMAT(' THE NUMBER OF F ELECTRONS IS =',I4,'!!!!!!!!!')
C**   JAWIGN.NE.0 <=> SUBROUTINE (WIGNER-)ECKART RUNS:
      IF(JAWIGN.NE.0.OR.NREL.EQ.1.OR.NREL.EQ.13)GOTO 6678
CF1   FINTEG(1)=ZERO
      DO 3100 I=2,4
      FINTEG(I)=FINT(I,NREL)
 3100 CONTINUE
      IF(LTS.NE.0.AND.NREL.GT.3)GOTO 6677
      WRITE(11,112)(FINTEG(I),I=2,4)
 8215 WRITE(*,112)(FINTEG(I),I=2,4)
  112 FORMAT(/,' (FINTEG(I),I=2,4):',3D14.6
     1,/,' INPUT IN I1 YES/NO(0): "OTHER"')
      WRITE(*,4121)
      WRITE(11,4121)
 4121 FORMAT(
     1' IF 5F EL. (NOT 4F EL.!): YOU OUGHT TO CHOOSE "YES(1): OTHER"!',
     2/,' DATA FOR U(4+), U(3+): CHOOSE "YES(2)"!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,1121)
      WRITE(11,1121)
 1121 FORMAT(' THE DATA STORED HERE ARE SUFFICIENTLY GOOD FOR'
     1,' MAGNETOCHEM.,',/,' BUT NOT FOR LIGAND FIELDS IN GENERAL!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3839)JANO
      GOTO 4839
      ENDIF
 3839 READ(*,'(I1)',ERR=8215,END=4576)JANO
      LMN=1
 4839 IF(JANO.GT.2)JANO=2
      WRITE(7,2271)JANO
 2271 FORMAT(I1,' =JANO(FINTEG)')
      WRITE(*,2207)JANO
      WRITE(11,2207)JANO
 2207 FORMAT(I2,' =JANO(FINTEG)!!!!!!!!!')
      IF(JANO.GT.1)THEN
      FINTEG(2)=FINTEU(1,NREL-1)
      FINTEG(3)=FINTEU(2,NREL-1)
      FINTEG(4)=FINTEU(3,NREL-1)
      WRITE(11,2217)(FINTEG(I),I=2,4)
 8251 WRITE(*,2217)(FINTEG(I),I=2,4)
 2217 FORMAT(' (FINTEG(I),I=2,4) =',3D16.8,
     1/,' (THEOR. RELATIVISTIC VALUES FOR FREE IONS! LESS 40, 30, 20% (F
     2INTEG(2,3,4))',/,' FOR EXP.VAL.: INPUT OF NEW VALUES YES/NO(0)?)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3840)JANO
      GOTO 4840
      ENDIF
 3840 READ(*,'(I1)',ERR=8251,END=4576)JANO
      LMN=1
 4840 IF(JANO.GT.1)JANO=1
      WRITE(7,2271)JANO
      WRITE(*,2207)JANO
      WRITE(11,2207)JANO
      ENDIF
      IF(JANO.EQ.1)THEN
      WRITE(*,113)
      WRITE(11,113)
  113 FORMAT(
     1' INPUT IN D14.6 (FINTEG(I),I=2,4) -  F(**2)...! - ONE ROW EACH!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,1089)
      WRITE(11,1089)
 1089 FORMAT(
     1' F(INDICES 2,4,6 BELOW) = F(**2,4,6)/(225.,1089.,184041./25.)'
     1,' FOR F EL.!')
      ENDIF
      DO 3101 I=2,4
 8216 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,114,ERR=5588,END=3841)FINTEG(I)
      GOTO 4841
      ENDIF
 3841 READ(*,114,ERR=8216,END=4576)FINTEG(I)
      LMN=1
 4841 WRITE(*,114)FINTEG(I)
      WRITE(7,114)FINTEG(I)
      WRITE(11,114)FINTEG(I)
  114 FORMAT(D14.6)
 3101 CONTINUE
      ENDIF
 6677 CONTINUE
      VLSTNG(8)=FINTEG(2)
      VLSTNG(9)=FINTEG(3)
      VLSTNG(10)=FINTEG(4)
 6678 CONTINUE
      ZETA=FKSIWI(NREL)
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.NE.3)GOTO"!: 
 7777 CONTINUE
C
      IF(LTS.NE.0.AND.(NREL.GT.3.OR.KLWERT.EQ.2))GOTO 8888 
      WRITE(11,1199)ZETA
 8217 WRITE(*,1199)ZETA
      WRITE(11,41)
      WRITE(*,41)
   41 FORMAT(' INPUT IN I1 ',
     1'YES/NO(0): NEW (POS.!) SPIN-ORBIT COUPL.-CONST. FOR 1 ELECTRON.')
      IF(KLWERT.EQ.3)THEN
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,4112)
      WRITE(11,4112)
 4112 FORMAT(
     1' IF 5F EL. (NOT 4F EL.!): YOU OUGHT TO CHOOSE "YES(1): OTHER"!',
     2/,' DATA FOR U(5+), U(4+), U(3+): CHOOSE "YES(2)"!')
      ELSE
      WRITE(*,4113)
      WRITE(11,4113)
 4113 FORMAT(' (INPUT OF ',
     1'10**6 FOR A SPECIAL OPTION IN SUBROUTINE ECKART HERE OR THERE!)')
      ENDIF
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3842)NEUKSI
      GOTO 4842
      ENDIF
 3842 READ(*,'(I1)',ERR=8217,END=4576)NEUKSI
      LMN=1
 4842 IF(NEUKSI.GT.2)NEUKSI=2
      WRITE(7,2272)NEUKSI
 2272 FORMAT(I1,' =NEUKSI(NEW ZETA)')
      WRITE(*,2227)NEUKSI
      WRITE(11,2227)NEUKSI
 2227 FORMAT(I2,' =NEUKSI(NEW ZETA)!!!!!!!!!')
C**   ZETA: (POS.!) SPIN-ORBIT COUPL.-CONST. FOR ONE ELECTRON!
      IF(NEUKSI.GT.1)THEN
      ZETA=FKSIU(NREL)
      WRITE(*,1199)ZETA
      WRITE(11,1199)ZETA
C1199 FORMAT: SEE BELOW!
      ENDIF
      IF(NEUKSI.EQ.1)THEN
C
      WRITE(11,4111)
 8218 WRITE(*,4111)
 4111 FORMAT(' INPUT'
     1,' IN E12.4 (POS.!) COUPL.-CONST. ZETA FOR ONE ELECTRON,',/
     1,' (A POSS. ORB.-RED.-FACTOR IS POSS.(!) TO BE TAKEN INTO ACCOUNT'
     1,/,' HERE TOO, IN AS MUCH AS THE CONST. HAS TO BE REDUCED!)')
C
      IF(JAWIGN.NE.0)THEN
      WRITE(*,4118)
      WRITE(11,4118)
 4118 FORMAT(' FOR THE SPEC. ROUTINE WIGNER/ECKART: A POSS. INPUT IS 1.0
     1E6 ("TEST")')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(D12.4)',ERR=5588,END=3843)FKSII
      GOTO 4843
      ENDIF
 3843 READ(*,'(D12.4)',ERR=8218,END=4576)FKSII
      LMN=1
 4843 ZETA=DABS(FKSII)
      WRITE(7,2273)FKSII
 2273 FORMAT(D12.4,' =FKSII(=ZETA)')
      WRITE(*,1200)FKSII
      WRITE(11,1200)FKSII
 1200 FORMAT(D12.4,' =FKSII(=ZETA)!!!!!!!!!')
      WRITE(*,1199)ZETA
      WRITE(11,1199)ZETA
 1199 FORMAT(/,' THE '
     1,'(POS.!) COUPL.-CONST. ZETA (1(!) EL.) IS =',D13.4)
C
      ENDIF
C
C**   THE FOLLOWING CONTINUE'S BELONG TO "IF(LTS.NE.0)GOTO"! 
C     AND TO "IF(KLWERT.EQ.1)THEN ... GOTO"!:
 8888 CONTINUE
      VLSTNG(11)=ZETA
 8889 CONTINUE
C
C**   FOR ALL SORTS OF ELECTRONS EXCEPT S EL., BUT ONLY TEST, IF 4F EL.:
C     (SEE DATA!:)
C     DO 4100 I=1,3
C4100 REDFAZ(I)=ONE
      IF((LTS.NE.0.OR.JAWIGN.NE.0).AND.JATEST.EQ.0)GOTO 9998
      IF(KLWERT.EQ.3)THEN
      WRITE(*,8899)
      WRITE(11,8899)
 8899 FORMAT(/,' F EL.:'
     1,' ORB.-RED.-FACTOR(S) OTHER THEN ONE ONLY AS A TEST, IF 4F EL.!')
      ENDIF
      WRITE(11,410)
 8219 WRITE(*,410)
  410 FORMAT(
     1/,' INPUT IN I1 YES/NO(0): ORB.-RED.-FACTOR(S) OTHER THAN ONE')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3844)NEUORB
      GOTO 4844
      ENDIF
 3844 READ(*,'(I1)',ERR=8219,END=4576)NEUORB
      LMN=1
 4844 WRITE(7,2274)NEUORB
 2274 FORMAT(I1,' =NEUORB(ORB.-RED.-F.)')
      WRITE(*,2244)NEUORB
      WRITE(11,2244)NEUORB
 2244 FORMAT(I2,' =NEUORB(ORB.-RED.-F.)!!!!!!!!!')
      IF(NEUORB.NE.0)THEN
      WRITE(*,4101)NRDIRE
 4101 FORMAT(' INPUT (ONE'
     1,' ROW EACH!)',I2,' ORB.-RED.-FACTOR(S) (ZERO>=ONE) IN F12.8')
      DO 4102 I=1,NRDIRE
 8220 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(F12.8)',ERR=5588,END=3845)REDFA
      GOTO 4845
      ENDIF
 3845 READ(*,'(F12.8)',ERR=8220,END=4576)REDFA
      LMN=1
 4845 WRITE(*,2275)REDFA
      WRITE(7,2275)REDFA
 2275 FORMAT(F12.8,' =RED.FA(CT)')
      IF(REDFA.NE.ZERO)REDFAZ(I)=REDFA
 4102 CONTINUE
C**   NOTE: IOPT1=2 OR =3 <=> 3 OR 2 DIRECTIONS ARE INVOLVED. THE POINT
C     GROUP, HOWEVER, REMAINS!
      IF(NRDIRE.EQ.2)REDFAZ(3)=REDFAZ(2)
      IF(NRDIRE.EQ.1)THEN
      REDFAZ(2)=REDFAZ(1)
      REDFAZ(3)=REDFAZ(1)
      ENDIF
      WRITE(*,4103)(REDFAZ(I),I=1,3)
      WRITE(11,4103)(REDFAZ(I),I=1,3)
 4103 FORMAT(' (THREE) ORB.-RED.-FACTORS =',3F13.8)
C
      ENDIF
C
C**   THE FOLLOWING CONTINUE'S BELONG TO "IF(LTS.NE.0.OR.JAWIGN.NE.0)GOTO"!
C     AND TO "IF(LTS.NE.0.OR.JAWIGN.NE.0)GOTO"!:
 9998 CONTINUE
      IF(REDFAZ(1).NE.ONE)VLSTNG(12)=REDFAZ(1)
      IF(REDFAZ(2).NE.ONE)VLSTNG(13)=REDFAZ(2)
      IF(REDFAZ(3).NE.ONE)VLSTNG(14)=REDFAZ(3)
 9999 CONTINUE
      NRVALJ=1
      IF(NREL.EQ.1)NRVALJ=2
      IF(KLWERT.EQ.1)NRVALJ=MULMUP(NREL)
      IF(KLWERT.EQ.2)NRVALJ=MULMUD(NREL)
      IF(KLWERT.EQ.3)NRVALJ=JMULTI(NREL)
      CALL SHORTL(JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP,BWWOLD
     1,ZETA,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0,QTEXT0)
C
C**   SUBROUTINE SHORTL WILL CALL SUSFIT (NOT SUSC), THE FITTING
C     ROUTINE! THERE IS NO RETURN FROM SUSFIT TO SHORTL!
C**   THERE ARE A FEW DIFFERENT SUBROUTINES SHORTL:
C     THEY DEFINE DIFFERENT DIMENSIONS FOR STORAGE AND DIFFERENT
C     EQUIVALENCES AND ARE ON DIFFERENT FILES short..f!
C     DIFFERENCES ARE/ MAY BE ND2002=1110 OR =3432,
C     NDS66=66 OR =252, EQUIVALENCE(EIVECV,FMIKR1) OR NOT!
 4576 CALL FINISH
 5588 CALL FINISI
 4577 WRITE(*,4578)
      WRITE(11,4578)
 4578 FORMAT(' (NEW, EMPTY INPUT FILE OLDf7.DAT OPENED!)')
      OPEN(77,ERR=4581,FILE='OLDf7.DAT',STATUS='NEW')
      GOTO 1921
 4581 STOP 'STOP'
CEND CONDON
      END
      SUBROUTINE FINISH
      WRITE(*,1)
      WRITE(11,1)
    1 FORMAT(' END OF FILE OF INPUT FILE: STOP')
      STOP 'STOP'
      END
      SUBROUTINE FINISI
      WRITE(*,1)
      WRITE(11,1)
    1 FORMAT(' ERROR IN FILE OLDf7.DAT: STOP')
      STOP 'STOP'
      END
      SUBROUTINE SUSC(JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
C**   IS CALLED BY LEVSQX OR LEVDER, THE LATTER A SUBROUTINE OF LEVMAR,
C     THE "LEVENBERG-MARQUARDT METHOD", TO CALCULATE THE SUSCEPTIBILITY!
C**   CALLS TANABE OR ECKART, RESPECTIVELY, WHERE THE CALCULATION OF
C     THE SUSCEPTIBILITY REALLY STARTS; ECKART USES IRREDUCIBLE TENSOR
C     METHODS FOR ATOMS OR IONS WITH 4**N ELECTRONIC CONFIGURATION,
C     BUT USES ONLY(!) THE RUSSELL-SAUNDERS GROUND STATE.
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD,CRZMAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      CHARACTER*4 QXX
      PARAMETER(KLWERD=3,KDIMPL=500,LLSMX=12,ISLSMX=4,J20=36)
      INTEGER REIHNF,BLOCKD,BLOCKS,MASKX2(11)
     1,MSMLNR(2,-KLWERD:KLWERD),KAESNR(-LLSMX:LLSMX)
     2,KAESTC(-LLSMX:LLSMX,KDIMPL),LOCH(KDIMPL)
     3,KAESTD(-ISLSMX:ISLSMX,KDIMPL),KAESNS(-ISLSMX:ISLSMX)
      DIMENSION EIVECV(ND2002,*),STEV(17),BWWALT(J20)
     1,BSTART(24),FMIKR3(ND2002,NDS66),EIWERT(*)
     1,TAWERT(NDS66),TAFMAT(NDS66,NDS66,3),TAGMAT(NDS66,NDS66,2)
     1,VORFAK(-LLSMX:LLSMX,KDIMPL),VORFAL(-ISLSMX:ISLSMX,KDIMPL)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW (E.G. BWW(STEVENS)=>BWWW(WYBOURNE))
C     IN SUBROUTINE SUSC:
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      COMMON/INSUSC/TESINT
     1,VORFAK,VORFAL,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,NOFORM
      SAVE
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0
     1,VPREZ6=1.0D6/(4.D0*3.1415926D0),BOLZCM=0.695040D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
      DATA MASKX2/1,0,1,0,1,1,1,0,1,1,0/
C**   MASKX2=0 <=> B22, B42, B62 AND B66.
      DATA KLICKK,KLICKL,KLICKS,KLICKT,KLICKV,KLICKX,KLICK,LAUFNR,LAUFNS
     1,MOROUU,MOROUV,KLICKM,KLICKN/0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA JANOL,JANOS,JANOV,JAREVS,LOWOLD,JNFORM,KNFORM,INFORM
     1,KLICOV,JAOCTA/0,0,0,0,1,0,0,0,0,0/
      DATA CHIALT,XXX,FNENNE/ZERO,ZERO,ZERO/
      DATA BWWALT/36*ZERO/
      DATA KLICOC,NEWKLI,JAWARN/0,0,-1/
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(KLICOC.EQ.0)THEN
      KLICOC=1
      NOFORM=0
      ENDIF
C     B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66:
      NEWBWW=0
      DO 1243 I=1,11
      IF(BWW(I).NE.BWWALT(I))NEWBWW=1
 1243 CONTINUE
C     AND:
      DO 1246 I=12,20
      BWWW(I)=BWW(I)
 1246 CONTINUE
      IF(IN24.GT.20)THEN
      DO 1247 I=21,IN24
      IF(BWW(I).NE.BWWALT(I))NEWBWW=1
 1247 CONTINUE
C     AND:
      IN241=IN24+1
      DO 1245 I=IN241,IN25
      BWWW(I)=BWW(I)
 1245 CONTINUE
      ENDIF
      IF(NEWBWW.EQ.0.AND.LOWHIG.EQ.LOWOLD.AND.KLICKK.NE.0)GOTO 8765
      KLICKK=1
      LOWOLD=LOWHIG
C
      DO 1 I=1,11
      BWWW(I)=BWW(I)
      BWWALT(I)=BWW(I)
    1 CONTINUE
      IF(IN24.GT.20)THEN
      DO 1248 I=21,IN24
      BWWW(I)=BWW(I)
      BWWALT(I)=BWW(I)
 1248 CONTINUE
      ENDIF
C
      IF(JASTRU.NE.0)THEN
      CALL STR00(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,J20,IN24,IN25)
      GOTO 6789
      ENDIF
C**   ONLY FOR F EL., BUT NOT EU3+, GD3+! (THESE 2 NOT MENTIONED IN TABLE 1
C     OF LEA/ LEASK/ WOLF! - J=0 FOR EU3+ AND SPIN-ONLY FOR GD3+!):
C(NO) IF(KLWERT.NE.3.OR.NREL.EQ.6.OR.NREL.EQ.7)GOTO 1234
      IF(KLWERT.NE.3)GOTO 1234
      IF(NREL.EQ.6.OR.NREL.EQ.7)GOTO 1233
C
C**   ONLY FOR "STANDARD" CUBIC GROUP, BUT NOT CE3+, SM3+! (BECAUSE X=1 FOR THESE 2!):
      IF(NGROUP.NE.21)GOTO 1233
C
C**   BWWW(3) AND BWWW(7) MAY BE INTERPRETED HERE AS X AND W OF:
C     (LIT.:) K.R.LEA, M.J.M.LEASK, W.P.WOLF: J.PHYS.CHEM.SOLIDS
C     VOL.23, PP.1381-1405.
      IF(KLICKL.EQ.0.AND.LESS.EQ.0)THEN
      KLICKL=1
      IF(NREL.EQ.1.OR.NREL.EQ.5)THEN
C**   JANO-Lea/Leask/Wolf=0
      WRITE(11,8219)
 8220 WRITE(*,8219)
 8219 FORMAT(' F EL. AND CUBIC GROUP WITH 4-FOLD AXIS: WYBOURNE ',
     1'COEFFICIENTS',/,' BWWW(3) AND BWWW(7) SHOULD BE INTERPRETED'
     2,' HERE AS X AND W:',/,' BECAUSE NOT POSSIBLE FOR 1 OR 5'
     3,' ELECTRONS, INPUT NO(0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3846)JANOL
      GOTO 4846
      ENDIF
 3846 READ(*,'(I1)',ERR=8220,END=4576)JANOL
      LMN=1
 4846 JANOL=0
      WRITE(7,2276)JANOL
      WRITE(*,2762)JANOL
      WRITE(11,2762)JANOL
      ELSE
      WRITE(11,3736)
 8221 WRITE(*,3736)
 3736 FORMAT(' F EL. AND CUBIC GROUP WITH 4-FOLD AXIS: WYBOURNE ',
     1'COEFFICIENTS',/,' BWWW(3) AND BWWW(7) SHOULD BE INTERPRETED'
     2,' HERE AS X AND W',/,' OF LEA, LEASK, WOLF IN J.PHYS.CHEM.SOLIDS,
     3 YES/NO(0)?')
C**   JANO-Lea/Leask/Wolf
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3847)JANOL
      GOTO 4847
      ENDIF
 3847 READ(*,'(I1)',ERR=8221,END=4576)JANOL
      LMN=1
 4847 WRITE(7,2276)JANOL
 2276 FORMAT(I1,' =JANOL(ea/Leask/Wolf)')
      WRITE(*,2762)JANOL
      WRITE(11,2762)JANOL
 2762 FORMAT(I2,' =JANOL(ea/Leask/Wolf)!!!!!!!!!')
      IF(JANOL.NE.0)THEN
      JANOLS=2
      IF(MORTEX.GT.0)THEN
      WRITE(*,3763)
      WRITE(11,3763)
 3763 FORMAT(' (FOR CE;PR;ND;PM;;;;TB;DY;HO;ER;TM;YB:)',/,' THE SIGNS'
     1,' GIVEN BY LEA/LEASK/WOLF FOR W/X FOR POINT GROUP OH (CUB(I)):',/
     2,' +/+1;+/-;-/+;+/+;-/-;+/-;-/+;+/+;-/-;+/-; AND FOR POINT GROUP T
     3D:',/,' -/+1;+/+;-/-;+/-;-/+;+/+;-/-;+/-;-/+;+/+.')
      ENDIF
      ENDIF
      ENDIF
      ENDIF
      IF(JANOL.NE.0)THEN
 3730 IF(BWWW(3).GT.ONE)BWWW(3)=BWWW(3)-TWO
      IF(BWWW(3).LT.-ONE)BWWW(3)=BWWW(3)+TWO
      IF(BWWW(3).LT.-ONE.OR.BWWW(3).GT.ONE)GOTO 3730
C
      ONEMX=ONE-DABS(BWWW(3))
      WLEA=BWWW(7)
      BWWW(3)=WLEA*BWWW(3)/F4F(NREL)
      BWWW(7)=WLEA*ONEMX/F6F(NREL)
C
      JANOS=1
      GOTO 3738
      ELSE IF(JANOL.EQ.0)THEN
      IF(MOROUT.NE.0.AND.KLICKM.EQ.0)THEN
      KLICKM=1
      WRITE(*,3783)
      WRITE(11,3783)
 3783 FORMAT(' THE FOLLOWING OUTPUT IS ONLY(!) RELEVANT, IF(!)'
     1,/,' INPUT VALUES ARE "STEVENS"-VALUES!')
      B4=BWWW(3)
      B6=BWWW(7)
      F4=F4F(NREL)
      F6=F6F(NREL)
      WRITE(11,565)F4,F6
      WRITE(*,565)F4,F6
  565 FORMAT(' X CORRESP. TO LEA,LEASK,WOLF (F(4) AND F(6)=',2F8.0,'):')
      B4DB6=9.999D0
      IF(B6.NE.ZERO)B4DB6=B4/B6
      DB4DB6=DABS(B4DB6)
      IF(B4DB6.EQ.ZERO.OR.B4DB6.EQ.9.999D0)THEN
      IF(B4DB6.EQ.ZERO)THEN
      WRITE(11,5663)B4,B6
      WRITE(*,5663)B4,B6
 5663 FORMAT(' B4 / B6 IS ZERO, BECAUSE B4=',D10.2,', B6=',D10.2)
      ELSE
      WRITE(11,5664)B4,B6
      WRITE(*,5664)B4,B6
 5664 FORMAT(' B4 / B6 NOT CALC., BECAUSE B4=',D10.2,', B6=',D10.2)
      ENDIF
      IF(B4.EQ.ZERO)XXX=ZERO
      IF(B6.EQ.ZERO)XXX=DSIGN(ONE,B4)
      IF(B4.EQ.ZERO.AND.B6.EQ.ZERO)XXX=9.999D0
      IF(B4.GE.ZERO)QXX='POS'
      IF(B4.EQ.ZERO.AND.B6.EQ.ZERO)QXX='IND'
      IF(B4.LT.ZERO)QXX='NEG'
      ELSE
      IF(F4.NE.ZERO)FNENNE=F6/F4+DB4DB6
      IF(FNENNE.NE.ZERO)XXX=B4DB6/FNENNE
      IF(B4DB6.GT.ZERO)QXX='POS'
      IF(B4DB6.LT.ZERO)QXX='NEG'
      END IF
      WRITE(11,5661)QXX,B4DB6,DB4DB6,XXX
      WRITE(*,5661)QXX,B4DB6,DB4DB6,XXX
 5661 FORMAT(
     1' X IS ',A4,' ,X=',D12.4,'/(F(6)/F(4) +',D12.4,') = ',F9.6)
      DABXXX=DABS(XXX)
      IF(DABXXX.GT.HALF)THEN
      WXX=B4*F4/XXX
      ELSE
      WXX=B6*F6/(ONE-DABXXX)
      END IF
      WRITE(11,567)B6,WXX
      WRITE(*,567)B6,WXX
  567 FORMAT(' W ',
     1'CORRESP. TO LEA,LEASK,WOLF =',D12.4,'*F(6)/(1-ABS(X)) = ',F11.6)
      ENDIF
C**   ENDIF FOLLOWING BELONGS TO "IF(JANOL.NE.0) ELSE "!:
      ENDIF
C
 1233 CONTINUE
      IF(NREL.EQ.6.OR.NREL.EQ.7)THEN
      IF(KLICKS.EQ.0.AND.LESS.EQ.0)THEN
      KLICKS=1
      WRITE(11,3734)
 8224 WRITE(*,3734)
 3734 FORMAT(/,' F EL. AND (NREL.EQ.6.OR.NREL.EQ.7): THE (WYBOURNE)'
     1,' COEFFICIENTS',/,' PUT IN CANNOT BE INTERPRETED HERE AS STEVENS'
     2,' COEFFICIENTS: INPUT NO(0)!')
C**   JANO-Stevens
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3848)JANOS
      GOTO 4848
      ENDIF
 3848 READ(*,'(I1)',ERR=8224,END=4576)JANOS
      LMN=1
 4848 JANOS=0
      WRITE(7,2277)JANOS
      WRITE(*,2772)JANOS
      WRITE(11,2772)JANOS
      ENDIF
      GOTO 1234
      ENDIF
C
      IF(KLICKS.EQ.0.AND.LESS.EQ.0)THEN
      KLICKS=1
      WRITE(11,3735)
 8222 WRITE(*,3735)
 3735 FORMAT(/,' F EL.: THE (WYBOURNE) COEFFICIENTS PUT IN SHOULD BE'
     1,' INTERPRETED',/,' HERE AS STEVENS COEFFICIENTS: YES/NO(0)?',/
     2,' (IF THERE ARE ANY RELATIONS OF COEFFICIENTS, THESE ARE',/
     3,' RELATIONS OF THE COMPUTED WYBOURNE COEFFICIENTS, HOWEVER!)')
C**   JANO-Stevens
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3849)JANOS
      GOTO 4849
      ENDIF
 3849 READ(*,'(I1)',ERR=8222,END=4576)JANOS
      LMN=1
 4849 WRITE(7,2277)JANOS
 2277 FORMAT(I1,' =JANOS(tevens)')
      WRITE(*,2772)JANOS
      WRITE(11,2772)JANOS
 2772 FORMAT(I2,' =JANOS(tevens)!!!!!!!!!')
      IF(JANOS.NE.0)JANOLS=1
      ENDIF
C
 3738 IF(JANOS.NE.0)THEN
C**   GAMMA=ZERO FOR CE3+ AND SM3+!:
      IF(KLWERT.EQ.3.AND.(NREL.EQ.1.OR.NREL.EQ.5))THEN
      IF(BWWW(7).NE.ZERO.OR.BWWW(8).NE.ZERO.OR.BWWW(9).NE.ZERO.OR.BWWW
     1(10).NE.ZERO.OR.BWWW(11).NE.ZERO.OR.IBWWW(7).NE.0.OR.IBWWW(8).NE.0
     2.OR.IABS(IBWWW(9)).EQ.1.OR.IABS(IBWWW(10)).EQ.1.OR.IABS(IBWWW(11))
     3.EQ.1)THEN
      WRITE(*,3731)
      WRITE(11,3731)
 3731 FORMAT(
     1' GAMMA, NEEDED HERE FOR CE3+ AND SM3+, IS ZERO: THEREFORE STOP')
      STOP 'GAMMA'
      ENDIF
      ENDIF
C     B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66:
      BWWW(1)=BWWW(1)*TWO/ALPHAJ(NREL)
      IF(IBWWW(2).GE.0)BWWW(2)=BWWW(2)*0.8164966D0/ALPHAJ(NREL)
      BWWW(3)=BWWW(3)*8.0D0/BETAJ(NREL)
      IF(IBWWW(4).GE.0)BWWW(4)=BWWW(4)*1.264911D0/BETAJ(NREL)
      IF(IBWWW(5).GE.0)BWWW(5)=-BWWW(5)*0.3380617D0/BETAJ(NREL)
      IF(IBWWW(6).GE.0)BWWW(6)=BWWW(6)*0.9561828D0/BETAJ(NREL)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-3).GE.0)BWWW(IN24-3)=-BWWW(IN24-3)
     1*0.40824829D0/ALPHAJ(NREL)
      IF(IBWWW(IN24-2).GE.0)BWWW(IN24-2)=-BWWW(IN24-2)
     1*0.89442719D0/BETAJ(NREL)
      ENDIF
      IF(NREL.NE.1.AND.NREL.NE.5)THEN
C**   NOW ONLY FOR F EL.! (BECAUSE OF KMASKE!):
      BWWW(7)=BWWW(7)*16.0D0/GAMMAJ(NREL)
      IF(IBWWW(8).GE.0)BWWW(8)=BWWW(8)*1.561440D0/GAMMAJ(NREL)
      IF(IBWWW(9).GE.0)BWWW(9)=-BWWW(9)*0.7807201D0/GAMMAJ(NREL)
      IF(IBWWW(10).GE.0)BWWW(10)=BWWW(10)*1.425393D0/GAMMAJ(NREL)
      IF(IBWWW(11).GE.0)BWWW(11)=BWWW(11)*1.052723D0/GAMMAJ(NREL)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-1).GE.0)BWWW(IN24-1)=-BWWW(IN24-1)
     1*1.23442680D0/GAMMAJ(NREL)
      IF(IBWWW(IN24).GE.0)BWWW(IN24)=-BWWW(IN24)
     1*0.30389487D0/GAMMAJ(NREL)
      ENDIF
      ENDIF
      ENDIF
C
 1234 CONTINUE
C**   BELONGS TO "IF(KLWERT.NE.3).." OR "IF(NREL.EQ.6.OR.NREL.EQ.7)GOTO 1234"
C
      IF(JATEST.NE.0.AND.NRDIRE.EQ.3.AND.KLICKX.EQ.0)THEN
      KLICKX=1
      WRITE(11,3031)
 3032 WRITE(*,3031)
 3031 FORMAT(' BECAUSE X- AND(!) Y-DIRECTION ARE INVOLVED, THESE MAY BE'
     1,' EXCHANGED',/,' ONE TO EACH OTHER (FOR TEST PURPOSES!), IF SOME 
     2SIGNS ARE REVERSED:',/,' INPUT >0 TO DO SO (B22, B42, B62, B66)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3850)JAREVS
      GOTO 4850
      ENDIF
 3850 READ(*,'(I1)',ERR=3032,END=4576)JAREVS
      LMN=1
 4850 WRITE(7,2278)JAREVS
 2278 FORMAT(I1,' =JAREVS(REVerSed)')
      WRITE(*,2782)JAREVS
      WRITE(11,2782)JAREVS
 2782 FORMAT(I2,' =JAREVS(REVerSed)!!!!!!!!!')
      ENDIF
      IF(JAREVS.NE.0)THEN
      DO 3033 I=1,11
      IF(MASKX2(I).EQ.0)BWWW(I)=-BWWW(I)
 3033 CONTINUE
      ENDIF
C
      IF(KLWERT.EQ.2.OR.KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWWW(6)=BWWW(3)*DSQRT(5.0D0/14.0D0)
      ELSE IF(NGROUP.EQ.22)THEN
C**   THE SIGN IN FRONT OF DSQRT IS MINUS! THE C3-STEP-UP OPERATOR WITH MINUS
C     SIGN IN FRONT OF IT IS USED (AS USUAL!)!
      BWWW(5)=BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      ENDIF
C**   NEXT TWO LINES ARE MASKED, IF "CUBIC" (I.E. IBWWW=0!)!:
      IF(IBWWW(6).LT.0)BWWW(6)=BWWW(6)*BWWW(3)*DSQRT(5.0D0/14.0D0)
      IF(IBWWW(5).LT.0)BWWW(5)=BWWW(5)*BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      IF(JAWARN.EQ.-1.AND.IBWWW(5).EQ.-1)JAWARN=5
      IF(JAWARN.EQ.-1.AND.IBWWW(5).EQ.-2.AND.BWWW(5).NE.ZERO)JAWARN=5
      IF(JAWARN.EQ.-1.AND.IBWWW(6).EQ.-1)JAWARN=6
      IF(JAWARN.EQ.-1.AND.IBWWW(6).EQ.-2.AND.BWWW(6).NE.ZERO)JAWARN=6
      IF(IBWWW(4).LT.0)BWWW(4)=BWWW(4)*BWWW(3)
      IF(IBWWW(2).LT.0)BWWW(2)=BWWW(2)*BWWW(1)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-3).LT.0)BWWW(IN24-3)=BWWW(IN24-3)*BWWW(1)
      IF(IBWWW(IN24-2).LT.0)BWWW(IN24-2)=BWWW(IN24-2)*BWWW(3)
      ENDIF
      ENDIF
      IF(KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWWW(10)=BWWW(7)*(-DSQRT(3.5D0))
      ELSE IF(NGROUP.EQ.22)THEN
      BWWW(9)=BWWW(7)*DSQRT(210.0D0)/24.0D0
C**   FORMULA FROM M.T. HUTCHINGS, SOLID STATE PHYSICS VOL.16(1964),227
C     ACADEMIC PRESS NEW YORK AND LONDON; FORMULA (2.15) PAGE 246;
C     (THE OPERATOR IS (Y6-3) - (Y6+3)).
      BWWW(11)=BWWW(7)*DSQRT(231.0D0)/24.0D0
      ENDIF
      IF(IBWWW(10).LT.0)BWWW(10)=BWWW(10)*BWWW(7)*(-DSQRT(3.5D0))
      IF(IBWWW(9).LT.0)BWWW(9)=BWWW(9)*BWWW(7)*DSQRT(210.0D0)/24.0D0
      IF(IBWWW(11).LT.0)BWWW(11)=BWWW(11)*BWWW(7)*DSQRT(231.0D0)/24.0D0
      IF(JAWARN.EQ.-1.AND.IBWWW(9).EQ.-1)JAWARN=9
      IF(JAWARN.EQ.-1.AND.IBWWW(9).EQ.-2.AND.BWWW(9).NE.ZERO)JAWARN=9
      IF(JAWARN.EQ.-1.AND.IBWWW(10).EQ.-1)JAWARN=10
      IF(JAWARN.EQ.-1.AND.IBWWW(10).EQ.-2.AND.BWWW(10).NE.ZERO)JAWARN=10
      IF(JAWARN.EQ.-1.AND.IBWWW(11).EQ.-1)JAWARN=11
      IF(JAWARN.EQ.-1.AND.IBWWW(11).EQ.-2.AND.BWWW(11).NE.ZERO)JAWARN=11
      IF(IBWWW(8).LT.0)BWWW(8)=BWWW(8)*BWWW(7)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-1).LT.0)BWWW(IN24-1)=BWWW(IN24-1)*BWWW(7)
      IF(IBWWW(IN24).LT.0)BWWW(IN24)=BWWW(IN24)*BWWW(7)
      ENDIF
      ENDIF
      IF(JAWARN.GT.4.AND.JAWARN.LT.12)THEN
      WRITE(*,1198)JAWARN
      WRITE(11,1198)JAWARN
 1198 FORMAT(' WARNING: AT LEAST ONE OF THE RATIOS OF WYBOURNE PARAMETER
     1S PUT IN IS CHANGED NOW',/,' OR LATER ON, NAMELY THE',I3,'TH PARAM
     2ETER. IT IS MULTIPLIED BY',/,' -SQRT(10./7.),SQRT(5./14.),SQRT(210
     3.)/24.,-SQRT(3.5),',/,' AND SQRT(231.)/24., FOR No.=5,6,9,10, AND 
     411, RESPECTIVELY.')
      JAWARN=12
      ENDIF
C
      IF(KLWERT.EQ.3.AND.KLICKV.EQ.0.AND
     1.LESS.EQ.0.AND.JANOS.EQ.0.AND.JATEST.NE.0)THEN
      KLICKV=1
      IF(NREL.EQ.6.OR.NREL.EQ.7)THEN
      WRITE(11,3664)
 8823 WRITE(*,3664)
 3664 FORMAT(' FOR EU'
     1,' OR GD: CALC. OF STEVENS VALUES NOT POSS.: INPUT NO(0)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3851)JANOV
      GOTO 4851
      ENDIF
 3851 READ(*,'(I1)',ERR=8823,END=4576)JANOV
      LMN=1
 4851 JANOV=0
      WRITE(7,2279)JANOV
      WRITE(*,2792)JANOV
      WRITE(11,2792)JANOV
      ELSE
      WRITE(11,3663)
 8822 WRITE(*,3663)
 3663 FORMAT(' FOR TEST'
     1,' PURPOSES: CALC. AND OUTPUT OF STEVENS VALUES: YES/NO(0)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3852)JANOV
      GOTO 4852
      ENDIF
 3852 READ(*,'(I1)',ERR=8822,END=4576)JANOV
      LMN=1
 4852 WRITE(7,2279)JANOV
 2279 FORMAT(I1,' =JANOV(alues Stevens)')
      WRITE(*,2792)JANOV
      WRITE(11,2792)JANOV
 2792 FORMAT(I2,' =JANOV(alues Stevens)!!!!!!!!!')
      IF(JANOV.NE.0)THEN
      STEV(1)=BWWW(1)*ALPHAJ(NREL)/TWO
      STEV(2)=BWWW(2)*ALPHAJ(NREL)/0.8164966D0
      STEV(3)=BWWW(3)*BETAJ(NREL)/8.0D0
      STEV(4)=BWWW(4)*BETAJ(NREL)/1.264911D0
      STEV(5)=-BWWW(5)*BETAJ(NREL)/0.3380617D0
      STEV(6)=BWWW(6)*BETAJ(NREL)/0.9561828D0
      STEV(7)=BWWW(7)*GAMMAJ(NREL)/16.0D0
      STEV(8)=BWWW(8)*GAMMAJ(NREL)/1.561440D0
      STEV(9)=-BWWW(9)*GAMMAJ(NREL)/0.7807201D0
      STEV(10)=BWWW(10)*GAMMAJ(NREL)/1.425393D0
      STEV(11)=BWWW(11)*GAMMAJ(NREL)/1.052723D0
      STEV(12)=BWWW(12)
      STEV(13)=BWWW(13)/VPREZ6
      IF(IN24.GT.20)THEN
      STEV(14)=-BWWW(IN24-3)*ALPHAJ(NREL)/0.40824829D0
      STEV(15)=-BWWW(IN24-2)*BETAJ(NREL)/0.89442719D0
      STEV(16)=-BWWW(IN24-1)*GAMMAJ(NREL)/1.23442680D0
      STEV(17)=-BWWW(IN24)*GAMMAJ(NREL)/0.30389487D0
      ENDIF
      WRITE(*,9102)(IBWWW(I),STEV(I),I=1,13)
      WRITE(11,9102)(IBWWW(I),STEV(I),I=1,13)
 9102 FORMAT(
     1' CALCULATED STEVENS VALUES (PLUS 2 OTHER VALUES; 13<=>LAMBDA'
     1,' IN CGS):',/,3(I2,D16.8))
      IF(IN24.GT.20)THEN
      WRITE(*,9103)(IBWWW(I),STEV(I),I=14,17)
      WRITE(11,9103)(IBWWW(I),STEV(I),I=14,17)
 9103 FORMAT(' (CALCULATED STEVENS VALUES):',/,3(I2,D16.8))
      ENDIF
      ENDIF
      ENDIF
      ENDIF
C
 6789 CONTINUE
      IF(KLICKT.EQ.0)THEN
      KLICKT=1
      WRITE(*,9101)(IBWWW(I),BWWW(I),I=1,IN25)
      WRITE(11,9101)(IBWWW(I),BWWW(I),I=1,IN25)
 9101 FORMAT(/,' CALCULATED WYBOURNE VALUES (PLUS 9 OTHER VALUES) (1 OR 
     1-1 MEANS "FITTED"):',/,(1X,3(I3,D16.8)))
      ENDIF
C
      IF(LOWHIG.EQ.2)THEN
      DO 9120 I=1,11
      BWWW(I)=BWWW(I)/BWWW(18)
 9120 CONTINUE
      IF(IN24.GT.20)THEN
      DO 9112 I=21,IN24
      BWWW(I)=BWWW(I)/BWWW(18)
 9112 CONTINUE
      ENDIF
      ENDIF
 8765 CONTINUE
C**   "MOL(ECULAR)F(IE)LD" (MOLFLD.NE.0):
C**   "INTERNAL" FIELD = "EXTERNAL" FIELD:
      TESINT=TESLAS
      IF(JAOCTA.NE.0)GOTO 9753
C**   AN "INFINIT" LOOP:
      NRTURN=0
 9876 CONTINUE
C
      IF(TEMPIK(NRTEMP).EQ.ZERO)STOP 'T.EQ.0'
      IF(CHIMEA(NRTEMP).EQ.ZERO.AND.LOWDAT(NRTEMP).EQ.0
     1.AND.KLICK.EQ.0)THEN
      KLICK=1
      WRITE(*,9877)
      WRITE(11,9877)
 9877 FORMAT(' WARNING: CHIMEA(NRTEMP).EQ.ZERO AND WILL POSSIBLY BECOME'
     1,/,' A DENOMINATOR: "NO FIT POSSIBLE IN THIS CASE!"')
      ENDIF
      IFIRST=0
      IF(TEMPIK(NRTEMP).LT.ZERO)THEN
      ITEMP=INT(DABS(TEMPIK(NRTEMP))+0.0000000001D0)
      IF(NEWBWW.NE.0.OR.NEWKLI.EQ.0)THEN
      NEWKLI=1
      IFIRST=1
      TEMPTH=ONE
      IF(TESLAS.EQ.ZERO)TESLAS=0.1D0
      GOTO 9752
      ENDIF 
      ENDIF
 9751 CONTINUE
      IFIRST=0
C
      IF(TEMPIK(NRTEMP).LT.ZERO)THEN
      CHISTA(NRTEMP)=EIWERT(ITEMP)
      CHIZXY(1,NRTEMP)=EIWERT(ITEMP)
      CHIZXY(2,NRTEMP)=EIWERT(ITEMP)
      CHIZXY(3,NRTEMP)=EIWERT(ITEMP)
C      
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=EIWERT(ITEMP)
      CHI(2,I,J)=CHIMEA(NRTEMP)
 4121 CONTINUE
 4122 CONTINUE
C
      GOTO 9753
      ENDIF
C
 9752 IF(JAWIGN.EQ.0)THEN
C**   RELEVANT ONLY FOR LOWHIG.EQ.2:
      CHIOLD=CHISTA(NRTEMP)
      CHIZ=CHIZXY(1,NRTEMP)
      CHIX=CHIZXY(2,NRTEMP)
      CHIY=CHIZXY(3,NRTEMP)
C
      IF(LESS.NE.0.OR.LTS.NE.0)GOTO 2110
      IF(KNFORM.EQ.0.AND.(KLWERT.EQ.3.OR.JATEST.NE.0))THEN
      KNFORM=1
      IF((NREL.LT.5.OR.NREL.GT.9).AND.JATEST.EQ.0)THEN
      WRITE(11,2005)
 2008 WRITE(*,2005)
 2005 FORMAT(' (NREL.LT.5.OR.NREL.GT.9).AND.JATEST.EQ.0:',/,
     1' INTERFACE FORMAT FREE <=> FILE fort.13 NOT POSSIBLE! INPUT 0')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3853)INFORM
      GOTO 4853
      ENDIF
 3853 READ(*,'(I1)',ERR=2008,END=4576)INFORM
      LMN=1
 4853 INFORM=0
      WRITE(7,2002)INFORM
      WRITE(*,2020)INFORM
      WRITE(11,2020)INFORM
      ELSE
      WRITE(11,2009)
      WRITE(11,2004)
 2009 FORMAT(' (NREL.GE.5.AND.NREL.LE.9).OR.JATEST.NE.0:',/,
     1' IF >0 ITER.: WRITE LATER ON INTERFACE FORMAT FREE => FILE fort.1
     13',/,' (OPTION "JAFAST" BECOMES ACTIVE!) YES(2)/NO(0)? OR:')
 2004 FORMAT(' (THE FOLLOWING MAKES SENSE ONLY, IF THERE IS NOT THE FIRS
     1T START OF CONDON',/,' (OPTION "JAFAST" WAS ACTIVE?)!): READ INTER
     2FACE FORMAT FREE <= FILE fort.13',/,' YES(1)/NO(0)? (STANDARD: NO(
     30))')
 2003 WRITE(*,2009)
      WRITE(*,2004)
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3854)INFORM
      GOTO 4854
      ENDIF
 3854 READ(*,'(I1)',ERR=2003,END=4576)INFORM
      LMN=1
 4854 WRITE(7,2002)INFORM
      WRITE(*,2020)INFORM
      WRITE(11,2020)INFORM
 2002 FORMAT(I1,'=INFORM(FORMat free)')
 2020 FORMAT(I2,'=INFORM(FORMat free)!!!!!!!!!')
      IF(INFORM.EQ.1)THEN
      JAFAST=2
      READ(13,ERR=2001,END=2000)IGR1,IGR2,
     1NRVAL,NRVALF,BSTART,FMIKR3,TAWERT,TAFMAT,TAGMAT
      ELSE IF(INFORM.GT.1)THEN
      NOFORM=1
      ENDIF
      GOTO 2000
 2001 STOP 'INFORM-ERR'
 2000 CONTINUE
      ENDIF
      ENDIF
C
      IF(JAFAST.EQ.1.AND.JNFORM.EQ.0)THEN
      JNFORM=1
C**   JAFAST.EQ.1 IS NOT POSSIBLE, IF THERE IS THE FIRST RUN!
      IF(NOFORM.NE.0)WRITE(13,ERR=2007)IGR1,IGR2,
     1NRVAL,NRVALF,BSTART,FMIKR3,TAWERT,TAFMAT,TAGMAT
      GOTO 2006
 2007 STOP 'NOFORM-ERR'
 2006 CONTINUE
      ENDIF
C**   IF(NOFORM.NE.0)JAFAST=1
 2110 CONTINUE
C
      CALL TANABE(NGROUP,NOFORM,
     1EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,TESINT
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE, THE SUBROUTINE CALLED HERE:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
C
      IF(LOWHIG.EQ.2)THEN
      FKT=BOLZCM*TEMPTH
      EXPDEL=DEXP(-BWWW(19)/FKT)
C**   Now with(!) entropy!:
      EXPENT=DEXP(BWWW(20)/BOLZCM)
C**   Equilibrium constant!:
      GLEICH=EXPDEL*EXPENT
C**   GEWF2 CORRESP. TO "HIGH" TEMP.!:
      GEWF2=GLEICH/(ONE+GLEICH)
      GEWF1=ONE-GEWF2
      CHINEW=CHIOLD*GEWF1+CHISTA(NRTEMP)*GEWF2
      CHISTA(NRTEMP)=CHINEW
      CHIZXY(1,NRTEMP)=CHIZ*GEWF1+CHIZXY(1,NRTEMP)*GEWF2
      CHIZXY(2,NRTEMP)=CHIX*GEWF1+CHIZXY(2,NRTEMP)*GEWF2
      CHIZXY(3,NRTEMP)=CHIY*GEWF1+CHIZXY(3,NRTEMP)*GEWF2
      CHI(1,4,1)=CHISTA(NRTEMP)
C
      CHI(1,4,2)=ZERO
      IF(CHI(1,4,1).NE.ZERO)CHI(1,4,2)=ONE/CHI(1,4,1)
      CHI(1,4,5)=CHI(1,4,1)*TESLAS
      CHI(1,4,3)=-CHI(1,4,5)/PREVOR
      CHI(1,4,4)=ZERO
      IF(CHI(1,4,1).GT.ZERO.AND.TEMPIK(NRTEMP).GT.ZERO)CHI(1,4,4)
     1=797.730D0*DSQRT(CHI(1,4,1)*TEMPIK(NRTEMP))
      CHI(1,4,7)=ZERO
      IF(CHI(1,4,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(1,4,7)
     1=797.730D0*DSQRT(CHI(1,4,1)*TEMPTH)
      CHI(1,4,6)=CHI(1,4,1)*VPREZ6
      DO 3122 J=1,7
      DO 3121 I=1,3
      CHI(1,I,J)=CHI(1,4,J)
 3121 CONTINUE
 3122 CONTINUE
C
      ENDIF
C
      ELSE IF(JAWIGN.NE.0)THEN
C**   JAWIGN.NE.0 <=> SUBROUTINE (WIGNER-)ECKART RUNS (FOR F EL.;
C     IF "JATEST", ALSO FOR D EL.):
      CALL ECKART(NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,TESINT
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCE IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE ECKART, THE SUBROUTINE CALLED HERE:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
      ENDIF
C
      IF(MOLFLD.NE.0)THEN
      NRTURN=NRTURN+1
      STRILA=BWWW(17)
C**   CALCULATION OF "INTERNAL"(!) FIELD "TESINT" (= EXT.FIELD+LAMBDA*MAGN.)
C     (MAGN. NOT(!) A FUNCTION OF TESLAS, BUT OF TESINT!):
      TESINT=TESLAS+STRILA*CHI(1,1,5)
      DIFF=CHI(1,1,1)-CHIALT
      CHIALT=CHI(1,1,1)
C
      IF(TESINT.LT.ZERO)THEN
      WRITE(*,3739)TEMPIK(NRTEMP),TESINT
      WRITE(11,3739)TEMPIK(NRTEMP),TESINT
 3739 FORMAT(' SUM OF ',
     1'FIELD AND MOL.-FIELD BECOMES NEGATIV AT T = ',F7.2,'(',E16.8,')')
      IF(KLICOV.EQ.0)THEN
      KLICOV=1
      WRITE(11,3792)
 3791 WRITE(*,3792)
 3792 FORMAT(' THE ITER. CONCERNED IS WRONG! TRIAL TO OVERCOME YES(0)/NO
     1(STOP)?',/,' (IF 0-TH ITER., SQX AND THE VALUES AT THE TEMP. CONCE
     2RNED ARE WRONG)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3855)JWRONG
      GOTO 4855
      ENDIF
 3855 READ(*,'(I1)',ERR=3791,END=4576)JWRONG
      LMN=1
 4855 WRITE(7,2207)JWRONG
 2207 FORMAT(I1,' = JWRONG IN SUSC')
      WRITE(*,2072)JWRONG
      WRITE(11,2072)JWRONG
 2072 FORMAT(I2,' = JWRONG IN SUSC!!!!!!!!!')
      IF(JWRONG.NE.0)STOP 'JWRONG'
      ENDIF
      RETURN
      ENDIF
C
      IF(LAUFNR.LE.9.OR.MOROUU.NE.0)THEN
      LAUFNR=LAUFNR+1
      IF(MOROUT.NE.0.AND.LAUFNR.EQ.1)THEN
      WRITE(11,3793)
 3794 WRITE(*,3793)
 3793 FORMAT(' MOROUT.NE.0: INPUT IN 2I1 MORE OUTPUT (2*) IN "MOLFLD"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3856)MOROUU,MOROUV
      GOTO 4856
      ENDIF
 3856 READ(*,'(2I1)',ERR=3794,END=4576)MOROUU,MOROUV
      LMN=1
 4856 WRITE(7,2270)MOROUU,MOROUV
 2270 FORMAT(2I1,' =MOROUU,MOROUV IN SUSC')
      WRITE(*,2702)MOROUU,MOROUV
      WRITE(11,2702)MOROUU,MOROUV
 2702 FORMAT(2I2,' =MOROUU,MOROUV IN SUSC!!!!!!!!!')
      ENDIF
      WRITE(*,3737)TEMPIK(NRTEMP),NRTURN,CHI(1,1,5),TESLAS,TESINT,DIFF
      WRITE(11,3737)TEMPIK(NRTEMP),NRTURN,CHI(1,1,5),TESLAS,TESINT,DIFF
 3737 FORMAT(' TEMP., LOOP, MAGN., FIELD EXT./ INT., CHI-DIFF='
     1,F7.2,I8,/,4E14.6)
      ENDIF
C
C**   AN "INFINIT" LOOP:
      IF(KLICKN.EQ.0)PARMOL=0.0000000001D0
      IF(JATEST.NE.0.AND.KLICKN.EQ.0)THEN
      KLICKN=1
      WRITE(11,3774)PARMOL
 3775 WRITE(*,3774)PARMOL
 3774 FORMAT(' PAR FOR "MOLFLD" (I.E. CRIT. FOR CONV. OF CHI) =',D16.8
     1,/,' IF OTHER, INPUT IN E16.8! ("RETURN" => "NO CHANGE"!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3857)PARMOK
      GOTO 4857
      ENDIF
 3857 READ(*,'(D16.8)',ERR=3775,END=4576)PARMOK
      LMN=1
 4857 IF(PARMOK.NE.ZERO)THEN
      PARMOL=PARMOK
      WRITE(7,2271)PARMOL
 2271 FORMAT(D16.8,' =PARMOL')
      WRITE(*,2271)PARMOL
      WRITE(11,2271)PARMOL
      ENDIF
      ENDIF
      IF(DABS(DIFF).GT.PARMOL)GOTO 9876
C
      IF((LAUFNS.LE.9.AND.TEMPIK(NRTEMP).LT.9.0D0).OR.MOROUV.NE.0)THEN
      LAUFNS=LAUFNS+1
      WRITE(*,3773)TEMPIK(NRTEMP),NRTURN,CHI(1,1,5),TESLAS,TESINT,DIFF
      WRITE(11,3773)TEMPIK(NRTEMP),NRTURN,CHI(1,1,5),TESLAS,TESINT,DIFF
 3773 FORMAT(' TEMP., NRTURN, MAGN., FIELD EXT./ INT., CHI-DIFF='
     1,F7.2,I8,/,4E14.6)
      ENDIF
      TESINT=TESLAS
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(MOLFLD.NE.0)THEN"!
C
 9753 CONTINUE
C
      IF(IFIRST.NE.0)GOTO 9751
C**   RETURNS TO LEVSQX OR LEVDER!
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUSC
      END
      BLOCKDATA GRIFFI
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/RRF/RACAHB,RACAHC,FKSIDA
      COMMON/RF/RACAKB(9),FKSIDK(9)
      PARAMETER(ZERO=0.0D0,ZE=ZERO)
      DOUBLE PRECISION RACAHB(9,5,3),RACAHC(9,5,3),FKSIDA(9,5,3)
      SAVE
CF1   DATA RACAHA/ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO/
C**   STORAGE NAMED ...KB AND ...DK CORRESP. TO DATA OF KOENIG/KREMER:
C**   DATA FOR IONS WITH ONE TO NINE D ELECTRONS
C     FROM KOENIG/KREMER (1(!) EL. HAS ZERO EL.-EL. REPULSION!)!:
      DATA RACAKB/ZERO,630.D0,700.D0,800.D0,825.D0,806.D0
     1,825.D0,905.D0,ZERO/
C**   ABOVE: RACAH-PARAMETERS; BELOW: KSI RESP. ZETA (SPIN-ORBIT
C     COUPL.-CONST. FOR ONE(!) ELECTRON)!
      DATA FKSIDK/200.D0,210.D0,270.D0,290.D0,400.D0,420.D0
     1,515.D0,650.D0,830.D0/
C
C**   NOW DATA FROM GRIFFITH HERE IN BLOCKDATA GRIFFI!:
C**   LIT.: J.S.GRIFFITH: THE THEORY OF TRANSITION-METAL IONS,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1971.                    
C
      DATA RACAHB
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/ZERO,560.D0,578.D0,ZERO,720.D0,806.D0,798.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,659.D0,710.D0,ZERO,ZERO,878.D0,1037.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,718.D0,766.D0,830.D0,960.D0,1058.D0
     3,1115.D0,1084.D0,1238.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,861.D0,1030.D0,1140.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,1039.D0,ZERO,1144.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,ZERO,254.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,260.D0,440.D0,ZERO,474.D0,667.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,ZERO,539.D0,532.D0,ZERO,ZERO,ZERO,620.D0,826.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,602.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,ZERO,ZERO,345.D0,371.D0,847.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,847.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
C
      DATA RACAHC
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/ZERO,1840.D0,2273.D0,ZERO,3087.D0,3506.D0,4167.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,2417.D0,2790.D0,ZERO,ZERO,3828.D0,4314.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,2629.D0,2855.D0,3430.D0,3325.D0,3901.D0
     3,4366.D0,4831.D0,4659.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,4165.D0,3850.D0,3675.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,4238.D0,ZERO,4459.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,ZERO,1975.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,1990.D0,1987.D0,ZERO,1806.D0,2313.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,ZERO,1640.D0,2095.D0,ZERO,ZERO,ZERO,4002.D0,2620.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,1367.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,ZERO,ZERO,1289.D0,1900.D0,1182.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZERO,ZERO,ZERO,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,1182.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
C
      DATA FKSIDA
C - FOR HALF FILLED SHELLS - (HERE: WITH S ORB.**2 AND WITHOUT S ORB., RESP.)
C - I.E. MN2+=MNIII, MNI, CRII, MOII, TCI, REI - LAMBDA BECOMES ZERO!
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/67.D0,111.D0,158.D0,ZERO,239.D0,391.D0,517.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,136.D0,222.D0,ZERO,ZERO,456.D0,603.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,79.D0,121.D0,167.D0,230.D0,347.D0,410.D0
     3,533.D0,649.D0,829.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,154.D0,209.D0,273.D0,352.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,248.D0,327.D0,ZERO,514.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,212.D0,335.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,490.D0,672.D0,ZERO,887.D0,1212.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,290.D0,403.D0,554.D0,ZERO,ZERO,ZERO,1235.D0,1615.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,670.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES
C     (IONS (CHARGE.GE.1): HF1+ AND RE3+ (WITH DATA OF RE+-0) ONLY):
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,798.D0,ZERO,1657.D0,2089.D0,2285.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,1336.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZERO,ZERO,ZERO,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,2285.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
CEND BLOCKDATA GRIFFI
      END
      BLOCKDATA WIGNER
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FINTE/FINT(4,13),FKSIWI(13)
      SAVE
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0
     1,F22=225.0D0,F440=1089.0D0,F660=7361.64D0,F42=0.145D0,F62=0.0164D0
     1,F44=F42*F440,F66=F62*F660
     1,FCE=ZERO,FPR=320.D0,FND=327.D0,FPM=ZERO,FSM=370.D0,FEU=401.D0
     2,FGD=408.D0,FTB=434.D0,FDY=420.D0,FHO=450.D0,FER=433.D0,FTM=447.D0
     2,FYB=ZERO,DAT22=FPR*F22,DAT23=FPR*F44,DAT24=FPR*F66
     3,DAT32=FND*F22,DAT33=FND*F44,DAT34=FND*F66
     5,DAT52=FSM*F22,DAT53=FSM*F44,DAT54=FSM*F66
     6,DAT62=FEU*F22,DAT63=FEU*F44,DAT64=FEU*F66
     7,DAT72=FGD*F22,DAT73=FGD*F44,DAT74=FGD*F66
     8,DAT82=FTB*F22,DAT83=FTB*F44,DAT84=FTB*F66
     9,DAT92=FDY*F22,DAT93=FDY*F44,DAT94=FDY*F66
     1,DAT102=FHO*F22,DAT103=FHO*F44,DAT104=FHO*F66
     1,DAT112=FER*F22,DAT113=FER*F44,DAT114=FER*F66
     2,DAT122=FTM*F22,DAT123=FTM*F44,DAT124=FTM*F66)
      DATA FINT/ZERO,ZERO,ZERO,ZERO,ZERO,DAT22,DAT23,DAT24,ZERO,DAT32
     2,DAT33,DAT34,ZERO,ZERO,ZERO,ZERO,ZERO,DAT52,DAT53,DAT54
     3,ZERO,DAT62,DAT63,DAT64,ZERO,DAT72,DAT73,DAT74
     2,ZERO,DAT82,DAT83,DAT84,ZERO,DAT92,DAT93,DAT94
     4,ZERO,DAT102,DAT103,DAT104,ZERO,DAT112,DAT113,DAT114
     5,ZERO,DAT122,DAT123,DAT124,ZERO,ZERO,ZERO,ZERO/
      DATA FKSIWI/640.D0,759.D0,885.D0,0.0D0,1200.D0,1320.D0
     1,1470.D0,1705.D0,1900.D0,2163.D0,2393.D0,2617.D0,2883.D0/
CEND BLOCKDATA WIGNER
      END
      BLOCKDATA STEVEN
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      SAVE
      PARAMETER(ZERO=0.0D0,SZ=60.0D0,SECHSS=6.0D0/7.0D0
     1,VIERDR=4.0D0/3.0D0,SIEBSE=7.0D0/6.0D0,ACHTSI=8.0D0/7.0D0
     1,ACHELF=8.0D0/11.0D0,ZWEISI=2.0D0/7.0D0)
C
C**   ALPHA=ZERO <=> GD AND EU!
      DATA ALPHAJ/-0.57142857D-1,-0.21010101D-1,-0.64279153D-2
     1,0.77134985D-2,0.41269843D-1,ZERO,ZERO
     2,-0.10101010D-1,-0.63492064D-2,-0.22222223D-2
     3,0.25396824D-2,0.10101010D-1,0.31746034D-1/
C
C**   BETA =ZERO <=> GD AND EU!
      DATA BETAJ/0.63492064D-2,-0.73461892D-3,-0.29110772D-3
     1,0.40755083D-3,0.25012025D-2,ZERO,ZERO
     2,0.12243648D-3,-0.59200058D-4,-0.33300032D-4
     3,0.44400043D-4,0.16324865D-3,-0.17316018D-2/
C
C**   GAMMA=ZERO <=> GD, EU, CE AND SM!
      DATA GAMMAJ/ZERO,0.60994000D-4,-0.37987957D-4
     1,0.60781D-4,ZERO,ZERO,ZERO
C**   FOR PM(3+) SEE LEA/LEASK/...!
     2,-0.11212132D-5,0.10349661D-5,-0.12937076D-5
     3,0.20699322D-5,-0.56060662D-5,0.14800015D-3/
C
      DATA F4F/SZ,SZ,84.0D0,SZ,SZ,ZERO,ZERO
     1,SZ,SZ,420.D0,SZ,SZ,SZ/
C**   ZERO <=> EU(J=0) - 84. <=> ND(J=9/2) - 420. <=> HO(J=8)
C
      DATA F6F/ZERO,1260.D0,5040.D0,1260.D0,ZERO,ZERO,ZERO
     1,7560.D0,13860.D0,13860.D0,13860.D0,7560.D0,1260.D0/
C**   ZERO <=> EU(J=0), SM(J=5/2), CE(J=7/2)!
C
      DATA GFACTA/SECHSS,0.8D0,ACHELF,0.6D0,ZWEISI,ZERO,2.0D0
     1,1.5D0,VIERDR,1.25D0,1.2D0,SIEBSE,ACHTSI/
C
      DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
CEND BLOCKDATA STEVEN
      END
      BLOCKDATA WWWWWW
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      COMMON/MAINPR/ZETA,ABST,FINTEG(4),REDFAZ(3),DIRECZ(3),SIGMA0(601)
     1,JASTRU,KLWERT,NREL,JAWIGN,NGROUP,JAVANV,MOLFLD,MIST16,KMASKE(20)
      SAVE
      DATA J2/36/
      DATA TEMPIK/300.,250.,200.,150.,100.,90.,80.,70.,60.,50.,45.,40.
     1,35.,30.,25.,20.,19.,18.,17.,16.,15.,14.5,14.
     2,13.5,13.,12.5,12.,11.5,11.,10.5,10.,9.5,9.,8.5,8.
     3,7.5,7.,6.5,6.,5.5,5.,4.5,4.,3.5,3.,2.5,2.
     4,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1.0
     5,0.9,0.8,0.7,0.6,0.5,0.45,0.4,0.35,0.3,0.25,0.2,0.15,0.1,0.05
     6,530*ZERO/
      DATA SIGMA/71*ONE,530*ZERO/
      DATA TESDAT/71*0.1D0,530*ZERO/
      DATA LOWDAT/601*0/
      DATA INBWWW/36*0/
      DATA IBWWW/36*0/
      DATA BWWWIN/36*ZERO/
      DATA STBWWW/36*ZERO/
      DATA BWW/36*ZERO/
      DATA BWWW/36*ZERO/
      DATA NDATAM,NOPROZ,JAFFAK,NOANAL,MIXTUR,JAOVER/0,0,0,1,0,1/
      DATA VLSTNG/40*ZERO/
      DATA KMASKE/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1/
      DATA SIGMA0/601*ONE/
      DATA DIRECZ/ONE,ONE,ONE/
      DATA REDFAZ/ONE,ONE,ONE/
      DATA ZETA/ZERO/
CEND BLOCKDATA WWWWWW
      END
CEND-FILE CONDON.F
      SUBROUTINE SHOWW
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(/,26H               NO WARRANTY,/
     1,73H 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS 
     2NO WARRANTY,/
     1,73H FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  
     2EXCEPT WHEN,/
     1,71H OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHE
     2R PARTIES,/
     1,75H PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EIT
     2HER EXPRESSED,/
     1,69H OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRAN
     2TIES OF,/
     1,74H MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE EN
     2TIRE RISK AS,/
     1,71H TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  S
     2HOULD THE,/
     1,73H PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     2 SERVICING,/
     1,22H REPAIR OR CORRECTION.,//
     1,74H 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED T
     2O IN WRITING)
      WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(
     168H WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY A
     2ND/OR,/
     1,75H REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     2 FOR DAMAGES,,/
     1,76H INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL D
     2AMAGES ARISING,/
     1,74H OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
     2 NOT LIMITED,/
     1,73H TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES S
     2USTAINED BY,/
     1,75H YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE W
     2ITH ANY OTHER,/
     1,70H PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISE
     2D OF THE,/
     1,29H POSSIBILITY OF SUCH DAMAGES.,/)
      RETURN
CEND SHOWW
      END
      SUBROUTINE SHOWC
      CHARACTER Q
      COMMON/FLAG/LMN
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(/,28H  GNU GENERAL PUBLIC LICENSE,/
     1,21H Version 2, June 1991,//
     1,56H Copyright (C) 1989, 1991 Free Software Foundation, Inc.,/
     1,67H            59 Temple Place, Suite 330, Boston, MA  02111-1307
     2  USA,/
     1,62H Everyone is permitted to copy and distribute verbatim copies,
     1/,58H of this license document, but changing it is not allowed.,//
     1,30H                      Preamble,//
     1,64H   The licenses for most software are designed to take away yo
     2ur,/
     1,69H freedom to share and change it.  By contrast, the GNU General
     2 Public,/
     1,71H License is intended to guarantee your freedom to share and ch
     2ange free,/
     1,69H software--to make sure the software is free for all its users
     2.  This,/
     1,60H General Public License applies to most of the Free Software,/
     1,71H Foundation's software and to any other program whose authors 
     2commit to)
      WRITE(*,2006)
      WRITE(11,2006)
 2006 FORMAT(
     171H using it.  (Some other Free Software Foundation software is co
     2vered by,/
     1,70H the GNU Library General Public License instead.)  You can app
     2ly it to,/
     1,20H your programs, too.,//
     1,66H  When we speak of free software, we are referring to freedom,
     2 not,/
     1,71H price.  Our General Public Licenses are designed to make sure
     2 that you,/
     1,71H have the freedom to distribute copies of free software (and c
     2harge for,/
     1,70H this service if you wish), that you receive source code or ca
     2n get it,/
     1,69H if you want it, that you can change the software or use piece
     2s of it,/
     1,65H in new free programs; and that you know you can do these thin
     2gs.,//
     1,67H   To protect your rights, we need to make restrictions that f
     2orbid)
      WRITE(*,2007)
      WRITE(11,2007)
 2007 FORMAT(
     171H anyone to deny you these rights or to ask you to surrender the
     2 rights.,/
     1,72H These restrictions translate to certain responsibilities for 
     2you if you,/
     1,56H distribute copies of the software, or if you modify it.,//
     1,67H   For example, if you distribute copies of such a program, wh
     2ether,/
     1,70H gratis or for a fee, you must give the recipients all the rig
     2hts that,/
     1,69H you have.  You must make sure that they, too, receive or can 
     2get the,/
     1,68H source code.  And you must show them these terms so they know
     2 their,/
     1,8H rights.,//
     1,73H   We protect your rights with two steps: (1) copyright the so
     2ftware, and,/
     1,69H (2) offer you this license which gives you legal permission t
     2o copy,)
      WRITE(*,2008)
      WRITE(11,2008)
 2008 FORMAT(
     139H distribute and/or modify the software.,//
     1,72H   Also, for each author's protection and ours, we want to mak
     2e certain,/
     1,66H that everyone understands that there is no warranty for this 
     2free,/
     1,73H software.  If the software is modified by someone else and pa
     2ssed on, we,/
     1,72H want its recipients to know that what they have is not the or
     2iginal, so,/
     1,72H that any problems introduced by others will not reflect on th
     2e original,/
     1,22H authors' reputations.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3858)Q
      GOTO 4858
      ENDIF
 3858 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4858 WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(29H   GNU GENERAL PUBLIC LICENSE,/
     1,65H   Finally, any free program is threatened constantly by softw
     2are,/
     1,68H patents.  We wish to avoid the danger that redistributors of 
     2a free,/
     1,71H program will individually obtain patent licenses, in effect m
     2aking the,/
     1,70H program proprietary.  To prevent this, we have made it clear 
     2that any,/
     1,72H patent must be licensed for everyone's free use or not licens
     2ed at all.,//
     1,65H   The precise terms and conditions for copying, distribution 
     2and,/
     1,21H modification follow.,//
     1,29H   GNU GENERAL PUBLIC LICENSE,/
     1,66H   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICA
     2TION,//
     1,69H  0. This License applies to any program or other work which c
     2ontains)
      WRITE(*,2009)
      WRITE(11,2009)
 2009 FORMAT(
     169H a notice placed by the copyright holder saying it may be distr
     2ibuted,/
     1,71H under the terms of this General Public License.  The "Program
     2", below,,/
     1,70H refers to any such program or work, and a "work based on the 
     2Program",/
     1,69H means either the Program or any derivative work under copyrig
     2ht law:,/
     1,66H that is to say, a work containing the Program or a portion of
     2 it,,/
     1,69H either verbatim or with modifications and/or translated into 
     2another,/
     1,71H language.  (Hereinafter, translation is included without limi
     2tation in,/
     1,64H the term "modification".)  Each licensee is addressed as "you
     2".,//
     1,69H Activities other than copying, distribution and modification 
     2are not)
      WRITE(*,2010)
      WRITE(11,2010)
 2010 FORMAT(
     165H covered by this License; they are outside its scope.  The act 
     2of,/
     1,71H running the Program is not restricted, and the output from th
     2e Program,/
     1,63H is covered only if its contents constitute a work based on th
     2e,/
     1,66H Program (independent of having been made by running the Progr
     2am).,/
     1,55H Whether that is true depends on what the Program does.,//
     1,66H   1. You may copy and distribute verbatim copies of the Progr
     2am's,/
     1,64H source code as you receive it, in any medium, provided that y
     2ou,/
     1,68H conspicuously and appropriately publish on each copy an appro
     2priate,/
     1,65H copyright notice and disclaimer of warranty; keep intact all 
     2the,/
     1,71H notices that refer to this License and to the absence of any 
     2warranty;)
      WRITE(*,2011)
      WRITE(11,2011)
 2011 FORMAT(
     168H and give any other recipients of the Program a copy of this Li
     2cense,/
     1,24H along with the Program.,//
     1,70H You may charge a fee for the physical act of transferring a c
     2opy, and,/
     1,72H you may at your option offer warranty protection in exchange 
     2for a fee.,//
     1,70H   2. You may modify your copy or copies of the Program or any
     2 portion,/
     1,62H of it, thus forming a work based on the Program, and copy and
     2)
      WRITE(*,2012)
      WRITE(11,2012)
 2012 FORMAT(
     167H distribute such modifications or work under the terms of Secti
     2on 1,/
     1,60H above, provided that you also meet all of these conditions:,/
     2/
     1,68H     a) You must cause the modified files to carry prominent n
     2otices,/
     1,67H     stating that you changed the files and the date of any ch
     2ange.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3859)Q
      GOTO 4859
      ENDIF
 3859 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4859 WRITE(*,2002)
      WRITE(11,2002)
 2002 FORMAT(
     170H    b) You must cause any work that you distribute or publish, 
     2that in,/
     1,68H     whole or in part contains or is derived from the Program 
     2or any,/
     1,70H     part thereof, to be licensed as a whole at no charge to a
     2ll third,/
     1,45H     parties under the terms of this License.,//
     1,69H     c) If the modified program normally reads commands intera
     2ctively,/
     1,63H     when run, you must cause it, when started running for suc
     2h,/
     1,69H     interactive use in the most ordinary way, to print or dis
     2play an,/
     1,65H     announcement including an appropriate copyright notice an
     2d a,/
     1,71H     notice that there is no warranty (or else, saying that yo
     2u provide,/
     1,66H     a warranty) and that users may redistribute the program u
     2nder)
      WRITE(*,2013)
      WRITE(11,2013)
 2013 FORMAT(
     170H     these conditions, and telling the user how to view a copy 
     2of this,/
     1,67H     License.  (Exception: if the Program itself is interactiv
     2e but,/
     1,69H     does not normally print such an announcement, your work b
     2ased on,/
     1,59H     the Program is not required to print an announcement.),//
     1,62H These requirements apply to the modified work as a whole.  If
     2,/
     1,69H identifiable sections of that work are not derived from the P
     2rogram,,/
     1,67H and can be reasonably considered independent and separate wor
     2ks in,/
     1,68H themselves, then this License, and its terms, do not apply to
     2 those,/
     1,67H sections when you distribute them as separate works.  But whe
     2n you,/
     1,70H distribute the same sections as part of a whole which is a wo
     2rk based)
      WRITE(*,2014)
      WRITE(11,2014)
 2014 FORMAT(
     170H on the Program, the distribution of the whole must be on the t
     2erms of,/
     1,66H this License, whose permissions for other licensees extend to
     2 the,/
     1,74H entire whole, and thus to each and every part regardless of w
     2ho wrote it.,//
     1,70H Thus, it is not the intent of this section to claim rights or
     2 contest,/
     1,70H your rights to work written entirely by you; rather, the inte
     2nt is to,/
     1,64H exercise the right to control the distribution of derivative 
     2or,/
     1,39H collective works based on the Program.,//
     1,71H In addition, mere aggregation of another work not based on th
     2e Program,/
     1,70H with the Program (or with a work based on the Program) on a v
     2olume of,/
     1,69H a storage or distribution medium does not bring the other wor
     2k under)
      WRITE(*,2015)
      WRITE(11,2015)
 2015 FORMAT(
     127H the scope of this License.,//
     1,69H   3. You may copy and distribute the Program (or a work based
     2 on it,,/
     1,70H under Section 2) in object code or executable form under the 
     2terms of,/
     1,71H Sections 1 and 2 above provided that you also do one of the f
     2ollowing:,//
     1,69H     a) Accompany it with the complete corresponding machine-r
     2eadable,/
     1,71H     source code, which must be distributed under the terms of
     2 Sections,/
     1,77H     1 and 2 above on a medium customarily used for software i
     2nterchange; or,,//
     1,67H     b) Accompany it with a written offer, valid for at least 
     2three,/
     1,67H     years, to give any third party, for a charge no more than
     2 your)
      WRITE(*,2016)
      WRITE(11,2016)
 2016 FORMAT(
     166H     cost of physically performing source distribution, a compl
     2ete,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3860)Q
      GOTO 4860
      ENDIF
 3860 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4860 WRITE(*,2003)
      WRITE(11,2003)
 2003 FORMAT(
     166H     machine-readable copy of the corresponding source code, to
     2 be,/
     1,70H     distributed under the terms of Sections 1 and 2 above on 
     2a medium,/
     1,51H     customarily used for software interchange; or,,//
     1,70H     c) Accompany it with the information you received as to t
     2he offer,/
     1,67H     to distribute corresponding source code.  (This alternati
     2ve is,/
     1,64H     allowed only for noncommercial distribution and only if y
     2ou,/
     1,69H     received the program in object code or executable form wi
     2th such,/
     1,50H     an offer, in accord with Subsection b above.),//
     1,68H The source code for a work means the preferred form of the wo
     2rk for,/
     1,69H making modifications to it.  For an executable work, complete
     2 source)
      WRITE(*,2017)
      WRITE(11,2017)
 2017 FORMAT(
     169H code means all the source code for all modules it contains, pl
     2us any,/
     1,64H associated interface definition files, plus the scripts used 
     2to,/
     1,71H control compilation and installation of the executable.  Howe
     2ver, as a,/
     1,64H special exception, the source code distributed need not inclu
     2de,/
     1,66H anything that is normally distributed (in either source or bi
     2nary,/
     1,69H form) with the major components (compiler, kernel, and so on)
     2 of the,/
     1,69H operating system on which the executable runs, unless that co
     2mponent,/
     1,35H itself accompanies the executable.,//
     1,65H If distribution of executable or object code is made by offer
     2ing,/
     1,65H access to copy from a designated place, then offering equival
     2ent)
      WRITE(*,2018)
      WRITE(11,2018)
 2018 FORMAT(
     161H access to copy the source code from the same place counts as,/
     1,67H distribution of the source code, even though third parties ar
     2e not,/
     1,57H compelled to copy the source along with the object code.,//
     1,69H   4. You may not copy, modify, sublicense, or distribute the 
     2Program,/
     1,62H except as expressly provided under this License.  Any attempt
     2,/
     1,67H otherwise to copy, modify, sublicense or distribute the Progr
     2am is,/
     1,71H void, and will automatically terminate your rights under this
     2 License.,/
     1,69H However, parties who have received copies, or rights, from yo
     2u under,/
     1,69H this License will not have their licenses terminated so long 
     2as such,/
     1,35H parties remain in full compliance.,//
     1,69H   5. You are not required to accept this License, since you h
     2ave not)
      WRITE(*,2019)
      WRITE(11,2019)
 2019 FORMAT(
     169H signed it.  However, nothing else grants you permission to mod
     2ify or,/
     1,67H distribute the Program or its derivative works.  These action
     2s are,/
     1,68H prohibited by law if you do not accept this License.  Therefo
     2re, by,/
     1,64H modifying or distributing the Program (or any work based on t
     2he,/
     1,69H Program), you indicate your acceptance of this License to do 
     2so, and,/
     1,68H all its terms and conditions for copying, distributing or mod
     2ifying,/
     1,34H the Program or works based on it.,//
     1,70H   6. Each time you redistribute the Program (or any work base
     2d on the,/
     1,66H Program), the recipient automatically receives a license from
     2 the,/
     1,71H original licensor to copy, distribute or modify the Program s
     2ubject to)
      WRITE(*,2020)
      WRITE(11,2020)
 2020 FORMAT(
     160H these terms and conditions.  You may not impose any further,/
     3/,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3861)Q
      GOTO 4861
      ENDIF
 3861 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4861 WRITE(*,2004)
      WRITE(11,2004)
 2004 FORMAT(
     171H restrictions on the recipients' exercise of the rights granted
     2 herein.,/
     1,69H You are not responsible for enforcing compliance by third par
     2ties to,/
     1,14H this License.,//
     1,70H   7. If, as a consequence of a court judgment or allegation o
     2f patent,/
     1,69H infringement or for any other reason (not limited to patent i
     2ssues),,/
     1,68H conditions are imposed on you (whether by court order, agreem
     2ent or,/
     1,71H otherwise) that contradict the conditions of this License, th
     2ey do not,/
     1,63H excuse you from the conditions of this License.  If you canno
     2t,/
     1,71H distribute so as to satisfy simultaneously your obligations u
     2nder this,/
     1,71H License and any other pertinent obligations, then as a conseq
     2uence you)
      WRITE(*,2021)
      WRITE(11,2021)
 2021 FORMAT(
     165H may not distribute the Program at all.  For example, if a pate
     2nt,/
     1,71H license would not permit royalty-free redistribution of the P
     2rogram by,/
     1,70H all those who receive copies directly or indirectly through y
     2ou, then,/
     1,68H the only way you could satisfy both it and this License would
     2 be to,/
     1,51H refrain entirely from distribution of the Program.,//
     1,70H If any portion of this section is held invalid or unenforceab
     2le under,/
     1,71H any particular circumstance, the balance of the section is in
     2tended to,/
     1,63H apply and the section as a whole is intended to apply in othe
     2r,/
     1,15H circumstances.,//
     1,68H It is not the purpose of this section to induce you to infrin
     2ge any)
      WRITE(*,2022)
      WRITE(11,2022)
 2022 FORMAT(
     169H patents or other property right claims or to contest validity 
     2of any,/
     1,65H such claims; this section has the sole purpose of protecting 
     2the,/
     1,61H integrity of the free software distribution system, which is,
     2/
     1,64H implemented by public license practices.  Many people have ma
     2de,/
     1,65H generous contributions to the wide range of software distribu
     2ted,/
     1,66H through that system in reliance on consistent application of 
     2that,/
     1,71H system; it is up to the author/donor to decide if he or she i
     2s willing,/
     1,70H to distribute software through any other system and a license
     2e cannot,/
     1,20H impose that choice.,//
     1,70H This section is intended to make thoroughly clear what is bel
     2ieved to)
      WRITE(*,2023)
      WRITE(11,2023)
 2023 FORMAT(
     146H be a consequence of the rest of this License.,//
     1,68H   8. If the distribution and/or use of the Program is restric
     2ted in,/
     1,70H certain countries either by patents or by copyrighted interfa
     2ces, the,/
     1,68H original copyright holder who places the Program under this L
     2icense,/
     1,67H may add an explicit geographical distribution limitation excl
     2uding,/
     1,68H those countries, so that distribution is permitted only in or
     2 among,/
     1,70H countries not thus excluded.  In such case, this License inco
     2rporates,/
     1,58H the limitation as if written in the body of this License.,//
     1,74H   9. The Free Software Foundation may publish revised and/or 
     2new versions,/
     1,73H of the General Public License from time to time.  Such new ve
     2rsions will)
      WRITE(*,2024)
      WRITE(11,2024)
 2024 FORMAT(
     173H be similar in spirit to the present version, but may differ in
     2 detail to,/
     1,34H address new problems or concerns.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3862)Q
      GOTO 4862
      ENDIF
 3862 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4862 WRITE(*,2005)
      WRITE(11,2005)
 2005 FORMAT(
     171H Each version is given a distinguishing version number.  If the
     2 Program,/
     1,72H specifies a version number of this License which applies to i
     2t and "any,/
     1,74H later version", you have the option of following the terms an
     2d conditions,/
     1,69H either of that version or of any later version published by t
     2he Free,/
     1,74H Software Foundation.  If the Program does not specify a versi
     2on number of,/
     1,77H this License, you may choose any version ever published by th
     2e Free Software,/
     1,12H Foundation.,//
     1,70H   10. If you wish to incorporate parts of the Program into ot
     2her free,/
     1,74H programs whose distribution conditions are different, write t
     2o the author,/
     1,70H to ask for permission.  For software which is copyrighted by 
     2the Free)
      WRITE(*,2025)
      WRITE(11,2025)
 2025 FORMAT(
     173H Software Foundation, write to the Free Software Foundation; we
     2 sometimes,/
     1,72H make exceptions for this.  Our decision will be guided by the
     2 two goals,/
     1,74H of preserving the free status of all derivatives of our free 
     2software and,/
     1,58H of promoting the sharing and reuse of software generally.,//)
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SHOWC
      END
      SUBROUTINE SHOWM
      CHARACTER Q
      COMMON/FLAG/LMN
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(
     150H Program CONDON is written on ten different files!,/ 
     1,53H File CONDON.f consists of the .MAIN. PROGRAM CONDON,,/
     1,57H 32 SUBROUTINEs, 3 FUNCTIONs and 4 BLOCKDATA subprograms,,/
     1,56H but 3 subroutines are text only, concerning `WARRANTY',,/
     1,60H `GNU GENERAL PUBLIC LICENSE', and this `OUTLINE' of CONDON.,/
     1/,72H One of 4 files, with subroutines DSPEVW and ZHPEVW each, ser
     2ves to link,/
     1,52H library routines for diagonalizing real symmetrical,/
     2,32H and complex hermitian matrices./
     1,49H File pcdszh.f serves as a link to file dspzhp.f,,/
     1,67H which contains the relevant part of library LAPACK in source 
     2code.,/
     1,52H File rzdszh.f serves as a link to IBM library ESSL.,/
     1,61H Files dszhLP.f and dszhOQ.f serve to link the corresponding,,
     1/,68H but different routines of library NAG19, dszhLP.f to be link
     2ed with)
      WRITE(*,2002)
      WRITE(11,2002)
 2002 FORMAT(
     162H shortL.f or shortP.f, and dszhOQ.f with shortO.f or shortQ.f!,
     2//
     1,66H The matrix to be firstly diagonalized has dimension 1001*1001
     2 for,/
     1,55H Ho(3+), 2002*2002 for Dy(3+), 3003*3003 for Tb(3+) and,/
     1,63H 3432*3432 for Gd(3+), respectively. A PARAMETER ND2002=1110 i
     2s,/
     1,71H introduced in subroutine SHORTL on file shortL.f and on file 
     2shortP.f,,/
     1,73H but instead of ND2002=1110, which is the minimum for ND2002, 
     2ND2002=3432,/
     1,79H is set in subroutine SHORTL on file shortO.f and ND2002=2002 
     2on file shortQ.f,,/
     1,69H and e.g. ND2002=3003 may be set in subroutine SHORTL on anoth
     2er file,/
     1,46H short..f. The relevant file has to be linked!,//
     1,69H The matrix to be diagonalized in the case of the special rout
     2ine for)
      WRITE(*,2003)
      WRITE(11,2003)
 2003 FORMAT(
     174H 4f block atoms or ions has dimension up to 66 only (or 85 for 
     2a quintet-L,/
     1,76H state of six f electrons as a test), and the smallest ND2002=
     21110 will work,/
     1,13H in any case!,//
     1,70H The difference between shortL.f and shortP.f and between shor
     2tO.f and,/
     1,65H shortQ.f, respectively is, that two of the matrices of dimens
     2ion,/
     1,73H ND2002*ND2002 are equivalenced in shortP.f and shortQ.f to sa
     2ve storage.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3863)Q
      GOTO 4863
      ENDIF
 3863 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4863 WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(
     175H Therefore these matrices have to be recalculated more often in
     2 some cases,,/
     1,22H but not in all cases.,//
     1,62H Subroutine STR00, a very special routine, is on file str00.f!
     2,//
     153H If CONDON is running, the following message appears:,/
     1,42H CONTROL OF SOME DIMENSIONS/ EQUIVALENCES:,/
     1,64H (and if shortL.f has been linked, it is the following message
     2:),/
     1,38H  ND2002, NDS66 = 1110   66, JEQUIV= 0,//
     1,68H An example for a command file "gCON.com" to compile and link 
     2CONDON,/
     1,71H follows (The #-line is a comment only! - g77 <=> LINUX - f77 
     2 <=> UNIX,/
     3,20H on an IBM computer,/
     1,50H -g produces debug information (not really needed),/
     1,64H -O optimizes code generated by the compiler (not really neede
     2d))
      WRITE(*,2004)
      WRITE(11,2004)
 2004 FORMAT(
     159H -o condon <=> name of the executable file becomes condon):,/,
     163H #f77 -g -O CONDON.f shortL.f str00.f rzdszh.f -lessl -o condon
     2,/
     1,64H g77 -g -O CONDON.f shortL.f str00.f pcdszh.f dspzhp.f -o cond
     2on,//)
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SHOWM
      END
CEND-FILE SHOWCW.F
CEND-FILE SHORTL.F
      SUBROUTINE SUSFIT(
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   THIS ROUTINE IS CALLED BY SUBROUTINE(S) SHORT...(NO RETURN TO
C     SHORT..F) AND IS THE FIRST ROUTINE WHICH WILL REALLY RUN AFTER
C     STARTING WITH CONDON!
C**   SUSFIT WILL CALL THE FITTING ROUTINES LEVSQX AND LEVMAR,
C     AND THE LATTER WILL CALL SUBROUTINE LEVDER. SUSFIT WILL DECIDE
C     FOR CONVERGENCE OF THE FIT. (SUBROUTINE LEVSQX WILL RUN ALSO, IF
C     NO FITTING IS DONE!) TO THE VERY END, E.G. AFTER CONVERGENCE, BUT
C     MAY BE BEFORE, SUBROUTINE RES(ULT)T(A)BL/ES) IS CALLED TO GIVE THE
C     RESULTS IN FORM OF TABLES!
     1JASTRU,MOLFLD,JAWIGN,NGROUP,SIGMA0
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT,KMASKE
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     8,NRVALF,IGRUND,JAFAST,CRZMAT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DIMENSION EIVECV(ND2002,*)
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW (E.G. BWW(STEVENS)=>BWWW(WYBOURNE))
C     IN SUBROUTINE SUSC:
      PARAMETER(J20=36)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
C
      PARAMETER(I20=36,ZERO=0.0D0,ONE=1.0D0)
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(I20),CHIFIX
     1,CFOSXJ,NOTONE,JAFIX,BWWTMP(J20),BWWWMN(J20),BWWWMX(J20),MINMAX
C
      DIMENSION LIST(I20),ALPHAM(I20,I20),ALPHA(I20,I20),SIGMA0(601)
     1,BETA(I20),BETAM(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     1,CHIFIX(601)
     2,SIG2I(601),CHIGEM(601),ISR(3),ISS(3),KMASKE(20),EIWERT(*)
      SAVE
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'B21  ','B41  ','B61  ','B65  ','     ','     ','     ','     '
     4,'     ','     ','     ','     ','     ','     ','     ','     '/
      DATA QV/'B20  ','2ZU20','B40  ','2ZU40','3ZU40','4ZU40'
     1,'B60  ','2ZU60','3ZU60','4ZU60','6ZU60'
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'1ZU20','1ZU40','1ZU60','5ZU60','     ','     ','     ','     '
     4,'     ','     ','     ','     ','     ','     ','     ','     '/
      DATA ITMIN,ITMAX,ISR,ISSSSS,ISS,JANOLS,JUMPTO,LASERY
     1/0,0,0,0,0,0,0,0,0,0,0,0/
      DATA CHISQQ,OMEGA/ZERO,ZERO/
C
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.I20)STOP 'J.NE.I'
      LAUFNR=0
   55 MFIT=0
      II=I16+1
      DO 11 I=1,I16
      IF(IABS(IBWWW(I)).EQ.1)THEN
      MFIT=MFIT+1
      LIST(MFIT)=I
      ELSE
      II=II-1
      LIST(II)=I
      ENDIF
   11 CONTINUE
C
      WRITE(*,15)MFIT
      WRITE(11,15)MFIT
   15 FORMAT(/,
     1' MFIT, I.E. No. OF PARAMETERS ACTUALLY BEEN ADJUSTED, =',I3)
C
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
C
      JASTOP=0
      LOWER0=1
C**   LAST ROW FOR INITIALIZATION IN SUBROUTINES LEVSQX AND LEVMAR!
   25 IF(MFIT.NE.0.AND.NDATA.NE.0)THEN
      WRITE(11,293)LAUFNR,ITMAX,ITMIN
 1005 WRITE(*,293)LAUFNR,ITMAX,ITMIN
  293 FORMAT(/,' THERE IS No. OF ITERATION =',I6,/,
     1' INPUT IN I5,I3 MAX. AND MIN. NUMBER OF (FURTHER) ITERATIONS!:',/
     2,' (ITER.COUNT',I6,I4,', INPUT MAY BE NEG. FOR "FURTHER" ITER.!)')
      IF(MFIT.EQ.1.AND.LAUFNR.EQ.0)THEN
      WRITE(*,1006)
      WRITE(11,1006)
 1006 FORMAT(' FOR THIS FIT WITH 1 PARAMETER: FOR MAX.=MIN. NUMBER OF IT
     1ERATIONS',/,' LEVENBERG/MARQUARDT MAY BE DISABLED LATER ON (OMEGA 
     2SERVES AS A STEP-WIDE)!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I5,I3)',ERR=5588,END=3864)IITMAX,IITMIN
      GOTO 4864
      ENDIF
 3864 READ(*,'(I5,I3)',ERR=1005,END=4576)IITMAX,IITMIN
      LMN=1
 4864 WRITE(7,2272)IITMAX,IITMIN
 2272 FORMAT(I5,I3,' =IITMAX,IITMIN')
      WRITE(*,2722)IITMAX,IITMIN
      WRITE(11,2722)IITMAX,IITMIN
 2722 FORMAT(I6,I4,' =IITMAX,IITMIN!!!!!!!!!')
      ITMIN=ITMIN+IITMIN
      ITMAX=ITMAX+IITMAX
      ITMAX=IABS(ITMAX)
      ITMIN=IABS(ITMIN)
      IF(ITMIN.GT.ITMAX)ITMIN=ITMAX
      IF(ITMIN.NE.IITMIN.OR.ITMAX.NE.IITMAX)THEN
      WRITE(*,'(I6,I4)')ITMAX,ITMIN
      WRITE(11,'(I6,I4)')ITMAX,ITMIN
      ENDIF
      IF(LESS.EQ.0)THEN
      IF(MORTEX.GT.0)THEN
      WRITE(11,6671)
      WRITE(*,6671)
 6671 FORMAT(' ESPECIALLY FOR TIME CONSUMING COMPUTATIONS AND/OR',/
     1,' FOR COMPUTATIONS IN BATCH MODE (TO GUARANTEE A DEFINITE END):')
      ENDIF
      IF(MORTEX.GE.0)THEN
      WRITE(11,667)
  557 WRITE(*,667)
  667 FORMAT(/,' INPUT IN I1 YES/NO(0): "STOP INSTEAD OF FURTHER INPUT"'
     1,/,' (FURTHER INPUT FOR: MORE ITER., CHANGE OF PARAMETERS/(PARAMET
     2ERS/VALUES TO FIT)',/,' OR (FURTHER) TABLES OF OUTPUT)',/,' YES'
     3,' =1,3,6/ =2 MEANS STOP FOLLOWING / BEFORE FIRST TABLE OF OUTPUT'
     4,/,' (=3 / =6 MEANS "NO FITTING / FITTING, BUT 6 COLUMNS")')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3865)JASTOP
      GOTO 4865
      ENDIF
 3865 READ(*,'(I1)',ERR=557,END=4576)JASTOP
      LMN=1
 4865 IF(JASTOP.GT.3)JASTOP=6
      WRITE(7,2273)JASTOP
 2273 FORMAT(I1,' =JASTOP(later on!)')
      WRITE(*,2732)JASTOP
      WRITE(11,2732)JASTOP
 2732 FORMAT(I2,' =JASTOP(later on!)!!!!!!!!!')
      IF(JASTOP.NE.0.AND.MOROUT.NE.0)THEN
      JASTOP=0
      WRITE(*,668)
      WRITE(11,668)
  668 FORMAT(' BECAUSE MOROUT.NE.0, JASTOP BECOMES 0!') 
      ENDIF
      ENDIF
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "25 IF(MFIT.NE.0.AND.NDATA.NE.0)THEN"!
      IF(JUMPTO.NE.0)GOTO 2155
C**   INITIALIZATION FOR SUBROUTINES LEVSQX AND LEVMAR SEE ABOVE!
    5 CONTINUE
      CHISQO=CHISQQ
C**   AND NOW THE LEVENBERG-MARQUARDT METHOD IN SUBROUTINES LEVSQX, LEVMAR
C     AND LEVDER. FIRSTLY LEVSQX HERE TO CALCULATE SQX, WHICH WILL BE NEEDED
C     IN ANY CASE, LEVENBERG-MARQUARDT MAY BE APPLIED OR NOT!:
      CALL LEVSQX(
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE,CHISQW
     9,CRZMAT)
C
      SXR=CHISQQ-CHISQO
      IF(NDATA.EQ.0)GOTO 1202
      IF(NDATAM.EQ.0)THEN
      WRITE(11,1206)OMEGA
 1205 WRITE(*,1206)OMEGA
 1206 FORMAT(' AT TIME THERE ARE NO MORE DATA (OMEGA=',D10.2,')!',/
     1,' IF NO MORE ITERATIONS, INPUT 0/RETURN, ELSE:',/
     1,' TRIAL TO GET SOME YES(1 PLUS INPUT NEW OMEGA IN D10.2)/NO(0)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1,D10.2)',ERR=5588,END=3866)JANODA,BOMEGA
      GOTO 4866
      ENDIF
 3866 READ(*,'(I1,D10.2)',ERR=1205,END=4576)JANODA,BOMEGA
      LMN=1
 4866 WRITE(7,2274)JANODA,BOMEGA
 2274 FORMAT(I1,D10.2,' =JANODA,BOMEGA')
      WRITE(*,2742)JANODA,BOMEGA
      WRITE(11,2742)JANODA,BOMEGA
 2742 FORMAT(I2,D10.2,' =JANODA,BOMEGA!!!!!!!!!')
      IF(JANODA.EQ.0)GOTO 1202
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
      GOTO 2155
      ENDIF
      SMIN=DSQRT(CHISQ/NDATAM)
      SMINN=DSQRT(CHISQQ/NDATAM)
      SXRABS=DABS(SXR)
      KLEINR=0
      IF(SXRABS.LT.0.000001D0)KLEINR=1
      ISX=1+MOD(LAUFNR,3)
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED
C     BY THE SECOND
      ISR(ISX)=KLEINR
      NOCONV=0
C**   ... MEANS "CONVERGENCE OR NOT"!
      IF(LAUFNR.LT.ITMIN)NOCONV=1
      IF(OMEGA.GT.0.1D10)GOTO 877
      IF(ISR(1).EQ.1.AND.ISR(2).EQ.1.AND.ISR(3).EQ.1)GOTO 877
      DIFMIN=(SMINN-SMIN)/SMIN
C**   DIFMIN CANNOT BE NEGATIV, BUT ZERO!
      IF(DIFMIN.NE.ZERO)THEN
      KLEINS=0
      ISSSSS=ISSSSS+1
      ISY=1+MOD(ISSSSS,3)
      IF(DIFMIN.LE.0.00001D0)KLEINS=1
      ISS(ISY)=KLEINS
      ENDIF
      IF(ISS(1).NE.1.OR.ISS(2).NE.1.OR.ISS(3).NE.1)NOCONV=1
C
   44 FORMAT(
     1/,' AFTER',I5,'TH ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
    4 FORMAT(/,' AFTER',I5,'TH ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  144 FORMAT(
     1/,' AFTER',I5,'ST ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   14 FORMAT(/,' AFTER',I5,'ST ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  244 FORMAT(
     1/,' AFTER',I5,'ND ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   24 FORMAT(/,' AFTER',I5,'ND ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  344 FORMAT(
     1/,' AFTER',I5,'RD ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   34 FORMAT(/,' AFTER',I5,'RD ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
 1515 FORMAT(' LIST(I), BWYB(LIST(I))=',/,(5(I3,D16.8)))
 4444 FORMAT(' LIST(I), BWYB(LIST(I))=',4(I3,D12.4),/
     1,(6(I3,D12.4)))
  444 FORMAT(' LIST(I), BWYB(LIST(I))=',4(I3,D12.4),/
     1,(8(I3,D12.4)))
C
  877 IF(JASUCC.NE.0)THEN
      SQXFIX=SMIN
      IF(LAUFNR.EQ.0.OR.LAUFNR.GT.3)THEN
      WRITE(11,44)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,44)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.1)THEN
      WRITE(11,144)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,144)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.2)THEN
      WRITE(11,244)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,244)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.3)THEN
      WRITE(11,344)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,344)LAUFNR,OMEGA,SMIN,SXR
      ENDIF
      ELSE
      IF(LAUFNR.EQ.0.OR.LAUFNR.GT.3)THEN
      WRITE(11,4)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,4)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.1)THEN
      WRITE(11,14)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,14)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.2)THEN
      WRITE(11,24)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,24)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.3)THEN
      WRITE(11,34)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,34)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ENDIF
      ENDIF
      IF(NOCONV.EQ.0.OR.LAUFNR.EQ.ITMAX)THEN
      WRITE(11,1712)(IBWWW(I),I=1,IN25)
      WRITE(*,1712)(IBWWW(I),I=1,IN25)
 1712 FORMAT(/,' "FITTED"=+-1; -2/-1<=>8/9 IN INPUT FILE: ',20I2)
      WRITE(11,1515)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      WRITE(*,1515)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      REWIND(8)
      REWIND(9)
      WRITE(8,1721)LAUFNR,SMIN
      WRITE(9,1721)LAUFNR,SMIN
 1721 FORMAT(' NOCONV.EQ.0.OR.LAUFNR.EQ.ITMAX,',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      IF(JANOLS.NE.0)THEN
C**   JANO-Lea/leask/Wolf(.NE.0=2) .OR.-Stevens(.NE.0=1)
      WRITE(11,8777)
      WRITE(*,8777)
 8777 FORMAT(' ATTENTION: NO WYBOURNE COEFFICIENTS!')
      IF(JANOLS.GT.1)THEN
      WRITE(*,8778)
      WRITE(11,8778)
 8778 FORMAT(
     1' THE (LIST=3)- VALUE, X, IS MODULO 2 AND REALLY IS /X/ < 1.')
      ENDIF
      ENDIF
      IF(BWNULL(18).NE.ZERO)THEN
      WRITE(*,8787)BWNULL(18)
      WRITE(11,8787)BWNULL(18)
 8787 FORMAT(' ATTENTION: WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF
     1 DIMER',/,' AND SINGLE ION  OR DENOMINATOR OF "SPIN CROSSOVER" =',
     2D16.8)
      ENDIF
      IF(NOPROZ.NE.0)THEN
      WRITE(11,8786)CHISQW
      WRITE(*,8786)CHISQW
 8786 FORMAT(' (SQX-)FIX NOT CORRECTED =',D16.8)
      ENDIF
      ELSE
C     ... IF(NOCONV.NE.0.AND.LAUFNR.NE.ITMAX)THEN
C     HERE NOT THE SAME PRECISION FOR BWNULL!:
      IF(LESS.EQ.0)THEN
      IF(LAUFNR.EQ.1)THEN
      WRITE(11,8779)
      WRITE(*,8779)
 8779 FORMAT(' IN ADDITION TO THE FOLLOWING PARAMETERS, WHICH ARE THE FI
     1XED ONES FOR',/,' "FIX.NE.SQX", THE TRIAL PARAMETERS, IF DIFF., AR
     2E GIVEN, BUT MAX. 8 TIMES!')
      ENDIF
      WRITE(11,444)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      WRITE(*,4444)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      ENDIF
      REWIND(8)
      REWIND(9)
      WRITE(8,1722)LAUFNR,SMIN
      WRITE(9,1722)LAUFNR,SMIN
 1722 FORMAT(' NOCONV.NE.0.AND.LAUFNR.NE.ITMAX,',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      ENDIF
      IF(NOCONV.NE.0)THEN
      IF(LESS.EQ.0)WRITE(11,8001)CFMSFX,CFOSFX,CFOSXJ
      IF(LESS.EQ.0)WRITE(*,8001)CFMSFX,CFOSFX,CFOSXJ
 8001 FORMAT(' CFMS, "CFOS/ CFOSJ" =',3D12.3)
      ELSE IF(NOCONV.EQ.0)THEN
      WRITE(11,8002)DIFLOW,CFOS,CFOSJ
      WRITE(*,8002)DIFLOW,CFOS,CFOSJ
 8002 FORMAT(/,' CRYSTAL FIELD MIN. SPLIT. (CFMS) AND EIGENVALUE OF THE 
     1LEVEL "No. OF VAL.',/,' (NRVAL)", WHICH MAY BE THE CRYSTAL FIELD O
     2VER ALL SPLITTING (CFOS),',/,' AND CFOSJ (<=> NRVALJ) = ',3D12.3)
      WRITE(11,2156)LAUFNR,ITMIN,ITMAX,SXR,DIFMIN
      WRITE(*,2156)LAUFNR,ITMIN,ITMAX,SXR,DIFMIN
 2156 FORMAT(
     1/,' CONV.MAY BE TOO SLOW: ITER/IT-MIN/IT.-MAX.=',2I4,I6
     1,/,' SXR (=(SQX**2-(SQX**2-BEFORE))*NRDATA)=',D9.2,/
     1,' DIFMIN (=(SQX-FIX)/(SQX, IF"BETTER")-ONE, "ELSE"=ZERO)=',D9.2)
      IF(JASTOP.EQ.2)THEN
      WRITE(*,2157)
      WRITE(11,2157)
 2157 FORMAT(' NOW STOP "JASTOP" BECAUSE OF "JASTOP" PUT IN ABOVE!')
      REWIND(8)
      REWIND(9)
      WRITE(8,2175)LAUFNR,SMIN
      WRITE(9,2175)LAUFNR,SMIN
 2175 FORMAT(' JASTOP.EQ.2 (STOP JASTOP1),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2175)LAUFNR,SMIN
      STOP 'JASTOP1'
      ENDIF
      IF(JASTOP.EQ.0)GOTO 1202
      JASTOQ=0
      GOTO 1300
      ENDIF
      IF(SMIN.NE.SMINN.AND.(LAUFNR.LT.9.OR.JAFIX.EQ.2).AND.LAUFNR.NE.0
     1.AND.LESS.EQ.0)THEN
      WRITE(11,41)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
      WRITE(*,4441)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
   41 FORMAT(
     1' LI(I),BTRIAL(LI(I))=',4(I3,D12.4),/,(8(I3,D12.4)))
 4441 FORMAT(
     1' LI(I),BTRIAL(LI(I))=',4(I3,D12.4),/,(6(I3,D12.4)))
      WRITE(11,8001)DIFLOW,CFOS,CFOSJ
      WRITE(*,8001)DIFLOW,CFOS,CFOSJ
      ENDIF
C
      IF(LAUFNR.EQ.ITMAX)THEN
      WRITE(11,6)LAUFNR,ITMAX
      WRITE(*,6)LAUFNR,ITMAX
    6 FORMAT(' (LAUFNR.EQ.ITMAX): LAUFNR, ITMAX=',2I6)
      IF(JASTOP.EQ.2)THEN
      WRITE(*,2157)
      WRITE(11,2157)
      REWIND(8)
      REWIND(9)
      WRITE(8,2176)LAUFNR,SMIN
      WRITE(9,2176)LAUFNR,SMIN
 2176 FORMAT(' JASTOP.EQ.2 (STOP JASTOP2),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2176)LAUFNR,SMIN
      STOP 'JASTOP2'
      ENDIF
      IF(JASTOP.EQ.0)GOTO 1202
      JASTOQ=0
      GOTO 1300
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LAUFNR.EQ.ITMAX)THEN"!
 2155 CONTINUE
      JUMPTO=0
      IF(LAUFNR.LT.ITMAX.AND.MFIT.NE.0)THEN
C**   AND NOW THE LEVENBERG-MARQUARDT METHOD ITSELF (SUBROUTINES LEVSQX, LEVMAR
C     AND LEVDER). HERE THE SECOND ONE, LEVMAR, WHICH MAKES A NEW PROPOSAL OF
C     PARAMETERS FOR A HOPEFULLY "BETTER" SQX!:
      CALL LEVMAR(
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHAM,ALPHA,I20,BETA,BETAM,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,LAUFNR,ITMIN,ITMAX,CRZMAT)
C
      IF(OMEGA.GT.0.1D10)THEN
      NOCONV=0
      GOTO 877
      ENDIF
      GOTO 5
      ENDIF
C
 1202 CONTINUE
      WRITE(11,1302)
 1301 WRITE(*,1302)
 1302 FORMAT(/,
     1' INPUT 0/RETURN FOR TABLES OF OUTPUT, 1 TO CONTINUE, >1: STOP!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3867)JASTOQ
      GOTO 4867
      ENDIF
 3867 READ(*,'(I1)',ERR=1301,END=4576)JASTOQ
      LMN=1
 4867 WRITE(7,2275)JASTOQ
 2275 FORMAT(I1,' =JASTOQ(2=STOP)')
      WRITE(11,2752)JASTOQ
      WRITE(*,2752)JASTOQ
 2752 FORMAT(I2,' =JASTOQ(2=STOP)!!!!!!!!!')
      IF(JASTOQ.GT.1)THEN
      REWIND(8)
      REWIND(9)
      WRITE(8,2177)LAUFNR,SMIN
      WRITE(9,2177)LAUFNR,SMIN
 2177 FORMAT(' JASTOQ.GT.1 (STOP JASTOQ),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2177)LAUFNR,SMIN
      STOP 'JASTOQ'
      ENDIF
 1300 IF(JASTOQ.EQ.0)THEN
      NUROUT=1
C     NUROUT.NE.0 <=> "TABLES OF OUTPUT ( SUBROUTINE RESult TaBLes)"!
C**   ONLY NRVAL OF THE FOLLOWING VARIABLES IN BRACES WILL BE USED (USED
C     ARE THE FIXED VARIABLES IN COMMON/FIX/ FROM LEVMAR - THESE HERE ARE
C     DUMMYS)!:
      CALL RESTBL(DIFLOW,CFOS,IGR1,IGR2,NRVALF,IGRUND,NOCONV,JASUCC
     1,NRVAL,JASTOP,LAUFNR,JAFAST,CFOSJ,NRVALJ,NREL,KLWERT,KASSUM)
      NUROUT=0
      ENDIF
C**   NOW FOR "FURTHER INPUT"!:
      WRITE(11,1303)NDATAP,NDATA,NDATAM,ITMAX,ITMIN
 1203 WRITE(*,1303)NDATAP,NDATA,NDATAM,ITMAX,ITMIN
 1303 FORMAT(' NDATAP, NDATA, NDATAM =',3I4,/,' IF THERE ARE (STILL)'
     1,' DATA TO FIT, YOU MAY CONTINUE WITH MORE ITER.:',/,' INPUT'
     2,' 0/RETURN TO DO SO! ITMAX, ITMIN =',I6,I3)
      WRITE(11,1330)MFIT,OMEGA
      WRITE(*,1330)MFIT,OMEGA
 1330 FORMAT(' (I.E. INPUT 1 TO CHANGE PARAMETERS (OR 0, IF MFIT=0)!)',
     1/,' MFIT, OMEGA =',I3,D10.2,/,' (TO CHANGE OMEGA ONLY, WITHOUT OR 
     2WITH INITIALIZ., INPUT 0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3868)JAFURT
      GOTO 4868
      ENDIF
 3868 READ(*,'(I1)',ERR=1203,END=4576)JAFURT
      LMN=1
 4868 WRITE(7,2276)JAFURT
 2276 FORMAT(I1,' =JAFURT(her INPUT)')
      WRITE(11,2762)JAFURT
      WRITE(*,2762)JAFURT
 2762 FORMAT(I2,' =JAFURT(her INPUT)!!!!!!!!!')
      IF(JAFURT.EQ.0.AND.MFIT.NE.0)THEN
      WRITE(11,1313)
 1333 WRITE(*,1313)
 1313 FORMAT(' INPUT IN I1 YES/NO(0): "NEW INITIALIZATION"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3869)JANOOO
      GOTO 4869
      ENDIF
 3869 READ(*,'(I1)',ERR=1333,END=4576)JANOOO
      LMN=1
 4869 WRITE(7,2287)JANOOO
 2287 FORMAT(I1,' =JANOOO("NEW INITIAL.")')
      WRITE(*,2872)JANOOO
      WRITE(11,2872)JANOOO
 2872 FORMAT(I2,' =JANOOO("NEW INITIAL.")!!!!!!!!!')
      IF(JANOOO.NE.0)THEN
      LOWER0=1
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      OMEGA=0.1D0
      GOTO 25
      ENDIF
      WRITE(11,1331)
 1332 WRITE(*,1331)
 1331 FORMAT(' INPUT OF A NEW VALUE OF OMEGA IS POSSIBLE (IN E10.2, ZERO
     1 <=> OLD VALUE)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D10.2)',ERR=5588,END=3870)OOMEGA
      GOTO 4870
      ENDIF
 3870 READ(*,'(D10.2)',ERR=1332,END=4576)OOMEGA
      LMN=1
 4870 WRITE(7,2277)OOMEGA
 2277 FORMAT(D10.2,' =OOMEGA')
      WRITE(*,2277)OOMEGA
      WRITE(11,2277)OOMEGA
      IF(OOMEGA.NE.ZERO)THEN
      IF(JAFIX.NE.2)JAFIX=0
      IF(JAFIX.NE.2.AND.OOMEGA.LT.ZERO)JAFIX=1
      OMEGA=DABS(OOMEGA)
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      ENDIF
      JUMPTO=1
      GOTO 25
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(JAFURT.EQ.0.AND.MFIT.NE.0)THEN"!
C**   PRE-OCCUPATION NOW:
      DO 7580 I=1,MFIT
      STBWWW(LIST(I))=BWNULL(LIST(I))
 7580 CONTINUE
C
      NR=0
 4751 CONTINUE
      DO 291 N=1,20
      IF(KMASKE(N).NE.0.AND.N.GT.11)GOTO 291
      IF(KMASKE(N).NE.0.AND.JASTRU.EQ.0)GOTO 291
      IF(JASTRU.GT.1.AND.N.EQ.1)GOTO 291
      IF(JASTRU.NE.0.AND.N.GT.3.AND.N.LE.11)GOTO 291
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      ELSE
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N),BWWWMX(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N)
     1,BWWWMX(N)
 2210 FORMAT(' STBWWW(',I2,')=',D16.8,1X,I2,' (WYB.=',D16.8,')',2D10.2)
      ENDIF
  291 CONTINUE
      INBW15=INBWWW(15)
      IF(IN24.GT.20.AND.JASTRU.EQ.0)THEN
      DO 2911 N=21,IN25
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      ELSE
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N),BWWWMX(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N)
     1,BWWWMX(N)
      ENDIF
 2911 CONTINUE
      ENDIF
 4753 WRITE(*,393)
  393 FORMAT(' THE VALUES OF WHICH ROW NUMBER WILL BE CHANGED (IN I2,'
     1,'END=00,INFO=99)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3871)NR
      GOTO 4971
      ENDIF
 3871 READ(*,'(I2)',ERR=4753,END=4576)NR
      LMN=1
 4971 WRITE(*,2278)NR
      WRITE(7,2278)NR
 2278 FORMAT(I2,' =NR')
      IF(NR.EQ.99)GOTO 4751
      IF(NR.EQ.0)GOTO 295
      IF(NR.LT.0.OR.NR.GT.IN25)GOTO 4753
      IF(NR.GT.20)GOTO 8722
      IF((KMASKE(NR).NE.0.AND.JASTRU.EQ.0).OR
     1.(KMASKE(NR).NE.0.AND.JASTRU.NE.0.AND.NR.GT.11).OR
     2.(JASTRU.NE.0.AND.NR.GT.3.AND.NR.LE.11))THEN
      WRITE(*,294)
  294 FORMAT(' THIS NUMBER IS MASKED AND THEREFORE IMPOSSIBLE!')
      GOTO 4753
      ENDIF
 8722 CONTINUE
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR)
      WRITE(11,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR)
      ELSE
      WRITE(*,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      WRITE(11,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      ENDIF
      WRITE(11,493)
 4747 WRITE(*,493)
  493 FORMAT(' INPUT (NEW) VALUE FOR IBWWW, AND YES/NO(0):'
     1,/,' NEW VALUE FOR STBWWW (IN 2I1)!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3872)INBWWW(NR),JANOST
      GOTO 4872
      ENDIF
 3872 READ(*,'(2I1)',ERR=4747,END=4576)INBWWW(NR),JANOST
      LMN=1
 4872 WRITE(*,2279)INBWWW(NR),JANOST
      WRITE(7,2279)INBWWW(NR),JANOST
 2279 FORMAT(2I1,' =INBWWW(NR),JANOST')
      IBWWW(NR)=0
      IF(INBWWW(NR).GE.1)IBWWW(NR)=1
      IF(NR.LE.11
     1.AND.INBWWW(NR).GE.8)IBWWW(NR)=INBWWW(NR)-10
      IF(NR.GE.20.AND.NR.LE.24
     1.AND.INBWWW(NR).GE.8)IBWWW(NR)=INBWWW(NR)-10
      IF(JANOST.NE.0)THEN
      WRITE(11,494)
  449 WRITE(*,494)
  494 FORMAT(' INPUT NEW VALUE FOR STBWWW (IN F20.8)!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F20.8)',ERR=5588,END=3873)STBWWW(NR)
      GOTO 4873
      ENDIF
 3873 READ(*,'(F20.8)',ERR=449,END=4576)STBWWW(NR)
      LMN=1
 4873 WRITE(*,2290)STBWWW(NR)
      WRITE(7,2290)STBWWW(NR)
 2290 FORMAT(F20.8,' =STBWWW(NR)')
      ENDIF
      IF(STBWWW(16).EQ.ZERO)STBWWW(16)=ONE
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR)
      WRITE(11,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR)
      ELSE
      WRITE(*,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      WRITE(11,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      ENDIF
      IF(NR.EQ.13)THEN
      KMASKE(14)=1
      KMASKE(17)=1
      ENDIF
      IF(NR.EQ.14)THEN
      KMASKE(13)=1
      KMASKE(17)=1
      ENDIF
      IF(NR.EQ.17)THEN
      KMASKE(13)=1
      KMASKE(14)=1
      KMASKE(15)=1
      ENDIF
      IF(NR.EQ.15)THEN
      KMASKE(17)=1
      ENDIF
      GOTO 4753
C
  295 CONTINUE
C
C**   ATTENTION: HERE IS SUBROUTINE SUSFIT!
      IF((INBW15.EQ.0.AND.BWWWIN(15).EQ.ZERO)
     1.AND.(IBWWW(15).NE.0.OR.STBWWW(15).NE.ZERO))THEN
      IF(MORTEX.GT.0)THEN
      WRITE(*,155)
      WRITE(11,155)
  155 FORMAT(' CHI-0 WILL BE INVOLVED NOW FOR THE FIRST TIME,',/,' THERE
     1FORE THE SPECIAL OPTION IOPT3 CAN BE CHOSEN (FIRSTLY) NOW!')
      ENDIF
      WRITE(11,153)
 8223 WRITE(*,153)
  153 FORMAT(
     1' THE OPTION IOPT3=0 MAY BE CHANGED TO =1: INPUT IOPT3 IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3874)IOPT3
      GOTO 4874
      ENDIF
 3874 READ(*,'(I1)',ERR=8223,END=4576)IOPT3
      LMN=1
 4874 IF(IOPT3.GT.1)IOPT3=1
      WRITE(7,2291)IOPT3
 2291 FORMAT(I1,' =IOPT3 ("CHI-0")')
      WRITE(11,2912)IOPT3
      WRITE(*,2912)IOPT3
 2912 FORMAT(I2,' =IOPT3 ("CHI-0")!!!!!!!!!')
      ENDIF
C
      WRITE(11,5160)
 8225 WRITE(*,5160)
 5160 FORMAT(
     1' THE NUMBER OF DATA TO BE FITTED MAY BE CHANGED NOW, BUT THE TOT'
     1,'AL',/,' NUMBER REMAINS THE SAME! YOU WANT TO CHANGE? YES/NO(0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3875)JANO
      GOTO 4875
      ENDIF
 3875 READ(*,'(I1)',ERR=8225,END=4576)JANO
      LMN=1
 4875 WRITE(7,2292)JANO
 2292 FORMAT(I1,' =JANO(CHANGE)')
      WRITE(11,2922)JANO
      WRITE(*,2922)JANO
 2922 FORMAT(I2,' =JANO(CHANGE)!!!!!!!!!')
      IF(JANO.NE.0)THEN
      WRITE(*,158)
      WRITE(11,158)
  158 FORMAT(' THE FIT-STATUS (YES, WILL BE FITTED: 0(NO: 1)) OF ALL ROW
     1S',/,' OF INPUT-CHI VALUES WILL BE GIVEN NOW:')
      WRITE(11,'(60I1)')(LOWDAT(I),I=1,NDATAP)
  999 WRITE(*,'(60I1)')(LOWDAT(I),I=1,NDATAP)
  157 CONTINUE
      WRITE(11,156)
 8226 WRITE(*,156)
  156 FORMAT(' INPUT IN I3 A NUMBER OF A ROW OF AN INPUT-CHI VALUE, WHOS
     1E',/,' FIT-STATUS (YES/NO) WILL BE CHANGED! END=0; INFO=999',/,
     2' (To change an active SIGMA, change fitting status twice: =>no/=>
     3yes!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3876)NR
      GOTO 4876
      ENDIF
 3876 READ(*,'(I3)',ERR=8226,END=4576)NR
      LMN=1
 4876 WRITE(7,2293)NR
 2293 FORMAT(I3,' =NR')
      WRITE(11,2932)NR
      WRITE(*,2932)NR
 2932 FORMAT(I4,' =NR!!!!!!!!!')
      IF(NR.EQ.0)GOTO 159
      IF(NR.EQ.999)GOTO 999
      IF(NR.LT.0.OR.NR.GT.NDATAP)GOTO 157
      IF(LOWDAT(NR).EQ.0)THEN
      LOWDAT(NR)=1
      NDATA=NDATA-1
      ELSE
      LOWDAT(NR)=0
      NDATA=NDATA+1
      WRITE(11,1566)SIGMA0(NR)
 1567 WRITE(*,1566)SIGMA0(NR)
 1566 FORMAT(' TO CHANGE SIGMA(NR)=',D10.2,' INPUT NEW SIGMA IN D10.2')
      IF(LMN.EQ.0)THEN
      READ(77,'(D10.2)',ERR=5588,END=3877)SIGMAI
      GOTO 4877
      ENDIF
 3877 READ(*,'(D10.2)',ERR=1567,END=4576)SIGMAI
      LMN=1
 4877 WRITE(7,1568)SIGMAI
 1568 FORMAT(D10.2,' =SIGMAI')
      WRITE(11,1569)SIGMAI
      WRITE(*,1569)SIGMAI
 1569 FORMAT(D12.2,' =SIGMAI!!!!!!!!!')
      IF(SIGMAI.NE.ZERO)SIGMA0(NR)=SIGMAI
      ENDIF
      GOTO 157
  159 CONTINUE
C**   NEW SIGMA:
      SUMSIG=ZERO
      NOSIGM=0
      DO 7578 I=1,NDATAP
      IF(JAVANV.EQ.0.AND.TESDAT(I).EQ.ZERO.AND.TEMPIK(I).GT.ZERO)
     1STOP 'FIELD=0'
      IF(LOWDAT(I).NE.0)GOTO 7578
C**   SOME SIGMA0(I) MAY NOW BE ZERO, BUT THEY MUST NOT BE ZERO!:
      IF(SIGMA0(I).LE.ZERO)THEN
      IF(NOSIGM.EQ.0)THEN
      WRITE(*,7558)
      WRITE(11,7558)
 7558 FORMAT(' (SIGMA.LE.ZERO) => SIGMA =ONE!')
      ENDIF
      NOSIGM=1
      SIGMA0(I)=ONE
      ENDIF
      SUMSIG=SUMSIG+ONE/SIGMA0(I)**2
C
 7578 CONTINUE
      SUMSIG=DSQRT(SUMSIG/DBLE(NDATA))
C**   SUMSIG NOW =ONE, IF ALL SIGMA =ONE! - NOW NORMALIZATION OF SIGMA!:
      DO 7579 I=1,NDATAP
      SIGMA(I)=ZERO
      IF(LOWDAT(I).NE.0)GOTO 7579
      SIGMA(I)=SIGMA0(I)*SUMSIG
 7579 CONTINUE
C
C**   THE FOLLOWING ENDIF BELONGS TO "IF(JANO.NE.0)THEN"!:
      ENDIF
C
      WRITE(*,5555)
      WRITE(11,5555)
 5555 FORMAT(
     1' NEXT ITERATION WITH "FIXED" VALUES, EXCEPT THE CHANGED ONES!')
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      OMEGA=0.1D0
      GOTO 55
C**   NO RETURN (TO SHORT..F)! - STOP HERE IN SUSFIT OR IN RESTBL!
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUSFIT
      END
      SUBROUTINE LEVMAR(
C**   CALLED BY SUBROUTINE SUSFIT! - CALLS LEVDER, IF THERE WAS "SUCCESS"
C     IN SUBROUTINE LEVSQX, RESPECTIVELY ALWAYS FOR THE FIRST ITERATION.
C     (LEVDER WIL CALL SUSC, THE ROUTINE WHICH EVALUATES THE DERIVATIVES
C     OF THE FITTING FUNCTION (THE SUSCEPTIBILITY)). THIS SUBROUTINE HERE
C     NEEDS GAUSS TO SOLVE A SYSTEM OF LINEAR EQUATIONS AND TO MAKE A PROPOSAL
C     FOR NEW PARAMETERS.
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHAM,ALPHA,I20,BETA,BETAM,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,LAUFNR,ITMIN,ITMAX,CRZMAT)
C
C**   LEVENBERG-MARQUARDT METHOD: PAGE -526-  NUMERICAL RECIPES,
C     THE ART OF SCIENTIFIC COMPUTING, CAMBRIDGE UNIVERSITY PRESS 1992.
C  LEVENBERG-MARQUARDT METHOD, ATTEMPTING TO REDUCE CHISQ, THE SUM OF
C  THE DIFFERENCES OF CHI(I)-MEASURED AND CHI(I)-CALCULATED SQUARED.
C  THERE ARE NDATA POINTS TEMPIK(I), CHI(I)-MEASURED WITH INDIVIDUAL
C  STANDARD DEVIATIONS SIG(I), AND A FIT IS REQUIRED BETWEEN THESE
C  NDATA POINTS AND CHI(I)-CALCULATED. THE STANDARD DEVIATIONS ARE OFTEN
C  EQUAL TO CHI(I)-MEASURED. CHI(I)-CALCULATED DEPENDS ON UP TO 20
C  COEFFICIENTS, AND UP TO 11 OF THESE ARE WYBOURNE COEFFICIENTS OF
C  A LIGAND FIELD. THE ACTUAL COEFFICIENTS ARE STORED IN STBWWW AND
C  THE FIXED ONES IN BWNULL. ONLY MFIT COEFFICIENTS ARE ACTUALLY
C  BEEN ADJUSTED.
C  SUBROUTINE SUSC EVALUATES CHI(I) AND ITS DERIVATIVES WITH RESPECT TO THE
C  FITTING PARAMETERS, CHI(I) ITSELF USING SUBROUTINE LEVSQX AND THE
C  DERIVATIVES OF CHI(I) USING SUBROUTINE LEVDER.
C  A PROPOSAL FOR THE FITTING PARAMETERS (NOT FOR THE 0TH ITERATION!) IS
C  MADE HERE WITH HELP OF THE ABOVE MENTIONED DERIVATIVES (BUT NOT ALWAYS,
C  EXCEPT THERE IS THE FIRST ITERATION), AND WITH HELP OF SUBROUTINE GAUSS.
C  IF, IN SUBROUTINE LEVSQX, SQX BECOMES "BETTER" (FORMALLY ALWAYS IN THE
C  0TH ITERATION!), NEW DERIVATIVES ARE CALCULATED AND A NEW PROPOSAL IS
C  MADE WITH HELP OF THESE DERIVATIVES AND SUBROUTINE GAUSS. IN THE OPPOSITE
C  CASE, A NEW PROPOSAL IS MADE WITH HELP OF THE "OLD" DERIVATIVES AGAIN
C  AND SUBROUTINE GAUSS, BUT IN A DIFFERENT WAY WITH AN INCREASED OMEGA,
C  A PARAMETER OF THE LEVENBERG-MARQUARDT METHOD.
C  THIS PARAMETER DECREASES IN THE CASE, THAT SQX BECOMES SMALLER.
C  IF SQX REMAINS PRACTICALLY CONSTANT DURING FURTHER ITERATIONS, CONVERGENCE
C  IS ACHIEVED (OR IF OMEGA HAS BECOME VERY BIG!).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DIMENSION EIVECV(ND2002,*)
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      CHARACTER QTEXT1(60)
      CHARACTER*15 QMPC
      PARAMETER (II20=36,ZERO=0.0D0,ONE=1.0D0,J20=36)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW (E.G. BWW(STEVENS)=>BWWW(WYBOURNE))
C     IN SUBROUTINE SUSC:
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
C
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(II20),CHIFIX
     1,CFOSXJ,NOTONE,JAFIX,BWWTMP(J20),BWWWMN(II20),BWWWMX(II20),MINMAX
C
      DIMENSION LIST(I20),ALPHAM(I20,I20),ALPHA(I20,I20)
     1,BETA(I20),BETAM(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     1,CHIFIX(601)
     2,SIG2I(601),CHIGEM(601),EIWERT(*)
      DIMENSION INMIST(II20),BWMIST(II20),JZEILE(26),WURZEL(26)
      SAVE
      DATA KLICKI,NOWYB/0,0/
      DATA MINMAX,MINMAY/0,0/
      DATA JZEILE/0,1,0,3,3,3,0,7,7,7,7,0,0,0,0,0,0,0,0,0,1,3,7,7,0,0/
      DATA WURZEL/4*ONE,-1.19522861D0,0.59761430D0,2*ONE,0.60380736D0
     1,-1.87082869,0.63327851D0,15*ONE/
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.II20)STOP 'J.NEII'
      IF(LOWER0.EQ.0)GOTO 3344
      OMEGA=0.1D0
      IF(LESS.EQ.0)THEN
      WRITE(11,1213)OMEGA
 1033 WRITE(*,1213)OMEGA
 1213 FORMAT(/,' OMEGA =',D16.8,', RETURN FOR THIS OMEGA OR INPUT OTHER' 
     1,/,' IN E16.8 (IS CHANGED AUTOM., OTHERWISE INPUT A<=>"ERROR"!)',
     2/,' (A NEGATIVE OMEGA BECOMES POSITIVE WITH THIS VALUE THE LOWER L
     3IMIT!)')
      WRITE(*,6508)
      WRITE(11,6508)
 6508 FORMAT(' (A SPECIAL TEST FOR AN OMEGA>0 AND <1 IS ENABLED, IF 999 
     1IS ADDED TO OMEGA)')
      IF(MFIT.EQ.1.AND.ITMIN.EQ.ITMAX)THEN
      WRITE(*,6510)
      WRITE(11,6510)
 6510 FORMAT(' FOR THIS FIT WITH 1 PARAMETER: IN ADD. TO A NEG. OMEGA PU
     1T IN AS A NEW LINE',/,' IN I1 YES/NO(0) "NO LEVENBERG/MARQUARDT, B
     2UT OMEGA SERVES AS A (POS.) STEP-WIDE"!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3878)BOMEGA
      GOTO 4878
      ENDIF
 3878 READ(*,'(D16.8)',ERR=103,END=4576)BOMEGA
      LMN=1
 4878 WRITE(7,102)BOMEGA
      IOMEGA=INT(BOMEGA)
      FOMEGA=BOMEGA-DBLE(IOMEGA)
      IF(IOMEGA.EQ.999.AND.FOMEGA.NE.ZERO)THEN
      LASERY=1
      WRITE(*,6509)
      WRITE(11,6509)
 6509 FORMAT(' A SPECIAL TEST ON OMEGA WAS ENABLED!')
      BOMEGA=FOMEGA
      ENDIF
  102 FORMAT(D16.8,' =(B)OMEGA')
 1021 FORMAT(' OMEGA (A PARAMETER OF LEVENBERG/MARQUARDT)=',D16.8,
     1'!!!!!!!!!')
 1020 FORMAT(' OMEGA ((POS.) STEP-WIDE (NO LEVENBERG/MARQUARDT))=',D16.8
     1,'!!!!!!!!!')
      JAFIX=0
      IF(BOMEGA.LT.ZERO)THEN
      JAFIX2=0
      IF(MFIT.EQ.1.AND.ITMIN.EQ.ITMAX)THEN
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3879)JAFIX2
      GOTO 4879
      ENDIF
 3879 READ(*,'(I1)',ERR=1033,END=4576)JAFIX2
      LMN=1
 4879 WRITE(7,1024)JAFIX2
 1024 FORMAT(I1,' =JAFIX2')
      ENDIF
      JAFIX=1
      IF(JAFIX2.NE.0)THEN
      JAFIX=2
      WRITE(*,1020)BOMEGA
      WRITE(11,1020)BOMEGA
      WRITE(*,1025)JAFIX2
      WRITE(11,1025)JAFIX2
 1025 FORMAT(I2,' =JAFIX2!!!!!!!!!')
      ELSE
      WRITE(*,1021)BOMEGA
      WRITE(11,1021)BOMEGA
      ENDIF
      BOMEGA=DABS(BOMEGA)
      GOMEGA=BOMEGA
      ENDIF
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
      IF(JAFIX.EQ.0)WRITE(*,1021)OMEGA
      IF(JAFIX.EQ.0)WRITE(11,1021)OMEGA
      NOMEGA=0
      GOTO 104
  103 NOMEGA=1
      WRITE(7,105)
      WRITE(*,105)
      WRITE(11,105)
  105 FORMAT(' A<=>ERR')
  104 CONTINUE
      ENDIF
C
 3344 CONTINUE
C**   3344 CONTINUE: LOWER0=1 <=> INITIALIZATION, =0 <=> CONTINUATION
C     OF THE CURRENT (FIRST, SECOND, ...) ITERATION!
C**   FOR THE FIRST TIME LAUFNR=0 BECOMES LAUFNR=1!:
      LAUFNR=LAUFNR+1
C**   END OF INITIALIZATION!:
      LOWER0=0
C
      IF(JASUCC.NE.0.AND.NDATAM.NE.0)THEN
C**   JASUCC SURELY =1 FOR THE FIRST ITERATION!
C**   CALCULATION OF NEW DERIVATIVES, NEW ALPHA AND NEW BETA!:
C
      CALL LEVDER(
     1JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE,CRZMAT)
C
      ENDIF
C
      IF(KLICKI.EQ.0.AND.NDATA.NE.0.AND.LESS.EQ.0)THEN
      KLICKI=1
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,' POSSIBLE'
     1,' INPUT OF LIMITS FOR VALUES TO BE FITTED (WYB.-VAL. HERE!):',/
     1,' IS THE NAME OF THE NEXT FILE BWYBIN.DAT IN FORMAT(I2,3D16.8)?',
     2/,' "9" OR GIVE ITS NAME! (RETURN => NO INPUT HERE, 8 => STOP,',/
     3,' "79"(RESP. 7NAME)<=>IGNORE TEST(<=>START-VAL..NE.WYB.-VAL.)!)',
     4/,' IF WYBOURNE VALUES ARE GIVEN AS LIMITS FOR RELATIONS,',/
     5,' PUT IN 69 INSTEAD OF 79, BUT 59 FOR NOT TO IGNORE TEST!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3880)QMPC
      GOTO 4880
      ENDIF
 3880 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4880 WRITE(7,5163)QMPC
 5163 FORMAT(A15,' (BWYBIN 2nd)')
      IF(QMPC(1:1).EQ.'6'.OR.QMPC(1:1).EQ.'5')MINMAY=1
      IF(QMPC(1:1).EQ.'7'.OR.QMPC(1:1).EQ.'6')NOWYB=1
      IF(QMPC(1:1).EQ.'7'.OR.QMPC(1:1).EQ.'6'.OR.QMPC(1:1).EQ.'5')THEN
      WRITE(*,'(A1)')QMPC(1:1)
      WRITE(11,'(A1)')QMPC(1:1)
      DO 3330 I=1,14
      IP1=I+1
      QMPC(I:I)=QMPC(IP1:IP1)
 3330 CONTINUE
      QMPC(15:15)=' '
      IF(QMPC.EQ.'               ')QMPC='9              '
      ENDIF
      IF(QMPC.EQ.'9              ')QMPC='BWYBIN.DAT     '
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,' (BWYBIN)!!LEVMAR!!')
      IF(QMPC.EQ.'8              ')STOP '8'
      IF(QMPC.EQ.'               ')GOTO 3334
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(
     1' CRYSTAL FIELD PARAMETERS ETC. ARE READ IN FROM ',A15)
      OPEN(14,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(14,63,ERR=33)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,60A1)
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(
     1' RELEVANT VALUES READ IN ARE (ONLY MIN AND MAX ARE PUT OUT,',/
     2,' VALUES MARKED WITH 8 MAY BE RELEVANT!):')
      DO 8581 N=1,IN25
      READ(14,61,END=33,ERR=33)INMIST(N),BWMIST(N),BWWWMN(N),BWWWMX(N)
   61 FORMAT(1X,I1,3D16.8)
      IF(BWMIST(16).EQ.ZERO)BWMIST(16)=ONE
      IF(((BWWWIN(N).NE.BWMIST(N)).OR.(INMIST(N).NE.INBWWW(N)))
     1.AND.NOWYB.EQ.0)STOP '=.NE.='
      IF(((INBWWW(N).NE.0.AND.INBWWW(N).NE.8.AND.MINMAY.EQ.0).OR
     1.(MINMAY.NE.0.AND.INBWWW(N).NE.0))
     1.AND.(BWWWMN(N).NE.ZERO.OR.BWWWMX(N).NE.ZERO))
     1THEN
      WRITE(*,6161)N,INBWWW(N),BWWWIN(N),BWWWMN(N),BWWWMX(N)
      WRITE(11,6161)N,INBWWW(N),BWWWIN(N),BWWWMN(N),BWWWMX(N)
 6161 FORMAT(2I3,3D16.8)
      IF(BWWWMN(N).GT.BWWWMX(N))STOP 'MINMAX'
      IF(((BWWWMN(N).GT.BWWWIN(N)).OR.(BWWWMX(N).LT.BWWWIN(N)))
     1.AND.((INBWWW(N).NE.9.AND.INBWWW(N).NE.8.AND.MINMAY.NE.0).OR
     2.(INBWWW(N).EQ.9.AND.MINMAY.EQ.0)))
     1STOP '.LT..GT.'
      MINMAX=1
      ENDIF
 8581 CONTINUE
      CLOSE(14)
      GOTO 3334
 3331 PRINT*,' ERROR WHILE READING!'
      GOTO 3333
 3332 PRINT*,' DATA FILE NOT FOUND'
      GOTO 3333
   33 PRINT*,' ERROR IN DATA FILE!'
      GOTO 3333
 3334 CONTINUE
      ENDIF
C
C**   ALTER LINEARIZED FITTING MATRIX, BY AUGMENTING DIAGONAL ELEMENTS:
      OMEGAX=OMEGA
      IOMEX2=0
      JOLD=0
      JFIX=0
 3337 CONTINUE
      IF(IOMEX2.NE.0.AND.JOLD.NE.JFIX)THEN
      JOLD=JFIX
      WRITE(*,3342)IOMEX2,LIST(JFIX)
      WRITE(11,3342)IOMEX2,LIST(JFIX)
 3342 FORMAT(
     1' OMEGAX=2.*OMEGAX WAS TAKEN',I5,' TIMES ("SUM")! LIST(J) =',I3)
      ENDIF
      IF(JAFIX.EQ.2)GOTO 1928
      DO 599 J=1,MFIT
      DO 499 K=1,MFIT
      ALPHAM(J,K)=ALPHA(J,K)
  499 CONTINUE
      ALPHAM(J,J)=ALPHA(J,J)*(ONE+OMEGAX)
      BETAM(J)=BETA(J)
  599 CONTINUE
      ISING=0
      LEVRUS=0
      CALL GAUSS(ALPHAM,MFIT,I20,BETAM,ISING,MOROUT,LEVRUS)
      IF(ISING.NE.0)STOP 'ISING'
C**   MATRIX SOLUTION. - THE "RESULT" IS BETAM(ATRIX)(I20)!
C**   NOW FOR THE NEXT ITERATION STBWWW (MEANS BTRIAL = B-TRI-AL!):
      DO 699 J=1,MFIT
      STBWWW(LIST(J))=BWNULL(LIST(J))+BETAM(J)
  699 CONTINUE
 1928 CONTINUE
      IF(JAFIX.EQ.2)
     1STBWWW(LIST(1))=STBWWW(LIST(1))+GOMEGA
C
      IF(MINMAX.NE.0)THEN
      DO 3336 J=1,MFIT
      BWWMAX=BWWWMX(LIST(J))
      BWWMIN=BWWWMN(LIST(J))
      BWWMEA=STBWWW(LIST(J))
      IF(BWWMIN.NE.ZERO.OR.BWWMAX.NE.ZERO)THEN
      IF(MINMAY.NE.0.AND.INBWWW(LIST(J)).EQ.9.AND.JZEILE(LIST(J)).NE.0)
     1THEN
      BWWMEA=BWWMEA*(STBWWW(JZEILE(LIST(J)))*WURZEL(LIST(J)))
      ENDIF
      IF((BWWMIN.GT.BWWMEA).OR.(BWWMAX.LT.BWWMEA))THEN
      OMEGAX=2.D0*OMEGAX
      IF(OMEGAX.GT.0.1D10)THEN
      OMEGA=OMEGAX
      WRITE(*,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
      WRITE(11,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
 3338 FORMAT(
     1' WARNING: OMEGAX.GT.0.1D10; J, LIST(J), STBWWW(LIST(J));BWWMEA ='
     1,/,I3,I5,2D16.8)
      RETURN
      ENDIF
      IOMEX2=IOMEX2+1
      JFIX=J
      GOTO 3337
      ENDIF
      ENDIF
 3336 CONTINUE
      IF(MINMAY.NE.0)THEN
      MFIT1=MFIT+1
      DO 3339 J=I16,MFIT1,-1
      BWWMAX=BWWWMX(LIST(J))
      BWWMIN=BWWWMN(LIST(J))
      BWWMEA=STBWWW(LIST(J))
      IF(BWWMIN.NE.ZERO.OR.BWWMAX.NE.ZERO)THEN
      IF(INBWWW(LIST(J)).EQ.8.AND.JZEILE(LIST(J)).NE.0)
     1THEN
      BWWMEA=BWWMEA*(STBWWW(JZEILE(LIST(J)))*WURZEL(LIST(J)))
      IF((BWWMIN.GT.BWWMEA).OR.(BWWMAX.LT.BWWMEA))THEN
      IF(INBWWW(JZEILE(LIST(J))).NE.0)THEN
      OMEGAX=2.D0*OMEGAX
      IF(OMEGAX.GT.0.1D10)THEN
      OMEGA=OMEGAX
      WRITE(*,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
      WRITE(11,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
      RETURN
      ENDIF
      IOMEX2=IOMEX2+1
      JFIX=J
      GOTO 3337
      ELSE
      WRITE(*,3340)J,LIST(J),BWWMIN,BWWMEA,BWWMAX,STBWWW(LIST(J))
      WRITE(11,3340)J,LIST(J),BWWMIN,BWWMEA,BWWMAX,STBWWW(LIST(J))
 3340 FORMAT(
     1' WARNING: BWWMIN.GT.BWWMEAN.OR.BWWMAX.LT.BWWMEAN: IGNORED!',/
     2,' J, LIST(J), BWWMIN, BWWMEAN, BWWMAX, AND STBWWW(LIST(J)) =',
     3/,I3,I5,4D16.8)
      GOTO 3339
      ENDIF
      ENDIF
      ENDIF
      ENDIF
 3339 CONTINUE
      ENDIF
      IF(IOMEX2.NE.0)THEN
      WRITE(*,3343)IOMEX2,LIST(JFIX)
      WRITE(11,3343)IOMEX2,LIST(JFIX)
 3343 FORMAT(
     1' OMEGAX=2.*OMEGAX WAS TAKEN',I5,' TIMES ("SUMS")! LIST(J) =',I3)
      ENDIF
      ENDIF
C
      IF(NOMEGA.NE.0)THEN
C**   NOW OMEGA FOR THE NEXT ITERATION?:
      WRITE(*,1618)OMEGA
 1618 FORMAT(
     1' NOW OMEGA =',D10.2,', IF OTHER, INPUT IN E10.2 (A<=>"ERROR"=>"AU
     2TOM."!)')
      IF(LMN.EQ.0)THEN
      READ(77,102,ERR=5588,END=3881)BOMEGA
      GOTO 4881
      ENDIF
 3881 READ(*,102,ERR=1044,END=4576)BOMEGA
      LMN=1
 4881 BOMEGA=DABS(BOMEGA)
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
      WRITE(7,102)BOMEGA
      WRITE(*,1021)OMEGA
      WRITE(11,1021)OMEGA
      GOTO 1043
 1044 NOMEGA=0
      WRITE(7,105)
      WRITE(*,105)
      WRITE(11,105)
 1043 CONTINUE
      ENDIF
C
      RETURN
C**   LEVMAR RETURNS TO SUSFIT!
 4576 CALL FINISH
 5588 CALL FINISI
CEND LEVMAR
      END
      SUBROUTINE LEVSQX(
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE,CHISQW
     9,CRZMAT)
C     CALLS SUBROUTINE SUSC, WHICH EVALUATES THE FITTING FUNCTION
C     (THE SUSCEPTIBILITY).
C**   EVALUATES SQX, IF THE PARAMETERS TO BE FITTED  AND CHI(I)-MEASURED
C     ARE GIVEN. THE PARAMETERS ARE GIVEN AS INPUT FOR THE FIRST TIME AND
C     ARE COMPUTED BY SUBROUTINE LEVMAR FOR THE ITERATIONS!
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      PARAMETER (DELTAF=1.0001D0,DELTAX=0.000001D0
     1,ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6,II20=36,J20=36)
      DIMENSION EIVECV(ND2002,*)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW (E.G. BWW(STEVENS)=>BWWW(WYBOURNE))
C     IN SUBROUTINE SUSC:
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
C
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWMIST(II20),CHIFIX
     1,CFOSXJ,NOTMST,JAFIX,BWWTMP(J20),BWWWMN(II20),BWWWMX(II20),MINMAX
      DIMENSION LIST(I20),ALPHA(I20,I20),BWNULL(I20)
     1,BETA(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     2,SIG2I(601),CHIGEM(601),EIWERT(*),CHIFIX(601)
     3,FMIKR3(*),TAFMAT(*),TAGMAT(*),TAWERT(*),BSTART(*)
      SAVE
      DATA KLICK,KLICKY,KLICKC,KLICKM,KLICKS,KLICLA,KLICL/0,0,0,0,0,0,0/
      DATA KLICKV/0/
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.II20)STOP 'J.NEII'
      IF(LOWER0.EQ.0)GOTO 3344
C**   LOWER0=1 <=> INITIALIZATION!
C
      DO 1718 J=1,IN25
      BWNULL(J)=STBWWW(J)
      BWWTMP(J)=BWWW(J)
      JPL=J+15
      IF(JPL.LE.40)VLSTNG(JPL)=STBWWW(J)
 1718 CONTINUE
C
      NOTONE=0
      DO 7578 I=1,NDATAP
      IF(LOWDAT(I).NE.0)GOTO 7578
C
      IF(SIGMA(I).NE.ONE)NOTONE=1
C
 7578 CONTINUE
      IF(NOTONE.NE.0)THEN
      WRITE(*,3112)
      WRITE(11,3112)
 3112 FORMAT(' ANY OF THE STANDARD DEVIATIONS ARE NOT ONE!')
      IF(IOPT4.NE.1.OR.MORTEX.GT.0)THEN
      WRITE(*,3121)
      WRITE(11,3121)
 3121 FORMAT(' NOTE: THEY BELONG TO CHI, IF CHI IS FITTED,'
     1,/,' BUT TO 1/CHI, IF 1/CHI IS FITTED, ETC.!')
      ENDIF
      ENDIF
C
 3344 CONTINUE
      CHISQ=ZERO
C
      JTHETA=0
      THETA=ZERO
      IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
      JTHETA=1
      THETA=STBWWW(14)
      ENDIF
      NDATAO=NDATAM
      IF(KLICK.EQ.0)NDATAO=NDATA
      KLICK=1
      NDATAM=NDATA
C
      IOPT31=-2*IOPT3+4
      DO 597 J=1,JAOVER
      LOWHIG=J
      DO 598 I=1,NDATAP
      NRTEMP=I
      MINDAT(I)=0
      TEMPII=TEMPIK(I)
      IF(JTHETA.NE.0.AND.TEMPII.GT.ZERO)THEN
      TEMPII=TEMPII-THETA
      IF(TEMPII.LT.PARWUR)THEN
      MINDAT(I)=1
      IF(LOWDAT(I).EQ.0)NDATAM=NDATAM-1
      CHIBER(I)=ZERO
      GOTO 598
      ENDIF
      ENDIF
      TEMPTH=TEMPII
      TESLAS=TESDAT(I)
      DO 116 II=1,I16
      BWW(II)=STBWWW(II)
  116 CONTINUE
C**   BWW NEEDED IN SUSC! - NOW THE FIRST CALL OF SUSC!:
      CALL SUSC(JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD,CRZMAT)
C
      IF(LOWER0.EQ.1)CHIFIX(I)=CHISTA(I)
C
      CHIMOD=CHI(1,IOPT31,IOPT4)
      CHIGEM(I)=CHI(2,IOPT31,IOPT4)
      CHIBER(I)=CHIMOD
      IF(NREL.EQ.0)THEN
      IF(CHI(1,IOPT31,1).EQ.ZERO.AND.CHI(2,IOPT31,1).GT.ZERO)GOTO 7198
      ENDIF
C**   NO FITTING USING NEG. CHI VALUES!:
      IF(((CHI(1,IOPT31,1).LT.ZERO.OR.CHI(2,IOPT31,1).LE.ZERO).AND
     1.NOPROZ.EQ.0).OR.((CHI(1,IOPT31,1).LT.ZERO.OR.CHI(2,IOPT31,1).LT
     1.ZERO).AND.NOPROZ.NE.0))THEN
      MINDAT(I)=1
      IF(LOWDAT(I).EQ.0)NDATAM=NDATAM-1
C**   CHIBER(I)=ZERO - "ENERGIES"
      ENDIF
 7198 CONTINUE
C
      IF(CHI(1,2,1).LT.ZERO.AND.CHI(1,4,1).GT.ZERO)THEN
      IF(KLICKC.EQ.0)THEN
      KLICKC=1
      WRITE(11,588)
      WRITE(*,588)
  588 FORMAT(' WARNING:',/
     1,' CHISTART BECOMES NEG. FIRSTLY AND POS., WHEN CHI-0 IS ADDED!')
      ENDIF
      ENDIF
      IF(CHI(2,2,1).LT.ZERO.AND.CHI(2,4,1).GT.ZERO)THEN
      IF(KLICKM.EQ.0)THEN
      KLICKM=1
      WRITE(11,589)
      WRITE(*,589)
  589 FORMAT(' WARNING:',/
     1,' CHI-MEAS. BECOMES NEG., WHEN CHI-0 IS SUBTR.!')
      ENDIF
      ENDIF
  598 CONTINUE
C**   LAST CONTINUE BELONGS TO "DO 598 I=1,NDATAP"!
  597 CONTINUE
C
      IF(NDATAM.NE.NDATAO)THEN
      WRITE(*,1555)NDATA,NDATAM
      WRITE(11,1555)NDATA,NDATAM
 1555 FORMAT(
     1' NDATA.NE.NDATAM (OR NDATAM WAS CHANGED)! THEY ARE=',2I4)
      WRITE(*,1514)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
      WRITE(11,1514)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
 1514 FORMAT(' LIST(I), BWYB(LIST(I))=',/,(5(I3,D16.8)))
      ENDIF
C
      IF(NDATAP.EQ.1.AND.KLICKY.EQ.0)THEN
      KLICKY=1
      WRITE(*,55)CHIMOD
      WRITE(11,55)CHIMOD
   55 FORMAT(
     1' CALCULATED VALUE OF CHI FOR "ONLY 1 ROW OF INPUT":',D16.8)
      ENDIF
C**   NOW F-FACTOR, LAMBDA AND CHI-0:
C     (13) LAMBDA, (15) CHI-0 ("CHI DIAMAGNETIC") AND (16) F-FACTOR
C     (CORR. OF WEIGHT OF THE SAMPLE, WHERE MEASURED CHI COMES FROM)
      SQXKOR=ONE
      IF(NOPROZ.NE.0)SQXKOR=ZERO
C
      DO 152 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.LOWDAT(I).EQ.0)THEN
      SIGI=CHIGEM(I)
      SIGMI=SIGMA(I)
      SIG2I(I)=ONE
      IF(NOPROZ.EQ.0)THEN
      IF(SIGI.EQ.ZERO)THEN
      WRITE(*,1541)I
      WRITE(11,1541)I
 1541 FORMAT(' ATTEMPT TO DIVIDE BY MEASURED CHI = ZERO:'
     1,/,' THIS FIT IS NOT POSSIBLE! LINE NO. =',I4)
      STOP ':ZERO'
      ENDIF
      SIG2I(I)=ONE/(SIGI*SIGI)
      ENDIF
C**   NOTONE.NE.0: ANY OF THE SIGMI ("STANDARD DEVIATIONS") IS NOT ONE!:
      IF(NOTONE.NE.0)SIG2I(I)=SIG2I(I)/(SIGMI*SIGMI)
C**   AND IN ANALOGY (ALL CASES)!:
      IF(NOPROZ.NE.0.AND.KLICKS.EQ.0)THEN
      IF(SIGI.GT.DELTAX)THEN
      SQXKOR=SQXKOR+ONE/(CHIGEM(I)*SIGMI)**2
      ELSE
      SQXKOR=ONE
      KLICKS=1
      WRITE(*,1598)
      WRITE(11,1598)
 1598 FORMAT(' WARNING: SQXKOR BECOMES TOO BIG, THEREFORE SET TO ONE!')
      ENDIF
      ENDIF
      DLCHII=CHIGEM(I)-CHIBER(I)
      DELCHI(I)=DLCHII
C
C**   NOW CHISQ WILL BE CALCULATED!
C
      DLIDLI=DLCHII*DLCHII*SIG2I(I)
      CHISQ=CHISQ+DLIDLI
      ELSE
      CHIGEM(I)=ZERO
      DELCHI(I)=ZERO
      ENDIF
  152 CONTINUE
      IF(NOPROZ.NE.0)SQXKOR=SQXKOR/DBLE(NDATAM)
C**   CHISQW <=> CHISQW(ITHOUT) SQXKOR!:
      CHISQW=CHISQ
      CHISQ=CHISQ*SQXKOR
C
      CHISQQ=CHISQ
C**   = THE NEWLY CALCULATED CHISQ!
      IF(LOWER0.NE.0)THEN
      OCHISQ=CHISQ*TWO
      ELSE
C**   FOR CLARITY ONLY!:
      IF(NDATAM.EQ.0)CHISQ=ONE
      ENDIF
C
      JASUCC=0
      IF(CHISQ.LT.OCHISQ.AND.NDATAM.NE.0)JASUCC=1
      CFOS=EIWERT(NRVAL)
      CFOSJ=EIWERT(NRVALJ)
C
      IF(JASUCC.NE.0)THEN
C**   SUCCESS!: ACCEPT THE NEW SOLUTION.
      DO 1717 J=1,IN25
      BWNULL(J)=STBWWW(J)
      BWWTMP(J)=BWWW(J)
      JPL=J+15
      IF(JPL.LE.40)VLSTNG(JPL)=BWWW(J)
 1717 CONTINUE
      KLICKV=1
C**   THIS MEANS: STBWWW=BWNULL IN THE CALLING ROUTINE SUSFIT, IF JASUCC=1!
C     ... AND FOR OUTPUT LATER ON:
C**   CRYSTAL FIELD MINIMAL SPLITTING AND THE TWO DEGENERATIONS
C     BELONGING TO THESE TWO LEVELS, AND CRYSTAL FIELD OVER ALL SPLITTING
C     (REALLY OR NOT: INDEED THE EIGENVALUE OF THE LEVEL "NRVAL"! AND:
C     THE EIGENVALUE OF THE LEVEL NRVALJ.) 
      CFMSFX=DIFLOW
      CFOSFX=CFOS
      CFOSXJ=CFOSJ
      IGR1FX=IGR1
      IGR2FX=IGR2
      DO 188 J=1,NDATAP
      CHIFIX(J)=CHISTA(J)
  188 CONTINUE
      OCHISQ=CHISQ
C**   OCHISQ WILL BE USED IN THE NEXT ITERATION!
      CHISQV=CHISQW
      IF(LOWER0.EQ.0.AND.JAFIX.EQ.0)THEN
      OMEGA=0.3D0*OMEGA
      IF(OMEGA.LT.1.0D-33)OMEGA=1.0D-33
      ENDIF
C**   STBWWW AND BWNULL ARE BOTH RELEVANT FURTHERMORE (BWNULL FOR OUTPUT (ONLY)
C     OR FOR NEW STARTING!).
C
      IF(LOWER0.EQ.0.AND.JAFIX.EQ.1)THEN
      OMEGA=0.3D0*OMEGA
      IF(OMEGA.LT.GOMEGA)OMEGA=GOMEGA
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LOWER0.EQ.0.AND.JAFIX.EQ.1)THEN"
      KLICLA=1
      ELSE IF(JASUCC.EQ.0)THEN
C**   NO SUCCESS!: INCREASE OMEGA, HOLD THE OLD SHISQ ("OCHISQ"), AND RETURN.
C
      IF(KLICKV.EQ.0)THEN
      KLICKV=1
      DO 1771 J=1,IN25
      JPL=J+15
      IF(JPL.LE.40)VLSTNG(JPL)=BWWW(J)
 1771 CONTINUE
      ENDIF
      IF(LASERY.EQ.0.AND.JAFIX.NE.2)OMEGA=3.D0*OMEGA
      IF(LASERY.NE.0)THEN
      IF(KLICLA.EQ.0)OMEGA=3.D0*OMEGA
      IF(KLICLA.NE.0)THEN
      IF(KLICL.EQ.0)THEN
      KLICL=1
      WRITE(11,6502)
 6503 WRITE(*,6502)
 6502 FORMAT(' INPUT IN D16.8 NEW (POS.) OMEGA FOR SPECIAL TEST HERE, E.
     1G. 0.1D-7',/,' ATTENTION: A MINIMUM OF ITER. IS MOSTLY REQUIRED!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3882)FOMEGA
      GOTO 4882
      ENDIF
 3882 READ(*,'(D16.8)',ERR=6503,END=4576)FOMEGA
      LMN=1
 4882 FOMEGA=DABS(FOMEGA)
      IF(FOMEGA.EQ.ZERO)FOMEGA=0.1D-07
      WRITE(7,6504)FOMEGA
 6504 FORMAT(D16.8,' = FOMEGA IN LEVSQX')
      WRITE(11,6505)FOMEGA
      WRITE(*,6505)FOMEGA
 6505 FORMAT(D16.8,' = (F)OMEGA IN LEVSQX!!!!!!!!!')
      ENDIF
      OMEGA=FOMEGA
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(KLICLA.NE.0)THEN"
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LASERY.NE.0)THEN"
      KLICLA=0
      CHISQ=OCHISQ
      CHISQW=CHISQV
      ENDIF
C
      RETURN
C**   RETURNS TO SUSFIT AND HAS THE ACTUAL VALUES READY NOW FOR OUTPUT!
C     THE LEVENBERG-MARQUARTD METHOD ITSELF WILL FOLLOW IN SUBROUTINE LEVMAR,
C     IF THERE ARE DATA TO FIT AND IF THESE DATA SHALL BE FITTED!
 4576 CALL FINISH
 5588 CALL FINISI
CEND LEVSQX
      END
      SUBROUTINE LEVDER(
     1JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE,CRZMAT)
C     USED BY LEVMAR TO EVALUATE THE LINEARIZED FITTING MATRIX ALPHA,
C     AND VECTOR BETA. - CALLS SUBROUTINE SUSC, WHICH EVALUATES THE
C     (DERIVATIVES OF THE) FITTING FUNCTION (THE SUSCEPTIBILITY).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      DIMENSION EIVECV(ND2002,*)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW (E.G. BWW(STEVENS)=>BWWW(WYBOURNE))
C     IN SUBROUTINE SUSC:
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      PARAMETER (DELTAF=1.0001D0,DELTAX=0.000001D0
     1,ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6)
      DIMENSION LIST(I20),ALPHA(I20,I20),BWNULL(I20)
     1,BETA(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     2,SIG2I(601),CHIGEM(601)
     3,EIWERT(*),FMIKR3(*),TAFMAT(*),TAGMAT(*),TAWERT(*),BSTART(*)
      SAVE
      DATA NOGEW2,LOWER1/0,1/
C**   HERE STARTS THE FIRST ITERATION AND SO ON ...!
C     BEFORE: THE "0TH ITERATION"! DERIVATIVES ARE CALCULATED HERE!
C     DERIVATIVES ARE ALWAYS CALCULATED FOR THE FIRST ITERATION, BUT
C     ARE CALCULATED OR NOT CALCULATED FOR THE FURTHER ONES: THEY ARE
C     CALCULATED, IF SQX HAS BECOME "BETTER", AND NOT "ELSE"! 
      IF(J2.NE.J20)STOP 'J.NE.J'
      JAABLT=1
C
      IF(LOWER1.EQ.0)GOTO 3344
C**   LOWER1=1 <=> INITIALIZATION!
      LOWER1=0
C
      IOPT31=-2*IOPT3+4
C**   NOGEW2.EQ.0 MEANS NOGEW2.EQ.0 ONLY(!), IF NOANAL=0!:
C     IF(IOPT3.EQ.0.AND.IOPT4.EQ.1)NOGEW2=0!
      IF(NOANAL.EQ.0)THEN
      IF(IOPT3.EQ.0.AND.NOPROZ.NE.0)THEN
      IF(IOPT4.EQ.1)NOGEW2=1
      IF(IOPT4.EQ.2)NOGEW2=-1
      ENDIF
      IF(IOPT3.NE.0)THEN
      IF(IOPT4.EQ.1.AND.NOPROZ.EQ.0)NOGEW2=2
      IF(IOPT4.EQ.2.AND.NOPROZ.NE.0)NOGEW2=-2
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(NOANAL.EQ.0)THEN"!
 3344 CONTINUE
C**   LAUFNR=LAUFNR+1, IF THERE WAS A NEW ALPHA AND/ OR(!) A NEW OMEGA!
      JTHETA=0
      THETA=ZERO
      IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
      JTHETA=1
      THETA=STBWWW(14)
      LISTL=0
      DO 52 I=1,MFIT
   52 IF(LIST(I).EQ.14)LISTL=I
      ENDIF
      MFITFF=0
      MFITFG=0
      MFITFH=0
      DO 1516 II=1,MFIT
      IF(NOANAL.EQ.0.AND.LIST(II).EQ.16)THEN
C**   CORRECTION FACTOR <=> 16:
      MFITFF=II
      GOTO 1516
      ENDIF
      IF(NOANAL.EQ.0.AND.LIST(II).EQ.15)THEN
C**   CHI 0 <=> 15:
      MFITFH=II
      GOTO 1516
      ENDIF
      IF(NOANAL.EQ.0.AND.LIST(II).EQ.13)THEN
C**   LAMBDA <=> 13:
      MFITFG=II
      GOTO 1516
      ENDIF
      DO 1517 I=1,I16
      BWW(I)=STBWWW(I)
 1517 CONTINUE
      BWII=BWW(LIST(II))
      BWIID=BWII*DELTAF
      DELTA=BWIID-BWII
      DELTAQ=DELTAX
C**   CHI-0 <=> 15:
      IF(LIST(II).EQ.15)DELTAQ=DELTAX**2
      IF(DABS(DELTA).LT.DELTAQ)THEN
      IF(DELTA.GE.ZERO)DELTA=DELTAQ
      IF(DELTA.LT.ZERO)DELTA=-DELTAQ
      ENDIF
      BWW(LIST(II))=BWII+DELTA
C**   BWW NEEDED IN SUSC JUST AS BEFORE!
      DO 1957 J=1,JAOVER
      LOWHIG=J
      DO 1515 I=1,NDATAP
      NRTEMP=I
      IF(MINDAT(I).EQ.0.AND.LOWDAT(I).EQ.0)THEN
      TEMPII=TEMPIK(I)
      IF(JTHETA.NE.0.AND.TEMPII.GT.ZERO)THEN
      TEMPII=TEMPII-THETA
      IF(LISTL.EQ.II)TEMPII=TEMPII-DELTA
      ENDIF
      TEMPTH=TEMPII
      TESLAS=TESDAT(I)
C**   NOW THE SECOND CALL OF SUSC (TO GET DIFFERENT VALUES FOR CHI(I)-
C     CALCULATED, DIFFERENT FROM THOSE OF THE FIRST CALL IN SUBROUTINE
C     LEVSQX, IN ORDER TO EVALUATE THE DERIVATIVES OF CHI(I) WITH RESPECT
C     TO THE FITTING PARAMETERS)!:
      CALL SUSC(JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD,CRZMAT)
C
      CBERRR=CHI(1,IOPT31,IOPT4)
C**   CHIBER(I) (=CHI-CALC. ABOVE) = -DELCHI(I)+CHIGEM(I)
C     (=-DELCHI(I)+CHI-MEASURED ABOVE)
C     (CHI-MEASURED HERE AND ABOVE IS NOT (ALWAYS) THE SAME!
C     THE REASON IS, THAT E.G. A DERIVATIVE WITH RESPECT TO CHI-0
C     IN THE CASE OF IOPT31=2 WOULD BE ZERO, IF CHI-MEASURED WOULD
C     NOT BE TAKEN INTO ACCOUNT, BECAUSE ONLY CHI-MEASURED, BUT NOT
C     CHI-CALCULATED IS CHANGED BY CHI-0! (INDEED THE DIFFERENCE IS
C     CONCERNED AND NOT CHI-CALCULATED ALONE!))
C**   ABLNEN=(CHI(1,,HERE)-CHI(1,,ABOVE))-(CHI(2,,HERE)-CHI(2,,ABOVE))!:
      ABLNEN=CBERRR+DELCHI(I)-CHI(2,IOPT31,IOPT4)
      ABLCHI=ABLNEN/DELTA
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(II,I)=ABLCHI
 1515 CONTINUE
 1957 CONTINUE
 1516 CONTINUE
      IF(MFITFF.NE.0)THEN
C**   F-FACTOR:
      DO 1561 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.LOWDAT(I).EQ.0)THEN
      IF(NOGEW2.EQ.0.OR.NOGEW2.EQ.1)
     1ABLCHI=-CHIBER(I)/STBWWW(16)
      IF(NOGEW2.EQ.-1)ABLCHI=CHIBER(I)/STBWWW(16)
      IF(NOGEW2.EQ.-2)ABLCHI=CHIGEM(I)**2*
     1(ONE/CHIGEM(I)+STBWWW(15))/STBWWW(16)
      IF(NOGEW2.EQ.2)ABLCHI=-(CHIGEM(I)+STBWWW(15))/STBWWW(16)
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(MFITFF,I)=ABLCHI
 1561 CONTINUE
      ENDIF
      IF(MFITFG.NE.0)THEN
C**   LAMBDA:
      DO 1562 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.LOWDAT(I).EQ.0)THEN
      IF(NOGEW2.EQ.0.OR.NOGEW2.EQ.1)
     1ABLCHI=((CHIBER(I)*STBWWW(16)-STBWWW(15))**2)/STBWWW(16)
      IF(NOGEW2.EQ.2)ABLCHI=CHIBER(I)**2
      IF(NOGEW2.EQ.-1)THEN
      FFF=(CHIBER(I)*STBWWW(16)-STBWWW(15))*STBWWW(15)
      ABLCHI=-STBWWW(16)/((ONE+FFF)**2)
      ENDIF
      IF(NOGEW2.EQ.-2)ABLCHI=-ONE
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(MFITFG,I)=ABLCHI
 1562 CONTINUE
      ENDIF
      IF(MFITFH.NE.0)THEN
C**   CHI-0:
      DO 1563 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.LOWDAT(I).EQ.0)THEN
      IF(NOGEW2.EQ.0.OR.NOGEW2.EQ.1)
     1ABLCHI=ONE/STBWWW(16)
      IF(NOGEW2.EQ.-1)ABLCHI=-CHIBER(I)**2/STBWWW(16)
      IF(NOGEW2.EQ.-2)ABLCHI=-(CHIGEM(I)**2)
      IF(NOGEW2.EQ.2)ABLCHI=ONE
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(MFITFH,I)=ABLCHI
 1563 CONTINUE
      ENDIF
      JAABLT=0
C**   THE DERIVATIVES ARE READY! - NOW FOLLOWING: CALCULATION OF NEW
C     ALPHA UND BETA:
      DO 211 J=1,MFIT
      DO 1111 K=1,J
      ALPHA(J,K)=ZERO
 1111 CONTINUE
      BETA(J)=ZERO
  211 CONTINUE
C
      DO 1518 I=1,NDATAP
C**   ABLCHM(,I)=ABLCHI=ZERO, IF MINDAT(I).NE.0.OR.LOWDAT(I).NE.0, AND ZWI TOO!
      DO 498 J=1,MFIT
      ABLCJI=ABLCHM(J,I)
      ZWI=ABLCJI*SIG2I(I)
      DO 399 K=1,J
      ABLCKI=ABLCHM(K,I)
      ALPHA(J,K)=ALPHA(J,K)+ZWI*ABLCKI
  399 CONTINUE
      BETA(J)=BETA(J)+DELCHI(I)*ZWI
  498 CONTINUE
 1518 CONTINUE
      DO 799 J=2,MFIT
      DO 698 K=1,J-1
      ALPHA(K,J)=ALPHA(J,K)
  698 CONTINUE
  799 CONTINUE
C**   RETURNS TO LEVMAR!
      RETURN
CEND LEVDER 
      END
      SUBROUTINE GAUSS(WATRIX,N,KDIM,COLUMN,ISING,MOROUT,LEVRUS)
C**   LINEAR EQUATION SOLUTION BY THE ALGORITHM OF GAUSS WITH 
C     PIVOTING. THE INPUT MATRIX OF DIMENSION=KDIM*KDIM IS NAMED
C     WATRIX, AND THE RIGHT HAND SIDE OF THE SYSTEM OF LINEAR
C     EQUATIONS IS NAMED COLUMN. THERE ARE N EQUATIONS OF N UNKNOWNS.
C     THE SOLUTION, I.E. THE UNKNOWNS, IS / ARE IN COLUMN, WHEN
C     GAUSS RETURNS, AND KOLUMN IS USED TO REARRANGE THE SOLUTION
C     VECTOR.
C**   THIS SUBROUTINE WILL BE CALLED BY LEVMAR (LEVRUS=0) AND BY RUSSEL
C     (LEVRUS.NE.0), THE LATTER A ROUTINE FOR "TESTS" ONLY, AND IN THE
C     CASE OF A SINGULAR MATRIX RETURN WILL OCCUR WITH THE LABEL ISING=1
C     (NEEDED FOR SUBROUTINE RUSSELL).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      PARAMETER (ZERO=0.D0,ONE=1.D0,KKDIM=119)
      DIMENSION WATRIX(KDIM,KDIM),COLUMN(KDIM),KOLUMN(KKDIM)
      SAVE
      DATA KLICK,MOROUU/0,0/
      DATA PARGAU,PARGAB/1.0D-12,1.0D-4/
      IF(LEVRUS.NE.0)PARGAU=PARGAB
      NLEV=N
C**   FOR OUTPUT ONLY!:
      IF(LEVRUS.NE.0)NLEV=N+LEVRUS-ISING
      IF(MOROUT.NE.0.AND.KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,10)
  100 WRITE(*,10)
   10 FORMAT(
     1' MOROUT.NE.0 IN GAUSS: INPUT 1 IN I1 FOR MORE OUTPUT HERE!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3883)MOROUU
      GOTO 4883
      ENDIF
 3883 READ(*,'(I1)',ERR=100,END=4576)MOROUU
      LMN=1
 4883 WRITE(7,2294)MOROUU
 2294 FORMAT(I1,' =MOROUU IN GAUSS')
      WRITE(11,2942)MOROUU
      WRITE(*,2942)MOROUU
 2942 FORMAT(I2,' =MOROUU IN GAUSS!!!!!!!!!')
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,3025)N,NLEV
      WRITE(11,3025)N,NLEV
 3025 FORMAT(' SUBR. GAUSS: MATRIX AND COLUMN, N= , NLEV= ',2I6)
      DO 30 I=1,N
      WRITE(*,25)(WATRIX(I,J),J=1,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=1,NLEV)
   25 FORMAT(6D13.3)
   30 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
C**   BACKWARDS NUMBERING OF (THE COLUMNS OF) THE MATRIX:
      J=N+1
      DO 11 I=1,N
      J=J-1
      KOLUMN(I)=J
   11 CONTINUE
C
C**   EACH ROW - NO INTERCHANGE OF ROWS - 1 CONTINUE: 150 ROWS BELOW!:
      JROW=0
      DO 1 IROW=N,1,-1
C
      IROWM1=IROW-1
      ICOLM1=IROWM1
      ICOLMP=ICOLM1+1
      JROW=JROW+1
      TEMP=WATRIX(JROW,JROW)
      ABSBIG=DABS(TEMP)
      JNRCOL=JROW
      JCOL=JROW
C**   ALL COLUMNS > JCOL=JROW!:
      DO 2 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      IF(DABS(WATRIX(JROW,JCOL)).GT.ABSBIG)THEN
      ABSBIG=DABS(WATRIX(JROW,JCOL))
      JNRCOL=JCOL
      ENDIF
    2 CONTINUE
      IF(JROW.NE.JNRCOL)THEN
C**   EXCHANGE:
      ITEMP=KOLUMN(JROW)
      KOLUMN(JROW)=KOLUMN(JNRCOL)
      KOLUMN(JNRCOL)=ITEMP
C**   ALL(!) ROWS (I=1,N)!:
      DO 24 I=1,N
      TEMP=WATRIX(I,JROW)
      WATRIX(I,JROW)=WATRIX(I,JNRCOL)
      WATRIX(I,JNRCOL)=TEMP
   24 CONTINUE
      ENDIF
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,3029)JROW
      WRITE(11,3029)JROW
 3029 FORMAT(
     1' IN DO 1 IROW=N,2,-1:(MATRIX((I=1,N),J),J=JROW,NLEV), JROW =',I6)
C**   ALL(!) ROWS (I=1,N)!:
      DO 29 I=1,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROW,NLEV)
   29 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
C**   WATRIX(JROW,JROW) => ONE!:
      ISING=0
      IF(DABS(WATRIX(JROW,JROW)).LT.PARGAU)THEN
      ISING=1
      IF(LEVRUS.EQ.0)THEN
      DO 26 I=JROW,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,N)
      WRITE(11,25)(WATRIX(I,J),J=JROW,N)
   26 CONTINUE
      WRITE(11,27)PARGAU
   28 WRITE(*,27)PARGAU
   27 FORMAT(' MATRIX MAY BE ILL CONDITIONED FOR PAR =',D16.8,/,' INPUT 
     1SMALLER PAR (ZERO <=> NO CHANGE) OR "ONE" TO STOP (IN E16.8)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3884)PARGIN
      GOTO 4884
      ENDIF
 3884 READ(*,'(D16.8)',ERR=28,END=4576)PARGIN
      LMN=1
 4884 WRITE(7,2295)PARGIN
 2295 FORMAT(D16.8,' =PARGIN')
      WRITE(11,2295)PARGIN
      WRITE(*,2295)PARGIN
      IF(PARGIN.GT.ZERO.AND.PARGIN.LT.PARGAU)PARGAU=PARGIN
      IF(PARGIN.NE.ONE)THEN
      ISING=0
      GOTO 33
C     ELSE
C (IN LEVMAR:) STOP 'ISING'
      ENDIF
      ENDIF
      RETURN
      ENDIF
   33 DENOM=ONE/(WATRIX(JROW,JROW))
C
C**   ALL COLUMNS > JCOL=JROW, BUT ONLY ONE ROW (=JROW)!:
      JCOL=JROW
      DO 3 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      WATRIX(JROW,JCOL)=WATRIX(JROW,JCOL)*DENOM
    3 CONTINUE
      COLUMN(JROW)=COLUMN(JROW)*DENOM
C
C**   WATRIX(JROW,JROW) IS NOW = ONE (AT LEAST VIRTUALLY!):
      WATRIX(JROW,JROW)=ONE
C
C**   NORMALIZATION OF THE MATRIX WATRIX INCL. COLUMN:
      JROM=JROW
      DO 4 IROM=IROWM1,1,-1
      JROM=JROM+1
C**   NEARLY EQUAL WEIGHT TO EACH ROW!:
      ABSBIG=DABS(WATRIX(JROM,JROW))
      JCOL=JROW
C**   ALL COLUMNS > JCOL=JROW, ROW <=> JROM <=> DO 4!:
      DO 41 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      IF(DABS(WATRIX(JROM,JCOL)).GT.ABSBIG)
     1ABSBIG=DABS(WATRIX(JROM,JCOL))
   41 CONTINUE
      IF(ABSBIG.GT.ZERO)THEN
      DENOM=ONE/ABSBIG
      ELSE
C**   RESULTS IN ISING=1 ("SINGULAR MATRIX") LATER(!) ON:
      DENOM=ONE
      ENDIF
C**   ALL COLUMNS > JCOL=JROW-1, ROW <=> JROM <=> DO 4!:
      JCOL=JROW-1
      DO 43 ICOL=ICOLMP,1,-1
      JCOL=JCOL+1
      WATRIX(JROM,JCOL)=WATRIX(JROM,JCOL)*DENOM
   43 CONTINUE
      COLUMN(JROM)=COLUMN(JROM)*DENOM
    4 CONTINUE
C**   END OF NORMALIZATION!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,3032)
      WRITE(11,3032)
 3032 FORMAT(
     1' IN DO 1 AFTER NORMAL.: (MATRIX(I,J),J=JROW,NLEV) AND COLUMN')
      DO 32 I=JROW,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROW,NLEV)
   32 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=JROW,NLEV)
      WRITE(11,25)(COLUMN(I),I=JROW,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
      IF(JROW.EQ.N)GOTO 13
      JROM=JROW
      DO 14 IROM=IROWM1,1,-1
      JROM=JROM+1
      FIRST=WATRIX(JROM,JROW)
      JCOL=JROW
      DO 44 ICOL=IROWM1,1,-1
      JCOL=JCOL+1
      WATRIX(JROM,JCOL)=WATRIX(JROM,JCOL)-FIRST*WATRIX(JROW,JCOL)
   44 CONTINUE
      COLUMN(JROM)=COLUMN(JROM)-FIRST*COLUMN(JROW)
   14 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      JROWP1=JROW+1
      WRITE(*,3034)JROWP1
      WRITE(11,3034)JROWP1
 3034 FORMAT(
     1' & SMALLER: (MATRIX(I,J),J=JROWP1,NLEV) AND COLUMN, JROWP1=',I6)
      DO 34 I=JROWP1,N
      WRITE(*,25)(WATRIX(I,J),J=JROWP1,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROWP1,NLEV)
   34 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=JROWP1,NLEV)
      WRITE(11,25)(COLUMN(I),I=JROWP1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
    1 CONTINUE
   13 CONTINUE
C**   BACKSUBSTITUTION ("FORWARDS" IN DO 5):
C     (ATTENTION: STARTING AT "N"!:)
      JROW=N
      DO 5 IROW=2,N
      IROWM1=IROW-1
      JROW=JROW-1
      JCOL=JROW
      DO 55 ICOL=IROWM1,1,-1
      JCOL=JCOL+1
      COLUMN(JROW)=COLUMN(JROW)-COLUMN(JCOL)*WATRIX(JROW,JCOL)
   55 CONTINUE
    5 CONTINUE
      IF(MOROUU.NE.0)THEN
      WRITE(*,665)
      WRITE(11,665)
  665 FORMAT(' NOT YET ORDERED IN GAUSS: (COLUMN(I),I=1,NLEV) =')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C**   REARRANGEMENT ("ORDERING") OF THE SOLUTION VECTOR COLUMN
C     WITH HELP OF KOLUMN:
      NM1=N-1
      DO 6 I=1,NM1
      IP1=I+1
      DO 66 II=IP1,N
      ITEMP=KOLUMN(I)
      TEMP=COLUMN(I)
      IF(KOLUMN(II).GT.ITEMP)THEN
      KOLUMN(I)=KOLUMN(II)
      KOLUMN(II)=ITEMP
      COLUMN(I)=COLUMN(II)
      COLUMN(II)=TEMP
      ENDIF
   66 CONTINUE
    6 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,666)
      WRITE(11,666)
  666 FORMAT(' NOW ORDERED IN GAUSS: (COLUMN(I),I=1,NLEV) =')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
      RETURN
C**   RETURNS TO LEVMAR (OR TO RUSSEL, A ROUTINE FOR "TESTS" ONLY).
 4576 CALL FINISH
 5588 CALL FINISI
CEND GAUSS
      END
CEND-FILE SUSFIT.F
      SUBROUTINE TANABE(NGROUP,NOFORM,
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   TANABE IS CALLED BY SUSC, IF NOT ECKART IS CALLED, WHICH MAY BE
C     CALLED ALTERNATIVELY TO TANABE. (SUSC IS CALLED BY SHORTL, WHICH
C     IS CALLED BY PROGRAM CONDON.) TANABE CALCULATES EIGENVALUES AND
C     EIGENVECTORS OF A MATRIX, WHICH IS BASED ON A FULL BASIS OF MICRO
C     STATES. IT CALLS REDUCT(ANABE), WHICH CALLS SELECT, WHICH CALLS
C     SUGANR/C/H/K, THE LATTER IN 12(!) DIFFERENT OPTIONS AT ALL! -
C     FOR OUTPUT (OPTION MOROUT AND NUROUT FOR OUTPUT OF RESULTS) RESTBL
C     <=> RES(ULT)T(A)BL(ES) IS AVAILABLE.
C**   ALTERNATIVELY TO REDUCT, BUT WITH NO RETURN, RUSSEL (AND SAUNDE)
C     MAY BE CALLED TO CHANGE THE BASIS OF THE EIGENVECTORS FROM MICRO
C     STATES TO RUSSELL-SAUNDERS STATES!
C
     1EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,TESINT
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE, THE PRESENT SUBROUTINE:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
C
C**   SUBROUTINES/FUNCTIONS NEEDED: SCHEMA, COMP(A)RE,
C     CKCOE FOR CONDON-SHORTLEY COEFFICIENTS (INCL. DREIJ AND FACTLR), AND
C     IN ADDITION A DIAGONALIZATION ROUTINE (FOR INSTANCE DSPEV OF LIBRARY
C     ESSL (BLAS), BUT DSPEV IS REALLY CALLED VIA DSPEVW - SEE PROGRAM
C     CONDON FOR DETAILS!).
C**   INSTEAD OF CALLING THE DIAGONALIZATION ROUTINE DIRECTLY, SUBROUTINE
C     BLOCUT MAY BE CALLED  FIRSTLY TO BLOCK-OUT THE MATRIX BEFORE
C     DIAGONALIZING THE BLOCKS ONE AFTER ANOTHER! 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/IEQUIV/JEQUIV
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/ABC/MNUR4(2,2),MNUR4C(2,2)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0
     1,HALF=0.5D0,QUART=0.25D0,FUENF=5.0D0,EINUND=21.0D0
     1,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO,PARWUC=1.0D-8
     2,FOUR=4.0D0,SECHS=6.0D0,VPREZ6=1.0D6/(FOUR*3.1415926D0)
     2,BOLZCM=0.695040D0,TESLCM=0.466864D0,FMONE=-ONE)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110; ND1110=1110
C**   ALL VALUES ARE IN SI UNITS, WITH TWO EXCEPTIONS: ENERGIES ARE ALWAYS
C     IN CM**-1 CORRESP. TO "WAVENUMBER=ENERGY/(PLANCK CONST.*VELOCITY OF
C     LIGHT)", AND MAGNETIC FLUX DENSITY MAY BE IN CM**-1 CORRESP. TO
C     "FLUX DENSITY=ENERGY/BOHR MAGNETON".
C     THE CONST. OF BOLTZMANN IN CM**-1*KELVIN**-1 INSTEAD OF
C     JOULE*KELVIN**-1 IS BOLZCM=0.695040. THE BOHR MAGNETON USED ABOVE
C     IS THAT NAMED AFTER AMPERE, IS IN A*M**2=J/TESLA, AND IS SIMUBA=
C     9.27402*10**-24. THE BOHR MAGNETON NAMED AFTER COULOMB IS IN V*S*M,
C     AND IT IS SIMUBC=SIMUBA*4PI*10**-7=1.165407*10**-29. THE CONVERSION
C     FACTOR, WHICH TAKES MAGNETIC FLUX DENSITY IN TESLAS INTO SUCH IN
C     CM**-1 IS TESLCM=0.466864. AVOGADROS NUMBER IN MOL**-1 IS AVOGAD=
C     6.02214*10**23. THE CALCULATED CHI-MOL VALUE IS IN SI UNITS, BUT IT
C     IS ALSO GIVEN IN GGS UNITS (MULTIPL. WITH 10**6/4PI=VPREZ6=79577.47D0).
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
C
C**   IN THE FOLLOWING: DIMENSIONS CORRESP. TO MAX. L VALUE
C     (L VALUE FOR 6 F EL.!): 2*12+1=25:
C
      DOUBLE PRECISION FMIKR1(ND2002,*),FMIKR2(ND2002,*)
     2,DBLMAT(ND2002,*),EIVECV(ND2002,*),EIWERT(*),FINTEG(4)
     4,UPML(25),DOWNML(25)
     6,BWWOLD(I16),BSTART(24)
     7,DIRECZ(3),REDFAZ(3)
      INTEGER MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
      SAVE
      DATA LAUF,KLICK,KLICKB,KLICK2,KLICK3,KLILOC,MOROUU,KLICK4/0,0,0,0
     1,0,0,0,0/
      DATA TESLAK/FMONE/
C
      IF(J2.NE.J20)STOP 'J.NE.J'
C - FIRST RUN ONLY:
      IF(LAUF.NE.0)GOTO 1234
      LAUF=1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8227 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-TANABE; =0, 1 OR 2!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3885)MOROUU
      GOTO 4885
      ENDIF
 3885 READ(*,'(I1)',ERR=8227,END=4576)MOROUU
      LMN=1
 4885 WRITE(7,2296)MOROUU
 2296 FORMAT(I1,' =MOROUU IN TANABE')
      WRITE(*,1281)MOROUU
      WRITE(11,1281)MOROUU
 1281 FORMAT(' MOROUT-HERE-IN-TANABE =',I2,'!!!!!!!!!')
      ENDIF
C
C**   THE FOLLOWING CALCULATION NEEDS TO BE DONE FOR THE VERY FIRST TIME
C     ONLY: THE POSSIBLE MICRO STATES ARE COMPUTED AND STORED!:
C
      KLWRTP=KLWERT+1
      FLWRTH=DBLE(KLWERT)+HALF
      LMAL2=2*KLWERT
      LMAL2P=LMAL2+1
      NRELMX=2*LMAL2P
      IF(NREL14.LT.NRELMX)STOP '.LT.14'
C
      NRELM1=NREL-1
C**   MAX. OF KASSUM (No. OF MICRO STATES) IS =252 =10 UPON 5 FOR D EL.,
C     FOR INSTANCE 10 UPON 3 AMOUNTS TO 120.
C     ALL KASSUM MICRO STATES FOR NREL ELECTRONS ARE COMPUTED AND STORED
C     NOW IN SUBROUTINE SCHEMA AND MSML( , , ) AND MQUER( , ) ARE READY!:
      CALL SCHEMA(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW,KLWER3)
      KASSUL=KASSUM-1
C
C**   FACTORS IN FRONT OF STEP-UP- AND STEP-DOWN-OPERATORS: (KLWERT=1, 2 OR =3)
      UPML(LMAL2P)=ZERO
      DOWNML(1)=ZERO
      KLKLPL=KLWERT*KLWRTP
      DO 1243 I=-KLWERT,KLWERT-1
      IP1=I+1
C**   2*(2+1)=6
      UPML(I+KLWRTP)=DSQRT(DBLE(KLKLPL-I*IP1))
      DOWNML(IP1+KLWRTP)=UPML(I+KLWRTP)
 1243 CONTINUE
      IF(MOROUU.NE.0)THEN
      WRITE(*,563)
      WRITE(11,563)
  563 FORMAT(' FACTORS'
     1,' TO STEP-UP- AND STEP-DOWN-OP., STARTING WITH ML=-KLWERT:')
      WRITE(*,'(5F6.3)')(UPML(I),I=1,LMAL2P)
      WRITE(*,'(5F6.3)')(DOWNML(I),I=1,LMAL2P)
      WRITE(11,'(5F6.3)')(UPML(I),I=1,LMAL2P)
      WRITE(11,'(5F6.3)')(DOWNML(I),I=1,LMAL2P)
C - RESULT FROM FILE 11, PARTLY INCLUDED HERE, IS (FOR D EL.!):
CSTEP-UP- AND STEP-DOWN-OP., STARTING WITH ML=-KLWERT:
C2.000 2.449 2.449 2.000 0.000
C0.000 2.000 2.449 2.449 2.000
C
      ENDIF
C**   ... AND FOR SPIN (ONLY C**):
C     UPMS(2)=ZERO
C     DOWNMS(1)=ZERO
C**   1/2*(1/2+1)=3/4; -1/2*1/2=-1/4; 3/4-(-1/4)=1
C     UPMS(1)=ONE
C**   DOWNMS(2)=ONE
C
C**   FITTING B-VALUES? (A HINT: CONCERNING "JAFAST" ONLY AND
C     ONLY "FIRST RUN", AND ONLY USED FOR A HINT IN OUTPUT!):
      JAFITB=0
      DO 112 I=1,11
      IF(IBWWW(I).NE.0.AND.IBWWW(I).NE.-2)JAFITB=1
  112 CONTINUE
      IF(IN24.GT.20)THEN
      DO 1122 I=21,IN24
      IF(IBWWW(I).NE.0.AND.IBWWW(I).NE.-2)JAFITB=1
 1122 CONTINUE
      ENDIF
C
 1234 CONTINUE
C**   BELONGS TO "IF(LAUF.NE.0)GOTO 1234"
C
C**   FOR THE FOLLOWING CONDITIONS THERE IS NO CRYSTAL FIELD:
      JAMAT0=1
      DO 246 I=1,11
      IF(BWWW(I).NE.ZERO)JAMAT0=0
  246 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2461 I=21,IN24
      IF(BWWW(I).NE.ZERO)JAMAT0=0
 2461 CONTINUE
      ENDIF
C
      FKWERT=BWWW(12)
C
C**   NEW B-VALUES?:
      NEUEBS=0
      DO 115 I=1,11
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
  115 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2462 I=21,IN24
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
 2462 CONTINUE
      ENDIF
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      NEUEBS=1
      ENDIF
C
      DO 113 I=1,11
      BWWOLD(I)=BWWW(I)
  113 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2463 I=21,IN24
      BWWOLD(I)=BWWW(I)
 2463 CONTINUE
      ENDIF
C
      IF(MOROUU.NE.0.AND.NEUEBS.NE.0)THEN
      WRITE(*,6466)(BWWOLD(I),I=1,11)
      WRITE(11,6466)(BWWOLD(I),I=1,11)
 6466 FORMAT(' BWWOLD(1:11) =',5D12.4,/,6D12.4)
      IF(IN24.GT.20)THEN
      WRITE(*,6466)(BWWOLD(I),I=21,IN24)
      WRITE(11,6466)(BWWOLD(I),I=21,IN24)
      ENDIF
      ENDIF
C
      TESLAC=TESINT*TESLCM
C**   TESLCM NEEDED, IF ONE WISHES TESLAS IN CM**(-1)
C
      IF(MOROUU.NE.0.AND.TESLAK.NE.TESLAS)THEN
      WRITE(*,6468)TESLAS,TESLAC
      WRITE(11,6468)TESLAS,TESLAC
 6468 FORMAT(' TESLAS,TESLAC=',2D14.6)
      TESLAK=TESLAS
      ENDIF
C
      IF(JAFAST.NE.0.OR.NEUEBS.EQ.0)THEN
C**   JAFAST=0 HERE FOR 1TH RUN (LAUF=1) AND NEUEBS=1!
C**   FOR THIS CONDITION NOTHING HAS TO BE (NEW) CALCULATED
C     (JEQUIV=1 DOES NOT MATTER!):
      GOTO 9999
      ENDIF
C
C**   FOR THE FOLLOWING CONDITIONS THERE HAVE NO EL.-EL. REPULSION
C     AND NO SPIN-ORBIT COUPLING TO BE (NEW) CALCULATED:
      IF(KLICK.NE.0.AND.JEQUIV.EQ.0)GOTO 4567
C**   JEQUIV=1 MEANS: EQUIVALENCE (EIVECV,FMIKR1,(FMIKR2!))!:
      KLICK=1
C
C**   FOR THE FOLLOWING CONDITIONS THERE HAS NO EL.-EL. REPULSION
C     TO BE CALCULATED:
C
      IF(NREL.EQ.1.OR.(FINTEG(1).EQ.ZERO.AND.FINTEG(2).EQ.ZERO
     1.AND.FINTEG(3).EQ.ZERO.AND.FINTEG(4).EQ.ZERO))THEN
      DO 2367 J=1,KASSUM
      DO 7140 I=1,KASSUM
      FMIKR1(I,J)=ZERO
 7140 CONTINUE
 2367 CONTINUE
      GOTO 2345
      ENDIF
C
C**   EL.-EL. REPULSION (NOT, IF THERE IS ONLY ONE EL.)!:
C
C**   THE NON-DIAG. ELEMENTS IN FMIKR1!:
C
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C
C     ONLY CONCERNED: EQ.(4) CONDON/SH. P.173 - THERE MUST BE EXACTLY TWO
C     DIFFERING SETS, OR ELEMENTS ARE ZERO! - SUM OF SPINS AND SUM OF
C     ML VALUES MUST RESP. REMAIN THE SAME, OR ELEMENTS ARE ZERO, TOO!
C
      DO 12 J=1,KASSUL
      JP1=J+1
      DO 11 I=JP1,KASSUM
      KK=-1
      MP=1
C**   IN THE FOLLOWING: PRE-OCC. BECOMES ZERO!:
      DO 1211 J0=1,2
      DO 7141 I0=1,2
      MNUR4(I0,J0)=0
      MNUR4C(I0,J0)=0
C**   NUR4 MEANS 4 VAL. OUT OF MSML CORRESP. TO 2 SETS OF EACH MICRO STATE -
C     EACH SET ORB. AND SPIN; C MEANS "COPIED - AFTER PERMUTATION" OF THE STATE
C     TO BE COMPARED WITH THE OTHER STATE (THE OTHER SETS OF THE TWO STATES ARE
C     IDENTICAL, BUT PERMUTATION HAS TO BE PERFORMED BEFORE; ODD NUMBER 
C     OF PERMUTATIONS RESULTS IN MP=-1 INSTEAD OF +1)!
 7141 CONTINUE
 1211 CONTINUE
      CALL COMPRE(2,KK,MP,I,J,NREL,MSML,NREL14,MQUER,MSMLCO,ND2002,NK)
C**   2=IOPTION!: - FROM COMPRE: KK=2, IF THERE ARE EXACTLY 2 DIFF.,
C     AND SUM OF SPINS AND SUM OF ML VALUES RESP. REMAIN THE SAME!
      FMIKR1(I,J)=ZERO
      IF(KK.NE.2)GOTO 99
      JAEXCH=0
      MATCHS=0
      IF(MNUR4(2,1).EQ.MNUR4(2,2))JAEXCH=1
C**   (2, MEANS SPIN; ,1 RESP. ,2 ARE THE TWO SETS OUT OF MSML! -
C     JAEXCH=1 FOR EL. OF LIKE SPINS!
      IF(JAEXCH.EQ.0.AND.(MNUR4(2,1).EQ.MNUR4C(2,1)))MATCHS=1
C**   (2, MEANS SPIN! - MATCHS MEANS: THE SPINS MATCH (ARE .EQ.)! 
C
      IF(JAEXCH.NE.0.OR.MATCHS.EQ.0)THEN
C**   PARALLEL SPINS (JAEXCH=1) OR, IF (JAEXCH.EQ.0), THE SECOND OF THE
C     FOLLOWING 2 POSSIBILITIES: SPIN-UP/SPIN-DOWN  COMP. WITH SPIN-UP/
C     SPIN-DOWN AND SPIN-UP/SPIN-DOWN COMP. WITH SPIN-DOWN/SPIN-UP
C     (OR REVERSED: DOWN INSTED OF UP AND UP INSTED OF DOWN)!
C
C     FOLLOWING AT FIRST: THE SECOND PART OF EQ.(4) CONDON/SH. P.173
C     (THE PART WITH THE MINUS SIGN IN FRONT; MUST NOT BE CALLED
C     EXCHANGE-TERM!):
      DO 91 K=2,LMAL2,2
      KF=1+K/2
C**   NOW, WITHOUT SPIN, CALC. OF CONDON-SHORTLEY COEFF.:
      FMIKR1(I,J)=FMIKR1(I,J)
C**   MNUR4(,1) CORRESP. TO 1ST WAVEF.,1ST EL.;
C     MNUR4C(,2) CORRESP. TO 2ND WAVEF.,2ND EL.!:
     1-CKCOE(K,KLWERT,MNUR4(1,1),KLWERT,MNUR4C(1,2))
C**   MNUR4C(,1) CORRESP. TO 2ND WAVEF.,1ST EL.;
C     MNUR4(,2) CORRESP. TO 1ST WAVEF.,2ND EL.!:
     2*CKCOE(K,KLWERT,MNUR4C(1,1),KLWERT,MNUR4(1,2))
     3*FINTEG(KF)
   91 CONTINUE
      ENDIF
C
      IF(JAEXCH.NE.0.OR.MATCHS.NE.0)THEN
C**   PARALLEL SPINS (JAEXCH=1) OR, IF (JAEXCH.EQ.0), THE FIRST OF THE
C     FOLLOWING 2 POSSIBILITIES: SPIN-UP/SPIN-DOWN  COMP. WITH SPIN-UP/
C     SPIN-DOWN AND SPIN-UP/SPIN-DOWN COMP. WITH SPIN-DOWN/SPIN-UP
C     (OR REVERSED: DOWN INSTED OF UP AND UP INSTED OF DOWN)!
C
C     NOW FOLLOWING: THE FIRST PART OF EQ.(4) CONDON/SH. P.173
C     IN COMBINATION WITH EQ.(9) CONDON/SH. P.175:
      DO 9 K=2,LMAL2,2
      KF=1+K/2
      FMIKR1(I,J)=FMIKR1(I,J)
     1+CKCOE(K,KLWERT,MNUR4(1,1),KLWERT,MNUR4C(1,1))
     2*CKCOE(K,KLWERT,MNUR4C(1,2),KLWERT,MNUR4(1,2))
     3*FINTEG(KF)
C**   HINT: EQ.(7) CONDON/SH. P.175 IS IMPORTENT, ALTHOUGH THE PRODUCT
C     OF TWO CKCOE IS THERE AND ALTHOUGH THE ML-SUM REMAINS THE SAME,
C     BECAUSE, SEE EQ.(9), (AB/Q/CD)=...CK(A,C)*CK(D(!),B(!))...!
    9 CONTINUE
      ENDIF
C
C**   AND THE PLUS/MINUS-SIGN IN EQ.(4) IS STILL MISSING!:
      FMIKR1(I,J)=FMIKR1(I,J)*DBLE(MP)
   99 CONTINUE
   11 CONTINUE
   12 CONTINUE
C**   THE OTHER NON-DIAGONAL PART UNNECESSARY, IF LOWER-STORAGE MODE!
C
C**   THE DIAGONAL ELEMENS:
      DO 15 K=1,KASSUM
      FMIKR1(K,K)=ZERO
      DO 14 J=1,NRELM1
      JP1=J+1
      DO 13 I=JP1,NREL
      JAEXCH=0
      IF(MSML(K,2,I).EQ.MSML(K,2,J))JAEXCH=1
C     JAEXCH=1 FOR EL. OF LIKE SPINS!:
C**   THE EXCHANGE INTEGRALS OF EQ.(7) CONDON/SH. P.173,
C     WITH HELP OF EQ.(9) P.175:
      IF(JAEXCH.NE.0)THEN
      DO 19 KKK=2,LMAL2,2
      KF=1+KKK/2
      FMIKR1(K,K)=FMIKR1(K,K)
     1-CKCOE(KKK,KLWERT,MSML(K,1,I),KLWERT,MSML(K,1,J))**2
     2*FINTEG(KF)
   19 CONTINUE
      ENDIF
C**   AND THE DIRECT INTEGRALS - SEE ALSO EQ.(13) AND (14) P.176:
      DO 18 KKK=2,LMAL2,2
      KF=1+KKK/2
      FMIKR1(K,K)=FMIKR1(K,K)
     1+CKCOE(KKK,KLWERT,MSML(K,1,I),KLWERT,MSML(K,1,I))
     2*CKCOE(KKK,KLWERT,MSML(K,1,J),KLWERT,MSML(K,1,J))
     3*FINTEG(KF)
   18 CONTINUE
   13 CONTINUE
   14 CONTINUE
   15 CONTINUE
C** END OF 1/RIJ!!!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2221)
      WRITE(11,2221)
 2221 FORMAT(
     1' MATRIX FMIKR1 (1/RIJ-MATRIX); COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUU=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUU.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEM.!')
      ENDIF
      DO 1019 J=1,KASI
      WRITE(11,2010)(FMIKR1(I,J),I=J,KASSUM)
      WRITE(*,2010)(FMIKR1(I,J),I=J,KASSUM)
 2010 FORMAT(6(1X,D12.4))
 1019 CONTINUE
      ENDIF
C
 2345 CONTINUE
C**   BELONGS TO "NO EL.-EL. REPULSION"
C
C**   FOR THE FOLLOWING CONDITION THERE IS NO SPIN-ORBIT COUPLING:
      IF(FKSI.EQ.ZERO)GOTO 3456

C**   NOW SPIN-ORBIT COUPLING!
C     (CONDON/SH.,P.59,EQ.(3)-ABOVE; IN PRACT.IDENT.TO P.221,EQ.(1C)):
C
C     THE DIAG. ELEMENTS (LZ*SZ):
      FKSIH=HALF*FKSI
C
      DO 45 I=1,KASSUM
      SUM=ZERO
      DO 445 NR=1,NREL
      ML=MSML(I,1,NR)
      MS=MSML(I,2,NR)
      PROD=DBLE(ML*MS)
      SUM=SUM+FKSIH*PROD
  445 CONTINUE
      FMIKR1(I,I)=FMIKR1(I,I)+SUM
   45 CONTINUE
C
C**   AND THE NON-DIAG. ELEMENTS (HALF*((L+*S-)+(L-*S+)))
C
      DO 4512 J=1,KASSUL
      JP1=J+1
      DO 451 I=JP1,KASSUM
      KK=-1
      MP=1
C**   IN THE FOLLOWING: PRE-OCC. BECOMES ZERO! (ONLY :2 OF MNUR4C(2,(1:2))
C     IS NEEDED HERE, MNUR4 IS NOT NEEDED AT ALL!):
      DO 4511 I0=1,2
 4511 MNUR4C(I0,2)=0
C**   ,2), BECAUSE THE FIRST DIFFERENT SET IS STORED TO THE RIGHT (2!)!
      CALL COMPRE(1,KK,MP,I,J,NREL,MSML,NREL14,MQUER,MSMLCO,ND2002,NK)
C**   1=IOPTION! - 1 DIFFERENT SET IS LOOKED FOR IN COMPRE!
      IF(KK.NE.1)GOTO 451
C**   IF(MP.NE.1)STOP 'MP.NE.1'
C**   ONLY(!) NEIGHBOURS ARE POSSIBLE: THEREFORE IT IS NOT POSSIBLE,
C     THAT SETS HAVE BEEN EXCHANGED! - THEREFORE MNUR4 IS NOT NEEDED,
C     BUT ONLY MNUR4C!
      FMLMS=DBLE(MNUR4C(1,2))+HALF*DBLE(MNUR4C(2,2))
      PROD=DSQRT((FLWRTH-FMLMS)*(FLWRTH+FMLMS))
      FMIKR1(I,J)=FMIKR1(I,J)+FKSIH*PROD
C**   NO ADDITION; THERE IS BUT ONE TERM IN THE SUM!
C**   FMIKR1(I,J) = FMIKR1(I,J) + FKSIH (=FKSI*HALF) *DSQRT((L-M+HALF)*
C     (L+M+HALF)), AND M=ML+MS IS THE SAME AS M-DASH=ML-DASH+MS-DASH.
  451 CONTINUE
 4512 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2223)
      WRITE(11,2223)
 2223 FORMAT(' MATRIX FMIKR1 INCL.'
     1,' SPIN-ORB.-COUPL. MATRIX; COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 1003 J=1,KASI
      WRITE(11,2010)(FMIKR1(I,J),I=J,KASSUM)
      WRITE(*,2010)(FMIKR1(I,J),I=J,KASSUM)
 1003 CONTINUE
      ENDIF
C
 3456 CONTINUE
C**   BELONGS TO "IF(FKSI.EQ.ZERO)GOTO 3456"
C
      IF(JEQUIV.NE.0)THEN
      DO 2360 J=1,KASSUM
      DO 7142 I=1,KASSUM
      DBLMAT(I,J)=FMIKR1(I,J)
 7142 CONTINUE
 2360 CONTINUE
      ENDIF
C
 4567 CONTINUE
C**   BELONGS TO "IF(KLICK.NE.0.AND.JEQUIV.EQ.0)GOTO 4567"
C
      IF(KLICK2.NE.0.AND.NEUEBS.EQ.0.AND.JEQUIV.EQ.0)GOTO 5678
      KLICK2=1
C**   FOR THE FOLLOWING CONDITION THERE IS NO CRYSTAL FIELD:
      IF(JAMAT0.NE.0)THEN
      DO 2368 J=1,KASSUM
      DO 7143 I=1,KASSUM
      FMIKR2(I,J)=ZERO
 7143 CONTINUE
 2368 CONTINUE
      GOTO 5678
      ENDIF
C
C**   NOW FOLLOWING: THE CRYSTAL FIELD (SEE CONDON/SH. PP.169,170,171;
C     AND GRIFFITH P.196,EQ.(8.4))!:
C     (SEE ALSO SUBR. COMPRE - IOPT=0)
C
C**   THE DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(9))!:
C
      DO 34 I=1,KASSUM
      FMIKR2(I,I)=ZERO
      DO 344 NR=1,NREL
      ML=MSML(I,1,NR)
      IF(BWWW(1).NE.ZERO)
C**   FMIKR2(I,I) IS NOT SURELY ZERO BEFORE!:
     1FMIKR2(I,I)=FMIKR2(I,I)+CKCOE(2,KLWERT,ML,KLWERT,ML)*BWWW(1)
      IF(BWWW(3).NE.ZERO)
     1FMIKR2(I,I)=FMIKR2(I,I)+CKCOE(4,KLWERT,ML,KLWERT,ML)*BWWW(3)
      IF(BWWW(7).NE.ZERO)
     1FMIKR2(I,I)=FMIKR2(I,I)+CKCOE(6,KLWERT,ML,KLWERT,ML)*BWWW(7)
  344 CONTINUE
   34 CONTINUE
C
C**   AND THE NON-DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(8))!:
C
      DO 341 J=1,KASSUL
      JP1=J+1
      DO 3411 I=JP1,KASSUM
      KK=-1
      MP=1
C**   IN THE FOLLOWING: PRE-OCC. BECOMES ZERO! (ONLY MNUR4(1,2) AND
C     MNUR4C(1,2) ARE NEEDED HERE, BECAUSE THERE IS ONLY ONE DIFF.!)
      MNUR4(1,2)=0
      MNUR4C(1,2)=0
C**   ,2), BECAUSE THE FIRST (AND THE ONLY ONE) DIFFERENT SET FOUND
C     IS STORED TO THE RIGHT (2!)!
C
      CALL COMPRE(0,KK,MP,I,J,NREL,MSML,NREL14,MQUER,MSMLCO,ND2002,NK)
C
C**   0=IOPTION, "0", ALTHOUGH 1(!) DIFFERENT SET IS LOOKED FOR;
C     NK CORRESP. TO (IABS(ML1-ML2).EQ.NK)! - IABS MEANS: STEP UP AND(!) 
C     STEP DOWN OPERATOR(S)!
C**   (THE SPINS MUST BE THE SAME!: THEY ARE, IF KK BECOMES =1 IN COMPRE)
      FMIKR2(I,J)=ZERO
      IF(KK.NE.1)GOTO 3411
C
      IF(NK.EQ.4.AND.BWWW(6).NE.ZERO)
C**   FMIKR2(I,J) IS SURELY ZERO BEFORE!:
     1FMIKR2(I,J)=CKCOE(4,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*
     1BWWW(6)*DBLE(MP)
C**   BECAUSE OF (IABS(ML1-ML2).EQ.4) CORRESP. TO KLWERT AND KLWERT-4,
C     CKCOE IS SYMM., I.E. (ML1-ML2) CORRESP. TO (ML2-ML1)!
      IF(NK.EQ.4.AND.BWWW(10).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1+CKCOE(6,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(10)*DBLE(MP)
C
      IF(NK.EQ.3.AND.BWWW(5).NE.ZERO)
C**   CKCOE(4,L,2,L,-1) = CKCOE(4,L,-2,L,1) = -SQRT(35/441)
C  (BUT:) CKCOE(4,L,-1,L,2) = CKCOE(4,L,1,L,-2) = +SQRT(35/441)
C**   <2/C3/-1> = CKCOE(4,L,2,L,-1) = -<-1/C-3/2>
C     <1/C3/-2> = CKCOE(4,L,1,L,-2) = -CKCOE(4,L,2,L,-1)
C
C**   BECAUSE THE DIFFERENCE OF KLWERT AND KLWERT-3 IS 3, CKCOE IS NOT
C     SYMM., I.E. (ML1-ML2) CORRESP. NOT TO (ML2-ML1) (FACTOR OF MINUS 1)!
C**   THE OPERATOR IS (-C3+C-3); ONLY THE PART -C3 OR THE PART +C-3 OF IT IS
C     OPERATING AT THE SAME TIME (C3 MEANS STEP UP AND C-3 STEP DOWN OP. -
C     BECAUSE MNUR4 <=> J AND MNUR4C <=> I, THE OPERATOR OPERATING HERE
C     CORRESPONDS TO MNUR4(1,2).GT./.LT.MNUR4C(1,2): .GT. MEANS "STEP UP"!
     1FMIKR2(I,J)=FMIKR2(I,J)
     1-CKCOE(4,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(5)*DBLE(MP)
C**   IT HAS BEEN FOUND, THAT ONLY THE STEP UP OPERATOR (WITH MINUS SIGN
C     IN FRONT OF IT!) WORKS HERE, AND SO:
      IF(MNUR4(1,2).LT.MNUR4C(1,2))STOP '?.LT.?'
C
      IF(NK.EQ.3.AND.BWWW(9).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1-CKCOE(6,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(9)*DBLE(MP)
C
      IF(NK.EQ.6.AND.BWWW(11).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1+CKCOE(6,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(11)*DBLE(MP)
C
      IF(NK.EQ.2.AND.BWWW(2).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1+CKCOE(2,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(2)*DBLE(MP)
C
      IF(NK.EQ.2.AND.BWWW(4).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1+CKCOE(4,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(4)*DBLE(MP)
C
      IF(NK.EQ.2.AND.BWWW(8).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1+CKCOE(6,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(8)*DBLE(MP)
C
      IF(IN24.GT.20)THEN
C
      IF(NK.EQ.1.AND.BWWW(IN24-3).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1-CKCOE(2,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(IN24-3)
     1*DBLE(MP)
C
      IF(NK.EQ.1.AND.BWWW(IN24-2).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1-CKCOE(4,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(IN24-2)
     1*DBLE(MP)
C
      IF(NK.EQ.1.AND.BWWW(IN24-1).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1-CKCOE(6,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(IN24-1)
     1*DBLE(MP)
C
      IF(NK.EQ.5.AND.BWWW(IN24).NE.ZERO)
     1FMIKR2(I,J)=FMIKR2(I,J)
     1-CKCOE(6,KLWERT,MNUR4(1,2),KLWERT,MNUR4C(1,2))*BWWW(IN24)*DBLE(MP)
C
      ENDIF
 3411 CONTINUE
  341 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2222)
      WRITE(11,2222)
 2222 FORMAT(' MATRIX'
     1,' FMIKR2 (LIG.-FLD. MATRIX); COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 1002 J=1,KASI
      WRITE(11,2010)(FMIKR2(I,J),I=J,KASSUM)
      WRITE(*,2010)(FMIKR2(I,J),I=J,KASSUM)
 1002 CONTINUE
      ENDIF
C
 5678 CONTINUE
C**   BELONGS TO "NO (NEW) CRYSTAL FIELD"
C
C
C**   TO THE END: ADDITION OF THE (HALF-)MATRICES
C     AND DIAGONALISATION OF THE RESULTING MATRIX!:
C
C**   FOR THE FOLLOWING NO ADDITION AND NO NEW DIAGONALISATION,
C     BECAUSE THERE ARE NO NEW MATRICES:
      IF(KLICK.NE.0.AND.JEQUIV.EQ.0
     1.AND.KLICK2.NE.0.AND.NEUEBS.EQ.0)GOTO 9999
C
      DO 2354 J=1,KASSUM
      IF(JEQUIV.EQ.0)THEN
      DBLMAT(J,J)=FMIKR1(J,J)+FMIKR2(J,J)
      ELSE
      DBLMAT(J,J)=DBLMAT(J,J)+FMIKR2(J,J)
      ENDIF
      IF(DABS(DBLMAT(J,J)).LT.PARZER)DBLMAT(J,J)=ZERO
      JP1=J+1
      DO 7144 I=JP1,KASSUM
      IF(JEQUIV.EQ.0)THEN
      DBLMAT(I,J)=FMIKR1(I,J)+FMIKR2(I,J)
      ELSE
      DBLMAT(I,J)=DBLMAT(I,J)+FMIKR2(I,J)
      ENDIF
      IF(DABS(DBLMAT(I,J)).LT.PARZER)DBLMAT(I,J)=ZERO
 7144 CONTINUE
 2354 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(/,1X,'MATRIX TO BE DIAGONALIZED:',/
     1,' COLUMNS IN THE FORM OF ROWS, STARTING WITH DIAG. ELEM.',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 200 J=1,KASI
      WRITE(11,2010)(DBLMAT(I,J),I=J,KASSUM)
      WRITE(*,2010)(DBLMAT(I,J),I=J,KASSUM)
  200 CONTINUE
      ENDIF
C
C**   CALL THE DIAGONALISATION ROUTINE (DIRECTLY OR BLOCK-OUT AT FIRST):
C
      IF(KLILOC.EQ.0)THEN
      KLILOC=1
      JABLOC=0
      IF(KLWERT.EQ.3)THEN
      JABLOC=1
      IF(MORTEX.GE.0)THEN
      WRITE(*,9992)
      WRITE(11,9992)
 9992 FORMAT(/,' L VALUE=3,'
     1,' THEREFORE BLOC(O)UT WILL ALWAYS BE CALLED (IF NOT TEST)!')
      ENDIF
      ENDIF
      IF(JATEST.NE.0.OR.MOROUT.NE.0)THEN
      WRITE(*,2999)
      WRITE(11,2999)
 2999 FORMAT(' ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE',/
     1,' FORM "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY QUANTUM NUMBERS!')
      WRITE(*,2899)
      WRITE(11,2899)
 2899 FORMAT(' ALSO OCCUP. OF SPINORBITALS ARE CALC. IN SUBR. BLOCUT!')
      WRITE(11,3000)JABLOC
 8228 WRITE(*,3000)JABLOC
 3000 FORMAT(' INPUT IN I1 YES/NO(0) "BLOCK-OUT" ("STANDARD":',I2,')!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3886)JABLOC
      GOTO 4886
      ENDIF
 3886 READ(*,'(I1)',ERR=8228,END=4576)JABLOC
      LMN=1
 4886 WRITE(7,3001)JABLOC
 3001 FORMAT(I1,' = JABLOC(KING OUT)')
      WRITE(*,3003)JABLOC
      WRITE(11,3003)JABLOC
 3003 FORMAT(' BLOCKING OUT TAKES PLACE YES/NO(0):',I2,'!!!!!!!!!')
      ENDIF
      ENDIF
C
      IF(JABLOC.NE.0)THEN
C**   THE WHOLE(!) MATRIX IS NEEDED FOR SUBROUTINE BLOCUT!:
C
      DO 213 J=2,KASSUM
      JM1=J-1
      DO 7145 I=1,JM1
      DBLMAT(I,J)=DBLMAT(J,I)
 7145 CONTINUE
  213 CONTINUE
C     WRITE(11,'(E16.8)')((DBLMAT(I,J),I=1,KASSUM),J=1,KASSUM)
C
C**   PARR MUST NOT BE PARAMETER!:
      PARR=PARWUQ
      CALL BLOCUT(0,ND2002,KASSUM,NDMAL3,PARR,KLWERT,NRELMX,MSMLNW
     1,DBLMAT,LMAT,EIVECV,DUMMY,EIWERT,MQUER,MQUERR,BLOMAT,NGROUP,MSMLNS
     2,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ,MSML,NREL14,NREL,I10
     3,KLWER3)
C
      ELSE IF(JABLOC.EQ.0)THEN
C
C**   AND NOW FOR LOWER STORAGE MODE:
C
      ND20QU=ND2002**2
C
      CALL DSPEVW(1,DBLMAT,DBLMAT,EIWERT,EIVECV,ND2002,KASSUM,DUMMY
     1,NDMAL3,ND20QU)
C
      ENDIF
C**   COEFF., WHICH ARE LOWER THAN PARZER IN ABS. VALUE, NOW BECOME ZERO:
      DO 2199 J=1,KASSUM
      DO 2198 I=1,KASSUM
      IF(DABS(EIVECV(I,J)).LT.PARZER)EIVECV(I,J)=ZERO
 2198 CONTINUE
 2199 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' MATRIX OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)WRITE(11,1012)
 1012 FORMAT(' BECAUSE MOROUU'
     1,'=1, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      DO 101 J=1,KASI
      WRITE(11,2010)(EIVECV(I,J),I=1,KASSUM)
      WRITE(*,2010)(EIVECV(I,J),I=1,KASSUM)
  101 CONTINUE
      ENDIF
C
C**   ALWAYS SHIFT!:
C
      EIWER0=EIWERT(1)
      DO 4447 I=1,KASSUM
      EIWERT(I)=EIWERT(I)-EIWER0
 4447 CONTINUE
C
      IGR1=KASSUM
      IGRPL=IGR1+1
      DIFLOW=ZERO
      DO 4448 I=2,KASSUM
      EIWER1=DABS(EIWERT(I))
      IF(EIWER1.GT.PARWUC)THEN
      DIFLOW=EIWERT(I)
      IGR1=I-1
C**   IGR=I
      IGRPL=I+1
      GOTO 4449
      ENDIF
 4448 CONTINUE
 4449 CONTINUE
C
      IGR2=KASSUM
      DO 4450 I=IGRPL,KASSUM
      EIWER1=DABS(EIWERT(I)-DIFLOW)
      IF(EIWER1.GT.PARWUC)THEN
      IGR2=I-1
      GOTO 4451
      ENDIF
 4450 CONTINUE
 4451 IGR2=IGR2-IGR1
C
      IF(LESS.NE.0.OR.(KLICK3.NE.0.AND.MOROUU.EQ.0))GOTO 2128
      KLICK3=1
      WRITE(*,2217)EIWER0
 2217 FORMAT(
     1/,' < (ALL+1) EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',D20.12
     1,/,' ... BECOMES:')
      WRITE(11,2217)EIWER0
      KASI=KASSUM
      IF(KASI.GT.99)KASI=99
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
      IF(KASI.NE.KASSUM)THEN
      WRITE(*,2216)EIWERT(KASSUM)
      WRITE(11,2216)EIWERT(KASSUM)
 2216 FORMAT(' ... AND THE LAST EIGENVALUE:',D12.4)
      ENDIF
 2128 CONTINUE
C
      IF(JATEST.NE.0.AND.KLICK4.EQ.0)THEN
      KLICK4=1
      WRITE(11,2129)
 2181 WRITE(*,2129)
 2129 FORMAT(' INPUT IN I1 YES/NO(0):'
     1,' CHANGE OF BASIS TO RUSSELL SAUNDERS STATES (NO RETURN!).')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3887)JANORS
      GOTO 4887
      ENDIF
 3887 READ(*,'(I1)',ERR=2181,END=4576)JANORS
      LMN=1
 4887 WRITE(7,2297)JANORS
 2297 FORMAT(I1,' =JANORS(Russell/S.)')
      WRITE(*,2972)JANORS
      WRITE(11,2972)JANORS
 2972 FORMAT(I2,' =JANORS(Russell/S.)!!!!!!!!!')
      IF(JANORS.NE.0)CALL RUSSEL(NREL,KLWERT,ND2002,DBLMAT,BLOMAT,DUMMY
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,I10
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS)
C**   NO RETURN FROM RUSSEL! 
      ENDIF
C
 9999 CONTINUE
C**   BELONGS TO "IF(JAFAST.NE.0.OR.NEUEBS.EQ.0)GOTO 9999" - AND/OR:
C     BELONGS TO "NO NEW MATRICES (JEQUIV.EQ.0.AND.NEUEBS.EQ.0)"
      CALL REDUCT(NGROUP,NOFORM,
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT, THE SUBROUTINE CALLED HERE:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV,BSTART
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,CRZMAT)
C
C**   RETURNS TO SUSC!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND TANABE
      END
      SUBROUTINE RUSSEL(NREL,KLWERT,ND2002,BIGMAT,BLOMAT,BIGEIV
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,I10
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS)
C**   CHANGE OF BASIS FROM MICRO STATES TO R-S STATES (RUSSELL-SAUNDERS),
C     USES NUMBER TO GET THE CONSECUTIVE NUMBER OF A MICRO STATE, AND
C     NEEDS GAUSS TO SOLVE A SYSTEM OF LINEAR EQUATIONS.
C     CALLS SUBROUTINE SAUNDE. OUTPUT OF EIGENVECTORS IN THE NEW BASES,
C     THEN STOP (NO RETURN (NO RETURN TO TANABE OR ELSEWHERE!)!)
C**   (LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONIC SPECTRA,
C**          CAMBRIDGE UNIVERSITY PRESS 1970. - P.226+227,EQ.(1)+(3) -
C     P.228 "3D**3 EL."!)
C**   "INPUT" FROM SUBROUTINE TANABE: EIVECV!
C**   OUTPUT(HERE AND IN SAUNDE): TO TERMINAL AND FILES 1, 2, 3 AND 11 (AND 7)!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      PARAMETER(NRELMC=14,ZERO=0.0D0,ONE=1.0D0
     1,TWO=2.0D0,KDIM=119,PARCOL=1.0D-10)
C**   KLWERT = 1,2,3 <=> P, D, F ELECTRONS
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C
      DOUBLE PRECISION EIVECV(ND2002,*)
C**   DOUBLE PRECISION DBLMAT(ND2002,*) => BIGMAT!
C**   DOUBLE PRECISION DUMMY(ND2002*2) => BIGEIV!
C** DOUBLE PRECISION BIGMAT(-LLSMX:LLSMX,-ISLSMX:ISLSMX,*) - ISLSMX=+4 NOT USED!
      DOUBLE PRECISION BIGMAT(ND2002,ND2002),BLOMAT(KDIM,KDIM)
     1,BIGEIV(*),VORFAK(-LLSMX:LLSMX,KDIMPL),COLUMN(KDIM)
     2,VORFAL(-ISLSMX:ISLSMX,KDIMPL)
      INTEGER MSML(ND2002,2,NRELMC),MQUER(ND2002,3),MSMLCO(2,NRELMC)
     1,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNR(2,-KLWER3:KLWER3)
     2,MSMLNS(2,-KLWER3:KLWER3),KAESNR(-LLSMX:LLSMX),KAESTC
     3(-LLSMX:LLSMX,KDIMPL),LOCH(KDIMPL),NOFROW(ND2002,I10),NROFNR(*)
     4,KAESTD(-ISLSMX:ISLSMX,KDIMPL),KAESNS(-ISLSMX:ISLSMX)
C     MATRIX(MAX.MULT./2,MAX.LWERT+1,MAX.NREL/2), (MATRI)X=(MATRI)P,D,F
     4,MATRIP(2,3,3),MATRID(3,7,5),MATRIF(4,13,7)
     5,LLSMAX(3),ISLMAX(3),NRMLMS(KDIM,3)
     6,ISHIFO(KDIM),ICOL(KDIM),ICOLO(KDIM)
     7,NSTART(KDIM),NFINIS(KDIM),NSNL(KDIM)
      CHARACTER*5 QOK
C
      DATA MOROUU,KLICKP,KLICKQ,KLICKR/0,0,0,0/,LLSMAX/2,6,12/
     1,ISLMAX/1,2,3/,MLONLY/-99/,MSONLY/-99/
      DATA MATRIP
C**   1 EL.:   11/0,0  12,1,0  13,0,0
     1/0,0,1,0,0,0
C**   2 EL.:   21,1,0  22,0,1  23,1,0
     2,1,0,0,1,1,0
C**   3 EL.:   31,0,1  32,1,0  33,1,0
     3,0,1,1,0,1,0/
      DATA MATRID
C**   1 EL.:   11/0,0,0  12,0,0,0   ...   17,0,0,0
     1/0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     2,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0
C**   3 EL.: DUBLET H AND DUBLET P ARE DEGENERATED
C     WITHOUT SPIN-ORBIT COUPLING!
     3,0,0,0,1,1,0,2,0,0,1,1,0,1,0,0,1,0,0,0,0,0
     4,2,0,0,0,2,0,2,1,1,1,2,0,2,1,0,0,1,0,1,0,0
     5,1,0,1,1,1,0,3,1,0,2,1,0,2,1,0,1,0,0,1,0,0/
      DATA MATRIF
C**   1 EL.:   11/0,0,0,0   ...   113,0,0,0,0
     1/0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
     1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     2,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0
     2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     3,0,1,0,0,1,0,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,0,0,0
     3,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
     4,2,0,1,0,0,3,0,0,4,2,1,0,1,4,1,0,4,3,1,0,2,4,0,0
     4,3,2,1,0,1,2,0,0,2,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0
     5,0,1,0,0,4,2,1,0,5,3,0,0,7,4,1,0,6,4,0,0,7,3,1,0
     5,5,3,0,0,5,2,0,0,3,1,0,0,2,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0
     6,4,0,1,0,1,6,1,0,6,5,3,0,4,9,2,1,8,7,3,0,4,9,2,0
     6,7,6,2,0,3,6,1,0,4,3,1,0,2,3,0,0,2,1,0,0,0,1,0,0,1,0,0,0
     7,2,2,0,1,5,2,1,0,7,6,1,0,10,5,1,0,10,7,1,0,9,5,1,0
     7,9,5,1,0,7,3,0,0,5,3,0,0,4,1,0,0,2,1,0,0,1,0,0,0,1,0,0,0/
C**   TABLE 1-7 P.208 CONDON - SHORTLEY: THE THEORY OF ATOMIC SPECTRA.
      DATA KAESNN/0/
C - NO SAVE! (NO RETURN!)
      JANO=0
C
      IF(KLWERT.EQ.0)STOP 'S-EL.S'
      WRITE(11,2266)
 8249 WRITE(*,2266)
 2266 FORMAT(' INPUT IN I4(!) YES/NO(0): "YES" BASISVECTORS TO FILE 2',/
     1,' (ONLY ONE RESP. "YES" OF THE NEW EIGENVECTORS TO TTY/FILE 11)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3888)JANOBA
      GOTO 4888
      ENDIF
 3888 READ(*,'(I4)',ERR=8249,END=4576)JANOBA
      LMN=1
 4888 IF(JANOBA.GT.KASSUM)JANOBA=KASSUM
      IF(JANOBA.EQ.0)JANOBA=1
      WRITE(7,2298)JANOBA
 2298 FORMAT(I4,' =JANOBA(sisvect.=>2)')
      WRITE(*,2982)JANOBA
      WRITE(11,2982)JANOBA
 2982 FORMAT(I5,' =JANOBA(sisvect.=>2)!!!!!!!!!')
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8248 WRITE(*,128)
  128 FORMAT(' MOROUT.NE.0: INPUT IN I1',
     1' MOROUT-HERE-IN-RUSSEL',/,' (VALID FOR SUBROUTINE SAUNDE, TOO)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3889)MOROUU
      GOTO 4889
      ENDIF
 3889 READ(*,'(I1)',ERR=8248,END=4576)MOROUU
      LMN=1
 4889 WRITE(*,2992)MOROUU
      WRITE(11,2992)MOROUU
 2992 FORMAT(I2,' =MOROUU IN RUSSEL!!!!!!!!!')
      WRITE(7,2299)MOROUU
 2299 FORMAT(I1,' =MOROUU IN RUSSEL')
      ENDIF
C
      KLWRTP=KLWERT+1
      KLWRTM=KLWERT-1
C**   ISLS=MULTIM/2
      NGRADE=MOD(NREL,2)
      NRTOAD=0
      LINE=0
      DO 6621 J=1,ND2002
      DO 6622 I=1,ND2002
      BIGMAT(I,J)=ZERO
 6622 CONTINUE
 6621 CONTINUE
C
      NRELSU=NREL
      IF(KLWERT.EQ.1.AND.NRELSU.GT.3)NRELSU=6-NREL
      IF(KLWERT.EQ.2.AND.NRELSU.GT.5)NRELSU=10-NREL
      IF(KLWERT.EQ.3.AND.NRELSU.GT.7)NRELSU=14-NREL
      DO 1111 ISLS=ISLMAX(KLWERT),0,-1
      ISLSP1=ISLS+1
      DO 111 LLS=LLSMAX(KLWERT),0,-1
      LLSP1=LLS+1
C
      IF(KLWERT.EQ.1)THEN
      INHALT=MATRIP(ISLSP1,LLSP1,NRELSU)
      IF(INHALT.EQ.0)GOTO 111
      GOTO 123
      ELSE IF(KLWERT.EQ.2)THEN
      INHALT=MATRID(ISLSP1,LLSP1,NRELSU)
      IF(INHALT.EQ.0)GOTO 111
      GOTO 123
      ELSE IF(KLWERT.EQ.3)THEN
      INHALT=MATRIF(ISLSP1,LLSP1,NRELSU)
      IF(INHALT.EQ.0)GOTO 111
      ENDIF
C
  123 LLSM1=LLS-1
      LLSM2P=2*LLS+1
      ISLSPL=ISLS+NGRADE
      ISLSM1=ISLSPL-1
      ISLS2P=ISLS+ISLSPL+1
      MULMUL=LLSM2P*ISLS2P
C
      DO 11 INH=1,INHALT
      INHDIF=INHALT-INH
      LINEM1=LINE
      LINE=LINE+1
      IF(LINE.GT.KDIM)STOP 'LINE>KDIM'
      IF(MOROUU.NE.0)THEN
      WRITE(*,6618)ISLS,ISLSPL,LLS,INH
      WRITE(11,6618)ISLS,ISLSPL,LLS,INH
 6618 FORMAT(' (IN RUSSEL:) ISLS,ISLSPL,LLS,INH=',4I6)
      ENDIF
C**  BIGMAT(ALL R-S STATES INCL.ALL DEGEN.,WEIGHT OF MICRO STATES)
C**  NRMLNS(ALL R-S STATES WITHOUT DEGEN.,3)
C    DIMENSION NRMLNS(119,3) WITH 119=KDIM AND 3<=>ALL VALUES NEEDED
C    FOR BIGMAT(NRTOAD+ML+LLSP1+ISHIFT,...) WITH ISHIFT=(MS+ISLSPL)*LLSM2P
      NRMLMS(LINE,1)=NRTOAD
      NRMLMS(LINE,2)=ISLSPL
      NRMLMS(LINE,3)=LLSP1
C**   PRE-OCC., WHICH REMAINS, IF STATE IS NOT DETERMINED BY ORTHONORMALITY!:
C**   MULTIM=ISLS+ISLSPL=NRSPUP
      MULTIM=ISLS+ISLSPL
C     NRSPUP=NREL-2*NRPAIR
C     NRSPUQ=NREL-NRPAIR
C     NRSPUP=NRSPUQ-NRPAIR
      NRPAIR=(NREL-MULTIM)/2
      NRSPUQ=MULTIM+NRPAIR
      DO 6619 J=-KLWER3,KLWER3
      DO 6620 I=1,2
      MSMLNR(I,J)=0
 6620 CONTINUE
 6619 CONTINUE
      DO 3 J=KLWERT,KLWRTP-NRSPUQ,-1
      MSMLNR(1,J)=1
    3 CONTINUE
      DO 4 J=KLWERT,KLWRTP-NRPAIR,-1
      MSMLNR(2,J)=-1
    4 CONTINUE
      CALL NUMBER(NR,MSMLNW,MSMLNR,ND2002,KLWERT,KASSUM,KLWER3)
      KAESNR(LLS)=1
      KAESTC(LLS,1)=NR
      VORFAK(LLS,1)=ONE
      MSFIX=ISLS
C**   END OF "PRE-OCC."
C
C**   ARE THERE ANY STATES "BEFORE"? (J0 = No. OF THESE STATES!):
      J0=0
      DO 1 J=1,LINEM1
      IF(ISLSPL.GT.NRMLMS(J,2).OR.LLSP1.GT.NRMLMS(J,3))GOTO 1
      J0=J0+1
      IF(J0.GT.KDIM)STOP 'J0>KDIM'
      NRTOAO=NRMLMS(J,1)
      ISLSPO=NRMLMS(J,2)
      LLSP1O=NRMLMS(J,3)
      LLSM2O=2*LLSP1O-1
      ISLS2O=2*ISLSPO+1-NGRADE
C**   MSDIF=ISLSPL-ISLSPO (.LE.0)
      MSDIF=ISLSPL-ISLSPO
C**   MLDIF=LLSP1-LLSP1O (.LE.0)
      MLDIF=LLSP1-LLSP1O
C**   ISHIFT-OLD=(ISLS2O+MSDIF)*LLSM2O
      ISHIFO(J0)=(ISLS2O+MSDIF)*LLSM2O+MLDIF+NRTOAO
    1 CONTINUE
C
      IF(J0.EQ.0)GOTO 2
C**   (NO STATES "BEFORE"!)
      I0=0
      DO 121 I=1,KASSUM
      JA=0
      DO 12 J=1,J0
      IF(BIGMAT(ISHIFO(J),I).NE.ZERO)JA=1
   12 CONTINUE
      I0=I0+JA
      IF(I0.GT.KDIM)STOP 'I0>KDIM'
      IF(JA.NE.0)ICOLO(I0)=I
  121 CONTINUE
      I0M1=I0-1
      J0P1=J0+1
      J0M1=J0-1
      IF(J0P1.GT.KDIM)STOP 'J0P1>KDIM'
C**   IT IS ASSUMED, THAT I0>J0, I.E. THAT ALL STATES CONCERNED
C     AT THIS PLACE HERE MAY BE DETERMINED BY ORTHONORMALITY!:
C     (HINT: EACH COLUMN WITH AT LEAST ONE NON-ZERO ELEMENT!)
      LEVRUS=I0-J0
      IF(LEVRUS.LE.0)STOP 'J0.GE.I0'
      IF(KLICKR.EQ.0.AND.LEVRUS.GT.1)THEN
      KLICKR=1
      WRITE(*,1221)
      WRITE(11,1221)
 1221 FORMAT(' HINT AND WARNING: MORE THEN ONE RS STATE WITH THE SAME SP
     1IN-',/,' AND ORBITAL-MULTIPL.: STATES ARE CHOSEN AT RANDOM!')
      ENDIF
C**   COPIED FROM SCHEMA AND FITTED TO REQUIREMENTS HERE:
C     NRMXDI=2*(2*KLWERT+1)<=>I0M1 - NREL<=>J0
      DO 33 N=1,J0
      NFINIS(N)=I0M1-J0+N
C**   NSTART(N)=N
   33 CONTINUE
C**   IF "ISING=1" (SINGULAR MATRIX IN GAUSS), CONTINUE HERE:
      NEXT=0
 1100 CONTINUE
      NEXT=NEXT+1
C
      DO 34 N=1,J0
      NSTART(N)=N
   34 CONTINUE
C
      DO 99 KAUM=1,NEXT
      II=J0
      DO 21 N=1,J0
      NSNL(N)=NSTART(N)
   21 CONTINUE
      NSTART(II)=NSTART(II)+1
  221 CONTINUE
      IF(NSTART(II).GT.NFINIS(II))THEN
      II=II-1
      IF(II.LE.0)GOTO 55
      NSTART(II)=NSTART(II)+1
      GOTO 221
      ENDIF
      IIP1=II+1
      DO 31 I=IIP1,J0
      IM1=I-1
      NSTART(I)=NSTART(IM1)+1
   31 CONTINUE
   99 CONTINUE
C
   55 CONTINUE
C
      IF(NEXT.NE.1.AND.MOROUU.NE.0)THEN
      WRITE(*,5556)NEXT,(NSNL(I),I=1,J0)
      WRITE(11,5556)NEXT,(NSNL(I),I=1,J0)
 5556 FORMAT(' NEXT, (NSNL(I),I=1,J0)=',I12,3X,(15I4))
      ENDIF
C
      DO 999 MITTE=I0,1,-1
C
      DO 131 J=1,I0M1
      DO 13 I=1,J0
      BLOMAT(I,J)=BIGMAT(ISHIFO(I),ICOLO(J))
   13 CONTINUE
      ICOL(J)=ICOLO(J)
  131 CONTINUE
C
      DO 14 J=1,J0
      COLUMN(J)=-BIGMAT(ISHIFO(J),ICOLO(I0))
   14 CONTINUE
      ICOL(I0)=ICOLO(I0)
C
      IF(NEXT.NE.1)THEN
C**   EXCHANGE (NOT <=> COLUMN):
      DO 3113 J=1,J0
      DO 1113 I=1,J0
      TEMP=BLOMAT(I,NSNL(J))
      BLOMAT(I,NSNL(J))=BLOMAT(I,J)
      BLOMAT(I,J)=TEMP
 1113 CONTINUE
      ITEMP=ICOL(NSNL(J))
      ICOL(NSNL(J))=ICOL(J)
      ICOL(J)=ITEMP
 3113 CONTINUE
      ENDIF
C
      IF(MITTE.NE.I0)THEN
C**   EXCHANGE (<=> COLUMN):
      DO 113 J=1,J0
      TEMP=BLOMAT(J,MITTE)
      BLOMAT(J,MITTE)=-COLUMN(J)
      COLUMN(J)=-TEMP
  113 CONTINUE
      ICOL(MITTE)=ICOLO(I0)
      ICOL(I0)=ICOLO(MITTE)
      ENDIF
C
C**   SOLUTION IN GAUSS <=> ZERO!:
      DO 15 J=J0P1,I0M1
      COLUMN(J)=ZERO
   15 CONTINUE
      COLUMN(I0)=ONE
      IF(I0.NE.(J0P1+INHDIF))THEN
      WRITE(*,1314)I0,J0,INHDIF
      WRITE(11,1314)I0,J0,INHDIF
 1314 FORMAT(' WARNING: ERROR?: I0,J0,INHDIF=',3I4)
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,2113)I0,J0P1
      WRITE(11,2113)I0,J0P1
 2113 FORMAT(' I0,J0P1=',2I6)
C**   ORTHON. OK?.
      DO 3125 I=1,J0M1
      DO 3124 II=I+1,J0
      SUM=ZERO
      DO 3130 J=1,I0M1
      SUM=SUM+BLOMAT(I,J)*BLOMAT(II,J)
 3130 CONTINUE
      SUM=SUM+COLUMN(I)*COLUMN(II)
      QOK='O.K. '
      IF(DABS(SUM).GT.PARCOL)QOK='WRONG'
      WRITE(11,3131)I,II,SUM,QOK
 3131 FORMAT(' ORTHOGON. OF STATES:',2I6,D16.8,2X,A5)
 3124 CONTINUE
 3125 CONTINUE
      ENDIF
C**   ALWAYS PRE-OCCUPATION ISING=0 IN(!) GAUSS - IF ISING BECOMES 1,
C     "SINGULAR MATRIX" IN GAUSS!:
      ISING=LEVRUS
      CALL GAUSS(BLOMAT,J0,KDIM,COLUMN,ISING,MOROUT,LEVRUS)
      IF(MOROUU.NE.0)THEN
      WRITE(*,2321)(ICOL(I),COLUMN(I),I=1,I0)
      WRITE(11,2321)(ICOL(I),COLUMN(I),I=1,I0)
 2321 FORMAT(' IN RUSSEL: (ICOL(I),COLUMN(I),I=1,I0)=',/,4(I6,D12.4))
      ENDIF
      IF(ISING.EQ.0)GOTO 9999
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2114)MITTE,NEXT
      WRITE(11,2114)MITTE,NEXT
 2114 FORMAT(' SINGULAR MATRIX IN GAUSS, THEREFORE',/,' ANOTHER TRIAL'
     1,' HERE IN RUSSEL! MITTE AND NEXT =',I4,I12)
      ENDIF
C
  999 CONTINUE
C
      GOTO 1100
C
 9999 CONTINUE
C**   NORMALIZATION OF COLUMN(1..I0):
      SUMQ=ZERO
      I0MIN=I0
      DO 22 I=1,I0
      IF(DABS(COLUMN(I)).LT.PARCOL)THEN
      COLUMN(I)=ZERO
      I0MIN=I0MIN-1
      ENDIF
      SUMQ=SUMQ+COLUMN(I)**2
   22 CONTINUE
      SUMQ=DSQRT(SUMQ)
C**   ELIMINATION OF "COLUMN=ZERO"!:
      ISHIFT=0
      ISHIFU=0
      DO 231 I=1,I0MIN
      DO 2311 J=I,I0
      IF(COLUMN(J+ISHIFU).EQ.ZERO)THEN
      ISHIFT=ISHIFT+1
      ELSE
      GOTO 23
      ENDIF
 2311 CONTINUE
   23 CONTINUE
      VORFAK(LLS,I)=COLUMN(I+ISHIFT)/SUMQ
      KAESTC(LLS,I)=ICOL(I+ISHIFT)
      ISHIFU=ISHIFT
  231 CONTINUE
      KAESNR(LLS)=I0MIN
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2322)I0,I0MIN,SUMQ,(KAESTC(LLS,I),VORFAK(LLS,I),I=1,I0MIN)
      WRITE(11,2322)I0,I0MIN,SUMQ,(KAESTC(LLS,I),VORFAK(LLS,I)
     1,I=1,I0MIN)
 2322 FORMAT(' I0,I0MIN,SQRT(SUMQ),(ICOL(I),COLUMN(I),I=1,I0MIN)=',2I6,
     1D12.4,/,4(I6,D12.4))
      ENDIF
C
    2 CONTINUE
      CALL SAUNDE(NRTOAD,KAESNR,LLSMX,LLS,LLSM1,LLSP1,KAESTC,VORFAK
     1,MSFIX,ISLSM1,LLSM2P,BIGMAT,ND2002,MSMLNW,MSMLNR,MSMLNS,KLWER3
     2,KLWERT,KLWRTM,KLWRTP,MQUER,KASSUM,LOCH,ISLSPL,ISLSP1,JANO
     3,MLONLY,MSONLY,MOROUU,KDIMPL,ISLSMX,VORFAL,KAESTD,KAESNS,KAESNN)
C
      DO 6623 J=1,ND2002
      DO 6624 I=1,ND2002
      IF(DABS(BIGMAT(I,J)).LT.PARCOL)BIGMAT(I,J)=ZERO
 6624 CONTINUE
 6623 CONTINUE
C
      NRTOAD=NRTOAD+MULMUL
   11 CONTINUE
  111 CONTINUE
 1111 CONTINUE
C
C**   NOW (ONLY) FOLLOWS: OUTPUT (TO TERMINAL, FILE 2, FILE 11) AND STOP!:
C  (I123 <=> No. OF INPUT-VECTOR EIVECV, WHICH => OUTPUT-VECTOR BIGEIV!)
      DO 876 I123=1,JANOBA
C
      IF(MOROUU.NE.0)THEN
      KASSMN=1
      IF(MOROUU.GT.1)KASSMN=KASSUM
      DO 2810 J=1,KASSMN
      WRITE(11,2910)J
 2910 FORMAT(' (BIGMAT(J,I),I=1,KASSUM), J=',I6)
      WRITE(11,'(10D8.0)')(BIGMAT(J,I),I=1,KASSUM)
 2810 CONTINUE
      ENDIF
C
      DO 765 J=1,KASSUM
      BIGEIV(J)=ZERO
      DO 654 I=1,KASSUM
      BIGEIV(J)=BIGEIV(J)+BIGMAT(J,I)*EIVECV(I,I123)
  654 CONTINUE
  765 CONTINUE
C
      LINENR=1
      BIGSUM=ZERO
      COLUMN(LINENR)=ZERO
      DO 987 I=1,KASSUM
      BIGPRT=BIGEIV(I)**2
      BIGSUM=BIGSUM+BIGPRT
      COLUMN(LINENR)=COLUMN(LINENR)+BIGPRT
      IF(LINENR.NE.LINE)THEN
      LINENP=LINENR+1
      IF(NRMLMS(LINENP,1).EQ.I)THEN
      LINENR=LINENR+1
      COLUMN(LINENR)=ZERO
      ENDIF
      ENDIF
  987 CONTINUE
C
      WRITE(*,8765)BIGSUM
      WRITE(11,8765)BIGSUM
 8765 FORMAT(' PARTIAL SUMS OF EIGENVECTOR**2, ONE FOR EACH R-S STATE:'
     1,/,' (SUM OF PARTIAL SUMS =',D16.8,')')
      IF(KLICKP.EQ.0)THEN
      KLICKP=1
      WRITE(*,8766)
      WRITE(11,8766)
 8766 FORMAT(' CRYPTIC TABLE'
     1,' OF THESE R-S STATES, GREATEST (SPIN-)MULTIPL. IN FIRST ROW',/
     2,' (TO BE READ FROM LEFT TO RIGHT, I.E. "S" IS THE LAST STATE):')
      ISLSP1=ISLMAX(KLWERT)+1
      LLSP1=LLSMAX(KLWERT)+1
      IF(KLWERT.EQ.1)THEN
      DO 8769 I=ISLSP1,1,-1
      WRITE(*,8764)(MATRIP(I,J,NRELSU),J=LLSP1,1,-1)
      WRITE(11,8764)(MATRIP(I,J,NRELSU),J=LLSP1,1,-1)
 8764 FORMAT(' D,P,S:',3I3)
 8769 CONTINUE
      ELSE IF(KLWERT.EQ.2)THEN
      DO 8768 I=ISLSP1,1,-1
      WRITE(*,8763)(MATRID(I,J,NRELSU),J=LLSP1,1,-1)
      WRITE(11,8763)(MATRID(I,J,NRELSU),J=LLSP1,1,-1)
 8763 FORMAT(' IHGFDPS:',7I3)
 8768 CONTINUE
      ELSE IF(KLWERT.EQ.3)THEN
      DO 8767 I=ISLSP1,1,-1
      WRITE(*,8762)(MATRIF(I,J,NRELSU),J=LLSP1,1,-1)
      WRITE(11,8762)(MATRIF(I,J,NRELSU),J=LLSP1,1,-1)
 8762 FORMAT(' QONMLKIHGFDPS:',13I3)
 8767 CONTINUE
      ENDIF
      ENDIF
      WRITE(*,5146)(COLUMN(I),I=1,LINE)
      WRITE(11,5146)(COLUMN(I),I=1,LINE)
C
      COLUMX=ZERO
      LINEX=0
      LINEY=0
      DO 9875 I=1,LINE
      IF(COLUMN(I).GT.COLUMX)THEN
      COLUMX=COLUMN(I)
      LINEX=I
      LINEY=I
      ENDIF
 9875 CONTINUE
      IF(COLUMX.GT.0.5D0)THEN
      LINEX=1
      LINEY=LINE
      ENDIF
      DO 9876 I=LINEX,LINEY
      IF(COLUMN(I).GT.0.5D0.OR.LINEX.EQ.LINEY)THEN
      IF(KLICKQ.EQ.0)THEN
      KLICKQ=1
      WRITE(*,9764)
      WRITE(11,9764)
 9764 FORMAT(' FOR THE MAX. PART OF AN EIGENVECTOR',
     1' THE FOLLOWING OUTPUT IS GIVEN:',/
     2,' (ORDERED AS -MS/-ML - -MS/-ML+1 - ...)')
      ENDIF
      ISTART=NRMLMS(I,1)+1
      IP1=I+1
      IEND=NRMLMS(IP1,1)
      IF(I.EQ.LINE)IEND=NRTOAD
      BIGSUM=ZERO
      DO 9766 II=ISTART,IEND
      BIGSUM=BIGSUM+BIGEIV(II)**2
 9766 CONTINUE
      WRITE(*,9765)I,BIGSUM
      WRITE(11,9765)I,BIGSUM
 9765 FORMAT(' PART OF ABOVE EIGENVECTOR, CORRESP. TO R-S STATE No.',I4
     1,/,' (SUM OF SQUARED PARTS (CONTROL) =',D16.8,')')
      WRITE(*,5146)(BIGEIV(II),II=ISTART,IEND)
      WRITE(11,5146)(BIGEIV(II),II=ISTART,IEND)
      ENDIF
 9876 CONTINUE
C
      IF(JANOBA.EQ.1)THEN
      WRITE(*,9877)
      WRITE(11,9877)
 9877 FORMAT(' ONLY 1ST EIGENVECTOR AND ONLY TO FILE 11 AND TERMINAL!')
      GOTO 878
      ENDIF
C
      WRITE(*,9929)I123
      WRITE(11,9929)I123
 9929 FORMAT(
     1' No. OF EIGENVECTOR((I=1,KASSUM),NR), WHICH TO FILE 2, =',I6,/)
      WRITE(2,9919)I123
 9919 FORMAT(
     1' No. OF EIGENVECTOR((I=1,KASSUM),NR), WHICH TO FILE 2, =',I6)
      WRITE(2,5146)(BIGEIV(I),I=1,KASSUM)
 5146 FORMAT(5D14.6)
C
  876 CONTINUE
C
  878 CONTINUE
      WRITE(*,879)KDIMPL,KAESNN
      WRITE(11,879)KDIMPL,KAESNN
  879 FORMAT(' KAESN.. ARRANGED AND USED:',2I5)
      IF(JANOBA.EQ.1)STOP 'ONLY 1ST'
C**   NO RETURN! (NO RETURN TO TANABE OR ELSEWHERE!)
      STOP 'END OF SAUNDE'
 4576 CALL FINISH
 5588 CALL FINISI
CEND RUSSEL
      END
      SUBROUTINE BLOCUT(JAWIGN,ND2002,JDIM,NDMAL3,PARR,KLWERT,NRELMX
C**   CALLED BY TANABE OR BY ECKART, IF THE DIAGONALIZATION ROUTINE,
C     WHICH IS CALLED HERE, IS NOT CALLED DIRECTLY!
     1,MSMLNW,DBLMAT,LMAT,EIVECV,DUMMY,WERTZZ,MQUER,MQUERR,BLOMAT,NGROUP
     2,MSMLNS,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ,MSML,NREL14,NREL
     3,I10,KLWER3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
  321 FORMAT(
     1' SUBROUTINE to BLOCk oUT, if possible, a real symm. matrix DBLMAT
     1',/,' with elements abs. greater than PARR and ZERO else.')
C     PARR may be read in, if "JATEST" is set! Firstly a block corresponding
C     to a null-matrix is looked for, and if one has been found, NULSPA.EQV.
C     .TRUE. is set! BLOCKDimension(1) becomes the DIMENSION of a null-matrix
C     found.
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0,PI=3.1415926D0
     1,PIV=PI/4.0D0,HALFM=-0.5D0)
C
      DIMENSION DBLMAT(ND2002,*),EIVECV(ND2002,*),DUMMY(NDMAL3),WNRW(*)
     1,WERTZZ(ND2002),BLOMAT(ND2002,*),BESETZ(NREL14,I10),EIOUT(4)
     2,RBMM55(5,5),TRRL55(5,5)
      INTEGER REIHNF(ND2002),BLOCKD(ND2002),BLOCKS(0:ND2002),IIEI(4)
     1,MQUER(ND2002,3),NFOLGE(4),JJEI(4),MSMLNS(2,-KLWER3:KLWER3)
     2,MSML(ND2002,2,NREL14),MQUERR(200),MSMLNW(ND2002,2,-KLWER3:KLWER3)
     3,NDIGIT(10),MWM(8,2),MWMSML(252,8)
      COMPLEX*16 RAMM55(5),RGMM55(5),CPLXIJ(5,5),CPXROW(5),CEMPEI,COMSUM
C**   The matrix is mapped onto LOGICAL LMAT, and a element becomes
C     .TRUE., if the element of DBLMAT is abs. greater than PARR.
C     The columns which are done are noticed in SPA(lten)ERL(edigt).
C
C     The sequence of the columns of DBLMAT resulting after blocking
C     out is noticed in REIHNF(LAUFNR), and this is the first result
C     needed later on.
C
C**   BLOCKDimension(1:NBLOCK) contains the dimensions of the NBLOCK
C     different blocks. BLOCKSum(0)=0 and BLOCKSum(1:NBLOCK) is the sum
C     of these dimensions up to the block considered, i.e. BLOCKSum(1)=
C     BLOCKDimension(1) e.g. BLOCKDimension(1) becomes the DIMENSION of
C     the first non-null block, if a null-matrix has not been found.
C
C     The result is the following: BLOckMAT, which will be updated in each
C     DO LOOP 1...NBLOCK with help of REIHNF, contains one of the blocks
C     (excluded the case of a null-matrix) of DBLMAT, and BLOMAT will be
C     diagonalized instead of DBLMAT! There may be one to JDIM blocks:
C     One means "no blocking at all" and JDIM means JDIM 1*1-"blocks"!
C
      LOGICAL LMAT(ND2002,*),NULSPA,SPAERL(ND2002)
C**   EQUIVALENCE (EIVECV,LMAT)
      SAVE
      DATA LAUF0,LAUF1,LAUF2,LAUF3,LAUF4,LAUF5,LAUF50,LAUF51,LAUF49,KLIK
     1/0,0,0,0,0,0,0,0,0,0/
      DATA MOROUZ,MOROUU,MOROUV,MOROUW,MOROUX,MOROUY/0,0,0,0,0,0/
C**   2nd PART OF UNITARY MATRIX R**(J)=R**(2): r**(J)(BETA) PART
C     = RBMM55(5,5) (B<=>BETA) FOR COS(BETA)=DSQRT(3)/3 (BETA MUST BE POS.!)
      DATA RBMM55/
C**   r**(J)(BETA):
     10.622008D0,-0.643951D0,0.408248D0,-0.172546D0,0.044658D0
     2,0.643951D0,0.122008D0,-0.577350D0,0.455342D0,-0.172546D0
     3,0.408248D0,0.577350D0,0.000000D0,-0.577350D0,0.408248D0
     4,0.172546D0,0.455342D0,0.577350D0,0.122008D0,-0.643951D0
     5,0.044658D0,0.172546D0,0.408248D0,0.643951D0,0.622008D0/
C**   COMLEX**16 RAMM55(5) (A<=>ALPHA) AND RGMM55(5) (G<=>GAMMA):
C     2 PARTS OF UNITARY MATRIX R**(J)=R**(2), ALPHA PART
C     (ALPHA=PI/4.), AND GAMMA PART (GAMMA=0.):
C     COMPLEX R**(2)(2,1) = RAMM55(2)*RBMM55(2,1)*RGMM55(1)
C**   TRRL55(5,5): MATRIX TO TRansform a basis of 5 complex basis orbitals to
C     a basis of 5 ReaL or purely imaginary basis orbitals (d orbitals)
C     (to be multiplied by SQRT(2) except TRRL55(3,3)):
      DATA TRRL55/
C**   AN UNITARY AND SYMMETRICAL MATRIX:
C     THE MATRIX AND THE RECIPROCAL MATRIX ARE IDENTICAL!
     1HALF,ZERO,ZERO,ZERO,HALF
     2,ZERO,HALFM,ZERO,HALF,ZERO
     3,ZERO,ZERO,ONE,ZERO,ZERO
     4,ZERO,HALF,ZERO,HALF,ZERO
     5,HALF,ZERO,ZERO,ZERO,HALFM/
      DATA SINB2Q,COSB2Q/0.21132487D0,0.78867513D0/
C
C**   KASSUM=JDIM
      IF(LAUF1.EQ.0)THEN
      LAUF1=1
      IF(MORTEX.GT.0)THEN
      WRITE(*,321)
      WRITE(11,321)
C**   FORMAT SEE ABOVE!
      ENDIF
      WURZ2=DSQRT(TWO)
      DO 8922 J=1,5
      DO 8921 I=1,5
      TRRL55(I,J)=TRRL55(I,J)*WURZ2
      CPLXIJ(I,J)=DCMPLX(TRRL55(I,J),ZERO)
 8921 CONTINUE
 8922 CONTINUE
      TRRL55(3,3)=ONE
      CPLXIJ(3,3)=DCMPLX(ONE,ZERO)
C
      IF(PARR.EQ.ZERO.OR.JATEST.NE.0)THEN
      WRITE(11,1)PARR
 8229 WRITE(*,1)PARR
    1 FORMAT(' PARR=',D10.2
     1,/,' PARR MAY BE CHANGED: INPUT IN D6.1 (.LT.0.: => 0.)')
      IF(LMN.EQ.0)THEN
      READ(77,'(D6.1)',ERR=5588,END=3890)PAR
      GOTO 4890
      ENDIF
 3890 READ(*,'(D6.1)',ERR=8229,END=4576)PAR
      LMN=1
 4890 IF(PAR.NE.ZERO)PARR=PAR
      IF(PARR.LT.ZERO)PARR=ZERO
      WRITE(*,61)PARR
      WRITE(11,61)PARR
      WRITE(7,2250)PARR
 2250 FORMAT(D6.1,' =PARR(in BLOCUT)')
   61 FORMAT(' IN BLOCUT: PARR-NEW=',D6.1,'!!!!!!!!!')
      ENDIF
      ENDIF
C
      NULSPA=.FALSE.
      LAUFNR=0
      DO 20 I=1,ND2002
      BLOCKD(I)=0
   20 CONTINUE
      DO 12 J=1,JDIM
      SPAERL(J)=.TRUE.
      DO 11 I=1,JDIM
      LMAT(I,J)=.FALSE.
      IF(DABS(DBLMAT(I,J)).GE.PARR)THEN
      LMAT(I,J)=.TRUE.
      SPAERL(J)=.FALSE.
      ENDIF
   11 CONTINUE
      IF(SPAERL(J).EQV..TRUE.)THEN
      LAUFNR=LAUFNR+1
      REIHNF(LAUFNR)=J
      BLOCKD(1)=LAUFNR
      ENDIF
   12 CONTINUE
      IF(BLOCKD(1).GT.0)NULSPA=.TRUE.
C
      IF(MOROUT.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,128)
 8230 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0 OR =1!',/
     2,' ... OR =8 FOR "NO MORE OUTPUT FURTHERMORE HERE IN BLOCUT"!',/,
     3' (=0 FOR OUTPUT AT THE END OF BLOCUT ONLY: OCCUP.OF SPINORB.)',/,
     4' (=8 CANCELS OUTPUT AT THE END OF BLOCUT AND IN FURTHER ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3891)MOROUZ
      GOTO 4891
      ENDIF
 3891 READ(*,'(I1)',ERR=8230,END=4576)MOROUZ
      LMN=1
 4891 WRITE(*,2215)MOROUZ
      WRITE(11,2215)MOROUZ
      WRITE(7,2251)MOROUZ
 2251 FORMAT(I1,' =MOROUZ IN BLOCUT/0')
 2215 FORMAT(I2,' =MOROUZ IN BLOCUT/0!!!!!!!!!')
      ENDIF
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1288)
 8203 WRITE(*,1288)
 1288 FORMAT(
     1' INPUT 0, 1, 2 OR 3: VALID (ONLY) FOR THE FIRST PART OF BLOCUT!',
     2/,' (I.E. LOGICAL LMAT AND "REIHNF"=ORDERING OF COLUMNS OF LMAT)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3892)MOROUU
      GOTO 4892
      ENDIF
 3892 READ(*,'(I1)',ERR=8203,END=4576)MOROUU
      LMN=1
 4892 WRITE(*,2225)MOROUU
      WRITE(11,2225)MOROUU
      WRITE(7,2252)MOROUU
 2252 FORMAT(I1,' =MOROUU IN BLOCUT/1')
 2225 FORMAT(I2,' =MOROUU IN BLOCUT/1!!!!!!!!!')
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,129)
      WRITE(11,129)
  129 FORMAT(' OUTPUT OF (LMAT(I,J),J=1,JDIM), I=1 FOR MOROUT=1 OR =2')
      ENDIF
      IF(MOROUU.EQ.1.OR.MOROUU.EQ.2)THEN
      WRITE(*,'(1X,81L1)')(LMAT(1,J),J=1,JDIM)
      WRITE(11,'(1X,81L1)')(LMAT(1,J),J=1,JDIM)
      ELSE IF(MOROUU.GT.2)THEN
      DO 377 I=1,JDIM
      WRITE(*,'(1X,81L1)')(LMAT(I,J),J=1,JDIM)
      WRITE(11,'(1X,81L1)')(LMAT(I,J),J=1,JDIM)
  377 CONTINUE
      ENDIF
C
      DO 1112 I=1,JDIM
      LMAT(I,I)=.TRUE.
C**   The statement before is absolutely necessary!
 1112 CONTINUE
C
C**   Now starting with first or second block, respectively!:
      NBLOCK=0
      IF(NULSPA.EQV..TRUE.)NBLOCK=1
C**   NBLOCK=NBLOCK+1 in the DO-LOOP!
C**   There is a maximum of JDIM blocks, and these would be 1*1-"blocks"!
      DO 123 J=1,JDIM
      IF(SPAERL(J).EQV..TRUE.)GOTO 123
      NBLOCK=NBLOCK+1
      LAUFNR=LAUFNR+1
      SPAERL(J)=.TRUE.
      REIHNF(LAUFNR)=J
      BLOCKD(NBLOCK)=1
C**   Now an infinite loop ("122 CONTINUE"), until ISTRND.GT.JDIM:
      ISTRND=0
      JJ=J
  122 CONTINUE
      JJ=JJ+1
      IF(JJ.GT.JDIM)JJ=JJ-JDIM
      ISTRND=ISTRND+1
      IF(ISTRND.GT.JDIM)GOTO 123
C**   ISTRND.GT.JDIM is now true!
      IF(JJ.EQ.J)GOTO 122
      IF(SPAERL(JJ).EQV..TRUE.)GOTO 122
C**   Now the JJth column is compared with the Jth column:
      DO 121 I=1,JDIM
      IF((LMAT(I,JJ).EQV..TRUE.).AND.(LMAT(I,J).EQV..TRUE.))THEN
C**   Updating now!:
      DO 120 II=1,JDIM
      IF(LMAT(II,JJ).EQV..TRUE.)LMAT(II,J)=.TRUE.
  120 CONTINUE
      SPAERL(JJ)=.TRUE.
      ISTRND=0
      LAUFNR=LAUFNR+1
      REIHNF(LAUFNR)=JJ
      BLOCKD(NBLOCK)=BLOCKD(NBLOCK)+1
      GOTO 122
      ENDIF
  121 CONTINUE
      GOTO 122
  123 CONTINUE
C
      BLOCKS(0)=0
      BLOCKS(1)=BLOCKD(1)
      DO 1982 I=2,NBLOCK
      IM1=I-1
      BLOCKS(I)=BLOCKS(IM1)+BLOCKD(I)
 1982 CONTINUE
C
      IF(MOROUU.GE.1)THEN
      WRITE(*,130)
      WRITE(11,130)
  130 FORMAT(' OUTPUT OF (REIHNF(J),J=1,JDIM):')
      WRITE(*,'(1X,20I4)')(REIHNF(J),J=1,JDIM)
      WRITE(11,'(1X,20I4)')(REIHNF(J),J=1,JDIM)
      ENDIF
C
C**   NOW OUTPUT (ALWAYS, BUT ONLY FIRST RUN):
C
      IF(LAUF0.EQ.0.AND.MORTEX.GE.0)THEN
      LAUF0=1
      WRITE(*,333)NULSPA
      WRITE(11,333)NULSPA
  333 FORMAT(' NULL-ROW/ -COLUMN IS THERE (YES=T/NO=F):',L3)
      WRITE(*,338)NBLOCK
      WRITE(11,338)NBLOCK
  338 FORMAT(' NUMBER OF BLOCKS AND DIMENSIONS OF THESE=',I8)
C
      WRITE(*,'(10I8)')(BLOCKD(N),N=1,NBLOCK)
      WRITE(11,'(10I8)')(BLOCKD(N),N=1,NBLOCK)
      ENDIF
C
C**   NOW FIRSTLY BLOMAT INCL. OUTPUT (OUTPUT ONLY, IF MOROUT.NE.0
C     AND MOROUZ.NE.0.AND.MOROUZ.NE.8!):
C
      IEINZW=1
      IF(NULSPA.EQV..TRUE.)IEINZW=2
C**   LOCKDN=BLOCKD(1)
C
C**   BREAK OF ALL IF'S!
C
      DO 99 J=1,JDIM
      DO 88 I=1,JDIM
      BLOMAT(I,J)=DBLMAT(REIHNF(I),REIHNF(J))
   88 CONTINUE
   99 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      DO 1110 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      IF(N.LE.5)THEN
      WRITE(11,127)N
 8200 WRITE(*,127)N
  127 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0, 1 OR 2!'
     2,/,' VALID FOR THE SECOND PART OF BLOCUT, I.E. BLOMAT IN DO 1110'
     3,' N=',/,' IEINZW,NBLOCK WITH N =',I3,' (OR N>5 TOO, IF N=5)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3893)MOROUV
      GOTO 4893
      ENDIF
 3893 READ(*,'(I1)',ERR=8200,END=4576)MOROUV
      LMN=1
 4893 WRITE(*,2235)MOROUV
      WRITE(11,2235)MOROUV
      WRITE(7,2253)MOROUV
 2253 FORMAT(I1,' =MOROUV IN BLOCUT/2')
 2235 FORMAT(I2,' =MOROUV IN BLOCUT/2!!!!!!!!!')
      ENDIF
      IF(MOROUV.GE.1)THEN
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,6146)N
      WRITE(11,6146)N
 6146 FORMAT(' NOW FOLLOWING: (BLOMAT(ISTART,J),J=ISTART,IENDE): (N =',
     1I5,')')
      WRITE(*,'(6E14.6)')(BLOMAT(ISTART,J),J=ISTART,IENDE)
      WRITE(11,'(6E14.6)')(BLOMAT(ISTART,J),J=ISTART,IENDE)
      IF(MOROUV.GE.2)THEN
      WRITE(*,6145)N
      WRITE(11,6145)N
 6145 FORMAT(' ... AND (BLOMAT(ISTART+1:IENDE,J),J=ISTART,IENDE): (N =',
     1I5,')')
      DO 177 I=ISTART+1,IENDE
      WRITE(*,'(6E14.6)')(BLOMAT(I,J),J=ISTART,IENDE)
      WRITE(11,'(6E14.6)')(BLOMAT(I,J),J=ISTART,IENDE)
  177 CONTINUE
      ENDIF
      ENDIF
 1110 CONTINUE
      ENDIF
C
C**   BREAK OF ALL IF'S!
C**   NO DIAGONALIZATION FOR N=1, IF IEINZW=2!:
C
      IF(IEINZW.EQ.2)THEN
      IENDE=BLOCKD(1)
      DO 1999 J=1,IENDE
      WERTZZ(J)=ZERO
      DO 1998 I=1,IENDE
      BLOMAT(I,J)=ZERO
 1998 CONTINUE
      BLOMAT(J,J)=ONE
 1999 CONTINUE
      ENDIF
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1899)
 1888 WRITE(*,1899)
 1899 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0, 1, 2 OR 3!'
     2,/,' VALID FOR THE THIRD PART OF BLOCUT, I.E. DO 1101 N=',/
     3,' IEINZW,NBLOCK WITH RESULTS OF DIAGON. INCL. SPINORB.!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3894)MOROUW
      GOTO 4894
      ENDIF
 3894 READ(*,'(I1)',ERR=1888,END=4576)MOROUW
      LMN=1
 4894 WRITE(*,2245)MOROUW
      WRITE(11,2245)MOROUW
      WRITE(7,2254)MOROUW
 2254 FORMAT(I1,' =MOROUW IN BLOCUT/3')
 2245 FORMAT(I2,' =MOROUW IN BLOCUT/3!!!!!!!!!')
      ENDIF
C
C**   NOW FOR LOWER STORAGE MODE:
      DO 111 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      DO 1201 J=ISTART,IENDE
      JJ=J-ISTART+1
      DO 1200 I=ISTART,IENDE
      II=I-ISTART+1
      DBLMAT(II,JJ)=BLOMAT(I,J)
 1200 CONTINUE
 1201 CONTINUE
      ND20QU=ND2002**2
C
      CALL DSPEVW(1,DBLMAT,DBLMAT,WNRW,EIVECV,ND2002,LOCKDN,DUMMY
     1,NDMAL3,ND20QU)
C
C**   NOW TRANSFER OF EIVECV TO BLOMAT AND OF WNRW TO WERTZZ!:
      DO 999 J=ISTART,IENDE
      JJ=J-ISTART+1
      WERTZZ(J)=WNRW(JJ)
  999 CONTINUE
      DO 887 J=ISTART,IENDE
      JJ=J-ISTART+1
      DO 888 I=ISTART,IENDE
      II=I-ISTART+1
      BLOMAT(I,J)=EIVECV(II,JJ)
  888 CONTINUE
  887 CONTINUE
C
  111 CONTINUE
C
C**   ORDERING AND TRANSFER OF BLOMAT TO EIVECV!:
      DO 7034 K=1,JDIM
      DO 705 J=1,JDIM
      JJ=REIHNF(J)
      EIVECV(JJ,K)=BLOMAT(J,K)
  705 CONTINUE
 7034 CONTINUE
C
      IF(MOROUW.EQ.0)GOTO 897
      DO 1101 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      WRITE(*,1648)N
      WRITE(11,1648)N
 1648 FORMAT(' THE EIGENVALUES OF BLOCK No.',I5,' ARE:')
      WRITE(*,6148)(WERTZZ(J),J=ISTART,IENDE)
      WRITE(11,6148)(WERTZZ(J),J=ISTART,IENDE)
 6148 FORMAT(/,3D20.12)
      WRITE(*,6147)
      WRITE(11,6147)
 6147 FORMAT(/,
     1' NOW FOLLOW THE FIRST EIGENVECTOR AND REIHNF AND 2*MJ:')
      LIMITI=ISTART
      IF(MOROUW.GT.2)THEN
      LIMITI=IENDE
      WRITE(*,1649)
      WRITE(11,1649)
 1649 FORMAT(' ... AND, BECAUSE MOROUT > 2, ALL OTHER EIGENVECTORS!')
      ENDIF
      I1=ISTART-1
      DO 189 J=ISTART,LIMITI
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,6149)(EIVECV(REIHNF(I+I1),J)
     1,REIHNF(I+I1),MQUER(REIHNF(I+I1),3),I=1,LOCKDN)
      WRITE(11,6149)(EIVECV(REIHNF(I+I1),J)
     1,REIHNF(I+I1),MQUER(REIHNF(I+I1),3),I=1,LOCKDN)
 6149 FORMAT(4(E12.4,I5,I3))
      ELSE
C**   NEARLY THE SAME, BUT MQUERR INSTEAD OF MQUER!
      WRITE(*,6149)(EIVECV(REIHNF(I+I1),J)
     1,REIHNF(I+I1),MQUERR(REIHNF(I+I1)),I=1,LOCKDN)
      WRITE(11,6149)(EIVECV(REIHNF(I+I1),J)
     1,REIHNF(I+I1),MQUERR(REIHNF(I+I1)),I=1,LOCKDN)
      ENDIF
  189 CONTINUE
C
      IF(LAUF2.EQ.0)THEN
      LAUF2=1
      LIMIT=10
      GRENZE=0.1D0
      WRITE(11,2193)LIMIT,GRENZE
 8231 WRITE(*,2193)LIMIT,GRENZE
 2193 FORMAT(' INPUT IN I4,F10.4 LIMITS FOR OUTPUT OF EIGENVECTORS;'
     1,/,' < ZERO => 0 AND 0.0; ZERO =>',I5,F4.1,/,' (I.E.: MAX.'
     2,' NUMBER OF EIGENVEC. TO BE TAKEN INTO ACCOUNT AND LOWEST',/
     3,' (ABS.) VALUE OF THESE EIGENVECTORS TO BE TAKEN INTO ACCOUNT)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,F10.4)',ERR=5588,END=3895)LIMITI,GRENZD
      GOTO 4895
      ENDIF
 3895 READ(*,'(I4,F10.4)',ERR=8231,END=4576)LIMITI,GRENZD
      LMN=1
 4895 WRITE(*,2195)LIMITI,GRENZD
      WRITE(11,2195)LIMITI,GRENZD
 2195 FORMAT(I4,F10.4,' =LIMITI,GRENZD!!!!!!!!!')
      WRITE(7,2194)LIMITI,GRENZD
 2194 FORMAT(I4,F10.4,' =LIMITI,GRENZD')
      IF(LIMITI.NE.0)LIMIT=LIMITI
      IF(LIMIT.LT.0)LIMIT=0
      IF(GRENZD.NE.ZERO)GRENZE=GRENZD
      ENDIF
      LIMITI=LIMIT
      IF(LIMITI.GT.LOCKDN)LIMITI=LOCKDN
      WRITE(*,1896)LIMITI,GRENZE
      WRITE(11,1896)LIMITI,GRENZE
 1896 FORMAT(' MAX. No. OF EIGENVEC. AND LIMIT=',I5,F10.4)
      LIMITI=LIMITI+ISTART-1
C**   I1=ISTART-1
      DO 1898 J=ISTART,LIMITI
      WRITE(*,6174)J
      WRITE(11,6174)J
 6174 FORMAT(
     1' NOW FOLLOW (PART OF) THE',I5,'TH EIGENV. AND REIHNF AND 2*MJ:')
C
      II=0
      DO 1897 IL=1,LOCKDN
C
      IF(DABS(EIVECV(REIHNF(IL+I1),J)).GE.GRENZE)THEN
      II=II+1
      NFOLGE(II)=IL
      IF(II.EQ.4)THEN
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,4)
      WRITE(11,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,4)
      ELSE
C**   NEARLY THE SAME, BUT MQUERR INSTEAD OF MQUER!
      WRITE(*,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUERR(REIHNF(NFOLGE(I)+I1)),I=1,4)
      WRITE(11,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUERR(REIHNF(NFOLGE(I)+I1)),I=1,4)
      ENDIF
      II=0
      ENDIF
      ENDIF
C
 1897 CONTINUE
      IF(II.EQ.0)THEN
C**   A REST OF A ROW IS NOT FOLLOWING: THEREFORE AN EMPTY ROW!
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C**   IF II.NE.0, THERE IS A REST OF A ROW, WHICH FOLLOWS NOW!:
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,II)
      WRITE(11,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,II)
      ELSE
C**   NEARLY THE SAME, BUT MQUERR INSTEAD OF MQUER!
      WRITE(*,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUERR(REIHNF(NFOLGE(I)+I1)),I=1,II)
      WRITE(11,6149)(EIVECV(REIHNF(NFOLGE(I)+I1),J)
     1,REIHNF(NFOLGE(I)+I1),MQUERR(REIHNF(NFOLGE(I)+I1)),I=1,II)
      ENDIF
C**   END OF OUTPUT OF (PART OF) EIGENVECTOR J.
C
C**   NOW COMPUT. OF OCC. OF SPINORB.:
      IF(JAWIGN.NE.0)GOTO 786
C
      DO 2189 NR=1,NRELMX
      BESETZ(NR,1)=ZERO
 2189 CONTINUE
C
      DO 2897 IL=1,LOCKDN
      EIVECQ=EIVECV(REIHNF(IL+I1),J)**2
      DO 2119 NR=1,NREL
      ML=MSML(REIHNF(IL+I1),1,NR)
      ML=(ML+KLWERT)*2
      MS=MSML(REIHNF(IL+I1),2,NR)
      IF(MS.EQ.1)ML=ML+1
      ML=NRELMX-ML
      BESETZ(ML,1)=BESETZ(ML,1)+EIVECQ
 2119 CONTINUE
 2897 CONTINUE
C
      IF(LAUF4.EQ.0)THEN
      LAUF4=1
      WRITE(*,2281)
      WRITE(11,2281)
 2281 FORMAT(/,' OCCUP. OF SPIN'
     1,'ORB. OF 1ST EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP, 3 DOWN, ...:')
      ENDIF
      WRITE(*,2011)(BESETZ(II,1),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,1),II=1,NRELMX)
C
  786 CONTINUE
C
 1898 CONTINUE
C
 1101 CONTINUE
C**   1101 CONTINUE BEFORE <=> DO 1101 N=IEINZW,NBLOCK ...
C**   ... AND 897 CONTINUE FOLLOWING <=> IF(MOROUW.EQ.0)GOTO 897
C     (BOTH APPROX. 150 LINES ABOVE!)
  897 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1280)
 1279 WRITE(*,1280)
 1280 FORMAT(
     1' MOROUT.NE.0: INPUT IN 2I1 MOROUT-HERE-IN-BLOCUT; =0, 1 OR 2!'
     2,/,' VALID FOR THE 4TH AND 5TH PART OF BLOCUT, I.E. ALL VALUES/'
     3,/,' EIGENVEC. NOT ORDERED AND ORDERED RESP.!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3896)MOROUX,MOROUY
      GOTO 4896
      ENDIF
 3896 READ(*,'(2I1)',ERR=1279,END=4576)MOROUX,MOROUY
      LMN=1
 4896 WRITE(*,2265)MOROUX,MOROUY
      WRITE(11,2265)MOROUX,MOROUY
      WRITE(7,2256)MOROUX,MOROUY
 2256 FORMAT(2I1,' =MOROUX,MOROUY IN BLOCUT/4/5')
 2265 FORMAT(2I2,' =MOROUX,MOROUY IN BLOCUT/4/5!!!!!!!!!')
      ENDIF
C
      IF(MOROUX.GE.1)THEN
      WRITE(*,613)
      WRITE(11,613)
  613 FORMAT(/,' NOW (WERTZZ(J),J=1,JDIM), I.E. ALL EIGENVALUES:')
      WRITE(*,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      WRITE(11,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      IF(MOROUX.GE.2)THEN
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,1650)
      WRITE(11,1650)
 1650 FORMAT(' ... AND, BECAUSE MOROUT > 1, ALL EIGENVECTORS,'
     1,/,' I.E. COLUMNS, GIVEN HERE AS ROWS:')
      DO 188 J=1,JDIM
      WRITE(*,'(6E14.6)')(EIVECV(I,J),I=1,JDIM)
      WRITE(11,'(6E14.6)')(EIVECV(I,J),I=1,JDIM)
  188 CONTINUE
      ENDIF
      ENDIF
C
C     ORDERING OF ENERGIES AND EIGENVECTORS:
      JDIMM1=JDIM-1
      DO 7022 I=1,JDIMM1
      IP1=I+1
      TEMP=WERTZZ(I)
      JTEMP=I
      DO 7033 J=IP1,JDIM
      IF(WERTZZ(J).GE.TEMP)GOTO 7033
      TEMP=WERTZZ(J)
      JTEMP=J
 7033 CONTINUE
      IF(JTEMP.NE.I)THEN
      WERTZZ(JTEMP)=WERTZZ(I)
      WERTZZ(I)=TEMP
      DO 704 K=1,JDIM
      TEMP=EIVECV(K,JTEMP)
      EIVECV(K,JTEMP)=EIVECV(K,I)
      EIVECV(K,I)=TEMP
  704 CONTINUE
      ENDIF
 7022 CONTINUE
C
      IF(MOROUY.GE.1)THEN
      WRITE(*,6133)
      WRITE(11,6133)
 6133 FORMAT(/,' NOW (WERTZZ(J),J=1,JDIM) (CONSECUTIVELY ORDERED):')
      WRITE(*,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      WRITE(11,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      JDIM12=1
      IF(MOROUY.GE.2)JDIM12=JDIM
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,1878)
      WRITE(11,1878)
 1878 FORMAT(
     1' EIGENVECTOR(S), I.E. COLUMN(S), GIVEN AS ROW(S), ALSO ORDERED:')
      DO 187 J=1,JDIM12
      WRITE(*,'(6E14.6)')(EIVECV(I,J),I=1,JDIM)
      WRITE(11,'(6E14.6)')(EIVECV(I,J),I=1,JDIM)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
  187 CONTINUE
      ENDIF
C
      IF(LAUF3.NE.0.OR.MOROUT.EQ.0.OR.MOROUZ.EQ.8)GOTO 781
      IF(LAUF3.EQ.0)THEN
      LIMIT=10
      GRENZE=0.1D0
      WRITE(11,2193)LIMIT,GRENZE
 8223 WRITE(*,2193)LIMIT,GRENZE
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,F10.4)',ERR=5588,END=3897)LIMITI,GRENZD
      GOTO 4897
      ENDIF
 3897 READ(*,'(I4,F10.4)',ERR=8223,END=4576)LIMITI,GRENZD
      LMN=1
 4897 WRITE(*,2195)LIMITI,GRENZD
      WRITE(11,2195)LIMITI,GRENZD
      WRITE(7,2194)LIMITI,GRENZD
      IF(LIMITI.NE.0)LIMIT=LIMITI
      IF(LIMIT.LT.0)LIMIT=0
      IF(LIMIT.GT.JDIM)LIMIT=JDIM
      IF(GRENZD.NE.ZERO)GRENZE=GRENZD
      ENDIF
      LAUF3=1
C
      IIJJ=0
      IJ=0
      WRITE(*,2120)GRENZE,LIMIT
      WRITE(11,2120)GRENZE,LIMIT
 2120 FORMAT(' I, J, '
     1,'EIVEC(I,J) FOR ABS(EIVEC(I,J)).GE.',D8.1,' UNTIL LIMIT=',I9,/,' 
     2(PART OF) THE FIRST ROW CONTAINS (PART OF) THE FIRST EIGENVECTOR')
C
      DO 2192 J=1,LIMIT
      DO 2191 I=1,JDIM
C
      IF(DABS(EIVECV(I,J)).GE.GRENZE)THEN
      IIJJ=IIJJ+1
      IJ=IJ+1
      EIOUT(IJ)=EIVECV(I,J)
      IIEI(IJ)=I
      JJEI(IJ)=J
C
      IF(IJ.EQ.4)THEN
      WRITE(11,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
      IF(IIJJ.LE.24)
     1WRITE(*,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
 2122 FORMAT(4(2I4,D12.4))
      IJ=0
      ENDIF
      ENDIF
C
 2191 CONTINUE
 2192 CONTINUE
C
      WRITE(11,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
      IF(IIJJ.LE.24)
     1WRITE(*,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
C
      WRITE(*,2121)IIJJ,IIJJ
      WRITE(11,2121)IIJJ,IIJJ
 2121 FORMAT(
     1' No. OF VALUES=',I9,'; ON FILE11:',I9,'; MAX. 24 ON TERMINAL')
C
C**   NOW COMPUT. OF OCC. OF SPINORB.:
      IF(JAWIGN.NE.0)GOTO 3190
      IJ10=0
      DO 3192 J=1,LIMIT
C**   IJ10=0 STATEMENT BELOW, TOO!
      IJ10=IJ10+1
      DO 2190 NR=1,NRELMX
      BESETZ(NR,IJ10)=ZERO
 2190 CONTINUE
      DO 3191 I=1,JDIM
      EIVECQ=EIVECV(I,J)**2
      DO 2109 NR=1,NREL
      ML=MSML(I,1,NR)
      ML=(ML+KLWERT)*2
      MS=MSML(I,2,NR)
      IF(MS.EQ.1)ML=ML+1
      ML=NRELMX-ML
      BESETZ(ML,IJ10)=BESETZ(ML,IJ10)+EIVECQ
 2109 CONTINUE
 3191 CONTINUE
C
      IF(LAUF5.EQ.0)THEN
      LAUF5=1
      WRITE(*,2218)
      WRITE(11,2218)
 2218 FORMAT(/,' OCCUP. OF SPIN'
     1,'ORB., 1...TH EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP, 3 DOWN, ...')
      ENDIF
      IF(IJ10.EQ.10)THEN
      DO 2219 JJ=1,10
      WRITE(*,2011)(BESETZ(II,JJ),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,JJ),II=1,NRELMX)
 2219 CONTINUE
 2011 FORMAT(10F7.3)
      IJ10=0
      ENDIF
C
 3192 CONTINUE
C
      DO 2220 J=1,IJ10
      WRITE(*,2011)(BESETZ(I,J),I=1,NRELMX)
      WRITE(11,2011)(BESETZ(I,J),I=1,NRELMX)
 2220 CONTINUE
C
      IF(KLWERT.NE.2)GOTO 3920
C
      IF(LAUF5.EQ.1)THEN
      LAUF5=2
      WRITE(*,2182)
      WRITE(11,2182)
 2182 FORMAT(/,' D ORBITALS ONLY:',/,' OCCUP. OF '
     1,'SPINORB., 1...TH EIGENVEC., DX2-Y2-(SPIN)UP, DX2-Y2-DOWN,',/
     2,' DXZ-UP, DXZ-DOWN, DZ**2-UP, DZ**2-DOWN, DYZ-UP, DYZ-DOWN, DXY-'
     3,'UP, DXY-DOWN')
      IF(NGROUP.NE.8.AND.NGROUP.NE.22)THEN
      WRITE(11,3917)
 3916 WRITE(*,3917)
 3917 FORMAT(' D ORBITALS .AND. NGROUP.NE.8.AND.NGROUP.NE.22:',/,
     1' NO TRANSF. CORRESP. TO [111]-AXIS POSS.: INPUT 0 OR 1 IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3898)JANO
      GOTO 4898
      ENDIF
 3898 READ(*,'(I1)',ERR=3916,END=4576)JANO
      LMN=1
 4898 JANO=1
      WRITE(*,2820)JANO
      WRITE(11,2820)JANO
      WRITE(7,2821)JANO
      ENDIF
      ENDIF
      IF(NGROUP.NE.8.AND.NGROUP.NE.22)GOTO 3919
      IF(LAUF50.EQ.0)THEN
      LAUF50=1
      WRITE(11,3918)
 2822 WRITE(*,3918)
 3918 FORMAT(' D ORBITALS .AND. NGROUP.EQ.8.OR.NGROUP.EQ.22:',/,
     1' ORBITALS ARE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS'
     2,' AS Z-AXIS:',/,' PUT IN YES(0)/NO (IN I1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3899)JANO
      GOTO 4899
      ENDIF
 3899 READ(*,'(I1)',ERR=2822,END=4576)JANO
      LMN=1
 4899 WRITE(*,2820)JANO
      WRITE(11,2820)JANO
 2820 FORMAT(I2,' =JANO "TRANSF." IN BLOCUT!!!!!!!!!')
      WRITE(7,2821)JANO
 2821 FORMAT(I1,' =TRANSF. IN BLOCUT')
C
      IF(JANO.NE.0)GOTO 3919
      II=0
C**   ALL M RESP. M':
      DO 3211 I=2,-2,-1
      II=II+1
C**   e**(-i*PHI) WITH PHI=A(LPHA) OR =G(AMMA):
      RAMM55(II)=DCMPLX(COS(PIV*I),-SIN(PIV*I))
      RGMM55(II)=DCMPLX(ONE,ZERO)
 3211 CONTINUE
      ENDIF
      IF(JANO.NE.0)GOTO 3919
C
C**   CPLXIJ IS COMPLEX, BUT IN PRINCIPLE UP TO NOW THE SAME AS REAL TRRL55! NOW
C     NEW CPLXIJ (CPLXIJ NEEDED FOR "TRANSFORMATION" INTO CUB(II)/D3d):
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7821)
      WRITE(11,7821)
 7821 FORMAT(' ALPHA PART:')
      WRITE(*,5828)(RAMM55(JJ),JJ=1,5)
      WRITE(11,5828)(RAMM55(JJ),JJ=1,5)
      WRITE(*,7822)
      WRITE(11,7822)
 7822 FORMAT(' GAMMA PART:')
      WRITE(*,5828)(RGMM55(JJ),JJ=1,5)
      WRITE(11,5828)(RGMM55(JJ),JJ=1,5)
      WRITE(*,7823)
      WRITE(11,7823)
 7823 FORMAT(' BETA PART MATRIX:')
      DO 5843 K=1,5
      WRITE(*,5882)(RBMM55(K,JJ),JJ=1,5)
      WRITE(11,5882)(RBMM55(K,JJ),JJ=1,5)
 5843 CONTINUE
C5882 FORMAT(10D14.6)
      ENDIF
      DO 8924 J=1,5
      DO 8923 I=1,5
C**   COMPLEX R**(2)(2,1) = RAMM55(2)*RBMM55(2,1)*RGMM55(1):
      CPLXIJ(I,J)=RAMM55(I)*DCMPLX(RBMM55(I,J),ZERO)*RGMM55(J)
 8923 CONTINUE
 8924 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7824)
      WRITE(11,7824)
 7824 FORMAT(' COMPLEX MATRIX RESULTING FROM ALPHA, BETA AND GAMMA:')
      DO 5824 K=1,5
      WRITE(*,5828)(CPLXIJ(K,JJ),JJ=1,5)
      WRITE(11,5828)(CPLXIJ(K,JJ),JJ=1,5)
 5824 CONTINUE
C5828 FORMAT(10D14.6)
      ENDIF
C
      IF(LAUF49.EQ.0)THEN
      LAUF49=1
      WRITE(11,3981)
 2823 WRITE(*,3981)
 3981 FORMAT(' D ORBITALS .AND. NGROUP.EQ.8.OR.NGROUP.EQ.22:',/,
     1' ORBITALS ARE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS'
     2,' AS Z-AXIS,',/,' BUT NOT TO REAL OR PURELY IMAGINARY'
     3,' BASIS ORBITALS: PUT IN YES/NO(0) (IN I1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3400)JANOO
      GOTO 4900
      ENDIF
 3400 READ(*,'(I1)',ERR=2823,END=4576)JANOO
      LMN=1
 4900 WRITE(*,2820)JANOO
      WRITE(11,2820)JANOO
C2820 FORMAT(I2,' =JANO "TRANSF." IN BLOCUT!!!!!!!!!')
      WRITE(7,2821)JANOO
C2821 FORMAT(I1,' =TRANSF. IN BLOCUT')
      IF(JANOO.NE.0)THEN
      WRITE(*,2812)
      WRITE(11,2812)
 2812 FORMAT(' OUTPUT CORRESP. TO THE FOLLOWING HEADER WAS SELECTED:')
      WRITE(*,2218)
      WRITE(11,2218)
      ENDIF
      ENDIF
C
      IF(JANOO.NE.0)GOTO 3991
C**   NOW THE FINAL CPLXIJ NEEDED FOR "TRANSFORMATION" IN CUB(II)/D3d!
C     (MULTIPL. OF MATRICES TRRL55 AND CPLXIJ (IN THIS ORDER) CORRESP. TO
C     TRANSFORM. AND ROTATION, RESPECTIVELY (BUT TO BE PERFORMED FROM
C     RIGHT TO LEFT!) TO COEFF. OF REAL OR PURELY IMAGINARY BASIS ORBITALS):
C
      DO 2446 K=1,5
      DO 5446 J=1,5
      CPXROW(J)=DCMPLX(ZERO,ZERO)
      DO 5442 I=1,5
      CPXROW(J)=CPXROW(J)+DCMPLX(TRRL55(J,I),ZERO)*CPLXIJ(I,K)
 5442 CONTINUE
 5446 CONTINUE
      DO 1446 JJ=1,5
      CPLXIJ(JJ,K)=CPXROW(JJ)
 1446 CONTINUE
 2446 CONTINUE
C
 3919 CONTINUE
C**   BELONGS TO "IF(NGROUP.NE.8.AND.NGROUP.NE.22)GOTO 3919" .AND. TO
C     "IF(JANO.NE.0)GOTO 3919"
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7826)
      WRITE(11,7826)
 7826 FORMAT(' MATRIX'
     1,' NEEDED FOR TRANSF. INTO REAL OR PURELY IMAG. BASIS ORBITALS:')
      DO 5842 K=1,5
      WRITE(*,5882)(TRRL55(K,JJ),JJ=1,5)
      WRITE(11,5882)(TRRL55(K,JJ),JJ=1,5)
 5842 CONTINUE
 5882 FORMAT(10D14.6)
      ENDIF
 3991 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7827)
      WRITE(11,7827)
 7827 FORMAT(' RESULTING'
     1,' (AT LEAST FORMALLY) COMPLEX MATRIX FOR TRANSFORMATION:')
      DO 5859 K=1,5
      WRITE(*,5828)(CPLXIJ(K,JJ),JJ=1,5)
      WRITE(11,5828)(CPLXIJ(K,JJ),JJ=1,5)
 5859 CONTINUE
 5828 FORMAT(10D12.4)
      ENDIF
C
      IF(LAUF51.EQ.0)THEN
      LAUF51=1
C**   CALCULATION OF MWMSML AND NRCOMB:
      NRELM1=NREL-1
      NRMXDI=2*(2*KLWERT+1)
      DO 33 N=1,NRELM1
      MWM(N,1)=NRMXDI-N
      MWM(N,2)=NRELM1-N
   33 CONTINUE
C
      NRCOMB=1
      IF(NRELM1.NE.0)THEN
      NRCOMB=0
C**   INFINITE LOOP:
  199 CONTINUE
      II=NRELM1
      NRCOMB=NRCOMB+1
      IF(NRCOMB.GT.252)STOP 'NRCOMB'
      DO 21 N=1,NRELM1
      MWMSML(NRCOMB,N)=MWM(N,1)
   21 CONTINUE
      MWM(II,1)=MWM(II,1)-1
   22 CONTINUE
      IF(MWM(II,1).LT.MWM(II,2))THEN
      II=II-1
      IF(II.EQ.0)GOTO 55
      MWM(II,1)=MWM(II,1)-1
      GOTO 22
      ENDIF
      IIP1=II+1
      DO 3 I=IIP1,NRELM1
      IM1=I-1
      MWM(I,1)=MWM(IM1,1)-1
    3 CONTINUE
      GOTO 199
   55 CONTINUE
      ENDIF
C
      ENDIF
C
      IJ10=0
      DO 5830 J=1,LIMIT
C**   IJ10=0 STATEMENT BELOW, TOO!
      IJ10=IJ10+1
      DO 5831 NR=1,NRELMX
      BESETZ(NR,IJ10)=ZERO
 5831 CONTINUE
C
C      WRITE(*,5813)J
C      WRITE(11,5813)J
C 5813 FORMAT(' NEW EIGENVECTOR NOW, NO.=',I6)
CCCCCCCCC
C      ISUM=0
C**   KASSUM=JDIM
C**   THE FOLLOWING DO LOOP FOR SPIN UP AND SPIN DOWN OF 1TH EL.:
      DO 5820 NIPSUP=1,0,-1
C**   THE FOLLOWING DO LOOP FOR EACH COMBINATION OF QUANTUM NUMBERS OF OTHER ELECTRONS:
      DO 5821 NSTEP=1,NRCOMB
CCCCCCCCC
C      WRITE(*,5819)NSTEP
C      WRITE(11,5819)NSTEP
C 5819 FORMAT(' NSTEP=',I8)
C**   FOR EACH ROW OF MATRIX CPLXIJ FOR LINEAR COMBINATION:
      DO 5822 NRROW=1,5
C**   LINEAR COMBINATION - ONE(!) ROW:
      COMSUM=DCMPLX(ZERO,ZERO)
      DO 5823 KOLUMN=1,5
C     ... AND THIS NUMBER IS NOW TRANSLATED INTO THE ROW NUMBER, IF IT EXISTS,
C     OF THE EIGENVECTOR CONCERNED:
      NDIGIT(1)=9-(KOLUMN-1)*2
      IF(NIPSUP.EQ.0)NDIGIT(1)=8-(KOLUMN-1)*2
      DO 2826 JJ=1,NRELM1
      JJP1=JJ+1
      NDIGIT(JJP1)=MWMSML(NSTEP,JJ)
 2826 CONTINUE
CCCCCCCCC
C      WRITE(*,5829)(NDIGIT(JJ),JJ=1,NREL)
C      WRITE(11,5829)(NDIGIT(JJ),JJ=1,NREL)
C 5829 FORMAT(' (NDIGIT(JJ),JJ=1,NREL)=',I6,4I4)
      MP=1
C**   PERMUTATION/ ORDERING OF DIGITS. IF ANY 2 DIGITS ARE THE SAME, MP=0:
      DO 2828 JJ=1,NRELM1
      JP1=JJ+1
      DO 2829 I=JP1,NREL
      IF(NDIGIT(JJ).EQ.NDIGIT(I))THEN
      MP=0
      GOTO 2830
      ENDIF
      IF(NDIGIT(JJ).LT.NDIGIT(I))THEN
      MP=MP*(-1)
      ITEMP=NDIGIT(JJ)
      NDIGIT(JJ)=NDIGIT(I)
      NDIGIT(I)=ITEMP
      ENDIF
 2829 CONTINUE
 2828 CONTINUE
      DO 2824 JJ=-2,2
      DO 2825 I=1,2
      MSMLNS(I,JJ)=0
 2825 CONTINUE
 2824 CONTINUE
      DO 2827 JJ=1,NREL
      IODD=MOD(NDIGIT(JJ),2)
      NR=((NDIGIT(JJ)-IODD)/2)-2
      IF(IODD.EQ.1)THEN
      MSMLNS(1,NR)=1
      ELSE
      MSMLNS(2,NR)=-1
      ENDIF
 2827 CONTINUE
CCCCCCCCC
C      WRITE(*,'(5I3)')((MSMLNS(II,III),III=-2,2),II=1,2)
C      WRITE(11,'(5I3)')((MSMLNS(II,III),III=-2,2),II=1,2)
C      ISUM=ISUM+1
C      WRITE(*,2847)MP,NSTEP,ISUM
C      WRITE(11,2847)MP,NSTEP,ISUM
C 2847 FORMAT(' MP,NSTEP,ISUM=',3I6)
C
 2830 CONTINUE
      NRLIN=0
      CEMPEI=DCMPLX(ZERO,ZERO)
      IF(MP.NE.0)THEN
C**   NRLIN = "NR OF LINE" RETURNS!
      CALL NUMBER(NRLIN,MSMLNW,MSMLNS,ND2002,KLWERT,JDIM,KLWER3)
      CEMPEI=DCMPLX(EIVECV(NRLIN,J),ZERO)*DCMPLX(DBLE(MP),ZERO)
CCCCCCCCC
C      WRITE(*,5827)NRLIN
C      WRITE(11,5827)NRLIN
C 5827 FORMAT(' NRLIN=',I4)
      ENDIF
      COMSUM=COMSUM+CPLXIJ(NRROW,KOLUMN)*CEMPEI
 5823 CONTINUE
C**   CONTINUE BEFORE BELONGS TO DO LOOP "LINEAR COMBINATION - 1 ROW", KOLUMN=1,5
      BESETZ(NRROW*2-NIPSUP,IJ10)=BESETZ(NRROW*2-NIPSUP,IJ10)
     1+DBLE(COMSUM*DCONJG(COMSUM))
 5822 CONTINUE
 5821 CONTINUE
 5820 CONTINUE
C
      IF((NGROUP.EQ.8.OR.NGROUP.EQ.22).AND.JANO.EQ.0)THEN
      IF(KLIK.EQ.0)THEN
      KLIK=1
      WRITE(*,5801)
      WRITE(11,5801)
 5801 FORMAT(' HINT: "SPIN UP" MEANS NOW "SPIN IN [111]-DIRECTION"!')
      ENDIF
      DO 5809 K=1,9,2
      KP1=K+1
      TMPSTO=BESETZ(K,IJ10)*COSB2Q+BESETZ(KP1,IJ10)*SINB2Q
      BESETZ(KP1,IJ10)=BESETZ(K,IJ10)*SINB2Q+BESETZ(KP1,IJ10)*COSB2Q
      BESETZ(K,IJ10)=TMPSTO
 5809 CONTINUE
      ENDIF
C
      IF(IJ10.EQ.10)THEN
      DO 5825 JJ=1,10
      CONTRL=ZERO
      CONTRM=ZERO
      DO 2921 II=1,NRELMX
      CONTRL=CONTRL+BESETZ(II,JJ)
      IF(MOD(II,2).NE.0)CONTRM=CONTRM+BESETZ(II,JJ)
 2921 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,5834)CONTRL,CONTRM
      WRITE(11,5834)CONTRL,CONTRM
 5834 FORMAT(' SUM OF NEXT ROW, AND SUM, BUT SPIN UP ONLY, =',2D16.8)
      ENDIF
C
      WRITE(*,2011)(BESETZ(II,JJ),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,JJ),II=1,NRELMX)
 5825 CONTINUE
C2011 FORMAT(10F7.3) - SEE BEFORE!
      IJ10=0
      ENDIF
C
 5830 CONTINUE
C**   BELONGS TO "DO 5830 J=1,LIMIT" <=> "NEW EIGENVECTOR"!
C
      DO 5826 J=1,IJ10
      CONTRL=ZERO
      CONTRM=ZERO
      DO 2920 II=1,NRELMX
      CONTRL=CONTRL+BESETZ(II,J)
      IF(MOD(II,2).NE.0)CONTRM=CONTRM+BESETZ(II,J)
 2920 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,5834)CONTRL,CONTRM
      WRITE(11,5834)CONTRL,CONTRM
      ENDIF
C
      WRITE(*,2011)(BESETZ(I,J),I=1,NRELMX)
      WRITE(11,2011)(BESETZ(I,J),I=1,NRELMX)
 5826 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C**   END OF "TRANSFORMATION"!
C
 3920 CONTINUE
C**   BELONGS TO "IF(KLWERT.NE.2)GOTO 3920"
C
      WRITE(*,2123)LIMIT
      WRITE(11,2123)LIMIT
 2123 FORMAT(
     1' OCCUP. OF SPINORB. OF EIGENVEC. 1...LIMIT=',I5,' WERE LISTED!')
 3190 CONTINUE
C**   781 CONTINUE FOLLOWING <=> IF(LAUF3.NE.0.OR.MOROUT.EQ.0.OR.MOROUZ.EQ.8)
C     GOTO 781
  781 CONTINUE 
C
C**   RETURNS TO TANABE OR TO ECKART!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND BLOCUT
      END
CEND-FILE TANABE.F
      SUBROUTINE REDUCT(NGROUP,NOFORM,
C     CALLED BY TANABE! - NEEDS NUMBER! - CALLS SELECT!
C**   SUBROUTINE REDUC-T(ANABE) CALCULATES FMAT AND GMAT WITH DIMENSIONS
C     UP TO THE MAXIMUM, WHICH IS POSSIBLE FOR D ELECTRONS, AND WHICH IS
C     (ND252=) 252, BUT A REDUCTION OF THE NUMBER OF EIGENVALUES AND
C     EIGENVECTORS IS POSSIBLE AND NEEDED FOR MANY CASES OF F ELECTRONS. THE
C     BASIS FOR THE PERTURBATION OPERATOR FMAT (WITH THE RESP. G-FACTOR INCL.)
C     IS THAT OF THESE EIGENVECTORS AND NOT THAT OF MICRO STATES. IN ADDITION
C     TO ITS USE FOR PERTURBATION THEORY OF FIRST ORDER, THIS OPERATOR IS ALSO
C     USED TO TAKE INTO ACCOUNT THE ENERGY OF A (E.G. STRONG) MAGNETIC FIELD.
C     (FOR "VANVLECK" WITH MAGNETIC FIELD FORMALLY ZERO, IT IS USED FOR 2ND
C     ORDER PERTURBATION THEORY.) (THERE IS NO ORBITAL CONTRIBUTION IN GMAT,
C     AND THE G-FACTOR IS FORMALLY ONE, BECAUSE GMAT IS USED FOR HEISENBERG
C     COUPLING, AND NO MAGNETIC FIELD IS CONCERNED!)
C     A FURTHER BASIS CHANGE MAY BE MADE IN SUBROUTINE TANFEL, BUT ONLY FOR
C     F ELECTRONS. ASIDE FROM SERVING AS A TEST, THIS BASIS CHANGE IS NEEDED TO
C     SPEED UP COMPUTATION BY OPTION "JAFAST" (MORE TIME NEEDED FOR 0TH ITER.)!
C     ("JAFAST" IS FASTER ONLY FOR MORE THEN A FEW AND LESS THEN NEARLY ALL EL.)
C
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCT, THE PRESENT SUBROUTINE:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV,BSTART
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,CRZMAT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/ABC/MNUR4(2,2),MNUR4C(2,2)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/MIRROV/FACZ,FACXY,MIRROW
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6)
C**   FOR SUGANR/C/H/K TO BE CALCULATED ("INTERFACE"):
      DIMENSION EIWERT(*),FMAT(ND252,ND252,5)
     1,GMAT(ND252,ND252,3),GFACT(10),FMATZ(10,10)
C**   FOR SUBROUTINE TANABE IN ADDITION:
     1,FMIKR2(ND2002,*),MULMUL(13),MULMUD(9)
C**   FOR SUBROUTINE REDUCT, THE PRESENT SUBROUTINE:
     2,EIVECV(ND2002,*),REDFAZ(3),MQUER(ND2002,3)
     3,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNS(2,-KLWER3:KLWER3)
     4,NROFNR(ND2002),NOFROW(ND2002,I10),FMIKR3(ND2002,NDS66)
     5,EIVSHT(ND2002,I10)
      DIMENSION GFAMST(2,2),EIWMST(2),EIVMST(2,2)
      SAVE
C**   (I)10 = MAX. OF POSS. FOR ANY MICRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
C     CORRESP. TO SMALLEST J VALUE: /6,9,10,9,6,1,8,1,6,9,10,9,6/
C     ... AND CORR. TO LARGEST J VALUE: /8,13,16,17,16,13,8,13,16,17,16,13,8/
C**   (SPIN-)MULTIPL.*(ORB.-)MULTIPL.= (MAX=66; DY):
      DATA MULMUL/14,33,52,65,66,49,8,49,66,65,52,33,14/
      DATA MULMUD/10,21,28,25,6,25,28,21,10/
C
C     NEUEBS=1: NEW B-VALUES; IF NEUEBS=0, NO REDUCTION NECESSARAY IN THE
C     2ND ETC. RUN! IF NEUEBS.NE.0 AND JAFAST.NE.0, NO REDUCTION HERE IN THE
C     2ND ETC. RUN, BUT AN OTHER SORT OF REDUCTION, CONCERNING B-VALUES, TAKES
C     PLACE IN TANFEL (EXTENSION TO TANABE ONLY AND ESPECIALLY FOR F EL.)!
C
C**   CALCULATION FOR CRYSTAL FIELD ABOVE IN TANABE ONLY IN THE FIRST RUN,
C     IF JAFAST.NE.0, ALTHOUGH NEUEBS MAY BE .NE.0!: SEE BELOW "9976 CONTINUE"!
      DATA KLICK1,KLICK2,MOROUU,KLICKH,FACZ,FACXY/0,0,0,0,1.0D0,1.0D0/
      DATA KLICK3,KLICKM,MOROUV,KLICK4,KLICK5,KLICK6/0,0,0,0,0,0/
C
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(KLICK1.NE.0.OR.JAFAST.NE.0)GOTO 9976
C     (JAFAST.EQ.2 <=> INTERFACE WAS READ IN FORMAT FREE)
C**   THE VERY FIRST RUN!:
      KLICK1=1
C
      KLWRTP=KLWERT+1
      KLWRTM=KLWERT-1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8232 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-REDUCT; =0, 1, 2 OR 3!',
     2/,' (+5, I.E. 5, 6, 7 OR 8, FOR OUTPUT OF G-FACTORS(S) IN ADD.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3401)MOROUU
      GOTO 4901
      ENDIF
 3401 READ(*,'(I1)',ERR=8232,END=4576)MOROUU
      LMN=1
 4901 WRITE(*,2572)MOROUU
      WRITE(11,2572)MOROUU
 2572 FORMAT(I2,' =MOROUU IN REDUCT!!!!!!!!!')
      WRITE(7,2257)MOROUU
 2257 FORMAT(I1,' =MOROUU IN REDUCT')
      IF(MOROUU.GE.5)THEN
      MOROUU=MOROUU-5
      MOROUV=1
      ENDIF
      ENDIF
C
      NRVAL=KASSUM
      NRVALF=0
      WRITE(*,1145)KASSUM
      WRITE(11,1145)KASSUM
 1145 FORMAT(/,' No. OF MICRO STATES =',I5)
C**   JAFAST=0 BECAUSE OF DATA STATEMENT IN SUBR. SUSFIT! 
C**   NO PROBLEM AT ALL FOR S OR P ELECTRONS:
      IF(KLWERT.LE.1)GOTO 1146
      IF(KLWERT.EQ.3)THEN
      WRITE(11,1147)JMULTI(NREL),MULMUL(NREL)
      WRITE(*,1147)JMULTI(NREL),MULMUL(NREL)
 1147 FORMAT(' MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE FOR F' 
     1,' EL.',/,' AND (SPIN-)MULTIPL.*(ORB.-)MULTIPL. ARE =',2I3)
      IF(NREL.EQ.5.OR.NREL.EQ.6.AND.LESS.EQ.0)THEN
      WRITE(*,1144)
      WRITE(11,1144)
 1144 FORMAT(
     1' INPUT BELOW (A PART OF) THE SUM OF 6+8+10+12+14+16=66(=(2*5/2+1'
     2,')*(2*5+1))',/,' FOR SM RESP. 1+3+5+7+9+11+13=49(=(2*3+1)*(2*3+1'
     3,')) FOR EU,',/,' 66 AND 49 RESP. FOR "JAFAST", IF "JAFAST"!')
      ENDIF
      ENDIF
C
      IF(KLWERT.EQ.3.OR.JATEST.NE.0)THEN
      WRITE(*,1115)JAFITB
      WRITE(11,1115)JAFITB
 1115 FORMAT(/,' B-WYBOURNE VALUES (I.E 1...11 VALUES) WILL BE FITTED NO
     1W YES/NO(0):',I2,/
     1,' IF FITTING TAKES PLACE NOW OR LATER ON, OR FOR TEST PURPOSES:')
      WRITE(11,1151)
 8233 WRITE(*,1151)
 1151 FORMAT(' INPUT IN I1 YES/NO(0) "JAFAST" TO SPEED UP COMPUTATION!'
     1,/,' BUT ATTENTION: RESULT OF FITTING HAS TO BE VERIFIED!',/,
     2' (FASTER ONLY FOR MORE THEN A FEW AND LESS THEN NEARLY ALL (F-) E
     3L.,',/,' AND A LITTLE MORE TIME IS NEEDED FOR 0TH ITERATION)'
     4,/,' (JAFAST BECOMES 1 AUTOMATICALLY FOR WRITING FORMAT FREE => FI
     5LE fort.13)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3402)JAFASS
      GOTO 4902
      ENDIF
 3402 READ(*,'(I1)',ERR=8233,END=4576)JAFASS
      LMN=1
 4902 WRITE(7,2258)JAFASS
 2258 FORMAT(I1,' =JAFAST("faster")')
      WRITE(*,2582)JAFASS
      WRITE(11,2582)JAFASS
 2582 FORMAT(I2,' =JAFAST("faster")!!!!!!!!!')
      IF(NOFORM.EQ.0)THEN
      JAFAST=JAFASS
      ELSE
      JAFAST=1
      ENDIF
      IF(NOFORM.NE.0.AND.JAFASS.EQ.0)THEN
      WRITE(*,2009)
      WRITE(11,2009)
 2009 FORMAT(' JAFAST=0 NOT POSSIBLE, BECAUSE INTERFACE',/
     1,' FORMAT FREE => FILE fort.13!')
      ENDIF
      IF(JAFAST.NE.0)THEN
      NRVALF=NDS66
      IF(KLWERT.EQ.3)NRVALF=MULMUL(NREL)
C**   ... ONLY FOR F EL.!
      NRVALI=0
      IF(LESS.EQ.0)THEN
      WRITE(*,1184)
      WRITE(11,1184)
 1184 FORMAT(' NOW, BECAUSE JAFAST > 0, FIRSTLY FOR SUBROUTINE TANFEL:',
     1/,' (AND FOR DIMENSION OF "OLD" FMAT AND GMAT HERE IN REDUCT!)')
      WRITE(11,1185)NDS66
 8234 WRITE(*,1185)NDS66
 1185 FORMAT(/,' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,
     1' (0 => "PRE-OCC." (SEE ABOVE: (SPIN-)MULTIPL.*(ORB.-)MULTIPL.))',
     2/,' THE MAX. POSS.: THE No. OF MICRO STATES OR NDS66! NDS66=',I4,
     3/,' ("PRE-OCC." FOR D ELECTRONS (TEST ONLY!) IS NDS66!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3403)NRVALI
      GOTO 4903
      ENDIF
 3403 READ(*,'(I3)',ERR=8234,END=4576)NRVALI
      LMN=1
 4903 WRITE(*,2592)NRVALI
      WRITE(11,2592)NRVALI
 2592 FORMAT(I4,' =NRVALI(for JAFAST)!!!!!!!!!')
      WRITE(7,2259)NRVALI
 2259 FORMAT(I3,' =NRVALI(for JAFAST)')
      IF(NRVALI.GT.0)NRVALF=NRVALI
      IF(NRVALF.GT.NDS66)NRVALF=NDS66
      ENDIF
      IF(NRVALF.GT.KASSUM)NRVALF=KASSUM
      IF(IOPT2.EQ.2.AND.NRVALF.LT.JMULTI(NREL))THEN
      NRVALF=JMULTI(NREL)
      WRITE(*,1186)
      WRITE(11,1186)
 1186 FORMAT(' BECAUSE "COMBINED MODEL", "No. OF VALUES" CHANGES:')
      ELSE
      WRITE(*,1187)
      WRITE(11,1187)
 1187 FORMAT(' "No. OF VALUES" FOR "JAFAST", INPUT AND CORR. VAL.:')
      ENDIF
      WRITE(*,'(2I5)')NRVALI,NRVALF
      WRITE(11,'(2I5)')NRVALI,NRVALF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(JAFAST.NE.0)THEN" ... NOT ONLY FOR F EL.!
      ENDIF
C
      IF(KLWERT.EQ.3)THEN
      IF(IOPT2.EQ.0)THEN
C**   F ELECTRONS, "SINGLE ION":
      NRVAL=MULMUL(NREL)
      IF(LESS.EQ.0)THEN
      WRITE(*,1148)ND252
      WRITE(11,1148)ND252
 1148 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,
     1' (0 => "PRE-OCC." <=> (SEE ABOVE:) (SPIN-)MULTIPL.*(ORB.-)MULTIPL
     2.)',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND252! ND252=
     3',I4)
      IF(JAFAST.NE.0)THEN
      WRITE(*,1175)NRVALF
      WRITE(11,1175)NRVALF
 1175 FORMAT(' JAFAST.NE.0: THE MAX. POSS. IS NRVALF =',I4)
      ENDIF
      ENDIF
      ELSE IF(IOPT2.EQ.1)THEN
C**   F ELECTRONS, "DIMER" (BUT NOT COMBINED MODEL!):
      NRVAL=JMULTI(NREL)
      IF(LESS.EQ.0)THEN
      WRITE(*,1149)ND28
      WRITE(11,1149)ND28
 1149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 ='
     1,'> "PRE-OCC." (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VA'
     2,'LUE))',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND28! N'
     3,'D28=',I3)
      WRITE(*,1150)NDS66
      WRITE(11,1150)NDS66
 1150 FORMAT(' BUT THE No. SHOULD BE LOWER THAN 18 (E.G. 17 FOR HO)'
     1,/,' (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VALUE!)'
     2,/,' HINT: IN THE CASE OF "NOT a symmetrical dimer",',/
     2,' THE MAX. POSS. IS THE No. OF MICRO STATES OR NDS66! NDS66=',I3)
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "F EL. - SINGLE ION OR ("ELSE") DIMER"!
      ELSE IF(KLWERT.EQ.2)THEN
      IF(IOPT2.EQ.0)THEN
C**   D ELECTRONS, "SINGLE ION":
      NRVAL=ND252
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
      IF(LESS.EQ.0)THEN
      WRITE(*,2184)ND252
      WRITE(11,2184)ND252
 2184 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 '
     1,'=> "PRE-OCC.", WHICH IS =No.OF STATES OR =ND252, =',I5,')')
      IF(JAFAST.NE.0)THEN
      WRITE(*,2185)NRVALF
      WRITE(11,2185)NRVALF
 2185 FORMAT(
     3' BECAUSE JAFAST.NE.0 ("TEST"), THE MAX. POSS. IS NRVALF = ',I4)
      ENDIF
      ENDIF
      ELSE IF(IOPT2.EQ.1)THEN
C**   D ELECTRONS, "DIMER" (IOPT2=2 NOT POSS. AT ALL!):
      NRVAL=MULMUD(NREL)
      WRITE(*,2149)NRVAL,ND28
      WRITE(11,2149)NRVAL,ND28
 2149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/
     1' (0 => "PRE-OCC." <=> (SPIN-)MULTIPL.*(ORB.-)MULTIPL.;',/,
     2' THE MAX. POSS. IS ND28! THESE ARE =',2I3,')')
      ENDIF
C**   ENDIF BEFORE BELONGS TO "D EL. - SINGLE ION OR ("ELSE") DIMER"!
      ENDIF
C**   ENDIF BEFORE BELONGS TO "KLWERT.EQ.3 OR .EQ.2"!
C
C**   NOW BOTH, KLWERT=2 AND KLWERT=3:
      IF(IOPT2.NE.2)THEN
      IF(LESS.EQ.0.OR.(IOPT2.EQ.1.AND.KLWERT.EQ.2))THEN
 8235 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3404)NRVALI
      GOTO 4904
      ENDIF
 3404 READ(*,'(I3)',ERR=8235,END=4576)NRVALI
      LMN=1
 4904 WRITE(*,2137)NRVALI
      WRITE(11,2137)NRVALI
 2137 FORMAT(I4,' =NRVALI(No. OF STATES)!!!!!!!!!')
      WRITE(7,2371)NRVALI
 2371 FORMAT(I3,' =NRVALI(No. OF STATES)')
      IF(NRVALI.GT.0)NRVAL=NRVALI
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
C**   BUT THE ABS. MAXIMUM POSSIBLE IS:
      IF(NRVAL.GT.ND252)NRVAL=ND252
C**   FOR RESTRICTION(S) IN THE CASE OF "JAFAST.NE.0" SEE BELOW!
C**   NEXT LINE FOR "DIMER" - D AND/OR F EL.!:
      IF(IOPT2.NE.0.AND.NRVAL.GT.NDS66)NRVAL=NDS66
      IF(IOPT2.NE.0.AND.NRVAL.GT.ND28)THEN
      WRITE(*,8334)
      WRITE(11,8334)
 8334 FORMAT(' NRVAL.GT.ND28: INPUT IN I1 YES/NO(0) "O.K."!')
 8335 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3405)JAOK
      GOTO 4905
      ENDIF
 3405 READ(*,'(I1)',ERR=8335,END=4576)JAOK
      LMN=1
 4905 WRITE(*,8337)JAOK
      WRITE(11,8337)JAOK
 8337 FORMAT(I2,' <=O.K.!!!!!!!!!')
      WRITE(7,8336)JAOK
 8336 FORMAT(I1,' <=O.K.')
      IF(JAOK.EQ.0)NRVAL=ND28
      ENDIF
      WRITE(*,9213)NRVALI,NRVAL
      WRITE(11,9213)NRVALI,NRVAL
 9213 FORMAT(' No. OF VALUES (INPUT AND CORR.) =',2I5,/)
      ENDIF
      ELSE IF(IOPT2.EQ.2)THEN
C**   "COMBINED MODEL"!
      NRVAL=JMULTI(NREL)
      WRITE(*,9214)NRVAL
      WRITE(11,9214)NRVAL
 9214 FORMAT(' No. OF VALUES FOR "COMBINED MODEL" =',I3)
      ENDIF
C
 1146 CONTINUE
C**   BELONGS TO "IF(KLWERT.LE.1)GOTO 1146"
C
C**   THE "LATER" MATRICES MUST NOT BE GREATER THEN THE "FORMER"!:
      IF(NRVAL.GT.NRVALF.AND.NRVALF.NE.0)THEN
      WRITE(*,1174)NRVAL,NRVALF
      WRITE(11,1174)NRVAL,NRVALF
 1174 FORMAT(' ERROR:',I4,'=NRVAL > NRVALF=',I4,': NRVAL => =NRVALF')
      NRVAL=NRVALF
      ENDIF
      NRVALX=NRVAL
      IF(NRVALF.GT.NRVAL)NRVALX=NRVALF
C
 9976 CONTINUE
C**   BELONGS TO "IF("NOT THE VERY FIRST RUN")GOTO 9976"
C
      IF(JAFAST.GT.1)GOTO 9977
C     (JAFAST.EQ.2 <=> INTERFACE WAS READ IN FORMAT FREE)
      IF(KLICK2.NE.0.AND.(NEUEBS.EQ.0.OR.JAFAST.NE.0))GOTO 9977
      KLICK2=1
C
      DO 1247 J=1,NRVALX
      DO 7146 I=1,KASSUM
      IF(DABS(EIVECV(I,J)).LT.PARWUR)EIVECV(I,J)=ZERO
 7146 CONTINUE
 1247 CONTINUE
C
      DO 1246 K=1,5
      DO 7147 J=1,NRVALX
      DO 7148 I=1,NRVALX
      FMAT(I,J,K)=ZERO
      IF(K.LE.3)GMAT(I,J,K)=ZERO
 7148 CONTINUE
 7147 CONTINUE
 1246 CONTINUE
C
C**   FOR THE PERTURBATION-OPERATOR: FMAT (WITH THE RESP. G-FACTOR INCL.)
C     (GMAT RESERVED FOR OTHER PURPOSES - GFACTOR IS ONE THERE (BECAUSE NO
C     MAGN. FIELD CONCERNED!) - NO ORBITAL CONTRIBUTIONS THERE!):
C
C**   FIRSTLY THE Z-DIRECTION (FMAT(,,1)):
      DO 1445 IE=1,NRVALX
      DO 2445 IEI=IE,NRVALX
C
      EIVECF=ZERO
      EIVECG=ZERO
      DO 5441 I=1,KASSUM
      EIVECQ=EIVECV(I,IE)*EIVECV(I,IEI)
      EIVECF=EIVECF+EIVECQ*DBLE(MQUER(I,1))
C**   GRIFFITH P.284,EQ.(10.43) FOR ORBITAL REDUCTION ("REDFAZ()")!
      EIVECG=EIVECG+EIVECQ*DBLE(MQUER(I,2))
 5441 CONTINUE
      EIVECG=EIVECG*HALF
C
      FMAT(IE,IEI,1)=EIVECF
C**   FMAT(,,1) AND GMAT(,,1) ARE SYMM.!:
      FMAT(IEI,IE,1)=EIVECF
      GMAT(IE,IEI,1)=EIVECG
      GMAT(IEI,IE,1)=EIVECG
C
 2445 CONTINUE
 1445 CONTINUE
C
      IF(KLICKM.EQ.0.AND.(MOROUV.NE.0.OR.JATEST.NE.0))THEN
      KLICKM=1
C
      DO 4148 IE=1,10
      DO 4248 IEI=1,10
      FMATZ(IEI,IE)=FMAT(IEI,IE,1)*REDFAZ(1)+TWO*GMAT(IEI,IE,1)
 4248 CONTINUE
 4148 CONTINUE
      WRITE(*,2253)EIWERT(1),EIWERT(2)
      WRITE(11,2253)EIWERT(1),EIWERT(2)
 2253 FORMAT(' THE FIRST 5 EIGENVAL.:',2D22.14)
      WRITE(*,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      WRITE(11,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      IF(IGR1.EQ.1)THEN
      WRITE(*,2235)
      WRITE(11,2235)
 2235 FORMAT(' THE FIRST STATE IS NOT DEGENERATED!')
      ENDIF
      IF(NRDIRE.GT.1)THEN
      WRITE(*,2352)
      WRITE(11,2352)
 2352 FORMAT(' G-FACTOR(S) CALCULATED FOR Z-DIRECTION ONLY!:')
      ENDIF
      GFACT(1)=-999.D0
      FGDIFF=FMATZ(1,1)-GMAT(1,1,1)
      IF(FGDIFF.NE.ZERO)GFACT(1)=FMATZ(1,1)/FGDIFF
      WRITE(*,2223)GFACT(1)
      WRITE(11,2223)GFACT(1)
 2223 FORMAT(
     1' G-FACTOR CALC. HERE FOR GROUND STATE (-999.<=>../0.) =',D16.8)
      IF(KLWERT.EQ.3)THEN
      WRITE(*,2232)GFACTA(NREL)
      WRITE(11,2232)GFACTA(NREL)
 2232 FORMAT(' TO BE COMPARED WITH ("FROM TABLES")',D16.8)
      ENDIF
      IF(KLWERT.EQ.2.OR.IGR1.NE.1.OR.IGR2.NE.1)THEN
      DO 2233 I=2,10
      GFACT(I)=-999.D0
      FGDIFF=FMATZ(I,I)-GMAT(I,I,1)
      IF(FGDIFF.NE.ZERO)GFACT(I)=FMATZ(I,I)/FGDIFF
 2233 CONTINUE
      WRITE(*,2234)(GFACT(I),I=2,10)
      WRITE(11,2234)(GFACT(I),I=2,10)
 2234 FORMAT(' AND GFACT FOR 1ST - 9TH EXITED STATE ='
     1,/,5D14.6,/,4D14.6)
      ENDIF
      IF(IGR1.NE.1.OR.IGR2.NE.1)THEN
      WRITE(*,2236)IGR1,IGR2
      WRITE(11,2236)IGR1,IGR2
 2236 FORMAT(' THE STATES 1 ...',I3,' ARE DEGENERATED (AND THE FOLLOWING
     1',I3,' STATES).',/,' G-FACTOR(S) MAY BE INCORRECT, IF NON-DIAGONAL
     2 ELEMENTS OF FMATZ(,)',/,' ARE NON-ZERO WITHIN DEGENERATED STATES:
     3 SEE FMAT AND GMAT FOR SUCH ELEMENTS!')
      ENDIF
      IF(IGR1.GT.2.OR.NRDIRE.EQ.2)THEN
      WRITE(*,6417)
      WRITE(11,6417)
 6417 FORMAT(' HINT: A TEST IS AVAILABLE FOR ANY DIRECTION, IF (MOROUT.A
     2ND.JATEST) ARE CHOSEN',/,' (BUT STOP FOLLOWS, AND Y-DIR. MUST NOT
     3BE INVOLVED)!')
      ENDIF
      IF(IGR1.EQ.2.AND.FMATZ(1,2).NE.ZERO)THEN
      WRITE(*,2324)
      WRITE(11,2324)
 2324 FORMAT(
     1' BECAUSE THE FIRST 2 STATES AND ONLY THESE 2 ARE DEGENERATED!:')
      GFAMST(1,1)=FMATZ(1,1)
      GFAMST(1,2)=FMATZ(1,2)
      GFAMST(2,2)=FMATZ(2,2)
      GFAMST(2,1)=FMATZ(2,1)
      CALL DSPEVW(1,GFAMST,GFAMST,EIWMST,EIVMST,2,2,DUMMY,NDMAL3,4)
C
      DO 6411 IE=1,2
      DO 6412 IEI=1,2
      SUMA=ZERO
      DO 6413 J=1,2
      SUMI=ZERO
      DO 6414 I=1,2
      SUMI=SUMI+(FMATZ(J,I)-GMAT(J,I,1))*EIVMST(I,IEI)
 6414 CONTINUE
      SUMA=SUMA+EIVMST(J,IE)*SUMI
 6413 CONTINUE
      GFAMST(IE,IEI)=SUMA
 6412 CONTINUE
 6411 CONTINUE
C
      WRITE(*,6415)(EIWMST(I),I=1,2)
      WRITE(11,6415)(EIWMST(I),I=1,2)
 6415 FORMAT(' FMATZ(,)-DIAGONALIZED: ',2D12.4)
      WRITE(11,6416)((GFAMST(I,J),J=1,2),I=1,2)
      WRITE(*,6416)((GFAMST(I,J),J=1,2),I=1,2)
 6416 FORMAT(' SIMIL. TRANSF. OF FMATZ-GMAT: ',4D12.4)
      DO 2323 I=1,2
      GFACT(I)=-999.D0
      IF(GFAMST(I,I).NE.ZERO)GFACT(I)=EIWMST(I)/GFAMST(I,I)
 2323 CONTINUE
      WRITE(*,2322)(GFACT(I),I=1,2)
      WRITE(11,2322)(GFACT(I),I=1,2)
 2322 FORMAT(
     1' G-FACTOR (Z-DIR.) CALC. HERE FOR 1TH & 2ND STATE =',2D16.8)
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO:
C     "IF(KLICKM.EQ.0.AND.(MOROUV.NE.0.OR.JATEST.NE.0))THEN"!
      IF(MOROUU.NE.0.AND.KLICK5.EQ.0)THEN
      KLICK5=1
      WRITE(*,2224)
      WRITE(11,2224)
 2224 FORMAT(' MATRIX FMAT(,,1):'
     1,' PERT.-OPER. FOR Z-DIR.(ONLY); COLUMNS (GIVEN AS ROWS):')
      WRITE(*,8928)
      WRITE(11,8928)
 8928 FORMAT(' UP TO NOW IN REDUCTanabe HERE ONLY THE ORBITAL PART IS IN
     1CLUDED!')
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVALX
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUU=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUU.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG.-ELEM.!')
      ENDIF
      DO 1004 J=1,KASI
      WRITE(11,2010)(FMAT(I,J,1),I=J,NRVALX)
      WRITE(*,2010)(FMAT(I,J,1),I=J,NRVALX)
 2010 FORMAT(6(1X,D12.4))
 1004 CONTINUE
C
      WRITE(*,2228)
      WRITE(11,2228)
C**   ATTENTION: HERE IS SUBROUTINE REDUCT (NOT: "REDUCE")!
 2228 FORMAT(' MATRIX GMAT(,,1):'
     1,' GMAT HERE FOR Z-DIR. (ONLY); COLUMNS (GIVEN AS ROWS):'
     2,/,' (FOR DETAILS SEE FMAT ABOVE!)')
      DO 1056 J=1,KASI
      WRITE(11,2010)(GMAT(I,J,1),I=J,NRVALX)
      WRITE(*,2010)(GMAT(I,J,1),I=J,NRVALX)
 1056 CONTINUE
      ENDIF
C**   END OF THE Z-DIRECTION (FMAT(,,1))!
C
C**   NOW STEPUP/STEPDOWN: FMAT(,,2) AND FMAT(,,3) FOR ORBITAL AND(!)
C     SPIN (GFACTOR OF TWO FOR SPIN INCL.!), GMAT(,,2) AND GMAT(,,3)
C     FOR SPIN ONLY (GFACTOR NOT(!) INCL.!):
C
C**   PERTURBATION-OPERATOR FOR X-DIRECTION IS FMAT(,,4), ORB.-PART OF
C     THIS IS HALF*(L- + L+), SPIN-PART IS GFACT*HALF*(S- + S+) (G-FACTOR
C     TIMES HALF RESULTS TO ONE!): 
C     - FIRSTLY PART OF FMAT(,,2), NAMELY L+;
C     - THEN PART OF FMAT(,,2), NAMELY TWO*S+:
C**   (PART OF GMAT(,,2) IS ONE(!)*S+ (WITHOUT ANY ORBITAL-PART!))
C**   (FMAT(,,2) ITSELF IS NOT SYMM., BUT FMAT(,,2) AND FMAT(,,3) ARE
C     SYMM. ONE TO THE OTHER!)

C**   ONLY STEP-DOWN OPERATORS WILL BE USED HERE NOW, FIRSTLY SPIN, THEN
C     ORBITAL! - SUBR. NUMBER IS IMPORTANT HERE!
C
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL! -
C     "JAFAST" DOES NOT MATTER!)
      IF(KLICK3.EQ.0)THEN
      KLICK3=1
      DO 642 J=1,KASSUM
      NROFNR(J)=0
C
C**   NOW FIRSTLY S-OPERATOR ON MSMLNW (FOR FMAT AND(!) GMAT)!:
C     ... WORKS VERY SIMILAR; COEFF. ARE ONLY =1 AND =0, 1 FOR MS=1/2,
C     0 FOR MS=-1/2, SO THAT THIS OPERATION GIVES JUST THE SUM OF THE
C     STATES RESULTING WHEN SUCCESSIVE ML+ ARE CHANGED TO ML- (FROM:
C     CONDON/SHORTLEY P.227).
C
      DO 66 N=KLWERT,-KLWERT,-1
      IF(MSMLNW(J,1,N).NE.0.AND.MSMLNW(J,2,N).NE.0)GOTO 66
      IF(MSMLNW(J,1,N).EQ.0.AND.MSMLNW(J,2,N).EQ.0)GOTO 66
      IF(MSMLNW(J,1,N).EQ.0.AND.MSMLNW(J,2,N).NE.0)GOTO 66
      DO 5567 I=-KLWERT,KLWERT
      MSMLNS(1,I)=MSMLNW(J,1,I)
 5567 MSMLNS(2,I)=MSMLNW(J,2,I)
      MSMLNS(1,N)=0
      MSMLNS(2,N)=-1
C
      CALL NUMBER(NR,MSMLNW,MSMLNS,ND2002,KLWERT,KASSUM,KLWER3)
C
      NROFNR(J)=NROFNR(J)+1
      IF(NROFNR(J).GT.10)STOP '.GT.10'
      NOFROW(J,NROFNR(J))=-NR
C
   66 CONTINUE
C**   FOR EACH ELECTRON ONE HAS BOTH, ORBITAL AND SPIN (EQ.(4)
C     CONDON/SH. P.150), AND BOTH STEP-DOWN OP. WILL OPERATE HERE!
C
C**   ORBITAL OP. WORKS NOT SO SIMPLY AS SPIN OP.! - ONLY STEP-DOWN OP.
C     HERE ONCE MORE!:
C
      DO 61 IZEILE=1,2
      DO 6 N=KLWERT,-KLWRTM,-1
      NM1=N-1
      IF(MSMLNW(J,IZEILE,N).EQ.0)GOTO 6
      IF(MSMLNW(J,IZEILE,NM1).NE.0)GOTO 6
      QUOTTT=DSQRT(DBLE((KLWERT+N)*(KLWRTP-N)))
      DO 567 I=-KLWERT,KLWERT
      MSMLNS(1,I)=MSMLNW(J,1,I)
  567 MSMLNS(2,I)=MSMLNW(J,2,I)
      MSMLNS(IZEILE,N)=0
      IF(IZEILE.EQ.1)THEN
      MSMLNS(IZEILE,NM1)=1
      IF(MSMLNS(2,N).EQ.-1)QUOTTT=-QUOTTT
      ELSE
      MSMLNS(IZEILE,NM1)=-1
      IF(MSMLNS(1,NM1).EQ.1)QUOTTT=-QUOTTT
      ENDIF
C
      CALL NUMBER(NR,MSMLNW,MSMLNS,ND2002,KLWERT,KASSUM,KLWER3)
C
      NROFNR(J)=NROFNR(J)+1
      IF(NROFNR(J).GT.10)STOP '.GT.10'
      EIVSHT(J,NROFNR(J))=QUOTTT
      NOFROW(J,NROFNR(J))=NR
C
    6 CONTINUE
   61 CONTINUE
  642 CONTINUE
      ENDIF
C
      DO 1446 IE=1,NRVALX
C**   ATTENTION: IEI=1(!),NRVALX HERE! - ONLY STEP-DOWN OP.!:
      DO 2446 IEI=1,NRVALX
      EIVEDF=ZERO
      EIVEDG=ZERO
      DO 5442 J=1,KASSUM
      IF(EIVECV(J,IEI).EQ.ZERO)GOTO 5442
      DO 6442 I=1,NROFNR(J)
      IF(NOFROW(J,I).LT.0)THEN
      EIVECQ=EIVECV(-NOFROW(J,I),IE)*EIVECV(J,IEI)
C**   G-FACTOR FOR SPIN IS =2, BUT FORMALLY =1 FOR EIVEDG!
      EIVEDG=EIVEDG+EIVECQ
      ELSE
      QUOTTT=EIVSHT(J,I)
      EIVECQ=EIVECV(NOFROW(J,I),IE)*EIVECV(J,IEI)*QUOTTT
      EIVEDF=EIVEDF+EIVECQ
      ENDIF
 6442 CONTINUE
 5442 CONTINUE
C
C**   EIVE-UP-F=EIVEDF("DOWN"), IF IE=IEI, I.E. E.G. FMAT(1,1,2)=FMAT(1,1,3)!
C     - AND THERE IS SOME MORE SYMM. CONCERN. UP AND DOWN (FMAT(,,3): "DOWN"):
      FMAT(IE,IEI,3)=EIVEDF
      FMAT(IEI,IE,2)=EIVEDF
C**   FMAT NOT YET READY (ONLY ORBITAL PART)!
      GMAT(IE,IEI,3)=EIVEDG
      GMAT(IEI,IE,2)=EIVEDG
C
 2446 CONTINUE
 1446 CONTINUE
C
      DO 1447 IE=1,NRVALX
      DO 2447 IEI=1,NRVALX
      FMAT(IEI,IE,4)=HALF*(FMAT(IEI,IE,2)+FMAT(IEI,IE,3))
      FMAT(IEI,IE,5)=HALF*(-FMAT(IEI,IE,2)+FMAT(IEI,IE,3))
C**   FMAT(,,5) CORRESP. TO JY-OPERATOR! -
C     ONE SHOULD THINK OF FMAT(,,5) AS BEING MULTIPL. BY I(MAG)!
C     (IF THE MATRIX OF THE JY-OPERATOR IS REQUIRED, FMAT(,,5)*I
C     WILL BE APPLIED!) Sy=(-S+ + S-)i/2
 2447 CONTINUE
 1447 CONTINUE
C
      IF(MOROUU.GT.1.AND.KLICK6.EQ.0)THEN
      KLICK6=1
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' MATRIX FMAT(,,2..5)'
     1,' (STEP- (2..3) AND PERT.-OPER. FOR X- AND',
     2/,' Y-DIR. (4..5)); (HERE!:) ROWS:'
     3,/,' (BECAUSE OF SYMMETRY FMAT(1,2,2) = FMAT(2,1,3))')
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVALX
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
 1022 FORMAT(' BECAUSE MOROUU=2, ONLY ONE ROW!')
      ELSE
      WRITE(11,1008)
 1008 FORMAT(' BECAUSE MOROUU.GT.2, ALL ROWS!')
      ENDIF
      DO 1055 K=2,5
      WRITE(*,1050)K
      WRITE(11,1050)K
 1050 FORMAT(' NUMBER OF OPERATOR FMAT (2..5) =',I2)
      DO 1005 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVALX)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVALX)
 1005 CONTINUE
 1055 CONTINUE
C
C**   ATTENTION: HERE IS SUBROUTINE REDUCT (NOT: "REDUCE")!
      WRITE(*,1553)
      WRITE(11,1553)
 1553 FORMAT(' MATRIX GMAT(,,2..3); (HERE!:) ROWS:')
      DO 1551 K=2,3
      WRITE(*,1550)K
      WRITE(11,1550)K
 1550 FORMAT(' NUMBER OF OPERATOR GMAT (2..3) =',I2)
      DO 1552 I=1,KASI
      WRITE(11,2010)(GMAT(I,J,K),J=1,NRVALX)
      WRITE(*,2010)(GMAT(I,J,K),J=1,NRVALX)
 1552 CONTINUE
 1551 CONTINUE
C
      ENDIF
C
      IF(JATEST.NE.0.AND.IOPT2.NE.0)THEN
      IF(KLICKH.EQ.0)THEN
      KLICKH=1
      WRITE(11,1581)
 1582 WRITE(*,1581)
 1581 FORMAT(' INSTEAD OF HEISENBERG COUPLING, THE ISING MODEL, THE XY M
     1ODEL',/,' OR ANY MODEL "BETWEEN" THESE TWO MAY BE APPLIED:',/,' IN
     2PUT IN 2F5.1 1.0.(ISING), 1.b., 1.1.(HEISENBERG), a.1., 0.1.(XY)')
      WRITE(11,1587)
      WRITE(*,1587)
 1587 FORMAT('   0.0  0.0 => HEISENBERG MODEL!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2F5.1)',ERR=5588,END=3406)FACZ,FACXY
      GOTO 4906
      ENDIF
 3406 READ(*,'(2F5.1)',ERR=1582,END=4576)FACZ,FACXY
      LMN=1
 4906 IF(FACZ.GT.ONE)FACZ=ONE
      IF(FACXY.GT.ONE)FACXY=ONE
      IF(FACZ.LT.ZERO)FACZ=ZERO
      IF(FACXY.LT.ZERO)FACXY=ZERO
      IF(FACZ.EQ.ZERO.AND.FACXY.EQ.ZERO)THEN
      FACZ=ONE
      FACXY=ONE
      ENDIF
      IF(FACXY.LT.ONE)FACZ=ONE
      IF(FACZ.LT.ONE)FACXY=ONE
      WRITE(7,1583)FACZ,FACXY
 1583 FORMAT(2F5.1,' =FACZ,FACXY')
      WRITE(*,1586)FACZ,FACXY
      WRITE(11,1586)FACZ,FACXY
 1586 FORMAT(' FACZ, FACXY =',2F6.1)
      FACZ=FACZ**2
      FACXY=FACXY**2
      ENDIF
C      DO 1584 IE=1,NRVALX !ERROR!!!
C      DO 1585 IEI=1,NRVALX
C      GMAT(IEI,IE,1)=FACZ*GMAT(IEI,IE,1)
C      GMAT(IEI,IE,2)=FACXY*GMAT(IEI,IE,2)
C      GMAT(IEI,IE,3)=FACXY*GMAT(IEI,IE,3)
C 1585 CONTINUE
C 1584 CONTINUE
      ENDIF
C
 9977 CONTINUE
C**   BELONGS TO "NO NEW MATRICES!"
C
      IF(JAFAST.NE.0)THEN
C
      CALL TANFEL(NGROUP,
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS,KASSUM,EIVECV
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRVALF,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT,BSTART,FACZ,FACXY,REDFAZ
     7,MSML,MSMLCO,MSMLNW,KLWER3,MSMLNS,MQUER,NOFROW,NROFNR,JAFAST
     7,CRZMAT)
C
      ELSE IF(JAFAST.EQ.0)THEN
C
      IF(KLICK2.NE.1.AND.NEUEBS.EQ.0)GOTO 9978
      KLICK2=2
C
      DO 2268 IE=1,NRVALX
      DO 2267 IEI=1,NRVALX
      FMAT(IEI,IE,1)=FMAT(IEI,IE,1)*REDFAZ(1)+TWO*GMAT(IEI,IE,1)
 2267 CONTINUE
 2268 CONTINUE
C
      DO 1448 IE=1,NRVALX
      DO 2448 IEI=1,NRVALX
      FMAT(IEI,IE,4)=FMAT(IEI,IE,4)*REDFAZ(2)
     1+GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
      FMAT(IEI,IE,5)=FMAT(IEI,IE,5)*REDFAZ(3)
     1-GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
C**   FMAT(,,5) CORRESP. TO JY-OPERATOR! -
C     ONE SHOULD THINK OF FMAT(,,5) AS BEING MULTIPL. BY I(MAG)!
C     (IF THE MATRIX OF THE JY-OPERATOR IS REQUIRED, FMAT(,,5)*I
C     WILL BE APPLIED!) Sy=(-S+ + S-)i/2
 2448 CONTINUE
 1448 CONTINUE
 9978 CONTINUE
C
      IF(MOROUU.GT.1.AND.KLICK4.EQ.0)THEN
      KLICK4=1
      WRITE(*,2205)
      WRITE(11,2205)
 2205 FORMAT(' MATRIX FMAT(,,1&4&5), NOW WITH SPIN PART INCLUDED')
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVALX
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
      ELSE
      WRITE(11,1008)
      ENDIF
      DO 2201 K=1,5
      IF(K.EQ.2.OR.K.EQ.3)GOTO 2201
      WRITE(*,2202)K
      WRITE(11,2202)K
 2202 FORMAT(' NUMBER OF OPERATOR FMAT (,,No) =',I2)
      DO 2203 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVALX)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVALX)
 2203 CONTINUE
 2201 CONTINUE
      ENDIF
C
      CALL SELECT(
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,FACZ,FACXY)
      ENDIF
C
C**   RETURNS TO TANABE!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND REDUCT
      END
      SUBROUTINE SELECT(
C**   CALLED BY REDUCT(ANABE) (MAY BE VIA TANFEL) OR BY REDUCE(CKART)! -
C     CALLS: "SEE BELOW", BUT ALSO RESTBL FOR THE CASE OF "MORE OUTPUT"!
     1WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,FACZ,FACXY)
C**   CALLS OF SUGANR(EAL), SUGANC(OMPLEX), SUGANH(EISENBERG) AND
C     SUGANK(OMPLEX HEISENBEREG): THERE ARE 12(!) DIFF. OPTIONS IOPT12,
C     WHICH RESULT FROM 4*3=12 INPUT-OPTIONS, AND THE LATTER ARE:
C     (IOPT1=:) ONE (MEAN) DIRECTION (=0), MEAN VALUE OF CHI (=1),
C     DIRECTION AT WILL (WITH Y: =2; WITHOUT Y: =3)
C     (IOPT2=:) SINGLE ION (=0), SYMM.DIMER (=1), DIMER COMB.MOD. (=2)
C     IOPT12=3*IOPT1+IOPT2+1=1...12 - NRDIRE=1...3 - IOPT2=2 <=> COMB.MOD.
C**   THESE 4 ROUTINES WILL CALCULATE CHI WITH HELP OF CHIMAG!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACT(13)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,DRITTL=ONE/DREI,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO
     1,HALFMN=-0.5D0,ONEMIN=-1.0D0)
      PARAMETER(SECHSS=6.0D0/7.0D0,VIERDR=4.0D0/3.0D0
     1,SIEBSE=7.0D0/6.0D0,ACHTSI=8.0D0/7.0D0
     1,ACHELF=8.0D0/11.0D0,ZWEISI=2.0D0/7.0D0)
      PARAMETER(VPREZ6=79577.47D0,AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC,BOLTZM=1.380658D-23,BOLZCM=0.695040D0
     2,SIMUBA=9.27402D-24,FNAMAC=AVOGAD*SIMUBA*SIMUBC/(BOLTZM/BOLZCM))
C     FNAMAC=AVOGAD*SIMUBA*SIMUBC*BOLTZM(IN SI UNIT J/K)/BOLZCM=
C     =AVOGAD*SIMUBA*SIMUBC/(1.380658D-23/0.695040D0)=
C     =AVOGAD*SIMUBA*SIMUBC*0.503412E23=3.27658E-6
      PARAMETER(REZSQ3=ONE/1.7320507D0,WURZ2=1.4142135D0,REZSQ2=
     1REZSQ3*WURZ2)
      DIMENSION DIRECZ(3),WERTIN(*),FMAT(*),GMAT(*)
C
      DIMENSION FMATCH(ND1110,*),EIVEC(ND1110,*),PERTUR(ND1110,*)
     1,FMATY(ND1110,*),DUMMY(*),DUMMYD(*)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*),CPERTU(ND2828,*)
     1,CFMATY(ND2828,*)
      DIMENSION EIVAL0(ND28,3),EIVAL1(ND28,3),EIVAL2(ND1110,3)
      DIMENSION ZEEMN0(ND28,3),ZEEMN1(ND28,3),ZEEMN2(ND1110,3)
      DIMENSION ZEMN20(ND28,3),ZEMN21(ND28,3),ZEMN22(ND1110,3)
      DIMENSION CHIMOL(3),CHI0(3),CHI1(3),CHI2(3)
      DIMENSION CHCGS0(3),CHCGS1(3),CHCGS2(3)
      DIMENSION CHFLD0(3),CHFLD1(3),CHFLD2(3)
      DIMENSION FMAGN0(3),FMAGN1(3),FMAGN2(3)
      DIMENSION FMUE0(3),FMUE1(3),FMUE2(3),DIRCOS(3,6)
      INTEGER IOPT(12,3,3)
C**   PRE-OCC. OF DIRECZ IS /ONE,ONE,ONE/ OR /ONE,TWO,ZERO/,
C     BUT NORMALIZED, IN PROGRAM CONDON!
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      SAVE
      DATA KLICK1,KLICKE,KLICK9,TESLAO,MOROUU,MOROUV,KLINEG
     1/0,0,0,ZERO,0,0,0/
      DATA CHIMOL/ZERO,ZERO,ZERO/
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
      DATA OLDDIZ,OLDDIX,OLDDIY/REZSQ3,REZSQ3,REZSQ3/
C**   "DIRECTION AT WILL" IS ALWAYS STORED AS Y ("WITH Y") AND AS X ("WITHOUT
C     Y") RESP.!:
      DATA IOPT/7,3,1,7,3,1,0,0,0,0,0,0
     2,7,3,1,7,3,1,0,0,0,7,3,1
     3,8,6,4,8,6,4,8,6,4,0,0,0
C**   THE FOLLOWING LINES OF IOPT ARE ONLY(!) FOR COMBINED MODEL,
C     THE PRECEDING LINES PARTLY: THE 3RD, 6TH, 9TH, 12TH DIGIT OF EACH LINE!
     4,0,0,2,0,0,2,0,0,0,0,0,0
     5,0,0,2,0,0,2,0,0,0,0,0,2
     6,0,0,5,0,0,5,0,0,5,0,0,0
     7,0,0,3,0,0,3,0,0,0,0,0,0
     8,0,0,3,0,0,3,0,0,0,0,0,3
     9,0,0,6,0,0,6,0,0,6,0,0,0/
      DATA DIRCOS/ONE,ZERO,ZERO,REZSQ3,REZSQ2,ZERO,REZSQ3,REZSQ3,REZSQ3
     1,ONE,ZERO,ZERO,ZERO,ONE,ZERO,ZERO,ZERO,ONE/
      DATA KLICCU,JACUGD,ACUGD,XCUGD,YCUGD/0,0,ONE,ONE,ONE/
      DATA GMATCU/
C     THE BASIS IS -MS ... +MS, AND -1/2, +1/2 (NOT 1/2,-1/2) FOR CU(2+)!
     1-0.35D+01,8*ZERO,-0.25D+01,8*ZERO,-0.15D+01,8*ZERO,HALFMN,8*ZERO,
     1HALF,8*ZERO,0.15D+01,8*ZERO,0.25D+01,8*ZERO,0.35D+01,
     2ZERO,0.26457513D+01,8*ZERO,0.34641016D+01,8*ZERO,0.38729833D+01,
     28*ZERO,0.4D+01,8*ZERO,0.38729833D+01,8*ZERO,0.34641016D+01,8*ZERO,
     20.26457513D+01,8*ZERO,
     38*ZERO,0.26457513D+01,8*ZERO,0.34641016D+01,8*ZERO,0.38729833D+01,
     38*ZERO,0.4D+01,8*ZERO,0.38729833D+01,8*ZERO,0.34641016D+01,8*ZERO,
     30.26457513D+01,ZERO/
      DATA WERTCU/8*ZERO/
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(KLICCU.EQ.0.AND.IOPT2.EQ.1)THEN
      KLICCU=1
      WRITE(11,2827)
 2873 WRITE(*,2827)
 2827 FORMAT(' NOT a symmetrical dimer, but one with a special spin part
     1,',/,' e.g. a Ln - Cu - dimer! INPUT in F6.4,I1:',/,' gS(pin-Hamil
     1tonian)-factor for z-direction and >1 for YES;',/,' 0.0000 => 2.00
     100; gS=g/(g-1); g=gS/(gS-1). The spin part is',/,
     1' a spin-one-half part for 2, a spin=one part for 3,',/,' and a sp
     1in-seven-half part for 8, respectively (gS.NE.0.:<2=>2)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(F6.4,I1)',ERR=5588,END=3407)ACUGD,JACUGD
      GOTO 4907
      ENDIF
 3407 READ(*,'(F6.4,I1)',ERR=2873,END=4576)ACUGD,JACUGD
      LMN=1
 4907 IF(JACUGD.LE.1)JACUGD=0
      IF(JACUGD.GT.3)JACUGD=8
      IF(ACUGD.NE.ZERO.AND.JACUGD.EQ.0)JACUGD=2
      IF(ACUGD.EQ.ZERO.AND.JACUGD.NE.0)ACUGD=TWO
      WRITE(7,2872)ACUGD,JACUGD
 2872 FORMAT(F6.4,I1,' =(Z)/JACUGD(dimer)')
      WRITE(*,2874)JACUGD
      WRITE(11,2874)JACUGD
 2874 FORMAT(' "NOT A SYMMETRICAL DIMER" WAS CHOSEN, YES/NO(0):',I2,'!!!
     1!!!!!!')
      IF(JACUGD.NE.0)THEN
      WRITE(*,2880)ACUGD
      WRITE(11,2880)ACUGD
 2880 FORMAT(' gS(pin-Hamiltonian)-factor z-direction =',F7.4,'!!!!!!!!!
     1')
C**   Attention: KASSMN=IGRUND*JACUGD IN SUGANH AND IN SUGANK (=IGRUND**2 ELSE)!
      IF(NRDIRE.EQ.1.AND.IOPT1.LE.1)GOTO 1599
      WRITE(11,1591)
 1593 WRITE(*,1591)
 1591 FORMAT(' gS for x-direction (zero =>gS for z-direction) in F6.4:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F6.4)',ERR=5588,END=3408)XCUGD
      GOTO 4908
      ENDIF
 3408 READ(*,'(F6.4)',ERR=1593,END=4576)XCUGD
      LMN=1
 4908 WRITE(7,1595)XCUGD
 1595 FORMAT(F6.4,' =XCUGD(dimer)')
      IF(XCUGD.EQ.ZERO)XCUGD=ACUGD
      WRITE(11,1597)XCUGD
      WRITE(*,1597)XCUGD
 1597 FORMAT(' gS(pin-Hamiltonian)-factor x-direction =',F7.4)
      XCUGD=XCUGD*HALF
      YCUGD=XCUGD
      IF(NRDIRE.LE.2.AND.IOPT1.NE.2)GOTO 1599
      WRITE(11,1592)
 1594 WRITE(*,1592)
 1592 FORMAT(' gS for y-direction (zero =>gS for z-direction) in F6.4:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F6.4)',ERR=5588,END=3409)YCUGD
      GOTO 4909
      ENDIF
 3409 READ(*,'(F6.4)',ERR=1594,END=4576)YCUGD
      LMN=1
 4909 WRITE(7,1596)YCUGD
 1596 FORMAT(F6.4,' =YCUGD(dimer)')
      IF(YCUGD.EQ.ZERO)YCUGD=ACUGD
      WRITE(11,1590)YCUGD
      WRITE(*,1590)YCUGD
 1590 FORMAT(' gS(pin-Hamiltonian)-factor y-direction =',F7.4)
      YCUGD=YCUGD*HALF
 1599 CONTINUE
      ACUGD=ACUGD*HALF
C
      IF(JACUGD.LT.8)THEN
      DO 2881 K=1,3
      DO 2882 J=1,8
      DO 2883 I=1,8
      GMATCU(I,J,K)=ZERO
 2883 CONTINUE
 2882 CONTINUE
 2881 CONTINUE
      IF(JACUGD.EQ.2)THEN
      GMATCU(1,1,1)=HALFMN
      GMATCU(2,2,1)=HALF
      GMATCU(2,1,2)=ONE
      GMATCU(1,2,3)=ONE
      ENDIF
      IF(JACUGD.EQ.3)THEN
      GMATCU(1,1,1)=ONEMIN
      GMATCU(3,3,1)=ONE
      GMATCU(2,1,2)=WURZ2
      GMATCU(3,2,2)=WURZ2
      GMATCU(1,2,3)=WURZ2
      GMATCU(2,3,3)=WURZ2
      ENDIF
      ENDIF
C
      DO 2884 J=1,JACUGD
      DO 2885 I=1,JACUGD
      FMATCU(I,J,1)=GMATCU(I,J,1)*TWO
      FMATCU(I,J,2)=GMATCU(I,J,2)+GMATCU(I,J,3)
      FMATCU(I,J,3)=-GMATCU(I,J,2)+GMATCU(I,J,3)
 2885 CONTINUE
 2884 CONTINUE
C
      DO 1588 IE=1,JACUGD
      DO 1589 IEI=1,JACUGD
      FMATCU(IEI,IE,1)=FMATCU(IEI,IE,1)*ACUGD
      FMATCU(IEI,IE,2)=FMATCU(IEI,IE,2)*XCUGD
      FMATCU(IEI,IE,3)=FMATCU(IEI,IE,3)*YCUGD
 1589 CONTINUE
 1588 CONTINUE
C      DO 1584 IE=1,JACUGD !ERROR!!!
C      DO 1585 IEI=1,JACUGD
C      GMATCU(IEI,IE,1)=FACZ*GMATCU(IEI,IE,1)
C      GMATCU(IEI,IE,2)=FACXY*GMATCU(IEI,IE,2)
C      GMATCU(IEI,IE,3)=FACXY*GMATCU(IEI,IE,3)
C 1585 CONTINUE
C 1584 CONTINUE
      IF(MOROUT.NE.0)THEN
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' MATRIX FMATCU(,,1..3; (HERE!:) ROWS:)')
      DO 1055 K=1,3
      WRITE(*,1050)K
      WRITE(11,1050)K
 1050 FORMAT(' NUMBER OF OPERATOR FMATCU (1..3) =',I2)
      DO 1005 I=1,JACUGD
      WRITE(11,2010)(FMATCU(I,J,K),J=1,JACUGD)
      WRITE(*,2010)(FMATCU(I,J,K),J=1,JACUGD)
 1005 CONTINUE
 1055 CONTINUE
 2010 FORMAT(6(1X,D12.4))
      WRITE(*,1553)
      WRITE(11,1553)
 1553 FORMAT(' MATRIX GMATCU(,,1..3); (HERE!:) ROWS:')
      DO 1551 K=1,3
      WRITE(*,1550)K
      WRITE(11,1550)K
 1550 FORMAT(' NUMBER OF OPERATOR GMATCU (1..3) =',I2)
      DO 1552 I=1,JACUGD
      WRITE(11,2010)(GMATCU(I,J,K),J=1,JACUGD)
      WRITE(*,2010)(GMATCU(I,J,K),J=1,JACUGD)
 1552 CONTINUE
 1551 CONTINUE
      ENDIF
      ENDIF
      ENDIF
C
      NEWFLD=0
      IF(JAVANV.EQ.0.AND.(TESLAC.NE.TESLAO))NEWFLD=1
      TESLAO=TESLAC
      IF(IOPT1.GT.1.AND.(DIRECZ(1).NE.OLDDIZ.OR.DIRECZ(2).NE.OLDDIX
     1.OR.DIRECZ(3).NE.OLDDIY))NEWFLD=1
      OLDDIZ=DIRECZ(1)
      OLDDIX=DIRECZ(2)
      OLDDIY=DIRECZ(3)
      NURTMP=0
      IF(NEUEBS.EQ.0.AND.NEWFLD.EQ.0)NURTMP=1
C**   NEUEBS=1 FOR FIRST RUN!
      IGRUND=NRVAL
C
      JACO21=1
      IF(IOPT2.EQ.2)THEN
      JACO21=3
      IF(KLICK1.EQ.0)THEN
      KLICK1=1
C**   COMBINED MODEL!: (NEXT LINE CANNOT REALLY BE ACTIVE!)
      IF(KLWERT.NE.3)STOP 'KLWERT'
      WRITE(*,1213)NRVAL
 1213 FORMAT(' THE DIMENSION OF THE BASIS IS (2J+1), I.E. =',I3)
      WRITE(11,1214)
 8236 WRITE(*,1214)
 1214 FORMAT(' THE COMBINED MODEL WILL RUN (POSS. ONLY FOR F EL.)!'
     1,/,' INPUT IN I2 THE LOWER DIMENSION NEEDED FOR THIS (< 2J+1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3410)N1728I
      GOTO 4910
      ENDIF
 3410 READ(*,'(I2)',ERR=8236,END=4576)N1728I
      LMN=1
 4910 WRITE(*,'(I3)')N1728I
      IF(N1728I.EQ.0.OR.N1728I.GT.JMULTI(NREL))N1728I=JMULTI(NREL)
      WRITE(7,2372)N1728I
 2372 FORMAT(I2,' =N1728I(Comb.Model)')
      WRITE(*,2237)N1728I
      WRITE(11,2237)N1728I
 2237 FORMAT(I3,' =N1728I(Comb.Model)!!!!!!!!!')
      IF(N1728I.EQ.JMULTI(NREL))THEN
      WRITE(*,1729)
      WRITE(11,1729)
 1729 FORMAT(' THE COMBINED WILL NOT REALLY RUN (ONLY FORMALLY: "TWICE 
     1THE SAME DIMENSION!")'
     2,/,' TO CHANGE THIS LATTER INPUT: INPUT IN I1 "1"!')
 8237 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3411)NEWVAL
      GOTO 4911
      ENDIF
 3411 READ(*,'(I1)',ERR=8237,END=4576)NEWVAL
      LMN=1
 4911 WRITE(7,2373)NEWVAL
 2373 FORMAT(I1,' =NEWVAL(ue)')
      WRITE(*,2337)NEWVAL
      WRITE(11,2337)NEWVAL
 2337 FORMAT(I2,' =NEWVAL(ue)!!!!!!!!!')
      IF(NEWVAL.NE.0)GOTO 8236
      ENDIF
      IF(GFACT(NREL).NE.ZERO)THEN
      FLAM=TWO*(GFACT(NREL)-ONE)**2/(FNAMAC*GFACT(NREL)**2)
      ELSE IF(GFACT(NREL).EQ.ZERO)THEN
      FLAM=ONE
      WRITE(*,1215)NRVAL
 1215 FORMAT(' BECAUSE THE G-FACTOR NEEDED FOR THE COMBINED MODEL IS NOT
     1 AVAILABLE,',/,' THIS WILL RUN WITH TWICE THE SAME DIMENSION OF'
     2,I4,', I.E. IT WILL NOT REALLY RUN ("EU")')
      N1728I=NRVAL
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(KLICK1.EQ.0)THEN"
      IGRUND=N1728I
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(IOPT2.EQ.2)THEN ("COMB.MODEL")"
      DIFMAX=WERTIN(NRVAL)
      IOPT12=3*IOPT1+IOPT2+1
C
      NRLOOP=1
      IF(IOPT1.EQ.1)NRLOOP=NRDIRE
C
      MIXTUS=0
C**   WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF DIMER AND SINGLE ION
C     MAY BE NOT ZERO!:
      IF(MIXTUR.NE.0.AND.BWWW(18).NE.ZERO)MIXTUS=1
C
      IOPT13=IOPT12
      IEINS=1
      IF(JACO21.NE.3.AND.MIXTUS.NE.0)THEN
      IOPT13=IOPT12+1
      IEINS=2
      ENDIF
      JACOMX=JACO21
      IF(MIXTUS.NE.0)JACOMX=3
      DO 222 KOMBIN=IEINS,JACOMX
      DO 221 IDIR=1,NRLOOP
C**   DIRECTION COSINUS:
C     (IOPT1=:) ONE (MEAN) DIRECTION (=0), MEAN VALUE OF CHI (=1),
C     DIRECTION AT WILL: WITH Y (=2), WITHOUT Y (=3).
      IF(IOPT1.LE.1)THEN
      IF(IOPT1.EQ.0)NRCOSI=NRDIRE
      IF(IOPT1.EQ.1)NRCOSI=IDIR+3
      DO 1312 I=1,3
      DIRECZ(I)=DIRCOS(I,NRCOSI)
 1312 CONTINUE
      ENDIF
C**   NRSTOR=1,2(,3) <=> z,x(,y)-DIRECTION!:
      NRSTOR=NRDIRE
      IF(IOPT1.EQ.1)NRSTOR=IDIR
      IF(IOPT1.EQ.2)NRSTOR=3
      IF(IOPT1.EQ.3)NRSTOR=2
      IOPT99=IOPT(IOPT13,NRSTOR,KOMBIN)
      IF(IOPT99.EQ.0)STOP 'IOPT=0'
      IF(MOROUT.NE.0.AND.KLICK9.LE.9)THEN
      KLICK9=KLICK9+1
      WRITE(*,1278)IOPT99,IOPT13,NRSTOR,KOMBIN
      WRITE(11,1278)IOPT99,IOPT13,NRSTOR,KOMBIN
 1278 FORMAT(' (IOPT99=)IOPT(IOPT13,NRSTOR,KOMBIN) =',I2,'(',3I2,')')
      ENDIF
      GOTO (1,2,3,4,5,6,7,8)IOPT99
    1 NRSORT=NRSTOR
C**   NRSORT FOR SUBROUTINE SUGANO, I.E. FOR (MORE) OUTPUT, AND
C     FOR "JAVANV" FOR LESS COEFF. OF 2ND ORDER!
      NRROUT=1
      CALL SUGANR(NRROUT
     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0(1,NRSTOR),ZEEMN0(1,NRSTOR),ZEMN20(1,NRSTOR),DIFLOW,DIFMAX
     3,PERTUR,FMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL3
     5,CHI0(NRSTOR),CHCGS0(NRSTOR),CHFLD0(NRSTOR),TEMPTH,JAABLT,TESLAS
     6,FMAGN0(NRSTOR),FMUE0(NRSTOR),NRTEMP,CPXMAT,EIVECC,JACUGD)
C**   CHI0(1) <=> FIRST (Z-) DIRECTION (MAY BE ONLY THIS ONE DIRECTION!))
      GOTO 221
    2 NRSORT=NRSTOR+2
      NRROUT=1
      CALL SUGANR(NRROUT
     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL1(1,NRSTOR),ZEEMN1(1,NRSTOR),ZEMN21(1,NRSTOR),DIFLOW,DIFMAX
     3,PERTUR,FMATY,NRVAL,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL3
     5,CHI1(NRSTOR),CHCGS1(NRSTOR),CHFLD1(NRSTOR),TEMPTH,JAABLT,TESLAS
     6,FMAGN1(NRSTOR),FMUE1(NRSTOR),NRTEMP,CPXMAT,EIVECC,JACUGD)
      GOTO 221
    3 NRSORT=NRSTOR
      NRRUFX=0
      IF(IOPT1.EQ.1)NRRUFX=NRSTOR
      CALL SUGANH(FKWERT,ABST,GMAT,IGR1
     1,WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL2(1,NRSTOR),ZEEMN2(1,NRSTOR),ZEMN22(1,NRSTOR),DIFLOW,DIFMAX
     3,PERTUR,FMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP,NRRUFX
     4,ND252,ND1110,ND28,ND2828,NDMAL3
     5,CHI2(NRSTOR),CHCGS2(NRSTOR),CHFLD2(NRSTOR),TEMPTH,JAABLT,TESLAS
     6,FMAGN2(NRSTOR),FMUE2(NRSTOR),NRTEMP,CPXMAT,EIVECC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
      GOTO 221
    4 NRSORT=1
      NRROUT=2
      CALL SUGANC(NRROUT
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL0(1,3),ZEEMN0(1,3),ZEMN20(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI0(3)
     5,CHCGS0(3),CHFLD0(3),TEMPTH,JAABLT,TESLAS,FMAGN0(3),FMUE0(3)
     6,NRTEMP,FMATCH,EIVEC,JACUGD)
      GOTO 221
    5 NRSORT=2
      NRROUT=2
      CALL SUGANC(NRROUT
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL1(1,3),ZEEMN1(1,3),ZEMN21(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,NRVAL,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI1(3)
     5,CHCGS1(3),CHFLD1(3),TEMPTH,JAABLT,TESLAS,FMAGN1(3),FMUE1(3)
     6,NRTEMP,FMATCH,EIVEC,JACUGD)
      GOTO 221
    6 NRSORT=1
      CALL SUGANK(FKWERT,ABST,GMAT
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL2(1,3),ZEEMN2(1,3),ZEMN22(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI2(3)
     5,CHCGS2(3),CHFLD2(3),TEMPTH,JAABLT,TESLAS,FMAGN2(3),FMUE2(3)
     6,NRTEMP,FMATCH,EIVEC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
      GOTO 221
C**   AND NOW FOR IOPT2=0, I.E. FOR (SINGLE) ION!:
    7 NRSORT=NRSTOR
      NRROUT=1
      CALL SUGANR(NRROUT
     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL2(1,NRSTOR),ZEEMN2(1,NRSTOR),ZEMN22(1,NRSTOR),DIFLOW,DIFMAX
     3,PERTUR,FMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL3
     5,CHI2(NRSTOR),CHCGS2(NRSTOR),CHFLD2(NRSTOR),TEMPTH,JAABLT,TESLAS
     6,FMAGN2(NRSTOR),FMUE2(NRSTOR),NRTEMP,CPXMAT,EIVECC,JACUGD)
      GOTO 221
    8 NRSORT=1
      NRROUT=2
      CALL SUGANC(NRROUT
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL2(1,3),ZEEMN2(1,3),ZEMN22(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI2(3)
     5,CHCGS2(3),CHFLD2(3),TEMPTH,JAABLT,TESLAS,FMAGN2(3),FMUE2(3)
     6,NRTEMP,FMATCH,EIVEC,JACUGD)
  221 CONTINUE
  222 CONTINUE
C
C**   TESTS AND WARNINGS, IF ENERGIES ARE FITTED:
      IF(KLINEG.EQ.0)THEN
      KLINEG=1
      NEGMAX=0
      DO 3322 I=1,NDATAP
      IF(TEMPIK(I).LT.ZERO)THEN
      ITEMP=INT(DABS(TEMPIK(I))+0.0000000001D0)
      IF(ITEMP.GT.NEGMAX)NEGMAX=ITEMP
      ENDIF
 3322 CONTINUE
      IF(NEGMAX.NE.0)THEN
      IGRUNX=KASSUM
      IF(NRVALF.NE.0.AND.KASSUM.GT.NRVALF)IGRUNX=NRVALF
      IF(NEGMAX.GT.IGRUNX)THEN
      WRITE(*,3323)NEGMAX,IGRUNX
      WRITE(11,3323)NEGMAX,IGRUNX
 3323 FORMAT(' AT LEAST ONE OF THE ENERGY LEVELS TO BE FITTED'
     1,/,' DOES NOT EXIST:',I4,'.GT.',I4)
      STOP 'N.GT.I'
      ELSE IF(IOPT2.GT.0)THEN
      WRITE(*,3324)IGRUNX
      WRITE(11,3324)IGRUNX
 3324 FORMAT(' WARNING: ENERGY LEVELS TO BE FITTED ARE WITHOUT EXCHANGE 
     1COUPLING!',/,' THERE ARE ',I4,' LEVELS!')
      ENDIF
      ENDIF
      ENDIF
C**   END OF TESTS AND WARNINGS, IF ENERGIES ARE FITTED!
      DO 333 IDIR=1,NRLOOP
      NRSTOR=NRDIRE
      IF(IOPT1.EQ.1)NRSTOR=IDIR
      IF(IOPT1.EQ.2)NRSTOR=3
      IF(IOPT1.EQ.3)NRSTOR=2
      CHIMOL(NRSTOR)=CHI2(NRSTOR)
      IF(JACO21.EQ.3)THEN
C**   "COMBINED MODEL"! - CHIMOL(NRSTOR)=...:
C     (CHI0 <=> THE LOWER DIMENSION, CHI1 THE GREATER ONE FOR THE SINGLE ION!)
      IF(CHI2(NRSTOR).EQ.ZERO)THEN
      IF(CHI0(NRSTOR).EQ.ZERO)THEN
      CHQUOT=ONE
      ELSE
      STOP 'ERROR'
      ENDIF
      ELSE
      CHQUOT=CHI0(NRSTOR)/CHI2(NRSTOR)
      ENDIF
      CHDIFF=CHI1(NRSTOR)-CHI0(NRSTOR)
      FLAMBD=FLAM*FKWERT
C**   ... IF GFACT.NE.ZERO - OTHERWISE: IOPT2=2 <=> COMB.MOD. IS NOT
C     POSSIBLE, BECAUSE FLAM IS NOT DEFINED! IT WILL RUN WITH TWICE
C     THE SAME DIMENSION AND FLAM=ONE, I.E. IT WILL NOT REALLY RUN!
C**   "TWICE THE SAME DIMENSION" MEANS: CHI1-CHI0=CHDIFF=ZERO,
C     CHQUOT=CHI1/CHI2, AND CHIMOL=CHI2 ("FULL" DIMENSION OR NOT)!
C     (CHIMOL=CHI1 FOR FLAMBD=ZERO <=> "NO COUPLING", BECAUSE THEN
C     CHI2=CHI0 AND CHQUOT=ONE!)
C
      CHIMOL(NRSTOR)=CHI1(NRSTOR)/(CHQUOT-FLAMBD*CHDIFF)
      ENDIF
C
      IF(MIXTUS.NE.0)
     1CHIMOL(NRSTOR)=CHIMOL(NRSTOR)*(ONE-BWWW(18))+BWWW(18)*CHI1(NRSTOR)
  333 CONTINUE
C
      IF(MOROUT.NE.0.AND.KLICKE.EQ.0)THEN
C**   KLICKE=1 SEE BELOW!
      WRITE(11,7776)
 7766 WRITE(*,7776)
 7776 FORMAT(
     1' MORE OUTPUT IN SUBROUTINE SELECT FOR CHI (AND FOR ITS COMPONENTS
     1, IF MORE',/,' THEN ONE COMPONENT): FOR FIRST...NNTH TEMP. AND/OR 
     1FOR FIRST...NRTH',/,' VALUES OF CHI! INPUT IN 2I2 NN AND NR (0000 
     1=> 0101)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I2)',ERR=5588,END=3412)MOROUU,MOROUV
      GOTO 4912
      ENDIF
 3412 READ(*,'(2I2)',ERR=7766,END=4576)MOROUU,MOROUV
      LMN=1
 4912 WRITE(7,2374)MOROUU,MOROUV
 2374 FORMAT(2I2,' =MOROUU,MOROUV IN SELECT')
      WRITE(*,2437)MOROUU,MOROUV
      WRITE(11,2437)MOROUU,MOROUV
 2437 FORMAT(I3,I2,' =MOROUU,MOROUV IN SELECT!!!!!!!!!')
      ENDIF
      IF(MOROUU.EQ.0)MOROUU=1
      IF(MOROUV.EQ.0)MOROUV=1
C
      IF(NRLOOP.EQ.1)THEN
C**   CHI(1,1:4,1) <=> CHI CALCULATED, IN SI UNIT M**3/MOL, MEAN VALUES:
      CHI(1,1,1)=CHIMOL(NRSTOR)
      ELSE IF(NRLOOP.EQ.2)THEN
      CHI(1,1,1)=(CHIMOL(1)+TWO*CHIMOL(2))*DRITTL
      ELSE IF(NRLOOP.EQ.3)THEN
      CHI(1,1,1)=(CHIMOL(1)+CHIMOL(2)+CHIMOL(3))*DRITTL
      ENDIF
C**   TO BE ABLE TO AVOID UNNECESSARY CALCULATIONS OF CHI FOR OUTPUT:
      CHISTA(NRTEMP)=CHI(1,1,1)
C
C**   IF A MEAN VALUE OF TWO OR THREE DIRECTIONS WAS CALCULATED OR NOT:
      IF(IOPT1.EQ.1)THEN
      DO 1141 I=1,3
      CHIZXY(I,NRTEMP)=CHIMOL(I)
 1141 CONTINUE
      IF(NRTEMP.LE.MOROUU.AND.KLICKE.LE.MOROUV)THEN
      WRITE(*,334)NRTEMP,(CHIMOL(I),I=1,3)
      WRITE(11,334)NRTEMP,(CHIMOL(I),I=1,3)
  334 FORMAT(' No.OF TEMP., COMPON.OF CHI =',I4,3D16.8)
      ENDIF
      ENDIF
C
      IF(NRTEMP.LE.MOROUU.AND.KLICKE.LE.MOROUV)THEN
C**   THE FOLLOWING OUTPUT AT LEAST ONCE!:
      WRITE(*,335)NRTEMP,CHISTA(NRTEMP)
      WRITE(11,335)NRTEMP,CHISTA(NRTEMP)
  335 FORMAT(' No. OF TEMP., CHI-START CALCULATED =',I4,D16.8)
      KLICKE=KLICKE+1
      ENDIF
C
C**   CHI(1,,) <=> CALCULATED VALUES - CHI(2,,) <=> MEASURED VALUES
C
C**   CHIMEA-SURED(LINE OF INPUT TABLE) => CHI(2,4,1) (,1:3,: DERIVED CHI'S):
      CHI(2,4,1)=CHIMEA(NRTEMP)
C**   BWWW(12:16)<=>FKWERT/SILAMB/THETA/CHIDIA/GEWFAC
C     (IBWWW(12:16).NE.0: WILL BE FITTED; IBWWW(12).NE.0: FK WILL BE FITTED
C     <=> IFITK=1)
      SILAMB=BWWW(13)
C**   I.E. THE MOLECULAR FIELD PARAMETER LAMBDA IN SI UNITS!
      CHI(1,2,1)=CHI(1,1,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(1,1,1).NE.ZERO)DENOM=-SILAMB+ONE/CHI(1,1,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(1,2,1)=ONE/DENOM
      ENDIF
      CHIDIA=BWWW(15)
C**   CHIDIA <=> CHI-0 <=> ADDITIVE CONSTANT TO CHI IN SI UNITS -
C     SHOULD NOT REALLY BE THE DIAMAGNETIC CONTRIBUTION TO CHI, BUT MAY BE!
      CHI(1,3,1)=CHI(1,2,1)+CHIDIA
      GEWFAC=BWWW(16)
C**   GEWFAC <=> FACTOR TO CHI MEASURED(!), AS A POSSIBILITY TO CORRECT
C     A POSSIBLY WRONG WEIGHT OF THE SAMPLE!
      CHI(1,4,1)=CHI(1,3,1)
      IF(GEWFAC.NE.ONE)CHI(1,4,1)=CHI(1,3,1)/GEWFAC
C
C     (CHI(1,1:4,1) <=> CHI CALCULATED, IN SI UNIT M**3/MOL, MEAN VALUES)
C     CHI(1,1:4,2) <=> ONE/CHI,
C     CHI(1,1:4,5) <=> MAGNETISATION IN SI UNIT TESLA*M**3/MOL (IN SUGANO:
C     CHIFLD),
C     CHI(1,1:4,3) <=> MAGNETIC MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G.
C     SATURATION MOMENT) (IN SUGANO: FMAGNB)
C     (PREVOR=-AVOGAD*SIMUBC=-7.01824E-6),
C     CHI(1,1:4,4) <=> EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS
C     (IN SUGANO: FMUE) (=SQRT(CHI*T*3.0*BOLTZM/(AVOGAD*SIMUBA*SIMUBC))),
C     CHI(1,1:4,6) <=> CHI IN CGS UNIT CM**3/MOL,
C     CHI(1,1:4,7) <=> PSEUDO EFFECTIVE MAGNETIC MOMENT
C     (WITH SQRT(CHI*(T-THETA))!):
      DO 3121 I=1,4
      CHI(1,I,2)=ZERO
      IF(CHI(1,I,1).NE.ZERO)CHI(1,I,2)=ONE/CHI(1,I,1)
      CHI(1,I,5)=CHI(1,I,1)*TESLAS
      CHI(1,I,3)=-CHI(1,I,5)/PREVOR
      CHI(1,I,4)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPIK(NRTEMP).GT.ZERO)CHI(1,I,4)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPIK(NRTEMP))
      CHI(1,I,7)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(1,I,7)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPTH)
      CHI(1,I,6)=CHI(1,I,1)*VPREZ6
 3121 CONTINUE
C
C**   NOW CORRECTIONS IN PRINCIPLE AS ABOVE, BUT REVERSED:
      CHI(2,3,1)=CHI(2,4,1)
      IF(GEWFAC.NE.ONE)CHI(2,3,1)=CHI(2,4,1)*GEWFAC
      CHI(2,2,1)=CHI(2,3,1)-CHIDIA
      CHI(2,1,1)=CHI(2,2,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(2,2,1).NE.ZERO)DENOM=+SILAMB+ONE/CHI(2,2,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(2,1,1)=ONE/DENOM
      ENDIF
C
      DO 3122 I=1,4
      CHI(2,I,2)=ZERO
      IF(CHI(2,I,1).NE.ZERO)CHI(2,I,2)=ONE/CHI(2,I,1)
      CHI(2,I,5)=CHI(2,I,1)*TESLAS
      CHI(2,I,3)=-CHI(2,I,5)/PREVOR
      CHI(2,I,4)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPIK(NRTEMP).GT.ZERO)CHI(2,I,4)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPIK(NRTEMP))
      CHI(2,I,7)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(2,I,7)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPTH)
      CHI(2,I,6)=CHI(2,I,1)*VPREZ6
 3122 CONTINUE
C
      CFOS=WERTIN(NRVAL)
      CFOSJ=WERTIN(NRVALJ)
      IF(MOROUT.NE.0)THEN
      LAUFNR=0
      NUROUT=0
      JASTOP=0
      NOCONV=1
      JASUCC=0
C     NUROUT.EQ.0 <=> "MORE OUTPUT", BUT NO TABLES!
      CALL RESTBL(DIFLOW,CFOS,IGR1,IGR2,NRVALF,IGRUND,NOCONV,JASUCC
     1,NRVAL,JASTOP,LAUFNR,JAFAST,CFOSJ,NRVALJ,NREL,KLWERT,KASSUM)
      ENDIF
C
C**   RETURNS TO REDUCT(ANABE) OR TO REDUCE(CKART) OR TO TANFEL!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SELECT
      END
      SUBROUTINE RESTBL(DIFLOW,CFOSIN,IGR1IN,IGR2IN,NRVALF,IGRUND,NOCONV
     1,JASUCC,NRVAL,JASTOP,LAUFNR,JAFAST,CFOSJN,NRVALJ,NREL,KLWERT,KASSU
     2M)
C**   RESTBL <=> RES(ALT)T(A)BL(ES)! - BUT ALSO FOR "MORE OUTPUT", IF
C     NUROUT.EQ.0! - WILL BE CALLED MAINLY BY SUSFIT TO PUT OUT THE
C     RESULTS OF COMPUTATION IN THE FORM OF TABLES, BUT ALSO CALLED BY
C     SELECT TO GIVE "MORE OUTPUT"!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      CHARACTER*16 QKK(7),QJJ(4),QII(2),QSS(2)
      CHARACTER*16 QLIST(35),QQLIST(40)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(I20=36,J20=36)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(40)
C
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(I20),CHIFIX
     1,CFOSXJ,NOTONE,JAFIX,BWWTMP(J20),BWWWMN(J20),BWWWMX(J20),MINMAX
      DIMENSION CHIFIX(601),WLSTNG(40)
C
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,PARWUQ=PARWUR**2
     1,FOUR=4.0D0,VPREZ6=1.0D6/(FOUR*3.1415926D0))
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
C
      DIMENSION IDATA(3,6,36),IIN(3,6),II(3,6),KEND(36)
C**   II(1,)=1 <=> CALCUL. CHI! - II(1,)=2 <=> MEASURED CHI!
C**   II(2,)=1 <=> CHI-START! - II(2,)=2 <=> CHI-CALC.*F-CHI0!
C     - II(2,)=3 <=> CHI-CALC.*F! - II(2,)=4 <=> CHI-CALC.,
C     I.E. CHI INCL. LAM., CHI0 AND /F; BUT ATTENTION: MEASURED CHI
C     ITSELF, I.E. WITHOUT ANY CORRECTIONS, IS TO BE COMPARED WITH CHI-CALC.!
C**   II(3,)=1 <=> CHI IN SI UNITS - II(3,)=4 <=> MU-EFF.! - II(3,)=6 <=> "CGS"!
      SAVE
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'B21  ','B41  ','B61  ','B65  ','     ','     ','     ','     '
     4,'     ','     ','     ','     ','     ','     ','     ','     '/
      DATA QV/'B20  ','2ZU20','B40  ','2ZU40','3ZU40','4ZU40'
     1,'B60  ','2ZU60','3ZU60','4ZU60','6ZU60'
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'1ZU20','1ZU40','1ZU60','5ZU60','     ','     ','     ','     '
     4,'     ','     ','     ','     ','     ','     ','     ','     '/
      DATA QKK
     1/'CHI IN SI UNITS ','     1/CHI      ','   MAGN.MOMENT  '
     1,'  MU EFFECTIVE  ','    CHI*FIELD   ','   CHI IN CGS   '
     2,' MU EFF.(THETA) '/
      DATA QJJ
     1/'   CHI-START    ','CHI-CALC.*F-CHI0','  CHI-CALC.*F   '
     1,'   CHI-CALC.    '/
      DATA QII/'   CALCULATED   ','    MEASURED    '/
      DATA QSS/'  CALCUL. CHI   ','  MEASURED CHI  '/
      DATA NOMORE,KLICK1,KLICK2/0,0,0/
C
      DATA QLIST
     1/' =DIR. FIELD(Z),',' =DIR. FIELD(X),',' =DIR. FIELD(Y),'
     2,' =DIST. (DIMER),',' =NEW FIELD,    ',' =RACAH-B      ,'
     3,' =RACAH-C      ,',' =F-INTEGRAL(2),',' =F-INTEGRAL(3),'
     4,' =F-INTEGRAL(4),',' =ZETA (1 EL.), ',' =ORB.RED.F.(Z),'
     5,' =ORB.RED.F.(X),',' =ORB.RED.F.(Y),','                '
     6,' =B20(WYBOURNE),',' =B22(WYBOURNE),',' =B40(WYBOURNE),'
     7,' =B42(WYBOURNE),',' =B43(WYBOURNE),',' =B44(WYBOURNE),'
     8,' =B60(WYBOURNE),',' =B62(WYBOURNE),',' =B63(WYBOURNE),'
     9,' =B64(WYBOURNE),',' =B66(WYBOURNE),',' =J(HEISENBERG),'
     1,' =MOL.FLD.PARAM,',' =THETA/C/WEISS,',' =CHI-0 (DIAM.),'
     1,' =CORR.(WEIGHT),',' MOL.FLD.THEORY,',' =MIX./CROSSOVR,'
     2,' =ENTHALPY,     ',' =ENTROPY,      '/
C
      DATA IDATA 
     1/1,4,1,1,4,2,1,4,3,1,4,5,1,4,6,1,4,4
     2,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     3,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     4,1,4,1,1,1,1,1,1,2,1,4,2,1,1,3,1,1,4
     5,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     6,1,4,1,1,1,1,1,1,2,1,4,2,1,2,3,1,2,4
     7,1,4,1,1,1,1,1,1,2,1,4,2,1,3,3,1,3,4
     8,1,4,1,1,1,1,1,1,2,1,4,2,1,3,3,1,3,4
     9,1,4,1,1,4,2,1,4,3,1,4,6,1,4,7,1,4,4
     1,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
     1,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
     2,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
C
     1,2,4,1,1,4,1,2,4,2,1,4,2,2,4,4,1,4,4
     1,2,4,3,1,4,3,2,4,5,1,4,5,2,4,6,1,4,6
     2,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     2,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     3,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     3,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     4,2,4,1,1,4,1,2,1,1,1,1,1,2,1,4,1,1,4
     4,2,1,2,1,1,2,2,4,2,1,4,2,2,1,3,1,1,3
     5,2,4,1,1,4,1,2,1,1,1,1,1,2,1,4,1,1,4
     5,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     6,2,4,1,1,4,1,2,1,1,1,1,1,2,2,4,1,2,4
     6,2,1,2,1,1,2,2,4,2,1,4,2,2,2,3,1,2,3
     7,2,4,1,1,4,1,2,1,1,1,1,1,2,3,4,1,3,4
     7,2,1,2,1,1,2,2,4,2,1,4,2,2,3,3,1,3,3
     8,2,4,1,1,4,1,2,1,1,1,1,1,2,3,4,1,3,4
     8,2,1,2,1,1,2,2,4,2,1,4,2,2,3,3,1,3,3
     9,2,4,1,1,4,1,2,4,2,1,4,2,2,4,4,1,4,4
     9,2,4,3,1,4,3,2,4,6,1,4,6,2,4,7,1,4,7
     1,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     1,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7
     1,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     1,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7
     2,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     2,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7/
C
      DATA KEND
     1/1,2,3,4,5,6,7,8,9,10,11,12,14,0,16,0,18,0,20,0,22,0,24,0,26,0,28,
     10,30,0,32,0,34,0,36,0/
C
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.I20)STOP 'J.NE.I'
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
C
      IF(NUROUT.EQ.0)THEN
C**   NUROUT=1, IF, AT THE END OF COMPUTATION, (A) TABLE(S) OF RESULT
C     IS/ARE RQUIRED!
C**   RETURNS TO SELECT HERE!:
      IF(NOMORE.NE.0)RETURN
      WRITE(11,3290)
 3289 WRITE(*,3290)
 3290 FORMAT(' ATTENTION PLEASE HERE IN SUBROUTINE RESTBL:',/,
     1' MOROUT.NE.0! INPUT IN I1 YES(0)/NO: NO MORE OUTPUT HERE')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3413)NOMORE
      GOTO 4913
      ENDIF
 3413 READ(*,'(I1)',ERR=3289,END=4576)NOMORE
      LMN=1
 4913 WRITE(*,2537)NOMORE
      WRITE(11,2537)NOMORE
 2537 FORMAT(I2,' =NOMORE OUTPUT HERE!!!!!!!!!')
      WRITE(7,2375)NOMORE
 2375 FORMAT(I1,' =NOMORE OUTPUT HERE')
      IF(NOMORE.EQ.0)THEN
      NOMORE=1
      RETURN
C**   RETURNS TO SELECT HERE!
      ENDIF
      ENDIF
C
      SQX=ZERO
      CFMS=DIFLOW
      CFOS=CFOSIN
      CFOSJ=CFOSJN
      IGR1=IGR1IN
      IGR2=IGR2IN
      IF(NUROUT.NE.0)THEN
      SQX=SQXFIX
      CFMS=CFMSFX
      CFOS=CFOSFX
      CFOSJ=CFOSXJ
      IGR1=IGR1FX
      IGR2=IGR2FX
      ENDIF
C
      NDAT=1
      IF(NUROUT.NE.0)NDAT=NDATAP
      THETA=STBWWW(14)
      SILAMB=STBWWW(13)
      CHIDIA=STBWWW(15)
      GEWFAC=STBWWW(16)
      IF(NUROUT.NE.0)THEN
      THETA=BWNULL(14)
      SILAMB=BWNULL(13)
      CHIDIA=BWNULL(15)
      GEWFAC=BWNULL(16)
      ENDIF
      JTHETA=0
      IF(THETA.NE.ZERO.OR.IBWWW(14).NE.0)JTHETA=1
      JALAMB=0
      IF(SILAMB.NE.ZERO.OR.IBWWW(13).NE.0)JALAMB=1
      JACHI0=0
      IF(CHIDIA.NE.ZERO.OR.IBWWW(15).NE.0)JACHI0=1
      JAFFAC=0
      IF(GEWFAC.NE.ONE.OR.IBWWW(16).NE.0)JAFFAC=1
C**   JAFFAK(!) IN COMMON, <=> 13 OR 15 OR 16.
C
      MFITTT=MFIT
      KURZTB=6
      IF(NUROUT.NE.0)THEN
      KURZTB=2
      IF(MFIT.EQ.0.AND.LESS.EQ.0)KURZTB=1
      IF(MFIT.EQ.0.AND.LESS.NE.0)MFITTT=1
      IF(JASTOP.GE.3)KURZTB=JASTOP
      IF(KURZTB.EQ.3)MFITTT=0
      IF(LESS.EQ.0.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN
      IF(MFIT.EQ.0)THEN
      WRITE(*,829)
      WRITE(11,829)
  829 FORMAT(/,' HINT: OUTPUT CORRESPONDS TO "NO FITTING TAKES PLACE"')
      WRITE(11,831)
  832 WRITE(*,831)
  831 FORMAT(' INPUT 1, IF FORM OF OUTPUT => "<=> FITTING TAKES PLACE", 
     1',/,' BUT 3 (6) FOR "NO FITTING (FITTING), BUT 6 COLUMNS" (0 ELSE)
     2')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3414)MFITIN
      GOTO 4914
      ENDIF
 3414 READ(*,'(I1)',ERR=832,END=4576)MFITIN
      LMN=1
 4914 CONTINUE
      ELSE
      WRITE(*,830)
      WRITE(11,830)
  830 FORMAT(/,' HINT: OUTPUT CORRESPONDS TO "FITTING TAKES PLACE"')
      WRITE(11,828)
  827 WRITE(*,828)
  828 FORMAT(' INPUT 1, IF FORM OF OUTPUT => "<=> NO FITTING TAKES PLACE
     1"',/,' BUT 6 (3) FOR "FITTING (NO FITTING), BUT 6 COLUMNS" (0 ELSE
     2)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3415)MFITIN
      GOTO 4915
      ENDIF
 3415 READ(*,'(I1)',ERR=827,END=4576)MFITIN
      LMN=1
 4915 CONTINUE
      ENDIF
C
      WRITE(*,2377)MFITIN
      WRITE(11,2377)MFITIN
 2377 FORMAT(I2,' =MFITIN(FORM OF OUTPUT)!!!!!!!!!')
      WRITE(7,2376)MFITIN
 2376 FORMAT(I1,' =MFITIN(FORM OF OUTPUT)')
      MFITTT=MFITIN
      IF(MFIT.NE.0.AND.MFITIN.EQ.0)MFITTT=1
      IF(MFIT.NE.0.AND.MFITIN.EQ.1)MFITTT=0
      KURZTB=2
      IF(MFITTT.EQ.0)KURZTB=1
      IF(MFITTT.GE.3)KURZTB=6
      IF(MFITTT.EQ.3)MFITTT=0
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LESS.EQ.0.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN"
      IF(MFITTT.EQ.0)THEN
      WRITE(*,829)
      WRITE(11,829)
      ELSE
      WRITE(*,830)
      WRITE(11,830)
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(NUROUT.NE.0)THEN"!
      IF(MFITTT.EQ.0)THEN
C**   IF(JAFFAK.EQ.0.AND.JTHETA.EQ.0):
      KSTART=1
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=2
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=3
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=4
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=5
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=6
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=7
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=8
C
      IF(JAFFAK.EQ.0.AND.JTHETA.NE.0)KSTART=9
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.NE.0)
     1KSTART=10
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=11
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=12
      ELSE IF(MFITTT.NE.0)THEN
C**   IF(JAFFAK.EQ.0.AND.JTHETA.EQ.0):
      KSTART=13
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=15
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=17
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=19
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=21
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=23
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=25
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=27
C
      IF(JAFFAK.EQ.0.AND.JTHETA.NE.0)KSTART=29
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.NE.0)
     1KSTART=31
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=33
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=35
      ENDIF
      KKK=KSTART
C
      IF(MORTEX.GT.0.AND.LESS.EQ.0.AND.KLICK1.EQ.0)THEN
      KLICK1=1
      WRITE(*,567)
      WRITE(11,567)
  567 FORMAT(' CHI((1)...(2),1:4,1:7):'
     1,' (1) CALCULATED VALUES, (2) VALUES BASED ON MEASURED ONES')
      WRITE(*,678)
      WRITE(11,678)
  678 FORMAT(' CHI(1,(1)...(4),1:7):'
     1,' (1) CALCULATED VALUES, E.G. FROM FORMULA OF VANVLECK,'
     2,/,' (2) ... INCLUDING MOLECULAR FIELD PARAMETER,'
     3,/,' (3) INCLUDING IN ADDITION CHI-0,',/,' (4) INCLUDING'
     4,' FURTHERMORE A CORRECTION OF WEIGHT OF SAMPLE.')
      WRITE(*,789)
      WRITE(11,789)
  789 FORMAT(' CHI(2,(1)...(4),1:7):',/
     1,' MEASURED VALUES WITH (1) THREE, (2) TWO, (3) ONE, (4) WITHOUT'
     2,' (I.E. AS READ IN)',/,' CORRECTIONS (CORRECTIONS IN PRINCIPLE'
     3,' AS ABOVE, BUT REVERSED)')
      WRITE(*,890)
      WRITE(11,890)
  890 FORMAT(' CHI(1:2,1:4.(1)...(7)):'
     1,' (1) CHI IN SI UNIT M**3/MOL, (2) RECIPROCAL CHI,',/
     2,' (5) MAGNETISATION IN SI UNIT TESLA*M**3/MOL, (3) MAGNETIC'
     3,/,' MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G. SATURATION MOMENT),'
     4,/,' (4) EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS, (6) CHI IN',
     5' CGS UNIT CM**3/MOL,',/,' (7) PSEUDO EFFECTIVE MAGNETIC MOMENT'
     6,' (WITH SQRT(CHI*(T-THETA))!).')
C** 1) CHI IN CGS UNIT CM**3/MOL = CHI IN SI UNIT M**3/MOL TIMES (VPREZ6=79577.47)
C   2) TESLA*M**3 = VOLT*SECOND*M WITH VOLT = KG*M**2/(AMPERE*SECOND**3)
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(MORTEX.GT.0.AND.LESS.EQ.0.AND.KLICK1.EQ.0)THEN"!
C
      LOOPNR=-1
C**   FROM BELOW (NEAR END):
  999 CONTINUE
C**   FOR EXTRA OUTPUT BELOW, IF "MORE DIRECTIONS" (DO 196), AND FOR "MORE TABLES":
      LOOPNR=LOOPNR+1
      KKK=KKK+LOOPNR
      DO 1234 J=1,6
      DO 7149 I=1,3
      II(I,J)=IDATA(I,J,KKK)
 7149 CONTINUE
 1234 CONTINUE
      IF(KURZTB.GT.2.AND.LOOPNR.EQ.0.AND.LESS.EQ.0)THEN
      WRITE(*,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(*,891)
      WRITE(11,891)
  891 FORMAT(
     1' ... THESE DIGITS MEAN THE FOLLOWING (DIMENSION CHI(2,4,7)):')
      WRITE(*,344)((II(I,J),I=1,3),J=1,6)
      WRITE(11,344)((II(I,J),I=1,3),J=1,6)
  344 FORMAT(
     1' CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,'), '
     1,'CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,'), '
     1,'CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,')')
      WRITE(*,567)
      WRITE(11,567)
C 567 FORMAT: SEE ABOVE!
      WRITE(11,3453)(QKK(I),I=1,7)
      WRITE(11,3454)(QJJ(I),I=1,4)
 3453 FORMAT(' CHI(,,1:7) MEANS: ',7A16)
 3454 FORMAT(' THE FORMER (TO COMPARE WITH THAT) BASED ON CHI(1,1:4, ):
     1',4A16) 
      WRITE(*,3457)(QKK(I),I=1,7)
      WRITE(*,3458)(QJJ(I),I=1,4)
 3457 FORMAT(' CHI( , ,1:7) MEANS:       ',1A16,/,3A16,/,3A16)
 3458 FORMAT(' THE FORMER (TO COMPARE WITH THAT) BASED ON CHI(1,1:4, ):
     1',/,4A16) 
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(KURZTB.GT.2.AND.LOOPNR.EQ.0.AND.LESS.EQ.0)THEN!
C**   IF ERROR WHEN READING BELOW:
 8237 CONTINUE
      IF(KURZTB.GT.2.AND.LESS.EQ.0.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN
      WRITE(11,892)
      WRITE(*,892)
  892 FORMAT(' INPUT IN 18I1 18 DIGITS, WHICH MAY BE DIFFERENT'
     1,' (0 <=> AS BEFORE)',/,
     1' (THE 1TH DIGIT =3,4,>4 <=> =1,2,0, BUT 2 COLUMNS => TERMINAL)')
      IF(LOOPNR.NE.0)WRITE(*,893)((IDATA(I,J,KKK),I=1,3),J=1,6)
      IF(LOOPNR.NE.0)WRITE(11,893)((IDATA(I,J,KKK),I=1,3),J=1,6)
  893 FORMAT(' E.G. THE FOLLOWING:',18I1)
      IF(LMN.EQ.0)THEN
      READ(77,'(18I1)',ERR=5588,END=3416)((IIN(I,J),I=1,3),J=1,6)
      GOTO 4916
      ENDIF
 3416 READ(*,'(18I1)',ERR=8237,END=4576)((IIN(I,J),I=1,3),J=1,6)
      LMN=1
 4916 WRITE(7,'(18I1)')((IIN(I,J),I=1,3),J=1,6)
      WRITE(*,'(I2,17I1)')((IIN(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((IIN(I,J),I=1,3),J=1,6)
      KURZZL=0
      IF(IIN(1,1).GT.2)THEN
      KURZZL=1
      IIN(1,1)=IIN(1,1)-2
      ENDIF
      DO 2243 J=1,6
      DO 234 I=1,3
      IF(IIN(I,J).NE.0)THEN
      IF(I.EQ.1.AND.IIN(I,J).LE.2)II(I,J)=IIN(I,J)
      IF(I.EQ.2.AND.IIN(I,J).LE.4)II(I,J)=IIN(I,J)
      IF(I.EQ.3.AND.IIN(I,J).LE.7)II(I,J)=IIN(I,J)
      ENDIF
  234 CONTINUE
 2243 CONTINUE
      WRITE(*,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      ENDIF
C
      IF(NUROUT.EQ.0)THEN
      WRITE(*,3291)
      WRITE(11,3291)
 3291 FORMAT(' SQX, NOT CALCULATED HERE, WAS SET TO ZERO!')
      ELSE IF(NUROUT.NE.0.AND.LOOPNR.EQ.0)THEN
      IF(NDATAM.EQ.0)THEN
      WRITE(*,3292)
      WRITE(11,3292)
 3292 FORMAT(' NDATAM.EQ.0: SQX REMAINS ZERO!')
      ELSE IF(NDATAM.NE.0)THEN
      IF(MORTEX.GE.0)THEN
      WRITE(*,3181)IOPT4
      WRITE(11,3181)IOPT4
 3181 FORMAT(
     1' CHI ITSELF MAY BE FITTED (1) OR ONE/CHI (2) OR MAGNETIC MOMENT O
     2F 1 ATOM (3)',/,' OR EFFECTIVE MAGNETIC MOMENT (4) (BOTH IN BOHR M
     3AGNETONS):',I2)
      IF(IOPT3.NE.0)THEN
      WRITE(*,3182)
      WRITE(11,3182)
 3182 FORMAT(
     1' CHI-0, AN ADDITIVE CONSTANT TO CHI IN SI UNITS, IS NOT ZERO',/
     2,' AND/OR WAS FITTED: CHI-0 WAS NOT ADDED TO THE CALC. CHI-START'
     3,/,' IN COMPARING CALCULATED AND MEASURED CHI TO GET SQX!')
      ENDIF
      IF(NOPROZ.EQ.0)THEN
      WRITE(*,3119)
      WRITE(11,3119)
 3119 FORMAT(/,
     1' A (SUM OF) LEAST SQUARE(S) FIT WAS DONE (SQUARED WAS CHI-CALC./C
     2HI-MEAS.-ONE),',/,' BUT SQRT((THIS SUM)/(No.OF VAL. FITTED)) IS GI
     3VEN HERE AS SQX (*100<=>"%")!:')
      ELSE IF(NOPROZ.NE.0)THEN
      WRITE(*,3118)
      WRITE(11,3118)
 3118 FORMAT(
     1' A (SUM OF) LEAST SQUARE(S) FIT WAS DONE (SQUARED WAS CHI-CALC.-C
     2HI-MEAS.),',/,' BUT "CORR."*SQRT((THIS SUM)/(No.OF VAL. FITTED)) I
     3S GIVEN HERE AS SQX!',/,' (NOT "%", BUT "CORR." IS USED TO GET A R
     4ESULT SIMILAR TO "%"!)')
      ENDIF
      ENDIF
      ENDIF
      ENDIF
C
      IF(MORTEX.GT.0.AND.KLICK2.EQ.0)THEN
      KLICK2=1
      WRITE(*,3117)
      WRITE(11,3117)
 3117 FORMAT(
     1' SQX, CRYSTAL FIELD MINIMAL SPLITTING (CFMS) AND THE TWO DEGENERA
     2CIES',/,' BELONGING TO THESE TWO LEVELS, AND THE EIGENVALUE OF THE
     3 LEVEL "No. OF VAL.',/,' (NRVAL)", WHICH MAY BE THE CRYSTAL FIELD 
     4OVER ALL SPLITTING (CFOS), IF NRVAL',/,' HAS BEEN CHOSEN IN THE RI
     5GHT WAY! AND: CFOSJ(NRVALJ) <=> NRVALJ=2*J+1,',/,' IF F EL. AND <=
     6> NRVALJ=SPIN-MULTIPL.*ORB.-MULTIPL., ELSE.')
      ENDIF
      IF(LOOPNR.EQ.0)THEN
      WRITE(*,3120)SQX,CFMS,IGR1,IGR2,CFOS,NRVAL,CFOSJ,NRVALJ
      WRITE(11,3120)SQX,CFMS,IGR1,IGR2,CFOS,NRVAL,CFOSJ,NRVALJ
 3120 FORMAT(
     1' SQX, CFMS, DEGEN.1, DEGEN.2, CFOS, No. OF VAL., CFOSJ, NRVALJ ='
     1,/,2D12.4,2I3,D12.4,I6,D12.4,I6)
      WRITE(*,354)
      WRITE(11,354)
  354 FORMAT(/,' "00" MEANS: FITTED, "10": NOT (FROM INPUT), "01": NOT (
     1FROM CALC.)')
      IF(NOTONE.NE.0)THEN
      WRITE(*,3544)
      WRITE(11,3544)
 3544 FORMAT(' SUM OF 1/SIGMA**2 = No. OF VALUES!')
      ENDIF
      ENDIF
      IF(NUROUT.NE.0.AND.LOOPNR.EQ.0)THEN
      IF(JTHETA.NE.0)THEN
      WRITE(*,1944)THETA
      WRITE(11,1944)THETA
 1944 FORMAT(' THETA MAY BE NOT ZERO: THETA=',F12.6,'(LAMBDA=0 THEN!)')
      ENDIF
C
      IF(KURZTB.GT.2)THEN
      WRITE(11,567)
      WRITE(*,567)
      WRITE(11,1945)
      WRITE(*,1945)
 1945 FORMAT(' "CHI-START" MEANS: CHI CALCULATED FROM ENERGIES AND MAGN.
     1 MOMENTS WITHOUT',/,' ANY FURTHER CORRECTIONS, "CHI-CALC." INCLUDE
     2S ALL THESE CORRECTIONS.',/,' FOR "MEASURED CHI" ALL CORRECTIONS ' 
     2,'(LAMBDA, CHI-0, WEIGHT) ARE APPLIED',/,' IN REVERSED ORDER, AND 
     3CHI-MEAS.=CHI(2,4,1) AND CHI(1,4,1) HAVE TO BE COMPARED!')
      ENDIF
      ENDIF
      IF(KURZTB.GT.2.AND.NUROUT.NE.0)THEN
      WRITE(11,3450)(QII(II(1,I)),I=1,6)
      WRITE(11,3451)(QKK(II(3,I)),I=1,6)
      WRITE(11,3452)(QJJ(II(2,I)),I=1,6)
 3450 FORMAT(/,'            CHI(*, , ) MEANS:       ',6A16)
 3451 FORMAT('            CHI( , ,*) MEANS:       ',6A16)
 3452 FORMAT('  (TO COMPARE WITH THAT) BASED ON: ',6A16)
      WRITE(*,3462)(QII(II(1,I)),I=1,6)
      WRITE(*,3455)(QKK(II(3,I)),I=1,6)
      WRITE(*,3456)(QJJ(II(2,I)),I=1,6)
 3462 FORMAT('            CHI(*, , ) MEANS:       ',2A16,/,4A14)
 3455 FORMAT('            CHI( , ,*) MEANS:       ',2A16,/,4A16)
 3456 FORMAT('  (TO COMPARE WITH THAT) BASED ON: ',2A16,/,4A16)
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(11,345)((II(I,J),I=1,3),J=1,6)
  345 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA    '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')')
      WRITE(*,346)((II(I,J),I=1,3),J=1,6)
  346 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA    '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      ',
     1/,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')')
      ELSE
      WRITE(11,347)(QSS(I),I=KURZTB,1,-1)
      WRITE(*,347)(QSS(I),I=KURZTB,1,-1)
  347 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA',2A16)
      ENDIF
C
C**   SEE ABOVE: NDAT =1 OR =NDATAP!:
      DO 195 N=1,NDAT
      NR=NRTEMP
      IF(NUROUT.NE.0)NR=N
C
      IF(TEMPIK(NR).LT.ZERO)THEN
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=CHISTA(NR)
      CHI(2,I,J)=CHIMEA(NR)
 4121 CONTINUE
 4122 CONTINUE
      GOTO 194
      ENDIF
C
      TEMPTH=TEMPIK(NR)-THETA
      IF(NUROUT.EQ.0)GOTO 194
C
C**   THE FOLLOWING 50 LINES ARE COPIED FROM ABOVE (NRTEMP<=>NR, CHI(1,1,1)
C     <=>CHISTA(NR), BWWW=>STBWWW (=>"ABOVE")), BUT WITHOUT COMMENT!:
      CHI(2,4,1)=CHIMEA(NR)
      CHI(1,1,1)=CHISTA(NR)
      IF(NUROUT.NE.0)CHI(1,1,1)=CHIFIX(NR)
      CHI(1,2,1)=CHI(1,1,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(1,1,1).NE.ZERO)DENOM=-SILAMB+ONE/CHI(1,1,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(1,2,1)=ONE/DENOM
      ENDIF
      CHI(1,3,1)=CHI(1,2,1)+CHIDIA
      CHI(1,4,1)=CHI(1,3,1)
      IF(GEWFAC.NE.ONE)CHI(1,4,1)=CHI(1,3,1)/GEWFAC
      TESLAS=TESDAT(NR)
      DO 3121 I=1,4
      CHI(1,I,2)=ZERO
      IF(CHI(1,I,1).NE.ZERO)CHI(1,I,2)=ONE/CHI(1,I,1)
      CHI(1,I,5)=CHI(1,I,1)*TESLAS
      CHI(1,I,3)=-CHI(1,I,5)/PREVOR
      CHI(1,I,4)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPIK(NR).GT.ZERO)CHI(1,I,4)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPIK(NR))
      CHI(1,I,7)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(1,I,7)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPTH)
      CHI(1,I,6)=CHI(1,I,1)*VPREZ6
 3121 CONTINUE
C
      CHI(2,3,1)=CHI(2,4,1)
      IF(GEWFAC.NE.ONE)CHI(2,3,1)=CHI(2,4,1)*GEWFAC
      CHI(2,2,1)=CHI(2,3,1)-CHIDIA
      CHI(2,1,1)=CHI(2,2,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(2,2,1).NE.ZERO)DENOM=+SILAMB+ONE/CHI(2,2,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(2,1,1)=ONE/DENOM
      ENDIF
C
      DO 3122 I=1,4
      CHI(2,I,2)=ZERO
      IF(CHI(2,I,1).NE.ZERO)CHI(2,I,2)=ONE/CHI(2,I,1)
      CHI(2,I,5)=CHI(2,I,1)*TESLAS
      CHI(2,I,3)=-CHI(2,I,5)/PREVOR
      CHI(2,I,4)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPIK(NR).GT.ZERO)CHI(2,I,4)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPIK(NR))
      CHI(2,I,7)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(2,I,7)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPTH)
      CHI(2,I,6)=CHI(2,I,1)*VPREZ6
 3122 CONTINUE
C
  194 CONTINUE
C
      IF(KURZTB.GT.2)THEN
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
      IF(KURZZL.EQ.0)THEN
      WRITE(*,457)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
      ELSE
      WRITE(*,475)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
  457 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,2D16.8,/,4D16.8)
  475 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,2D16.8)
      ELSE IF(KURZTB.EQ.1)THEN
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      WRITE(*,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      ELSE
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      WRITE(*,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
      IF(NUROUT.NE.0)THEN
      IF(N.EQ.NDAT)THEN
      WRITE(*,5678)
      WRITE(11,5678)
 5678 FORMAT(
     1' THE TABLE PUT OUT HERE ALSO PUT OUT TO FILE fort.1!')
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
  456 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,6(E16.8))
      ELSE IF(KURZTB.EQ.1)THEN
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      ELSE
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
      ENDIF
C
  195 CONTINUE
C
      IF(LAUFNR.NE.0.AND.JAFAST.NE.0.AND.LOOPNR.EQ.0)THEN
      WRITE(*,4579)
      WRITE(11,4579)
 4579 FORMAT(
     1' ATTENTION: RESULT OF FITTING HAS TO BE VERIFIED ("JAFAST"!)!')
      ENDIF
C
      IF(LOOPNR.EQ.0)THEN
C**   DO 1971 I=27(!),35
C     IMIN=I-15
C     VLSTNG(I)=BWNULL(IMIN)
C1971 CONTINUE
      DO 1970 I=1,40
      WLSTNG(I)=VLSTNG(I)
      IF(I.LE.35)QQLIST(I)=QLIST(I)
      IF(I.GT.35)QQLIST(I)='                '
 1970 CONTINUE
C**   GEWFAC:
      IF(WLSTNG(31).EQ.ONE)WLSTNG(31)=ZERO
      LISTNG=0
      DO 1972 I=1,40
      LSTNG1=LISTNG+1
      IF(WLSTNG(LSTNG1).NE.ZERO)THEN
      LISTNG=LISTNG+1
      ELSE
      LSTNG2=LISTNG+2
      DO 1973 IM=LSTNG2,40
      IMIN=IM-1
      WLSTNG(IMIN)=WLSTNG(IM)
      QQLIST(IMIN)=QQLIST(IM)
 1973 CONTINUE
      ENDIF
 1972 CONTINUE
      WRITE(*,1971)NREL,KLWERT,KASSUM,NRVAL
      WRITE(11,1971)NREL,KLWERT,KASSUM,NRVAL
 1971 FORMAT(I5,' ELECTRON(S), ',I5,' =l VALUE, '
     1,I5,' BASIS STATES, ',I5,' VALUES USED LATER ON, ')
      IF(JAFAST.NE.0.AND.IOPT2.EQ.2)THEN
      WRITE(*,1974)NRVALF,IGRUND
      WRITE(11,1974)NRVALF,IGRUND
 1974 FORMAT
     1(' (',I3,' STATES INTERMEDIATELY, ',I3,' STATES "COMB.MODEL")')
      ELSE IF(JAFAST.NE.0)THEN
      WRITE(*,1975)NRVALF
      WRITE(11,1975)NRVALF
 1975 FORMAT(' (',I3,' STATES INTERMEDIATELY)')
      ELSE IF(IOPT2.EQ.2)THEN
      WRITE(*,1976)IGRUND
      WRITE(11,1976)IGRUND
 1976 FORMAT(' (',I3,' STATES "COMB.MODEL")')
      ENDIF
      IF(LISTNG.NE.0)THEN
      WRITE(*,1980)(WLSTNG(I),QQLIST(I),I=1,LISTNG)
      WRITE(11,1980)(WLSTNG(I),QQLIST(I),I=1,LISTNG)
 1980 FORMAT(3(D16.8,A16))
      ENDIF
      WRITE(*,1989)SQX
      WRITE(11,1989)SQX
 1989 FORMAT(' SQX, REPEATED FROM ABOVE, =',D12.4)
      ENDIF
C
      IF(LOOPNR.EQ.0.AND.IOPT1.EQ.1)THEN
      WRITE(11,197)
      WRITE(*,197)
  197 FORMAT(
     1' ... AND THE 1, 2 OR 3 DIRECTION(S) (Z-, X-, Y-) OF CHI(1,1,1) AN
     1D',/,' CHI(1,1,1) ITSELF, I.E. THE MEAN VALUE.')
      IF(JASUCC.NE.0)THEN
      WRITE(11,1917)
      WRITE(*,1917)
 1917 FORMAT(' THE MEAN VALUE HERE IS THE SAME AS THE CORRESPONDING VALU
     1E ABOVE!')
      ELSE IF(NOCONV.NE.0)THEN
      WRITE(11,1918)
      WRITE(*,1918)
 1918 FORMAT(' THE MEAN VALUE HERE IS NOT THE SAME AS THE CORRESPONDING 
     1VALUE ABOVE,',/,' BECAUSE HERE ARE THE ACTUAL VALUES, NOT THE FIXE
     2D ONES (NO CONVERGENCE)!')
      ELSE
      WRITE(11,1919)
      WRITE(*,1919)
 1919 FORMAT(' THE MEAN VALUE HERE IS NEARLY THE SAME AS THE CORRESPONDI
     1NG VALUE ABOVE:',/,' CONVERGENCE, BUT A FORMER ITER. WAS BETTER!')
      ENDIF
      WRITE(11,1990)
 1990 FORMAT(' START Z-, X-, Y-DIRECTION(S) AND MEAN VALUE:')
      DO 196 N=1,NDAT
      NR=NRTEMP
      IF(NUROUT.NE.0)NR=N
      TEMPTH=TEMPIK(NR)-THETA
      WRITE(11,458)NR,TEMPIK(NR),TEMPTH,(CHIZXY(I,NR),I=1,3),CHISTA(NR)
      WRITE(*,458)NR,TEMPIK(NR),TEMPTH,(CHIZXY(I,NR),I=1,3),CHISTA(NR)
  458 FORMAT(I4,F7.2,F12.6,3D16.8,9X,D16.8)
  196 CONTINUE
      WRITE(11,1991)
 1991 FORMAT(' END OF Z-, X-, Y-DIRECTION(S) AND MEAN VALUE!')
      ENDIF
C
C**   LESS.NE.0 => JASTOP=0! $ MOROUT.NE.0 => JASTOP=0!
      IF(LESS.NE.0.OR.JASTOP.NE.0)THEN
      WRITE(*,1304)
      WRITE(11,1304)
 1304 FORMAT(' "LESS OUTPUT" OR "JASTOP" WAS CHOSEN: STOP')
      REWIND(8)
      REWIND(9)
      WRITE(8,2178)LAUFNR,SQX
      WRITE(9,2178)LAUFNR,SQX
 2178 FORMAT(' JASTOP (LESS.NE.0.OR.JASTOP.NE.0),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2178)LAUFNR,SQX
      STOP 'JASTOP'
      ENDIF
C**   STOP FOR THE CONDITIONS ABOVE!
C
C**   IF(JASTOP.EQ.0)THEN
      IF(LESS.EQ.0)THEN
      IF(KURZTB.GT.2)THEN
      WRITE(11,1302)
 1301 WRITE(*,1302)
 1302 FORMAT(/,
     1' INPUT 0 FOR ANOTHER SORT OF (FURTHER) OUTPUT, 1 TO RETURN (TO'
     1,/,' CALLING ROUTINE), >1 TO STOP!')
      IF(KKK.LT.KEND(KSTART))THEN
      WRITE(11,1308)
      WRITE(*,1308)
 1308 FORMAT(' HINT: POSSIBLY CHOOSE FURTHER OUTPUT!')
      ELSE IF(KKK.EQ.KEND(KSTART))THEN
      WRITE(11,1309)
      WRITE(*,1309)
 1309 FORMAT(' HINT: POSSIBLY CHOOSE NO FURTHER OUTPUT!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3417)JASTOR
      GOTO 4917
      ENDIF
 3417 READ(*,'(I1)',ERR=1301,END=4576)JASTOR
      LMN=1
 4917 WRITE(7,2378)JASTOR
      ELSE IF(KURZTB.LE.2)THEN
      WRITE(11,1320)
 1321 WRITE(*,1320)
 1320 FORMAT(/,
     1' INPUT 1 TO RETURN (TO CALLING ROUTINE), 0 OR >1 TO STOP!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3418)JASTOR
      GOTO 4918
      ENDIF
 3418 READ(*,'(I1)',ERR=1321,END=4576)JASTOR
      LMN=1
 4918 IF(JASTOR.EQ.0)JASTOR=2
      WRITE(7,2378)JASTOR
      ENDIF
C**   GOTO 1306
      ELSE IF(LESS.NE.0)THEN
      JASTOR=2
      ENDIF
C**   ENDIF TO C** "IF(JASTOP.EQ.0)THEN" - JASTOP ALWAYS =0 ABOVE!
C
C1306 CONTINUE
 2378 FORMAT(I1,' =JASTOR(2=STOP)')
      WRITE(11,2783)JASTOR
      WRITE(*,2783)JASTOR
 2783 FORMAT(I2,' =JASTOR(2=STOP)!!!!!!!!!')
      IF(JASTOR.GT.1)THEN
      REWIND(8)
      REWIND(9)
      WRITE(8,2179)LAUFNR,SQX
      WRITE(9,2179)LAUFNR,SQX
 2179 FORMAT(' JASTOR = 2 (=STOP),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2179)LAUFNR,SQX
      STOP 'JASTOR'
      ENDIF
      IF(JASTOR.EQ.0)GOTO 999
C**   RETURNS MOSTLY TO SUSFIT (ELSE TO SELECT)!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND RESTBL
      END
CEND-FILE REDUCT.F
      SUBROUTINE ECKART(NGROUP
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CALLED BY SUSC! - CALLS REDUCE(CKART)! - USES DSPEV(W)!
C**   IRREDUCIBLE TENSOR METHODS ARE USED HERE FOR THE MATRIX-ELEMENTS
C     IN CONNECTION WITH THE CRYSTAL FIELD. THERE ARE TWO ESSENTIALLY
C     DIFFERENT ROUTINES FOR THE CASE OF 4F**N ELECTRONIC CONFIGURATION:
C     SUBROUTINE TANABE FOR NF**N ELECTRONIC CONFIGURATION WITH A BASIS
C     OF MICRO STATES AND SUBROUTINE ECKART FOR 4F**N ELECTRONIC CONFI-
C     GURATION WITH SPECIFIC GROUND TERM (2S+1)L WITH THIS GROUND TERM
C     AS A BASIS. THE WIGNER-ECKART THEOREM IS APPLIED HERE! SUBROUTINE
C     ECKART CALLS SUBROUTINE REDUCE(CKART), WHICH CALLS SELECT JUST
C     AS SUBROUTINE TANABE (VIA REDUCT) DOES! IF "JATEST", ECKART WORKS
C     FOR D EL., TOO! - ALTERNATIVELY TO REDUCE (BUT WITH NO RETURN)
C     CHANGE (AND SAUNDE) MAY BE CALLED TO CHANGE THE BASIS OF THE EIGEN-
C     VECTORS FROM THE RUSSELL-SAUNDERS STATE ABOVE TO A BASIS OF MICRO
C     STATES! - ECKART MAY SERVE AS A ROUTINE, WHICH TAKES INTO ACCOUNT
C     THE J GROUND STATE OF RARE EARTH IONS ONLY, IF THE SPIN-ORBIT
C     COUPLING CONSTANT IS SET TO "INFINITY" (MAY BE 1.0E+06)!
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,TESINT
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE REDUCE IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,MATDIM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE ECKART, THIS SUBROUTINE HERE:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
C**   FUNCTIONS/SUBROUTINES NEEDED:
C     CKCOE FOR CONDON-SHORTLEY COEFFICIENTS (INCL. DREIJ AND FACTLR),
C     AND DREIJ (3J-SYMBOLS) ITSELF.
C**   (LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONIC SPECTRA,
C**          CAMBRIDGE UNIVERSITY PRESS 1970.)
C     IN ADDITION A DIAGONALIZATION ROUTINE (FOR INSTANCE DSPEV OF LIBRARY
C     ESSL (BLAS), BUT DSPEV IS REALLY CALLED VIA DSPEVW - SEE PROGRAM
C     CONDON FOR DETAILS!) IS NEEDED.
C**   INSTEAD OF CALLING THE DIAGONALIZATION ROUTINE DIRECTLY, SUBROUTINE
C     BLOCUT MAY BE CALLED  FIRSTLY TO BLOCK-OUT THE MATRIX BEFORE
C     DIAGONALIZING THE BLOCKS ONE AFTER ANOTHER! 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF(*),BLOCKD(*),BLOCKS(*)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
C**   ALL VALUES ARE IN SI UNITS, WITH TWO EXCEPTIONS: ENERGIES ARE ALWAYS
C     IN CM**-1 CORRESP. TO "WAVENUMBER=ENERGY/(PLANCK CONST.*VELOCITY OF
C     LIGHT)", AND MAGNETIC FLUX DENSITY MAY BE IN CM**-1 CORRESP. TO
C     "FLUX DENSITY=ENERGY/BOHR MAGNETON".
C     THE CONST. OF BOLTZMANN IN CM**-1*KELVIN**-1 INSTEAD OF
C     JOULE*KELVIN**-1 IS BOLZCM=0.695040. THE BOHR MAGNETON USED ABOVE
C     IS THAT NAMED AFTER AMPERE, IS IN A*M**2=J/TESLA, AND IS SIMUBA=
C     9.27402*10**-24. THE BOHR MAGNETON NAMED AFTER COULOMB IS IN V*S*M,
C     AND IT IS SIMUBC=SIMUBA*4PI*10**-7=1.165407*10**-29. THE CONVERSION
C     FACTOR, WHICH TAKES MAGNETIC FLUX DENSITY IN TESLAS INTO SUCH IN
C     CM**-1 IS TESLCM=0.466864. AVOGADROS NUMBER IN MOL**-1 IS AVOGAD=
C     6.02214*10**23. THE CALCULATED CHI-MOL VALUE IS IN SI UNITS, BUT IT
C     IS ALSO GIVEN IN GGS UNITS (MULTIPL. WITH 10**6/4PI=VPREZ6=79577.47D0).
C
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0
     1,HALF=0.5D0,QUART=0.25D0,PARWUR=1.0D-6,PAR=PARWUR**2,PARWUC=1.0D-8
     1,PARWUQ=PAR,FOUR=4.0D0,FUENF=5.0D0,SECHS=6.0D0,TESLCM=0.466864D0)
C
      DOUBLE PRECISION FMIKR1(ND2002,*),FMIKR2(ND2002,*)
     2,DBLMAT(ND2002,*),EIVECV(ND2002,*),EIWERT(*),FINTEG(4)
     4,UPML(25),DOWNML(25),UPMS(8),DOWNMS(8)
     6,BWWOLD(I16),BSTART(24)
     7,DIRECZ(3),REDFAZ(3),TWOS(13)
     1,DUMMY(*),BLOMAT(*),WNRW(*),BESETZ(*)
      INTEGER MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
     1,MSMLNW(*),MSMLNS(*)
      INTEGER LDAT(13),MULDAT(13),INVERT(13),MQUERR(200),MEHRWE(13)
      SAVE
C
C**   IN THE FOLLOWING: K(SMALL)L-VALUE (L VALUE FOR ONE(!) EL.!):
C     KLWERT=3 FOR F EL.
C**   IN THE FOLLOWING:
C**   (CAPITAL)L-VALUES (L VALUES FOR THE LS-COUPL. SYMBOL!)
      DATA LDAT/3,5,6,6,5,3,0,3,5,6,6,5,3/
C**   IN THE FOLLOWING: THE MULTIPLICITIES:
      DATA MULDAT/2,3,4,5,6,7,8,7,6,5,4,3,2/
C**   IN THE FOLLOWING: THERE ARE HOLES YES/NO=-1/1:
      DATA INVERT/1,1,1,-1,-1,-1,0,1,1,1,-1,-1,-1/
C**   IN THE FOLLOWING: TWO TIMES S VALUE:
      DATA TWOS/1.D0,2.D0,3.D0,4.D0,5.D0,6.D0,ZERO
     1,-6.D0,-5.D0,-4.D0,-3.D0,-2.D0,-1.D0/
C**   "MEHRWE": THE SHELL IS MORE THAN HALF OR LESS THAN HALF FILLED:
      DATA MEHRWE/-1,-1,-1,-1,-1,-1,0,1,1,1,1,1,1/
      DATA LAUF,KLICKB,LAUFF,JABLOC,MOROUU,KLICK7,KLICK8,KLICK9
     1/0,0,0,0,0,0,0,0/
      DATA NRPAIR,JASHIF,JACHAN,JADEL,JATST/0,0,0,0,0/
      DATA ZUKSI/ZERO/
C
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(LAUF.NE.0)GOTO 1234
C**   THE FOLLOWING CALCULATION NEEDS TO BE DONE FOR THE VERY FIRST TIME ONLY:
      LAUF=1
C
      MEHREK=0
      KLWERT=3
      FLAMBD=ZERO
      IF(TWOS(NREL).NE.ZERO)FLAMBD=FKSI/TWOS(NREL)
C**   IF "D EL.", SEE BELOW!
C
      IF(JATEST.EQ.0)GOTO 2996
      WRITE(*,2999)
      WRITE(11,2999)
 2999 FORMAT(' ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE',/
     1,' FORM "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY/CRYSTAL QUANTUM NU
     2MBERS!',/,' IN SUBROUTINE CHANGE THE SAME NUMBERS WILL APPEAR, BUT
     3 NOT SO,',/,' BECAUSE DEGENERATED MAY BE MIXED, IF BLOCUT IS NOT C
     4ALLED (WITH "MOROUT")!')
C
      WRITE(11,3000)
 8238 WRITE(*,3000)
 3000 FORMAT(' INPUT IN I1 YES/NO(0) CALL OF BLOCUT!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3419)JABLOC
      GOTO 4919
      ENDIF
 3419 READ(*,'(I1)',ERR=8238,END=4576)JABLOC
      LMN=1
 4919 WRITE(7,3001)JABLOC
 3001 FORMAT(I1,' = JABLOC(KING OUT)')
      WRITE(*,3100)JABLOC
      WRITE(11,3100)JABLOC
 3100 FORMAT(I2,' = JABLOC(KING OUT)!!!!!!!!!')
C
      WRITE(11,2998)
 8239 WRITE(*,2998)
 2998 FORMAT(
     1' ONE MAY CALCULATE CHI ON THE BASIS OF ONLY THE GROUND TERM WITH'
     2,' SPECIFIC',/,' J(!)-VALUE, IF LAMBDA = 10**6! INPUT YES/NO(0)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3420)JASHIF
      GOTO 4920
      ENDIF
 3420 READ(*,'(I1)',ERR=8239,END=4576)JASHIF
      LMN=1
 4920 WRITE(7,2379)JASHIF
 2379 FORMAT(I1,' =JASHIF("J(!)-VALUE)"')
      WRITE(*,2937)JASHIF
      WRITE(11,2937)JASHIF
 2937 FORMAT(I2,' =JASHIF("J(!)-VALUE)"!!!!!!!!!')
C**   FOR EASIER WATCHING, THE EIGENVALUES WILL BE SHIFTED SO, THAT THE
C     E-VALUE, WHICH LIES LOWEST, BECOMES NEARLY(!) ZERO, IF LAMBDA=10**6!
      IF(JASHIF.NE.0)THEN
      FLAMBD=DBLE(-MEHRWE(NREL))*1.0D+06
      WRITE(*,2988)
      WRITE(11,2988)
 2988 FORMAT(
     1' NO FURTHER TESTS ALLOWED, EXCEPT CALL OF SUBROUTINE CHANGE!')
      ENDIF
      IF(KLWERT.EQ.3)THEN
      WRITE(*,2989)FLAMBD
      WRITE(11,2989)FLAMBD
 2989 FORMAT(' (F)LAMBDA=',D16.8)
      ENDIF
C
      WRITE(11,2997)
 8240 WRITE(*,2997)
 2997 FORMAT(' IN SUBROUTINE '
     1,'CHANGE THE BASIS USED HERE WILL BE CHANGED (AFTER THAT: STOP!)'
     2,/,' TO A BASIS OF MICRO STATES! "CALL CHANGE" YES/NO(0)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3421)JACHAN
      GOTO 4921
      ENDIF
 3421 READ(*,'(I1)',ERR=8240,END=4576)JACHAN
      LMN=1
 4921 WRITE(7,2380)JACHAN
 2380 FORMAT(I1,' =JACHAN("CALL CHANGE")')
      WRITE(*,2038)JACHAN
      WRITE(11,2038)JACHAN
 2038 FORMAT(I2,' =JACHAN("CALL CHANGE")!!!!!!!!!')
C
      IF(JASHIF.NE.0)GOTO 2995
C
      WRITE(11,1111)
 8241 WRITE(*,1111)
 1111 FORMAT(' BECAUSE "TEST" HAS BEEN CHOSEN, D EL. WITH SPECIFIC LS GR
     1OUND TERM',/,' (E.G. FE 3D**6 HIGH- OR LOW-SPIN) MAY BE EITHER "CH
     2ANGED" (IF "YES" ABOVE!)',/,' TO MICRO STATE BASIS OR CHI MAY BE C
     3ALCULATED ON THE BASIS OF THIS LS TERM!',/,' YES/NO(0) D EL.?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3422)JADEL
      GOTO 4922
      ENDIF
 3422 READ(*,'(I1)',ERR=8241,END=4576)JADEL
      LMN=1
 4922 WRITE(*,2381)JADEL
      WRITE(7,2381)JADEL
 2381 FORMAT(I1,' =JADEL("YES, d el.")')
      IF(JADEL.NE.0)THEN
      KLWERT=2
C**   FOR FLAMBD SEE BELOW!
      IF(NREL.GT.9)NREL=9
      ENDIF
      WRITE(*,1117)JADEL,KLWERT,NREL
      WRITE(11,1117)JADEL,KLWERT,NREL
 1117 FORMAT(' NOW D EL."YES/NO(0)", L VALUE OF 1 EL., No. OF EL. =',3I3
     1)
C
      IF(JADEL.EQ.0.AND.JACHAN.NE.0)THEN
      WRITE(11,1119)
 8242 WRITE(*,1119)
 1119 FORMAT(' BECAUSE "CHANGE" HAS BEEN CHOSEN, E.G. HO TRIPL.-M STATE'
     1,' MAY BE',/,' CHANGED TO MICRO STATE BASIS AS A TEST!',/
     2,' SUCH A TEST: YES/NO(0)? (DIRECT INPUT OF GROUND STATE IS POSS.,
     3',/,' BUT "0" IS ALSO O.K.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3423)JATST
      GOTO 4923
      ENDIF
 3423 READ(*,'(I1)',ERR=8242,END=4576)JATST
      LMN=1
 4923 WRITE(7,2382)JATST
 2382 FORMAT(I1,' =JATST("YES TEST")')
      WRITE(*,2238)JATST
      WRITE(11,2238)JATST
 2238 FORMAT(I2,' =JATST("YES TEST")!!!!!!!!!')
      ENDIF
C
      KLT2P1=KLWERT*2+1
      IF(NREL.GT.KLT2P1)NRPAIR=NREL-KLT2P1
      NRSPUQ=NREL-NRPAIR
C
      IF(JATST.NE.0.OR.JADEL.NE.0)THEN
      WRITE(11,1118)
 8243 WRITE(*,1118)
 1118 FORMAT(' INPUT No. OF PAIRS IN I2 (<MIN.=>MIN., >MAX.=>MAX.)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3424)NRPAIR
      GOTO 4924
      ENDIF
 3424 READ(*,'(I2)',ERR=8243,END=4576)NRPAIR
      LMN=1
 4924 WRITE(*,2383)NRPAIR
      WRITE(7,2383)NRPAIR
 2383 FORMAT(I2,' =NRPAIR')
      NRPAIR=IABS(NRPAIR)
C
C**   MIN. OF PAIRS:
      IF(NREL.GT.KLT2P1.AND.NRPAIR.LT.1)NRPAIR=1
C**   MAX. OF PAIRS:
      IF(NRPAIR.GT.NREL/2)NRPAIR=NREL/2
C
      NRSPUP=NREL-NRPAIR*2
      NRSPUQ=NREL-NRPAIR
      MUTEST=NRSPUP+1
      LVTEST=0
      IKL=KLWERT
      DO 1215 I=1,NRPAIR
      LVTEST=LVTEST+IKL*2
      IKL=IKL-1
 1215 CONTINUE
      DO 1216 I=1,NRSPUP
      LVTEST=LVTEST+IKL
      IKL=IKL-1
 1216 CONTINUE
C
      WRITE(*,1112)NRPAIR,MUTEST,LVTEST
      WRITE(11,1112)NRPAIR,MUTEST,LVTEST
 1112 FORMAT(' No. OF PAIRS, MULTIPL. AND L VALUE =',3I3)
C
C**   (KLWERT-NRSPUQ+1) PLUS (KLWERT-NRPAIR+1) = NREL!:
      ZUKSI=ZERO
C**   ZUKSI <=> CALC. OF SPIN-ORBIT-COUPL. CONST.:
C**   IF THE STATE CONSISTS OF ONE(!) MICRO STATE, SUM OF L*S = SUM OF LZ*SZ
C     (NO L+, L-, S+ AND S- RESP. WILL WORK!):
      KLWRTP=KLWERT+1
      DO 3 J=KLWERT,KLWRTP-NRSPUQ,-1
      ZUKSI=ZUKSI+HALF*DBLE(J)
    3 CONTINUE
      DO 4 J=KLWERT,KLWRTP-NRPAIR,-1
      ZUKSI=ZUKSI-HALF*DBLE(J)
    4 CONTINUE
C**   IF THE STATE CONSISTS OF ONE(!) MICRO STATE, L*S=(LZ-MAX)*(SZ-MAX.)
C     (NO L+, L-, S+ AND S- RESP. WILL WORK!):
      MULTIM=MUTEST-1
      FSLS=DBLE(MULTIM)/TWO
      ZULAMD=DBLE(LVTEST)*FSLS
C**   IF J=L+S, THE SAME RESULT FROM (ZULAMB=...):
      FJLS=DBLE(LVTEST)+FSLS
      ZULAMB=HALF*
     1(-DBLE(LVTEST)*DBLE(LVTEST+1)-FSLS*(FSLS+ONE)+FJLS*(FJLS+ONE))
      FLAMBD=ZERO
      IF(ZULAMD.NE.ZERO)FLAMBD=FKSI*ZUKSI/ZULAMD
      WRITE(*,345)ZULAMD,ZULAMB,ZUKSI,FLAMBD
      WRITE(11,345)ZULAMD,ZULAMB,ZUKSI,FLAMBD
  345 FORMAT(' FACTOR OF LAMBDA (FROM L*S/ FROM J) / OF ZETA =',3D12.4
     1,/,' LAMBDA HAS BECOME NOW',D16.8)
C**   FACTOR OF LAMBDA TIMES LAMBDA = FACTOR OF KSI TIMES KSI (KSI=ZETA)!
C     (OPERATOR EQUIVALENTS USED TO CALCULATE LAMBDA, IF KSI IS KNOWN)
C
C**   END IF NOW FOLLOWING BELONGS TO "IF(JATST.NE.0.OR.JADEL.NE.0)THEN"!:
      ENDIF
C
 2995 CONTINUE
C
 2996 CONTINUE
C
      KLWER1=KLWERT+1
      KLTSL1=KLWERT*KLWER1
C
      HNVERT=ONE
C**   JATST.EQ.0 <=> JADEL=0!: EITHER "JATST.EQ.0.AND.JADEL.EQ.0" OR
C     "JATST.NE.0.OR.JADEL.NE.0"!
      IF(JATST.EQ.0.AND.JADEL.EQ.0)HNVERT=DBLE(INVERT(NREL))
      LWERT=LDAT(NREL)
      IF(JATST.NE.0.OR.JADEL.NE.0)LWERT=LVTEST
      FLWERT=DBLE(LWERT)
      FLWEM4=FLWERT-FOUR
      FLWEM6=FLWERT-SECHS
      LWERTM=LWERT-1
      LWERT1=LWERT+1
      LWERT2=2*LWERT
      LTSL1=LWERT*LWERT1
      FLTSL1=DBLE(LTSL1)
C
      MULTIP=MULDAT(NREL)
      IF(JATST.NE.0.OR.JADEL.NE.0)MULTIP=MUTEST
      MULTIM=MULTIP-1
      MULTM2=MULTIM-2
      SPIN=DBLE(MULTIM)*HALF
C**   No. OF EL. = MULTIM, IF SHELL IS LESS THAN OR HALF FILLED!
      STSSP1=DBLE(MULTIM*(MULTIM+2))*QUART
C
      IF(JATST.EQ.0.AND.JADEL.EQ.0)THEN
      MEHREK=0
      MEHREL=MULTIM
C**   MEHREL = No. OF EL., WHICH DETERMINES THE L VALUE!
C**   HOLES INSTEAD OF ELECTRONS (AND HNVERT=-ONE):
      IF(MULTIM.GT.KLWERT)MEHREL=KLWERT+KLWER1-MULTIM
      ELSE IF(JATST.NE.0.OR.JADEL.NE.0)THEN
      MEHREK=NRPAIR
      MEHREL=NREL-NRPAIR
      IF(JATST.NE.0)THEN
C**   IF "JATST", MEHREK AND MEHREL MAY BE EXCHANGED REL. TO EACH OTHER!
      WRITE(11,1115)MEHREL,MEHREK
 8244 WRITE(*,1115)MEHREL,MEHREK
 1115 FORMAT(' IS THIS O.K. YES(0)/NO?: MEHREL & MEHREK=',2I2)
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3425)JANO
      GOTO 4925
      ENDIF
 3425 READ(*,'(I1)',ERR=8244,END=4576)JANO
      LMN=1
 4925 WRITE(7,2384)JANO
 2384 FORMAT(I1,' =JANO("O.K.?")')
      WRITE(*,2438)JANO
      WRITE(11,2438)JANO
 2438 FORMAT(I2,' =JANO("O.K.?")!!!!!!!!!')
      IF(JANO.NE.0)STOP 'NOT OK'
      ENDIF
      ENDIF
C
C**   THE MATRIX-DIMENS. CORRESP. TO LWERT AND MULTIPL.:
      MATDKL=LWERT2+1
      MATDIM=MULTIP*MATDKL
C
      IL=0
      DO 8998 ML=-LWERT,LWERTM
      IL=IL+1
      ILP1=IL+1
      UPML(IL)=DSQRT(FLTSL1-DBLE(ML*(ML+1)))
      DOWNML(ILP1)=UPML(IL)
 8998 CONTINUE
      DOWNML(1)=ZERO
      UPML(MATDKL)=ZERO
      IM=0
      DO 9889 I=-MULTIM,MULTM2,2
      IM=IM+1
      IMP1=IM+1
      DMS=DBLE(I)*HALF
      UPMS(IM)=DSQRT(STSSP1-DMS*(DMS+ONE))
      DOWNMS(IMP1)=UPMS(IM)
 9889 CONTINUE
      DOWNMS(1)=ZERO
      UPMS(MULTIP)=ZERO
C
C**   THE (SINGLE!) MAX. DIFF. OF J VALUES:
      L2S2=MULTIM
      IF(MULTIP.GT.MATDKL)L2S2=LWERT2
C**   FOR GD (ONLY FOR SAFETY!):
      IF(MEHRWE(NREL).EQ.0.AND.L2S2.NE.0.AND.JADEL.EQ.0)STOP 'MEHRWE'
C
C**   NOW THE MAX. J VALUE (AT FIRST TIMES 2):
      JMAX2=MULTIM+LWERT2
      FJMAX=DBLE(JMAX2)*HALF
      JMIN2=JMAX2-2*L2S2
      JWERT2=JMAX2
      IF(NREL.LT.(KLWERT*2+1))JWERT2=JMIN2
      MATDIJ=JWERT2+1
C     JWERT=JMAX2/2
C**   BUT CORRECT IS IN 1 OF 2 CASES ONLY:
      FJWERT=DBLE(JWERT2)/TWO
C     FJWER1=FJWERT+ONE
C     FJTSJ1=FJWERT*FJWER1
C
      IF((NREL.EQ.6.OR.NREL.EQ.5).AND.JADEL.EQ.0)THEN
      WRITE(*,1166)NREL
      WRITE(11,1166)NREL
 1166 FORMAT(' NREL=',I3
     1,' CORRESP. TO EU OR SM: NOTHING SPECIAL HAS BEEN PROGR.!')
      ENDIF
C
      FLAMBH=FLAMBD*HALF
C
C**   ENERGY SHIFT FOR THE CASE "LAMBDA=10**6":
      SHIFT=ZERO
      IF(JASHIF.NE.0)THEN
      SHIFT=FLAMBH*(FJMAX*(FJMAX+ONE)-FLTSL1-STSSP1)
      IF(MEHRWE(NREL).LT.0)THEN
      FJMIN=FJMAX
      DO 213 I=1,L2S2
      SHIFT=SHIFT-FLAMBD*FJMIN
      FJMIN=FJMIN-ONE
  213 CONTINUE
      ENDIF
      ENDIF
C
      WRITE(*,1177)KLWERT,LWERT,MULTIP,MATDIJ,FLAMBD
      WRITE(11,1177)KLWERT,LWERT,MULTIP,MATDIJ,FLAMBD
 1177 FORMAT(
     1' KLWERT, LWERT, MULTIP, MATDIJ, COUPL.-CONST.=',4I3,D13.4)
C
C**   IRREDUCIBLE TENSOR METHODS ARE NOW USED FOR THE MATRIX-ELEMENTS
C     IN CONNECTION WITH THE CRYSTAL FIELD; FOR AN INTRODUCTION
C     TO THIS TOPIC, SEE:
C**   LIT.: B.L.SILVER: IRREDUCIBLE TENSOR METHODS, ACADEMIC PRESS
C     NEW YORK ... 1976. - SEE ESPECIALLY: P.69(6.7)!
C
C**   THE WIGNER-ECKART THEOREM IS NOW APPLIED, WHICH STATES, THAT
C     THE MATRIX ELEMENTS NEEDED HERE FACTOR INTO THE PRODUCT OF TWO
C     TERMS, ONE OF WHICH EXPRESSES THE GEOMETRY, SYMMETRY, AND SELECTION
C     RULES OF THE SYSTEM, THE OTHER OF WHICH CONTAINES THE DYNAMICS:
C**   LIT.: R.N.ZARE: ANGULAR MOMENTUM, WILEY NEW YORK ... 1988.
C**   LIT.: E.P.WIGNER: GROUP THEORY, ACADEMIC PRESS NEW YORK 1959.
C
C**   THE REDUCED MATRIX ELEMENTS FOR THE MOST SIMPLE EXAMPLE FOR ONE, TWO AND
C     THREE ELECTRONS RESPECTIVELY ARE CALCULATED NOW (OTHERS ARE NOT NEEDED):
C
      REDMAS=ZERO
      REDMAT=ZERO
      REDMAU=ZERO
C**   MEHREL=1, 2, 3 FOR THE CASES TO CALCULATE, CORRESP. TO 1, 2, 3 EL.!
      IF(MEHREL.EQ.0)GOTO 987
C**   "GOTO 987" FOR INSTANCE FOR GD (IF NO TEST)!
C**   START HERE:
C**   THE FOLLOWING DO LOOP IS ONLY FOR TEST (ELSE: MEHREK=0)!:
      KML=KLWER1
      DO 110 I=1,MEHREK
      KML=KML-1
      REDMAS=REDMAS+CKCOE(2,KLWERT,KML,KLWERT,KML)
      REDMAT=REDMAT+CKCOE(4,KLWERT,KML,KLWERT,KML)
      REDMAU=REDMAU+CKCOE(6,KLWERT,KML,KLWERT,KML)
  110 CONTINUE
C
      KML=KLWER1
      DO 111 I=1,MEHREL
      KML=KML-1
      REDMAS=REDMAS+CKCOE(2,KLWERT,KML,KLWERT,KML)
      REDMAT=REDMAT+CKCOE(4,KLWERT,KML,KLWERT,KML)
      REDMAU=REDMAU+CKCOE(6,KLWERT,KML,KLWERT,KML)
  111 CONTINUE
C**   NOW REDUCE THESE DIAGONAL ELEMENTS (A PHASEFACTOR OF (-1)**(L-ML)
C     IS +1 HERE, BECAUSE HERE L=ML):
      REDMAS=REDMAS/DREIJ(FLWERT,TWO,FLWERT,-FLWERT,ZERO,FLWERT)
      REDMAT=REDMAT/DREIJ(FLWERT,FOUR,FLWERT,-FLWERT,ZERO,FLWERT)
      IF(JADEL.EQ.0)
     1REDMAU=REDMAU/DREIJ(FLWERT,SECHS,FLWERT,-FLWERT,ZERO,FLWERT)
      REDMAS=REDMAS*HNVERT
      REDMAT=REDMAT*HNVERT
      REDMAU=REDMAU*HNVERT
C**   FOR THE NON-DIAGONAL ELEMENTS NOTHING NEW IS REQUIRED!:
C     REDMA4=REDMAT
C     REDMA6=REDMAU
C     REDM66=REDMAU
C     ...
  987 CONTINUE
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8245 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-ECKART; =0, 1 OR 2!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3426)MOROUU
      GOTO 4926
      ENDIF
 3426 READ(*,'(I1)',ERR=8245,END=4576)MOROUU
      LMN=1
 4926 WRITE(*,2538)MOROUU
      WRITE(11,2538)MOROUU
 2538 FORMAT(I2,' =MOROUU IN ECKART!!!!!!!!!')
      WRITE(7,2385)MOROUU
 2385 FORMAT(I1,' =MOROUU IN ECKART')
      ENDIF
C
      IF(MOROUU.NE.0.AND.KLICK7.LE.9)THEN
      KLICK7=KLICK7+1
      WRITE(*,4321)REDMAS,REDMAT,REDMAU
      WRITE(11,4321)REDMAS,REDMAT,REDMAU
 4321 FORMAT(' REDMAS,REDMAT,REDMAU=',3F10.6)
      ENDIF
C**   AND NOW THE END TO: IF(LAUF.NE.0)GOTO 1234:
 1234 CONTINUE
C
 1999 FORMAT(/,1X,'LIGAND FIELD PART OF THE MATRIX TO BE CALC.:',/)
 2000 FORMAT(/,1X,'MATRIX TO BE DIAGONALIZED:',/
     1,' COLUMNS IN THE FORM OF ROWS, STARTING WITH DIAG. ELEM.',/)
 2010 FORMAT(6(1X,D12.4))
 2029 FORMAT(/,1X,' - ALL OR THE FIRST 2 COLUMNS IN FORM OF ROWS:')
 2030 FORMAT(/,1X,'MATRIX OF THE ORTHONORMAL. EIGENVECTORS:',/)
C
C**   NOW AT FIRST ONLY(!) FOR THE L VALUES, WITHOUT SPIN:
C
C**   TO START WITH, THE MATRIX ELEMENTS OF THE LIGAND FIELD OPERATOR WILL
C     BECOME ZERO:
      DO 11 I=1,MATDIM
      DO 1714 J=1,MATDIM
      DBLMAT(J,I)=ZERO
 1714 CONTINUE
   11 CONTINUE
C
C**   FOR THE FOLLOWING CONDITIONS THERE IS NO CRYSTAL FIELD:
      JAMAT0=1
      DO 246 I=1,11
      IF(BWWW(I).NE.ZERO)JAMAT0=0
  246 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2461 I=21,IN24
      IF(BWWW(I).NE.ZERO)JAMAT0=0
 2461 CONTINUE
      ENDIF
C
      FKWERT=BWWW(12)
C
      TESLAC=TESINT*TESLCM
C**   TESLCM NEEDED, IF ONE WISHES TESLAS IN CM**(-1)
C
      IF(MOROUU.NE.0.AND.KLICK8.LE.9)THEN
      KLICK8=KLICK8+1
      WRITE(*,6468)TESLAS,TESLAC
      WRITE(11,6468)TESLAS,TESLAC
 6468 FORMAT(' TESLAS,TESLAC=',2D14.6)
      ENDIF
C
C**   NEW B-VALUES?:
      NEUEBS=0
      DO 115 I=1,11
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
  115 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2462 I=21,IN24
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
 2462 CONTINUE
      ENDIF
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      NEUEBS=1
      ENDIF
C
      IF(NEUEBS.EQ.0)GOTO 2345
C
      DO 113 I=1,11
      BWWOLD(I)=BWWW(I)
  113 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2463 I=21,IN24
      BWWOLD(I)=BWWW(I)
 2463 CONTINUE
      ENDIF
C
      IF(MOROUU.NE.0.AND.KLICK9.LE.9)THEN
      KLICK9=KLICK9+1
      WRITE(*,6466)(BWWOLD(I),I=1,11)
      WRITE(11,6466)(BWWOLD(I),I=1,11)
 6466 FORMAT(' BWWOLD(1:11) =',5D12.4,/,6D12.4)
      IF(IN24.GT.20)THEN
      WRITE(*,6466)(BWWOLD(I),I=21,IN24)
      WRITE(11,6466)(BWWOLD(I),I=21,IN24)
      ENDIF
      ENDIF
C
C**   DIAGONAL ELEMENTS (THAT ARE ALL ELEMENTS NOT ZERO) FOR JAMAT0=1:
      IF(JAMAT0.NE.0)THEN
      DO 12 I=1,MATDKL
      DBLMAT(I,I)=ONE
   12 CONTINUE
      GOTO 5678
      ENDIF
C
C**   THE DIAGONAL ELEMENTS FOR THE CRYSTAL FIELD
C     AND THE NON-DIAGONAL ELEMENTS FOR THE CRYSTAL FIELD:
C**   LIT.: J.S.GRIFFITH: THE THEORY OF TRANSITION-METAL IONS,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1971.
C
      B2WRED=BWWW(1)*REDMAS
      B22RED=BWWW(2)*REDMAS
      B4WRED=BWWW(3)*REDMAT
      B42RED=BWWW(4)*REDMAT
      B43RED=BWWW(5)*REDMAT
      B44RED=BWWW(6)*REDMAT
      B6WRED=BWWW(7)*REDMAU
      B62RED=BWWW(8)*REDMAU
      B63RED=BWWW(9)*REDMAU
      B64RED=BWWW(10)*REDMAU
      B66RED=BWWW(11)*REDMAU
      IF(IN24.GT.20)THEN
      B21RED=BWWW(IN24-3)*REDMAS
      B41RED=BWWW(IN24-2)*REDMAT
      B61RED=BWWW(IN24-1)*REDMAU
      B65RED=BWWW(IN24)*REDMAU
      ENDIF
C
      MPONE=-1
      DO 4443 ML=-LWERT,LWERT
      MLPLL1=ML+LWERT1
      FML=DBLE(ML)
      FMLP1=FML+ONE
      IMLP1=ML+1
      FMLP2=FML+TWO
      FMLP3=FML+DREI
      FMLP4=FML+FOUR
      FMLP5=FML+FUENF
      FMLP6=FML+SECHS
      MPONE=MPONE*(-1)
C**   A PHASE FACTOR OF (-1)**(L-ML) STARTS WITH +1, BECAUSE FIRSTLY -L=ML:
      DIAMAT=DBLE(MPONE)*
     1(B2WRED*DREIJ(FLWERT,TWO,FLWERT,-FML,ZERO,FML)
     1+B4WRED*DREIJ(FLWERT,FOUR,FLWERT,-FML,ZERO,FML)
     1+B6WRED*DREIJ(FLWERT,SECHS,FLWERT,-FML,ZERO,FML))
      DBLMAT(MLPLL1,MLPLL1)=DIAMAT
C
      IF(IN24.GT.20)THEN
      MLPL11=MLPLL1+1
      IF(MLPL11.GT.MATDKL)GOTO 4443
      EINSAB=(-B21RED*DREIJ(FLWERT,TWO,FLWERT,-FMLP1,ONE,FML)
     1-B41RED*DREIJ(FLWERT,FOUR,FLWERT,-FMLP1,ONE,FML)
     2-B61RED*DREIJ(FLWERT,SECHS,FLWERT,-FMLP1,ONE,FML))
     3*(-ONE)**(LWERT-IMLP1)
      DBLMAT(MLPLL1,MLPL11)=EINSAB
      DBLMAT(MLPL11,MLPLL1)=EINSAB
      ENDIF
      MLPL12=MLPLL1+2
      IF(MLPL12.GT.MATDKL)GOTO 4443
      ZWEIAB=(B22RED*DREIJ(FLWERT,TWO,FLWERT,-FMLP2,TWO,FML)
     1+B42RED*DREIJ(FLWERT,FOUR,FLWERT,-FMLP2,TWO,FML)
     2+B62RED*DREIJ(FLWERT,SECHS,FLWERT,-FMLP2,TWO,FML))
     3*(-ONE)**(LWERT-ML)
      DBLMAT(MLPLL1,MLPL12)=ZWEIAB
      DBLMAT(MLPL12,MLPLL1)=ZWEIAB
      MLPL13=MLPLL1+3
      IF(MLPL13.GT.MATDKL)GOTO 4443
      DREIAB=(-B43RED*DREIJ(FLWERT,FOUR,FLWERT,-FMLP3,DREI,FML)
     1-B63RED*DREIJ(FLWERT,SECHS,FLWERT,-FMLP3,DREI,FML))
     3*(-ONE)**(LWERT-IMLP1)
C**   (-B43RED)*, BECAUSE Q IS AN ODD NUMBER HERE (THE OPERATOR IS -C+3)!
      DBLMAT(MLPLL1,MLPL13)=DREIAB
      DBLMAT(MLPL13,MLPLL1)=DREIAB
      MLPL14=MLPLL1+4
      IF(MLPL14.GT.MATDKL)GOTO 4443
      VIERAB=(B44RED*DREIJ(FLWERT,FOUR,FLWERT,-FMLP4,FOUR,FML)
     1+B64RED*DREIJ(FLWERT,SECHS,FLWERT,-FMLP4,FOUR,FML))
     3*(-ONE)**(LWERT-ML)
      DBLMAT(MLPLL1,MLPL14)=VIERAB
      DBLMAT(MLPL14,MLPLL1)=VIERAB
      IF(IN24.GT.20)THEN
      MLPL15=MLPLL1+5
      IF(MLPL15.GT.MATDKL)GOTO 4443
      FUNFAB=(-B65RED*DREIJ(FLWERT,SECHS,FLWERT,-FMLP5,FUENF,FML))
     3*(-ONE)**(LWERT-IMLP1)
      DBLMAT(MLPLL1,MLPL15)=FUNFAB
      DBLMAT(MLPL15,MLPLL1)=FUNFAB
      ENDIF
      MLPL16=MLPLL1+6
      IF(MLPL16.GT.MATDKL)GOTO 4443
      SECHSA=(B66RED*DREIJ(FLWERT,SECHS,FLWERT,-FMLP6,SECHS,FML))
     3*(-ONE)**(LWERT-ML)
      DBLMAT(MLPLL1,MLPL16)=SECHSA
      DBLMAT(MLPL16,MLPLL1)=SECHSA
 4443 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,1999)
      WRITE(11,1999)
      DO 100 I=1,MATDKL
      WRITE(11,2010)(DBLMAT(I,J),J=1,MATDKL)
      WRITE(*,2010)(DBLMAT(I,J),J=1,MATDKL)
  100 CONTINUE
      ENDIF
C
C**   AND NOW FOR JAMAT0=1:
 5678 CONTINUE
C
C**   MULTIM TIMES THE MATRIX DBLMAT - ADDED ALONG THE DIAGONAL - 
C     WILL COMPOSE THE NEW MATRIX DBLMAT:
C
      DO 4444 M=1,MULTIM
      DO 2714 J=1,MATDKL
      DO 3714 I=1,MATDKL
      DBLMAT(MATDKL*M+I,MATDKL*M+J)=DBLMAT(I,J)
 3714 CONTINUE
 2714 CONTINUE
 4444 CONTINUE
C
C**   NOW SPIN-ORBIT COUPLING!:
C     THE DIAG. ELEMENTS (LZ*SZ)
C     AND THE NON-DIAGONAL ELEMENTS (HALF*((L+*S-)+(L-*S+))):
C
      IML=0
      IM=0
C**   AND NOW ALSO(!) FOR MULTIM=0!:
      DO 4441 I=-MULTIM,MULTIM,2
      IM=IM+1
      DMS=DBLE(I)*HALF
C**   DMTSDO=DMS*(DMS+ONE)
C**   AND ALSO FOR LWERT=0:
      IL=0
      DO 4442 ML=-LWERT,LWERT
      IL=IL+1
      DML=DBLE(ML)
      IMLPMK=IML+MATDKL
C**   AND NOW FIRSTLY:
      IML=IML+1
      MQUERR(IML)=I+2*ML
      DBLMAT(IML,IML)=DBLMAT(IML,IML)+DMS*DML*FLAMBD
C**   FLAMBD IS VALID FOR THE ONE LS TERM GIVEN, FOR INSTANCE FOR
C     DUBLETT-F OF CER.
C     FORMULA CORRESP. TO EYRING ... P.152(No.9.78), MORE MODERN
C     CORRESP. TO MCWEENY,P.66(3.6.14B).
C**   LIT.: H.EYRING, J.WALTER, G.E.KIMBALL: QUANTUM CHEMISTRY,
C           WILEY NEW YORK ... 1944.
C**   LIT.: R.MCWEENY, B.T.SUTCLIFFE: METHODS OF MOLECULAR QUANTUM
C           MECHANICS, ACADEMIC PRESS LONDON ... 1969.
C**   AND NOW CALC. ONLY FOR "TO THE RIGHT / ABOVE", BUT NOT THE FIRST ROW:
      IF(ML.EQ.-LWERT.OR.I.EQ.MULTIM)GOTO 4442
C**   UPML=DSQRT(FLTSL1-DBLE(ML)*DBLE(ML+1))
C**   DOWNML=DSQRT(FLTSL1-DBLE(ML)*DBLE(ML-1))
C**   DOWNUP=DSQRT(
C    1(FLTSL1-DBLE(ML*(ML-1)))*(STSSP1-DMTSDO)
C    2)*FLAMBH
      DOWNUP=DOWNML(IL)*UPMS(IM)*FLAMBH
      DBLMAT(IML,IMLPMK)=DOWNUP
      DBLMAT(IMLPMK,IML)=DOWNUP
 4442 CONTINUE
 4441 CONTINUE
C
C     ... AND DIAGONALISATION OF THE RESULTING MATRIX!
C
C     COEFF., WHICH ARE LOWER THAN PAR IN ABS. VALUE, ARE EQUATED TO ZERO NOW:
      DO 2199 J=1,MATDIM
      DO 4714 I=1,MATDIM
      IF(DABS(DBLMAT(I,J)).LT.PAR)DBLMAT(I,J)=ZERO
 4714 CONTINUE
 2199 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2000)
      WRITE(11,2000)
      MATI=1
      IF(MOROUU.GT.1)MATI=MATDIM
      DO 10 J=1,MATI
      WRITE(11,2010)(DBLMAT(I,J),I=J,MATDIM)
      WRITE(*,2010)(DBLMAT(I,J),I=J,MATDIM)
   10 CONTINUE
      ENDIF
C
C**   CALL THE DIAGONALISATION ROUTINE:
C
      IF(JABLOC.NE.0)THEN
C**   THE WHOLE(!) MATRIX IS NEEDED FOR SUBROUTINE BLOCUT!:
C
      DO 2133 J=2,MATDIM
      JM1=J-1
      DO 5714 I=1,JM1
      DBLMAT(I,J)=DBLMAT(J,I)
 5714 CONTINUE
 2133 CONTINUE
C
C**   PARR MUST NOT BE PARAMETER!:
      PARR=PARWUQ
      NRELMX=2*(2*KLWERT+1)
      CALL BLOCUT(1,ND2002,MATDIM,NDMAL3,PARR,KLWERT,NRELMX,MSMLNW
     1,DBLMAT,LMAT,EIVECV,DUMMY,EIWERT,MQUER,MQUERR,BLOMAT,NGROUP,MSMLNS
     2,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ,MSML,NREL14,NREL,I10
     3,KLWER3)
C
      ELSE
C
C**   AND NOW FOR LOWER STORAGE MODE:
C
      ND20QU=ND2002**2
C
      CALL DSPEVW(1,DBLMAT,DBLMAT,EIWERT,EIVECV,ND2002,MATDIM,DUMMY
     1,NDMAL3,ND20QU)
C
      ENDIF
C**   THE EIGENVALUES ARE ORDERED RESP. HAVE TO BE ORDERED! -
C     THE EIGENVECTORS ARE ORTHONORM. RESP. HAVE TO BE ORTHONORM.!
C     (NORMALISATION: THE SUM OF THE SQUARES IS 1. RESP. HAS TO BE 1.!)
C
C     COEFF., WHICH ARE LOWER THAN PAR IN ABS. VALUE, ARE EQUATED TO ZERO NOW:
      DO 21 J=1,MATDIM
      DO 6714 I=1,MATDIM
      IF(DABS(EIVECV(I,J)).LT.PAR)EIVECV(I,J)=ZERO
 6714 CONTINUE
   21 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2030)
      WRITE(11,2030)
C**   - ALL OR THE FIRST 2 COLUMNS IN FORM OF ROWS:
      WRITE(*,2029)
      WRITE(11,2029)
      MATI=2
      IF(MOROUU.GT.1)MATI=MATDIM
      WRITE(*,2092)
      WRITE(11,2092)
 2092 FORMAT(
     1' CONSECUTIVE ORDER <=> DO 2*MS=-(MULTIPL.-1),(MULTIPL.-1),2',/,
     2'                       DO  ML =     -L      ,    +L')
      DO 101 J=1,MATI
      WRITE(11,'(/)')
      WRITE(*,'(/)')
      WRITE(11,2010)(EIVECV(I,J),I=1,MATDIM)
      WRITE(*,2010)(EIVECV(I,J),I=1,MATDIM)
  101 CONTINUE
C
      ENDIF
C
C**   SHIFT IS MOSTLY ZERO!:
      IF(SHIFT.NE.ZERO)THEN
      DO 4445 I=1,MATDIM
      EIWERT(I)=EIWERT(I)-SHIFT
 4445 CONTINUE
      ENDIF
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2216)
      WRITE(11,2216)
 2216 FORMAT(
     1' ALL EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',D12.4)
      WRITE(*,2010)(EIWERT(I),I=1,MATDIM)
      WRITE(11,2010)(EIWERT(I),I=1,MATDIM)
      ENDIF
C
C**   NOW SHIFT IN ANY CASE:
C
      EIWER1=EIWERT(1)
      DO 4446 I=1,MATDIM
      EIWERT(I)=EIWERT(I)-EIWER1
 4446 CONTINUE
C
      IF(LAUFF.EQ.0.OR.MOROUU.NE.0)THEN
      LAUFF=1
      WRITE(*,2216)
      WRITE(11,2216)
      WRITE(*,2217)EIWER1
      WRITE(11,2217)EIWER1
 2217 FORMAT(' SUBTRACTED WAS EIWERT(1) =',D20.12)
      WRITE(*,2010)(EIWERT(I),I=1,MATDIM)
      WRITE(11,2010)(EIWERT(I),I=1,MATDIM)
      ENDIF
C
      IGR1=MATDIM
      IGRPL=IGR1+1
      DIFLOW=ZERO
      DO 4448 I=2,MATDIM
      EIWER1=DABS(EIWERT(I))
      IF(EIWER1.GT.PARWUC)THEN
      DIFLOW=EIWERT(I)
      IGR1=I-1
C**   IGR=I
      IGRPL=I+1
      GOTO 4449
      ENDIF
 4448 CONTINUE
 4449 CONTINUE
C
      IGR2=MATDIM
      DO 4450 I=IGRPL,MATDIM
      EIWER1=DABS(EIWERT(I)-DIFLOW)
      IF(EIWER1.GT.PARWUC)THEN
      IGR2=I-1
      GOTO 4451
      ENDIF
 4450 CONTINUE
 4451 IGR2=IGR2-IGR1
C
 2345 CONTINUE
      IF(JACHAN.EQ.0)THEN
      CALL REDUCE(NGROUP,MATDIM,MATDKL,MULTIM,LWERT,UPMS,NRPAIR,NRSPUQ
     1,EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE ECKART IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINE REDUCE, THE SUBROUTINE CALLED HERE:
     7,MQUER,MQUERR,REDFAZ,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,CRZMAT)
C
C**   RETURNS TO SUSC!:
      RETURN
C
      ELSE IF(JACHAN.NE.0)THEN
      CALL CHANGE(MATDIM,MATDKL,MULTIM,LWERT,UPMS,NRPAIR,NRSPUQ
     1,EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE ECKART IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINE REDUCT, THE SUBROUTINE CALLED HERE:
     7,MQUER,MQUERR,REDFAZ,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,NGROUP
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
C
      ENDIF
C**   NO RETURN FROM CHANGE!
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND ECKART
      END
      SUBROUTINE REDUCE(NGROUP,
C**   CALLED BY ECKART! - CALLS SELECT!
     1MATDIM,MATDKL,MULTIM,LWERT,UPMS,NRPAIR,NRSPUQ
     1,EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE ECKART IN ADDITION:
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINE REDUCE, THIS SUBROUTINE HERE:
     7,MQUER,MQUERR,REDFAZ,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,CRZMAT)
C**   SUBROUTINE REDUC(E)-E(CKART) CALCULATES FMAT AND GMAT WITH DIMENSIONS
C     UP TO A MAXIMUM, WHICH IS 85 CORRESPONDING TO A QUINTET-L STATE OF SIX 
C     F ELECTRONS, BUT THIS EXAMPLE IS NOT IMPORTANT ANYWAY (SEE `DATA' F EL.
C     BELOW!). THE MAXIMUM THAT REALLY OCCURS IS 66 (DATA MULMUL!).
C     A REDUCTION OF THE NUMBER OF EIGENVALUES AND EIGENVECTORS IS NEEDED 
C     FOR MANY CASES OF F ELECTRONS, IF HEISENBERG COUPLING OCCURS. THE BASIS 
C     FOR THE PERTURBATION OPERATOR FMAT (WITH THE RESP. G-FACTOR INCL.) IS
C     THAT OF THESE EIGENVECTORS AND NOT THAT OF TERM (2S+1)L. IN ADDITION
C     TO ITS USE FOR PERTURBATION THEORY OF FIRST ORDER, THIS OPERATOR IS ALSO
C     USED TO TAKE INTO ACCOUNT THE ENERGY OF A (E.G. STRONG) MAGNETIC FIELD.
C     (FOR "VANVLECK" WITH MAGNETIC FIELD FORMALLY ZERO, IT IS USED FOR 2ND
C     ORDER PERTURBATION THEORY.) (THERE IS NO ORBITAL CONTRIBUTION IN GMAT,
C     AND THE G-FACTOR IS FORMALLY ONE, BECAUSE GMAT IS USED FOR HEISENBERG
C     COUPLING, AND NO MAGNETIC FIELD IS CONCERNED!)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*),CPERTU(*),CFMATY(*)
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/MIRROV/FACZ,FACXY,MIRROW
C
      DIMENSION FMATCH(*),DIRECZ(*),EIVEC(*),DUMMY(*)
     1,EIVAL0(*),EIVAL1(*),EIVAL2(*)
     2,ZEEMN0(*),ZEEMN1(*),ZEEMN2(*),ZEMN20(*),ZEMN21(*),ZEMN22(*)
     3,PERTUR(*),FMATY(*),DUMMYD(*)
C**   FOR SUGANR/C/H/K TO BE CALCULATED ("INTERFACE"):
      DIMENSION FMAT(ND252,ND252,5),GMAT(ND252,ND252,3)
      DIMENSION GFAMST(2,2),EIWMST(2),EIVMST(2,2)
C
      DOUBLE PRECISION EIVECV(ND2002,*),EIWERT(*)
     4,UPML(25),UPMS(8),GFACT(10),REDFAZ(3)
      INTEGER MULMUL(13)
      SAVE
C
C     NEUEBS=1: NEW B-VALUES; IF NEUEBS=0, NO REDUCTION NECESSARAY IN THE
C     2ND ETC. RUN.
C
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
C     ... AND CORR. TO LARGEST J VALUE: /8,13,16,17,16,13,8,13,16,17,16,13,8/
C**   (SPIN-)MULTIPL.*(ORB.-)MULTIPL.= (MAX=66; DY):
      DATA MULMUL/14,33,52,65,66,49,8,49,66,65,52,33,14/
C**   DATA F EL./14,33,52,65,76,85,84,85,76,65,52,33,14/ - MULMUL, BUT L-S-MAX.!
C**   DATA D EL./10,21,28,33,36,33,28,21,10/ - DATA F EL. FOR D EL.!
C**   DATA MULMUD/10,21,28,25,6,25,28,21,10/ - MULMUL FOR D EL.: SEE CONDON ABOVE!
      DATA KLICK1,MOROUU,KLICKH,KLICKM,FACZ,FACXY/0,0,0,0,1.0D0,1.0D0/
      DATA MOROUV/0/
C
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(KLICK1.NE.0)GOTO 9976
C**   THE VERY FIRST RUN!:
      KLICK1=1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8246 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-REDUCE; =0, 1, 2 OR 3!',
     2/,' (+5, I.E. 5, 6, 7 OR 8, FOR OUTPUT OF G-FACTORS(S) IN ADD.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3427)MOROUU
      GOTO 4927
      ENDIF
 3427 READ(*,'(I1)',ERR=8246,END=4576)MOROUU
      LMN=1
 4927 WRITE(*,2638)MOROUU
      WRITE(11,2638)MOROUU
 2638 FORMAT(I2,' =MOROUU IN REDUCE!!!!!!!!!')
      WRITE(7,2386)MOROUU
 2386 FORMAT(I1,' =MOROUU IN REDUCE')
      IF(MOROUU.GE.5)THEN
      MOROUU=MOROUU-5
      MOROUV=1
      ENDIF
      ENDIF
C
      NRVAL=MATDIM
      WRITE(*,2145)NRVAL
      WRITE(11,2145)NRVAL
 2145 FORMAT(' No. OF STATES =',I5)
      IF(KLWERT.EQ.3)THEN
      WRITE(*,2147)JMULTI(NREL),MULMUL(NREL)
      WRITE(11,2147)JMULTI(NREL),MULMUL(NREL)
 2147 FORMAT(' MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE FOR F'
     1,' EL.',/,' AND (SPIN-)MULTIPL.*(ORB.-)MULTIPL. ARE =',2I3)
      IF(NREL.EQ.5.OR.NREL.EQ.6)THEN
      WRITE(*,2144)
      WRITE(11,2144)
 2144 FORMAT(
     1' INPUT BELOW (A PART OF) THE SUM OF 6+8+10+12+14+16=66(=(2*5/2+1'
     2,')*(2*5+1))',/,' FOR SM RESP. 1+3+5+7+9+11+13=49(=(2*3+1)*(2*3+1'
     3,')) FOR EU!')
      ENDIF
C
C**   NOT: "COMBINED MODEL"! - (LESS IS ALWAYS 0 HERE)!
      IF(IOPT2.EQ.0)THEN
C**   F ELECTRONS, "SINGLE ION":
      WRITE(*,2148)NRVAL
      WRITE(11,2148)NRVAL
 2148 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED; 0 => "PRE
     1-OCC." =',I3)
C**   THIS FORMAT FOR D EL. BELOW, TOO!
      ELSE IF(IOPT2.EQ.1)THEN
C**   F ELECTRONS, "DIMER":
      NRVAL=JMULTI(NREL)
      WRITE(*,1149)ND28
      WRITE(11,1149)ND28
 1149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 ='
     1,'> "PRE-OCC." (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VA'
     2,'LUE))',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND28! N'
     3,'D28=',I3)
      WRITE(*,2150)NDS66
      WRITE(11,2150)NDS66
 2150 FORMAT(' BUT THE No. SHOULD BE LOWER THAN 18 (E.G. 17 FOR HO).'
     1,/,' (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VALUE!)'
     2,/,' HINT: IN THE CASE OF "NOT a symmetrical dimer",',/
     2,' THE MAX. POSS. IS THE No. OF MICRO STATES OR NDS66! NDS66=',I3)
      ENDIF
C**   ENDIF BEFORE BELONGS TO "F EL." - SINGLE ION OR ("ELSE") DIMER!
      ELSE IF(KLWERT.EQ.2)THEN
      IF(IOPT2.EQ.0)THEN
C**   D ELECTRONS - "SINGLE ION":
      WRITE(*,2148)NRVAL
      WRITE(11,2148)NRVAL
      ELSE IF(IOPT2.EQ.1)THEN
C**   D ELECTRONS - "DIMER" (IOPT2=2 NOT POSS. AT ALL!):
      WRITE(*,2149)NRVAL,ND28
      WRITE(11,2149)NRVAL,ND28
 2149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/
     1,' (0 => "PRE-OCC." (No. OF STATES) OR => ND28, THE MAX. POSS.! TH
     2ESE ARE =',2I3,')')
      ENDIF
C**   ENDIF BEFORE BELONGS TO "D EL." - SINGLE ION OR ("ELSE") DIMER!
      ENDIF
C**   ENDIF BEFORE BELONGS TO "KLWERT .EQ.3 OR ("ELSE") .EQ.2!
C
C**   NOW BOTH, KLWERT=2 AND KLWERT=3 (=0 AND =1 NOT POSS. IN REDUCE (OF "ECKART")):
      IF(IOPT2.NE.2)THEN
 8247 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3428)NRVALI
      GOTO 4928
      ENDIF
 3428 READ(*,'(I3)',ERR=8247,END=4576)NRVALI
      LMN=1
 4928 WRITE(*,2738)NRVALI
      WRITE(11,2738)NRVALI
 2738 FORMAT(I4,' =NRVALI(No. OF STATES)!!!!!!!!!')
      WRITE(7,2387)NRVALI
 2387 FORMAT(I3,' =NRVALI(No. OF STATES)')
      IF(NRVALI.GT.0)NRVAL=NRVALI
      IF(NRVAL.GT.MATDIM)NRVAL=MATDIM
C**   NEXT LINE SHOULD NOT BE REQUIRED!:
      IF(NRVAL.GT.ND252)NRVAL=ND252
      IF(IOPT2.NE.0.AND.NRVAL.GT.NDS66)NRVAL=NDS66
      IF(IOPT2.NE.0.AND.NRVAL.GT.ND28)THEN
      WRITE(*,8334)
      WRITE(11,8334)
 8334 FORMAT(' NRVAL.GT.ND28: INPUT IN I1 YES/NO(0) "O.K."!')
 8335 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3429)JAOK
      GOTO 4929
      ENDIF
 3429 READ(*,'(I1)',ERR=8335,END=4576)JAOK
      LMN=1
 4929 WRITE(*,8636)JAOK
      WRITE(11,8636)JAOK
 8636 FORMAT(I2,' <=O.K.!!!!!!!!!')
      WRITE(7,8336)JAOK
 8336 FORMAT(I1,' <=O.K.')
      IF(JAOK.EQ.0)NRVAL=ND28
      ENDIF
      WRITE(*,9213)NRVALI,NRVAL
      WRITE(11,9213)NRVALI,NRVAL
 9213 FORMAT(' No. OF VALUES (INPUT AND CORR.) =',2I5)
      ELSE IF(IOPT2.EQ.2)THEN
C**   COMBINED MODEL!:
      NRVAL=JMULTI(NREL)
      WRITE(*,9214)NRVAL
      WRITE(11,9214)NRVAL
 9214 FORMAT(' No. OF VALUES FOR "COMBINED MODEL" =',I3)
      ENDIF
C
 9976 CONTINUE
C
      IF(NEUEBS.EQ.0)GOTO 9977
C
      DO 1246 K=1,5
      DO 7714 J=1,NRVAL
      DO 8714 I=1,NRVAL
      FMAT(I,J,K)=ZERO
      IF(K.LE.3)GMAT(I,J,K)=ZERO
 8714 CONTINUE
 7714 CONTINUE
 1246 CONTINUE
C
C**   FOR THE PERTURBATION OPERATOR: FMAT (WITH THE RESP. G-FACTOR INCL.)
C     (GMAT RESERVED FOR OTHER PURPOSES - GFACTOR IS ONE THERE (BECAUSE NO
C     MAGN. FIELD CONCERNED!) - NO ORBITAL CONTRIBUTIONS THERE!):
C**   FIRSTLY THE Z-DIRECTION (FMAT(,,1)):
      DO 1445 IE=1,NRVAL
      DO 2445 IEI=IE,NRVAL
C
      EIVECF=ZERO
      EIVECG=ZERO
      IML=0
      DO 5441 I=-MULTIM,MULTIM,2
      DDMS=DBLE(I)
      HADDMS=HALF*DDMS
C**   G-FACTOR FOR SPIN IS =2!
      DO 5442 ML=-LWERT,LWERT
      DML=DBLE(ML)*REDFAZ(1)
C**   DEF. OF BASIS!:
      IML=IML+1
      EIVECQ=EIVECV(IML,IE)*EIVECV(IML,IEI)
      EIVECF=EIVECF+EIVECQ*(DDMS+DML)
      EIVECG=EIVECG+EIVECQ*HADDMS
 5442 CONTINUE
 5441 CONTINUE
      FMAT(IE,IEI,1)=EIVECF
C**   FMAT(,,1) AND GMAT(,,1) ARE SYMM.!:
      FMAT(IEI,IE,1)=EIVECF
      GMAT(IE,IEI,1)=EIVECG
      GMAT(IEI,IE,1)=EIVECG
C
 2445 CONTINUE
 1445 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2224)
      WRITE(11,2224)
 2224 FORMAT(' MATRIX FMAT(,,1):'
     1,' PERT. OPER. FOR Z-DIR.(ONLY); COLUMNS (GIVEN AS ROWS):')
      WRITE(*,8928)
      WRITE(11,8928)
 8928 FORMAT(' HERE IN REDUCEckart ORBITAL AND SPIN PART ARE INCLUDED!')
      KASI=2
      IF(MOROUU.GT.1)KASI=NRVAL
      IF(KASI.EQ.2)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUT=1, ONLY TWO COLUMNS (IN THE FORM OF TWO ROWS);'
     1,/,' ATTENTION: SECOND COLUMN STARTS WITH DIAGONAL ELEMENT!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUT.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEM.!')
      ENDIF
      DO 1004 J=1,KASI
      WRITE(*,2010)(FMAT(I,J,1),I=J,NRVAL)
      WRITE(11,2010)(FMAT(I,J,1),I=J,NRVAL)
 2010 FORMAT(6(1X,D12.4))
 1004 CONTINUE
      WRITE(*,2228)
      WRITE(11,2228)
C**   ATTENTION: HERE IS SUBROUTINE REDUCE (NOT: "REDUCT")!
 2228 FORMAT(' MATRIX GMAT(,,1):'
     1,' GMAT HERE FOR Z-DIR. (ONLY); COLUMNS (GIVEN AS ROWS):'
     2,/,' (FOR DETAILS SEE FMAT ABOVE!)')
      DO 1056 J=1,KASI
      WRITE(11,2010)(GMAT(I,J,1),I=J,NRVAL)
      WRITE(*,2010)(GMAT(I,J,1),I=J,NRVAL)
 1056 CONTINUE
      ENDIF
C**   END OF THE Z-DIRECTION (FMAT(,,1))!
C
C**   NOW STEPUP/STEPDOWN (FMAT(,,2) AND FMAT(,,3)):
      DO 1446 IE=1,NRVAL
      DO 2446 IEI=1,NRVAL
      EIVECF=ZERO
      EIVECG=ZERO
      IML=0
      IM=0
      DO 6441 I=-MULTIM,MULTIM,2
      IM=IM+1
      IL=0
      DO 6442 ML=-LWERT,LWERT
      IL=IL+1
      IML=IML+1
      IMLP1=IML+1
      IMLPMK=IML+MATDKL
C**   ORBITAL PART OF PERTURBATION OPERATOR FOR X-DIRECTION (PART OF FMAT(,,4))
C     IS HALF*(L- + L+): - ONLY PART OF PART OF FMAT(,,4) (PART OF FMAT(,,2)): L+:
      IF(ML.LT.LWERT)THEN
      EIVECQ=EIVECV(IML,IE)*EIVECV(IMLP1,IEI)*UPML(IL)
      EIVECF=EIVECF+EIVECQ
C**   EIVECG: NOT HERE!
      ENDIF
C**   SPIN PART OF PERTURBATION OPERATOR FOR X-DIRECTION (PART OF FMAT(,,4) =
C     GMAT(,,4)) IS GFACT*HALF*(S- + S+): (THE G-FACTOR TIMES HALF RESULTS TO ONE!)
C     - ONLY PART OF GMAT(,,4) (GMAT(,,2)): S+:
      IF(I.LT.MULTIM)THEN
      EIVECQ=EIVECV(IML,IE)*EIVECV(IMLPMK,IEI)
      EIVECG=EIVECG+EIVECQ*UPMS(IM)
      ENDIF
 6442 CONTINUE
 6441 CONTINUE
      FMAT(IE,IEI,3)=EIVECF
C**   FMAT(,,2) ITSELF IS NOT SYMM., BUT FMAT(,,2) AND FMAT(,,3) ARE
C     SYMM. ONE TO THE OTHER!:
      FMAT(IEI,IE,2)=EIVECF
C**   FMAT NOT YET READY (ONLY ORBITAL PART)!
      GMAT(IE,IEI,3)=EIVECG
      GMAT(IEI,IE,2)=EIVECG
C
 2446 CONTINUE
 1446 CONTINUE
C
      DO 1447 IE=1,NRVAL
      DO 2447 IEI=1,NRVAL
      FMAT(IEI,IE,4)=HALF*(FMAT(IEI,IE,2)+FMAT(IEI,IE,3))*REDFAZ(2)
     1+GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
      FMAT(IEI,IE,5)=HALF*(-FMAT(IEI,IE,2)+FMAT(IEI,IE,3))*REDFAZ(3)
     1-GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
C     ONE SHOULD THINK OF FMAT(,,5) AS BEING MULTIPL. BY I(MAG)!
C     (IF THE MATRIX OF THE OPERATOR IS REQUIRED, FMAT(,,5)*I
C     WILL BE APPLIED!) Sy=(-S+ + S-)i/2
      IF(MOROUU.GT.1)THEN
C**   BECAUSE THESE STEP-UP AND STEP-DOWN OPERATORS ARE FOR OUTPUT ONLY!
      FMAT(IEI,IE,3)=FMAT(IEI,IE,3)+TWO*GMAT(IEI,IE,3)
      FMAT(IEI,IE,2)=FMAT(IEI,IE,2)+TWO*GMAT(IEI,IE,2)
      ENDIF
 2447 CONTINUE
 1447 CONTINUE
C
      IF(KLICKM.EQ.0.AND.(MOROUV.NE.0.OR.JATEST.NE.0))THEN
      KLICKM=1
      WRITE(*,2253)EIWERT(1),EIWERT(2)
      WRITE(11,2253)EIWERT(1),EIWERT(2)
 2253 FORMAT(' THE FIRST 5 EIGENVAL.:',2D22.14)
      WRITE(*,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      WRITE(11,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      IF(IGR1.EQ.1)THEN
      WRITE(*,2235)
      WRITE(11,2235)
 2235 FORMAT(' THE FIRST STATE IS NOT DEGENERATED!')
      ENDIF
      IF(NRDIRE.GT.1)THEN
      WRITE(*,2352)
      WRITE(11,2352)
 2352 FORMAT(' G-FACTOR(S) CALCULATED FOR Z-DIRECTION ONLY!:')
      ENDIF
      GFACT(1)=-999.D0
      FGDIFF=FMAT(1,1,1)-GMAT(1,1,1)
      IF(FGDIFF.NE.ZERO)GFACT(1)=FMAT(1,1,1)/FGDIFF
      WRITE(*,2223)GFACT(1)
      WRITE(11,2223)GFACT(1)
 2223 FORMAT(
     1' G-FACTOR CALC. HERE FOR GROUND STATE (-999.<=>../0.) =',D16.8)
      IF(KLWERT.EQ.3)THEN
      WRITE(*,2232)GFACTA(NREL)
      WRITE(11,2232)GFACTA(NREL)
 2232 FORMAT(' TO BE COMPARED WITH ("FROM TABLES")',D16.8)
      ENDIF
      IF(KLWERT.EQ.2.OR.IGR1.NE.1.OR.IGR2.NE.1)THEN
      DO 2233 I=2,10
      GFACT(I)=-999.D0
      FGDIFF=FMAT(I,I,1)-GMAT(I,I,1)
      IF(FGDIFF.NE.ZERO)GFACT(I)=FMAT(I,I,1)/FGDIFF
 2233 CONTINUE
      WRITE(*,2234)(GFACT(I),I=2,10)
      WRITE(11,2234)(GFACT(I),I=2,10)
 2234 FORMAT(' AND GFACT FOR 1ST - 9TH EXITED STATE ='
     1,/,5D14.6,/,4D14.6)
      ENDIF
      IF(IGR1.NE.1.OR.IGR2.NE.1)THEN
      WRITE(*,2236)IGR1,IGR2
      WRITE(11,2236)IGR1,IGR2
 2236 FORMAT(' THE STATES 1 ...',I3,' ARE DEGENERATED (AND THE FOLLOWING
     1',I3,' STATES).',/,' G-FACTOR(S) MAY BE INCORRECT, IF NON-DIAGONAL
     2 ELEMENTS OF FMAT(,,1)',/,' ARE NON-ZERO WITHIN DEGENERATED STATES
     3: SEE FMAT FOR SUCH ELEMENTS!')
      ENDIF
      IF(IGR1.GT.2.OR.NRDIRE.EQ.2)THEN
      WRITE(*,6417)
      WRITE(11,6417)
 6417 FORMAT(' HINT: A TEST IS AVAILABLE FOR ANY DIRECTION, IF (MOROUT.A
     2ND.JATEST) ARE CHOSEN',/,' (BUT STOP FOLLOWS, AND Y-DIR. MUST NOT
     3BE INVOLVED)!')
      ENDIF
      IF(IGR1.EQ.2.AND.FMAT(1,2,1).NE.ZERO)THEN
      WRITE(*,2324)
      WRITE(11,2324)
 2324 FORMAT(
     1' BECAUSE THE FIRST 2 STATES AND ONLY THESE 2 ARE DEGENERATED!:')
      GFAMST(1,1)=FMAT(1,1,1)
      GFAMST(1,2)=FMAT(1,2,1)
      GFAMST(2,2)=FMAT(2,2,1)
      GFAMST(2,1)=FMAT(2,1,1)
      CALL DSPEVW(1,GFAMST,GFAMST,EIWMST,EIVMST,2,2,DUMMY,NDMAL3,4)
C
      DO 6411 IE=1,2
      DO 6412 IEI=1,2
      SUMA=ZERO
      DO 6413 J=1,2
      SUMI=ZERO
      DO 6414 I=1,2
      SUMI=SUMI+(FMAT(J,I,1)-GMAT(J,I,1))*EIVMST(I,IEI)
 6414 CONTINUE
      SUMA=SUMA+EIVMST(J,IE)*SUMI
 6413 CONTINUE
      GFAMST(IE,IEI)=SUMA
 6412 CONTINUE
 6411 CONTINUE
C
      WRITE(*,6415)(EIWMST(I),I=1,2)
      WRITE(11,6415)(EIWMST(I),I=1,2)
 6415 FORMAT(' FMAT(,,1)-DIAGONALIZED: ',2D12.4)
      WRITE(11,6416)((GFAMST(I,J),J=1,2),I=1,2)
      WRITE(*,6416)((GFAMST(I,J),J=1,2),I=1,2)
 6416 FORMAT(' SIMIL. TRANSF. OF FMAT-GMAT: ',4D12.4)
      DO 2323 I=1,2
      GFACT(I)=-999.D0
      IF(GFAMST(I,I).NE.ZERO)GFACT(I)=EIWMST(I)/GFAMST(I,I)
 2323 CONTINUE
      WRITE(*,2322)(GFACT(I),I=1,2)
      WRITE(11,2322)(GFACT(I),I=1,2)
 2322 FORMAT(
     1' G-FACTOR (Z-DIR.) CALC. HERE FOR 1TH & 2ND STATE =',2D16.8)
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO:
C     "IF(KLICKM.EQ.0.AND.(MOROUV.NE.0.OR.JATEST.NE.0))THEN"!
      IF(MOROUU.GT.1)THEN
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' MATRIX FMAT(,,2..5)'
     1,' (STEP- (2..3) AND PERT.-OPER. FOR X- AND',
     2/,' Y-DIR. (4..5)); (HERE!:) ROWS:')
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVAL
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
 1022 FORMAT(' BECAUSE MOROUU=2, ONLY ONE ROW!')
      ELSE
      WRITE(11,1008)
 1008 FORMAT(' BECAUSE MOROUU.GT.2, ALL ROWS!')
      ENDIF
      DO 1055 K=2,5
      WRITE(*,1050)K
      WRITE(11,1050)K
 1050 FORMAT(' NUMBER OF OPERATOR FMAT (2..5) =',I2)
      DO 1005 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVAL)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVAL)
 1005 CONTINUE
 1055 CONTINUE
C
C**   ATTENTION: HERE IS SUBROUTINE REDUCE (NOT: "REDUCT")!
      WRITE(*,1553)
      WRITE(11,1553)
 1553 FORMAT(' MATRIX GMAT(,,2..3); (HERE!:) ROWS:')
      DO 1551 K=2,3
      WRITE(*,1550)K
      WRITE(11,1550)K
 1550 FORMAT(' NUMBER OF OPERATOR GMAT (2..3) =',I2)
      DO 1552 I=1,KASI
      WRITE(11,2010)(GMAT(I,J,K),J=1,NRVAL)
      WRITE(*,2010)(GMAT(I,J,K),J=1,NRVAL)
 1552 CONTINUE
 1551 CONTINUE
C
      ENDIF
C
      IF(JATEST.NE.0.AND.IOPT2.NE.0)THEN
      IF(KLICKH.EQ.0)THEN
      KLICKH=1
      WRITE(11,1581)
 1582 WRITE(*,1581)
 1581 FORMAT(' INSTEAD OF HEISENBERG COUPLING, THE ISING MODEL, THE XY M
     1ODEL',/,' OR ANY MODEL "BETWEEN" THESE TWO MAY BE APPLIED:',/,' IN
     2PUT IN 2F5.1 1.0.(ISING), 1.b., 1.1.(HEISENBERG), a.1., 0.1.(XY)')
      WRITE(11,1587)
      WRITE(*,1587)
 1587 FORMAT('   0.0  0.0 => HEISENBERG MODEL!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2F5.1)',ERR=5588,END=3430)FACZ,FACXY
      GOTO 4930
      ENDIF
 3430 READ(*,'(2F5.1)',ERR=1582,END=4576)FACZ,FACXY
      LMN=1
 4930 IF(FACZ.GT.ONE)FACZ=ONE
      IF(FACXY.GT.ONE)FACXY=ONE
      IF(FACZ.LT.ZERO)FACZ=ZERO
      IF(FACXY.LT.ZERO)FACXY=ZERO
      IF(FACZ.EQ.ZERO.AND.FACXY.EQ.ZERO)THEN
      FACZ=ONE
      FACXY=ONE
      ENDIF
      IF(FACXY.LT.ONE)FACZ=ONE
      IF(FACZ.LT.ONE)FACXY=ONE
      WRITE(7,1583)FACZ,FACXY
 1583 FORMAT(2F5.1,' =FACZ,FACXY')
      WRITE(*,1586)FACZ,FACXY
      WRITE(11,1586)FACZ,FACXY
 1586 FORMAT(' FACZ, FACXY =',2F6.1)
      FACZ=FACZ**2
      FACXY=FACXY**2
      ENDIF
C      DO 1584 IE=1,NRVAL !ERROR NOT HERE, BUT IN REDUCT!!!
C      DO 1585 IEI=1,NRVAL
C      GMAT(IEI,IE,1)=FACZ*GMAT(IEI,IE,1)
C      GMAT(IEI,IE,2)=FACXY*GMAT(IEI,IE,2)
C      GMAT(IEI,IE,3)=FACXY*GMAT(IEI,IE,3)
C 1585 CONTINUE
C 1584 CONTINUE
      ENDIF
C
 9977 CONTINUE
C**   BELONGS TO "NEUEBS.EQ.0"
      CALL SELECT(
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,MATDIM,FACZ,FACXY)
C**   RETURNS TO ECKART!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND REDUCE
      END
      SUBROUTINE CHANGE(
     1MATDIM,MATDKL,MULTIM,LWERT,UPMS,NRPAIR,NRSPUQ
C**   NRSPUQ=NREL-NRPAIR
C     NRSPUP=NREL-2*NRPAIR
C**   NRSPUP=NRSPUQ-NRPAIR
     1,EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,BIGEIV
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,FMIKR2,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT
C**   ... AND FOR SUBROUTINE ECKART IN ADDITION:
     7,FMIKR1,BIGMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINE CHANGE, THIS SUBROUTINE HERE:
     7,MQUER,MQUERR,REDFAZ,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR,NGROUP
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
C**   CHANGE OF BASIS FROM LS TO MICRO STATES!: (NO RETURN!
C     (NO RETURN TO ECKART OR ELSEWHERE!))
C**   (LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONIC SPECTRA,
C**          CAMBRIDGE UNIVERSITY PRESS 1970. - P.226+227,EQ.(1)+(3))
C**   "INPUT" FROM SUBROUTINE ECKART: EIVECV! - CALLS SAUNDE FOR THE RUSSELL-
C     SAUNDERS STATES AND SCHEMA FOR THE MICRO STATES (BECAUSE ECKART WAS
C     CALLED BEFORE INSTEAD OF TANABE)! - USES NUMBER TO EVALUATE THE NUMBER
C     OF THE MICRO STATES!
C**   OUTPUT(HERE AND IN SAUNDE): TO TERMINAL AND FILES 1, 2, 3 AND 11 (AND 7)!
C     E.G. GROUND STATE AND QUINTETT-I AND TRIPLETT-M STATE, RESP., OF
C     HOLMIUM3+, I.E. ALL STATES CONTAINING ONE STATE, WHICH CONSISTS OF
C     ONE(!) MICRO STATE!
C**   IN ADDITION "ODD" STATES MAY BE HANDLED, E.G. STATES CONTAINING NO
C     STATE, WHICH CONSISTS OF ONLY ONE(!) MICRO STATE! BUT THIS CONCERNES
C     ONLY THE STATE ITSELF AND DOES NOT BELONG TO MAGNETOCHEMISTRY!
C**   (LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONIC SPECTRA,
C**          CAMBRIDGE UNIVERSITY PRESS 1970. - P.226,227,228 - 3D**3 EL.!)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      PARAMETER(NRELMC=14
     1,ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0
     1,HALF=0.5D0,QUART=0.25D0,PARWUR=1.0D-6,PAR=100.0D0*PARWUR**2
     1,FOUR=4.0D0)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C
      DOUBLE PRECISION EIVECV(ND2002,*)
C**   DOUBLE PRECISION DBLMAT(ND2002,*) => BIGMAT!
C**   DOUBLE PRECISION DUMMY(ND2002*2) => BIGEIV!
C** DOUBLE PRECISION BIGMAT(-LLSMX:LLSMX,-ISLSMX:ISLSMX,*) - ISLSMX=+4 NOT USED!
      DOUBLE PRECISION BIGMAT(ND2002,*)
     1,BIGEIV(*),VORFAK(-LLSMX:LLSMX,KDIMPL)
     2,VORFAL(-ISLSMX:ISLSMX,KDIMPL)
      INTEGER MSML(ND2002,2,NRELMC),MQUER(ND2002,3),MSMLCO(2,NRELMC)
     1,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNR(2,-KLWER3:KLWER3)
     2,MSMLNS(2,-KLWER3:KLWER3),KAESNR(-LLSMX:LLSMX)
     3,KAESTC(-LLSMX:LLSMX,KDIMPL),KAESTD(-ISLSMX:ISLSMX,KDIMPL)
     4,LOCH(KDIMPL),NRAXE(23),NOFROW(ND2002,I10),NROFNR(*)
C**  5,NR1(11),NR2(11),NRSYM(11),NS1(12),NS2(12),NSSYM(12)
     5,NR12(9),KAESNS(-ISLSMX:ISLSMX)
      CHARACTER*6  QNRSYM(11),QNSSYM(12)
C
C**   FROM: HANDBOOK OF THE PHYSICS AND CHEMISTRY OF THE RARE EARTHS,
C     VOL.23, ELSEVIER SCIENCE B.V. 1996, P.156 ("CRYSTAL QUANTUM No."):
C     M = MU (MOD Q) WITH Q TAKEN AS THE MINIMUM Q-VALUE IN THE CRYSTAL-
C     FIELD POTENTIAL DIFFERENT FROM ZERO (SEE APPENDIX, P.242!):
C**   DATA FOR /D2H,D3H,D4H,D5H,D6H,D-INF-H,D2D,D3D,D4D,D6D,D2,D3,D4,D6,
C     C2V,C3V,C4V,C6V,C-INF-V,???,CUB-I,CUB-II,SPH/:
      DATA NRAXE/2,6,4,99,6,99,4,3,99,99,2,3,4,6,2,3,4,6,99,99,4,3,99/
C**   NOW FOR EVEN No. OF EL. <=> P.156; (FOR Q = 2...6) 2*MU =
C     DATA NR1 /0,2,-2,2,4,-4,4,6,0,0,4/
C     DATA NR2 /0,2,-2,-2,4,-4,-4,6,4,2,2/
      DATA QNRSYM /'  0   ','  2   ','  -2  ',' 2-2  ','  4   ','  -4  '
     1,' 4-4  ','  6   ','  40  ',' 20-2 ',' 42-2 '/
C**   AND FOR ODD No. OF EL. <=> P.157; (FOR Q = 2...6) 2*MU =
C     DATA NS1 /1,-1,1,3,-3,3,5,-5,5,1,-1,1/
C     DATA NS2 /1,-1,-1,3,-3,-3,5,-5,-5,-3,3,3/
      DATA QNSSYM /'  1   ','  -1  ',' 1-1  ','  3   ','  -3  ',' 3-3  '
     1,'  5   ','  -5  ',' 5-5  ',' 1-3  ',' 3-1  ','31-1-3'/
C**   ... AND FROM: HANDBUCH DER PHYSIK, BD.28 (1957), S.205-242,
C     SPRINGER BERLIN: KRISTALLSPEKTREN.
      DATA MOROUU,KAESNN,JANOOD/0,0,0/
      DATA NR12/9*-99/
C(NO) SAVE
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8248 WRITE(*,128)
  128 FORMAT(' MOROUT.NE.0: INPUT',
     1' IN I1 MOROUT-HERE-IN-CHANGE ( >0 => MOROUT*10+5 FOR OUTP.',/,' O
     1F EIGENV.!) (VALID FOR SUBROUTINE SAUNDE, TOO!); =0, 1, 2 OR >2!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3431)MOROUU
      GOTO 4931
      ENDIF
 3431 READ(*,'(I1)',ERR=8248,END=4576)MOROUU
      LMN=1
 4931 WRITE(*,2838)MOROUU
      WRITE(11,2838)MOROUU
 2838 FORMAT(I2,' =MOROUU IN CHANGE/ FOR SAUNDE!!!!!!!!!')
      WRITE(7,2388)MOROUU
 2388 FORMAT(I1,' =MOROUU IN CHANGE/ FOR SAUNDE')
      ENDIF
C
      LLS=LWERT
      LLSM2P=2*LLS+1
      FSLS=DBLE(MULTIM)/TWO
      ISLS=MULTIM/2
      NGRADE=MOD(NREL,2)
      ISLSPL=ISLS+NGRADE
      ISLS2P=ISLS+ISLSPL+1
      MULMUL=LLSM2P*ISLS2P
C
      WRITE(11,2266)
 8249 WRITE(*,2266)
 2266 FORMAT(
     1' INPUT YES/NO(0): BASISVECTORS TO FILE 2 AND 3 (AND FOR FILE 3'
     2,' IN ADDITION',/,' IN I2I1: ML- AND MS-VALUE(S) (-0.5,IF HALF-'
     3,'INTEGER, SO THAT IT BECOMES',/,' INTEGER!), WHICH ONLY WILL BE'
     4,' PUT TO FILE 3) (FOR SAUNDE ONLY!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1,I2,I1)',ERR=5588,END=3432)JANO,MLONLY,MSONLY
      GOTO 4932
      ENDIF
 3432 READ(*,'(I1,I2,I1)',ERR=8249,END=4576)JANO,MLONLY,MSONLY
      LMN=1
 4932 WRITE(7,2389)JANO,MLONLY,MSONLY
 2389 FORMAT(I1,I2,I1,' =JANO,MLONLY,MSONLY')
      WRITE(*,2938)JANO,MLONLY,MSONLY
      WRITE(11,2938)JANO,MLONLY,MSONLY
 2938 FORMAT(3I3,' =JANO,MLONLY,MSONLY!!!!!!!!!')
C
      LLSM1=LLS-1
      LLSP1=LLS+1
      ISLSM1=ISLSPL-1
      ISLSP1=ISLS+1
C
      DO 6621 J=1,ND2002
      DO 6622 I=1,ND2002
      BIGMAT(I,J)=ZERO
 6622 CONTINUE
 6621 CONTINUE
C
      KLWRTP=KLWERT+1
      KLWRTM=KLWERT-1
      LMAL2=2*KLWERT
      LMAL2P=LMAL2+1
      NRELMX=2*LMAL2P
      IF(NRELMC.LT.NRELMX)STOP '.LT.14'
C
      NRELM1=NREL-1
C**   MAX. OF KASSUM (No. OF MICRO STATES) IS =252 =10 UPON 5 FOR D EL.,
C     FOR INSTANCE 10 UPON 3 AMOUNTS TO 120.
C     ALL KASSUM MICRO STATES FOR NREL ELECTRONS ARE COMPUTED AND STORED
C     NOW IN SUBROUTINE SCHEMA AND MSML( , , ) AND MQUER( , ) ARE READY!:
      CALL SCHEMA(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW,KLWER3)
      KASSUL=KASSUM-1
C
      IF(JANO.NE.0)THEN
      WRITE(11,2265)
 8250 WRITE(*,2265)
 2265 FORMAT(' MORE THEN ONE RESP. ONE, BUT A DIFFERENT, MICRO STATE(S):
     1',/,' YES/NO(0)?: INPUT IN I2, HOW MANY MICRO STATES!'
     2,/,' (ONLY FOR "BASISVECTORS TO FILE 2 & 3" - AFTER THAT: STOP!)',
     3/,' NEG. VAL. => POS., BUT CALC. THEN FOR P ELECTRONS!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,2246)
      WRITE(11,2246)
 2246 FORMAT(' LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORIY OF ELECTRONI
     1C SPECTRA,',/,' CAMBRIDGE UNIVERSITY PRESS 1970. - P.226,227,228 -
     2 3D**3 EL.!',/,' - THE PROGRAM DOES NOT CONTROL THE INPUT HERE IN 
     3ANY WAY!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3433)JANOOD
      GOTO 4933
      ENDIF
 3433 READ(*,'(I2)',ERR=8250,END=4576)JANOOD
      LMN=1
 4933 WRITE(7,2390)JANOOD
 2390 FORMAT(I2,' =JANOOD("ODD")')
      WRITE(*,2903)JANOOD
      WRITE(11,2903)JANOOD
 2903 FORMAT(I3,' =JANOOD("ODD")!!!!!!!!!')
      IF(JANOOD.NE.0)THEN
      IF(MORTEX.GT.0)THEN
      WRITE(*,2267)
      WRITE(11,2267)
 2267 FORMAT(' IN ADDITION "ODD" STATES MAY BE HANDLED, E.G. STATES'
     1,' CONTAINING NO STATE,',/,' WHICH CONSISTS OF ONLY ONE(!) MICRO S
     2TATE (CORRESPONDS NOT TO MAGNETOCHEMISTRY)!')
      ENDIF
      IF(JANOOD.LT.0)THEN
      JANOOD=-JANOOD
      KLWERT=1
      KLWRTP=KLWERT+1
      KLWRTM=KLWERT-1
      CALL SCHEMA(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW,KLWER3)
      KASSUL=KASSUM-1
      ENDIF
      WRITE(11,2268)
 8215 WRITE(*,2268)
 2268 FORMAT(
     1' INPUT IN I1,I2 MULTIP(LICITY), L-NUMBER(E.G. 0,1,2 FOR S,P,D)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1,I2)',ERR=5588,END=3453)MULTIP,LWERT
      GOTO 4943
      ENDIF
 3453 READ(*,'(I1,I2)',ERR=8215,END=4576)MULTIP,LWERT
      LMN=1
 4943 WRITE(7,2319)MULTIP,LWERT
 2319 FORMAT(I1,I2,' =MULTIP,LWERT')
      WRITE(*,2320)MULTIP,LWERT
      WRITE(11,2320)MULTIP,LWERT
 2320 FORMAT(2I2,' =MULTIP,LWERT!!!!!!!!!')
      MULTIM=MULTIP-1
C**   COPY FROM ABOVE:
      LLS=LWERT
      LLSM2P=2*LLS+1
      FSLS=DBLE(MULTIM)/TWO
      ISLS=MULTIM/2
      NGRADE=MOD(NREL,2)
      ISLSPL=ISLS+NGRADE
      ISLS2P=ISLS+ISLSPL+1
      MULMUL=LLSM2P*ISLS2P
      LLSM1=LLS-1
      LLSP1=LLS+1
      ISLSM1=ISLSPL-1
      ISLSP1=ISLS+1
      WRITE(*,2263)JANOOD
      WRITE(11,2263)JANOOD
 2263 FORMAT('INPUT'
     1,' IN I4,E12.4 "No." OF MICROSTATE AND "WEIGHT"(',I2,' ROWS!)',/,
     2' "No." COMES FROM MORE-OUTPUT FROM SUBROUTINE SCHEMA!')
      KAESNR(LLS)=JANOOD
      DO 2264 I=1,JANOOD
 8251 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,D12.4)',ERR=5588,END=3434)NR,WEIGHT
      GOTO 4934
      ENDIF
 3434 READ(*,'(I4,D12.4)',ERR=8251,END=4576)NR,WEIGHT
      LMN=1
 4934 WRITE(7,2391)NR,WEIGHT
 2391 FORMAT(I4,D12.4,' =NR,WEIGHT')
      WRITE(*,2139)NR,WEIGHT
      WRITE(11,2139)NR,WEIGHT
 2139 FORMAT(I5,D12.4,' =NR,WEIGHT!!!!!!!!!')
C**   BIGMAT(LLS,ISLS,NR)=WEIGHT - MAX. OF ISLS IS 3!
      KAESTC(LLS,I)=NR
      VORFAK(LLS,I)=WEIGHT
 2264 CONTINUE
      GOTO 3344
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(JANOOD.NE.0)THEN"!
      ENDIF
C
C**   "START" HERE, IF(JANOOD.EQ.0)!:
C**   KLWERT-(KLWERP-NRSPUQ)+1 PLUS KLWERT-(KLWERP-NRPAIR)+1 = NREL!:
C     (= NRPAIR+NRSPUQ)
      DO 6620 J=-KLWER3,KLWER3
      DO 6619 I=1,2
      MSMLNR(I,J)=0
 6619 CONTINUE
 6620 CONTINUE
      DO 3 J=KLWERT,KLWRTP-NRSPUQ,-1
      MSMLNR(1,J)=1
    3 CONTINUE
      DO 4 J=KLWERT,KLWRTP-NRPAIR,-1
      MSMLNR(2,J)=-1
    4 CONTINUE
      CALL NUMBER(NR,MSMLNW,MSMLNR,ND2002,KLWERT,KASSUM,KLWER3)
C     
C**   BIGMAT(LLS,ISLS,NR)=ONE
C     ISHIFT=(ISLS+ISLSPL)*LLSM2P WITH ISLSPL AND LLSM2P GIVEN ABOVE!
C     (ISLSPL NOT ALWAYS = ISLS+1)
C NOW BIGMAT(LLS+LLSP1+ISHIFT,NR)=ONE - WITH LLSP1 GIVEN ABOVE!
      KAESNR(LLS)=1
      KAESTC(LLS,1)=NR
      VORFAK(LLS,1)=ONE
C**   IF THERE IS THE QUINTET-I STATE OF HO3+, THE L(!)-OPERATOR ACTS
C     IN PRACTICE ONLY ON THE 2ND ROW OF MSMLNR, BUT ALSO ON THE 1ST
C     ROW ELSE (SEE BELOW)!
C
C**   END OF "START"!
C**   NOW CONTINUE FOR "JANOOD"!:
 3344 CONTINUE
      MSFIX=ISLS
      NRTOAD=0
C
      CALL SAUNDE(NRTOAD,KAESNR,LLSMX,LLS,LLSM1,LLSP1,KAESTC,VORFAK
     1,MSFIX,ISLSM1,LLSM2P,BIGMAT,ND2002,MSMLNW,MSMLNR,MSMLNS,KLWER3
     2,KLWERT,KLWRTM,KLWRTP,MQUER,KASSUM,LOCH,ISLSPL,ISLSP1,JANO
     3,MLONLY,MSONLY,MOROUU,KDIMPL,ISLSMX,VORFAL,KAESTD,KAESNS,KAESNN)
C
      IF(JANOOD.NE.0)THEN
      WRITE(*,4475)
      WRITE(11,4475)
 4475 FORMAT(' BASISVECTORS HAVE BEEN WRITTEN TO FILE 2 (AND 3) AND',/,
     1' "DIFFERENT" (I.E. "ODD") MICRO STATES ARE CONCERNED: "STOP"!')
      STOP 'JANOOD'
      ENDIF
C
C**   COMPUT. OF BIGEIV, I.E. AN (ONE OR MORE) EIGENVECTOR WITH MICRO STATE
C     BASIS, AND SUBSTITUTION OF EIVECV BY BIGEIV (NOT ALWAYS ALL EIVECV:
C**   BIGEIV(I=1,KASSUM) FOR KAS123 (=MOROUT*10+5) EIGENVECTORS EIVECV).
C     OUTPUT => FILE 2, IF(!) MOROUT.NE.0!)
      KAS123=MOROUU*10+5
C**   IF(KAS123.GT.KASSUM)KAS123=KASSUM
      MM=(ISLSPL+ISLS+1)*(2*LLS+1)
      IF(KAS123.GT.MM)KAS123=MM
      DO 5550 I123=1,KAS123
      DO 999 I=1,KASSUM
      BIGEIV(I)=ZERO
      MM=0
      DO 998 MS=-ISLSPL,ISLS
      DO 997 ML=-LLS,LLS
      MM=MM+1
C**   BIGEIV(I)=BIGEIV(I)+BIGMAT(ML,MS,I)*EIVECV(MM,I123)
      ISHIFT=(MS+ISLSPL)*LLSM2P
      BIGEIV(I)=BIGEIV(I)+BIGMAT(ML+LLSP1+ISHIFT,I)*EIVECV(MM,I123)
  997 CONTINUE
  998 CONTINUE
  999 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(2,9919)I123
 9919 FORMAT(I5,'= No. OF EIGENVECTOR((I=1,KASSUM),NR), WHICH (ONLY) TO 
     1FILE 2!')
      IF(I123.EQ.1)THEN
      WRITE(*,9199)MM,ISLSPL,ISLSM1,ISLS,LLS,LLSP1,ISHIFT,LLSM2P
      WRITE(11,9199)MM,ISLSPL,ISLSM1,ISLS,LLS,LLSP1,ISHIFT,LLSM2P
 9199 FORMAT(' BIGMAT(LLS,ISLS,I) <=> BIGMAT(LLS+LLSP1+ISHIFT,I), ISHIFT
     1=(ISLS+ISLSPL)',/,' *LLSM2P;',/,' STATES,ISLSPL,ISLSM1, ISLS, LLS,
     2 LLSP1,ISHIFT,LLSM2P =',/,8I6)
      WRITE(*,9919)I123
      WRITE(11,9919)I123
C
      WRITE(*,1011)
      WRITE(11,1011)
      WRITE(2,1011)
 1011 FORMAT(' BECAUSE MOROUT.NE.0, MOROUT*10+5 EIGENVECTORS TO FILE 2')
      ENDIF
      WRITE(2,'(5D14.6)')(BIGEIV(I),I=1,KASSUM)
      ENDIF
C
      DO 9991 I=1,KASSUM
      EIVECV(I,I123)=BIGEIV(I)
 9991 CONTINUE
C
 5550 CONTINUE
C
C**   NOW THE SYMMETRY QUANTUM NUMBERS FOR EIVECV!:
C
      WRITE(*,3998)KAS123
      WRITE(11,3998)KAS123
 3998 FORMAT(' MAX. MOROUT*10+5 EIGENVECTORS TO ANALYSE NOW, REALLY',I4,
     1/)
      WRITE(*,2999)
      WRITE(11,2999)
 2999 FORMAT(' ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE',/
     1,' FORM "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY/CRYSTAL QUANTUM NU
     2MBERS!',/,' IN SUBROUTINE CHANGE THE SAME NUMBERS WILL APPEAR, BUT
     3 NOT SO,',/,' BECAUSE DEGENERATED MAY BE MIXED, IF BLOCUT IS NOT C
     4ALLED (WITH "MOROUT")!',/)
C
      WRITE(*,3999)
      WRITE(11,3999)
 3999 FORMAT(' (2*)MJ VALUES FOR THE MICRO STATES ARE IN MQUER, BUT (2*)
     1MJ VALUES',/,' FOR THE LS STATES ARE IN MQUERR. MQUER SERVES TO FI
     2ND',/,' THE (2*)MJ VALUES TO ANALYSE THE EIVECs HERE.',/)
C
C**   NOW ABOUT THE SYMMETRY QUANTUM NUMBERS FOR EIVECV!:
      NNRAXE=2*NRAXE(NGROUP)
      IF(NNRAXE.EQ.0)NNRAXE=1
      IF(NNRAXE.GT.99)THEN
      WRITE(*,4476)
      WRITE(11,4476)
 4476 FORMAT(' THERE IS',
     1' NO RELEVANT AXIS OF 2,3,4,5,6 IN THE GROUP: "PURE" MJ VALUES!')
      ELSE
      WRITE(*,4477)NRAXE(NGROUP)
      WRITE(11,4477)NRAXE(NGROUP)
 4477 FORMAT(' THERE IS A RELEVANT AXIS IN THE GROUP OF',I3)
      ENDIF
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED
C     BY THE SECOND (MAY BE NEG.!):
      JAEVEN=0
      IF(MOD(NREL,2).EQ.0)JAEVEN=1
C**   1 <=> "EVEN" No. OF EL.!
C
C**   "INFINITE" LOOP:
 4488 CONTINUE
      IF(JAEVEN.NE.0)THEN
C**   "EVEN No. OF EL."!:
      WRITE(*,4478)
      WRITE(11,4478)
 4478 FORMAT(' "EVEN" No. OF EL.! INPUT IN I1,I2 NUMBER OF "EVEN" (2*)MJ
     1 VALUES',/,' (UP TO 3 (OR 9 FOR TEST)) AND OF EIGENVECTOR TO BE AN
     2ALYSED (999=STOP)') 
      IF(NNRAXE.LT.99)WRITE(*,4487)(QNRSYM(I),I=1,11)
 4487 FORMAT(' SOME HINTS FOR (2*)MJ:',/,6A6,/,5A6)
      ELSE
C**   "ODD No. OF EL."!:
      WRITE(*,4479)
      WRITE(11,4479)
 4479 FORMAT(' "ODD" No. OF EL.! INPUT IN I1,I2 NUMBER OF "ODD" (2*)MJ V
     1ALUES',/,' (UP TO 4 (OR 9 FOR TEST)) AND OF EIGENVECTOR TO BE ANAL
     2YSED (999=STOP)')
      IF(NNRAXE.LT.99)WRITE(*,4486)(QNSSYM(I),I=1,12)
 4486 FORMAT(' SOME HINTS FOR (2*)MJ:',/,6A6,/,6A6)
      ENDIF
 1447 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1,I2)',ERR=5588,END=3435)MODNRR,I123
      GOTO 4935
      ENDIF
 3435 READ(*,'(I1,I2)',ERR=1447,END=4576)MODNRR,I123
      LMN=1
 4935 IF(MODNRR.LE.0)MODNRR=1
      IF(I123.LE.0)I123=1
      WRITE(7,4174)MODNRR,I123
 4174 FORMAT(I1,I2,' =MODNRR,I123')
      IF(I123.GT.KAS123.AND.I123.NE.99)I123=KAS123
      WRITE(*,4175)MODNRR,I123
      WRITE(11,4175)MODNRR,I123
 4175 FORMAT(I2,I3,' =MODNRR,I123!!!!!!!!!')
      IF(MODNRR.EQ.9.AND.I123.EQ.99)STOP 'END OF CHANGE'
C
      IF(KASSUM.LE.91)WRITE(*,'(5(I3,D14.6))')
     1(MQUER(I,3),EIVECV(I,I123),I=1,KASSUM)
      WRITE(*,4485)
      WRITE(11,4485)
 4485 FORMAT(' INPUT IN I3 (2*)MJ VALUES (ONE ROW EACH) (-99=EXIT)')
C
      DO 4482 I=1,MODNRR
 9482 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3436)NR12(I)
      GOTO 4936
      ENDIF
 3436 READ(*,'(I3)',ERR=9482,END=4576)NR12(I)
      LMN=1
 4936 WRITE(7,'(I3)')NR12(I)
      WRITE(*,'(I4)')NR12(I)
      WRITE(11,'(I4)')NR12(I)
      IF(NR12(I).EQ.-99)GOTO 4984
      MODNR1=MOD(NR12(I),NNRAXE)
      IF(MODNR1.LT.0)MODNR1=MODNR1+NNRAXE
      IM1=I-1
      DO 9480 II=1,IM1
      MODNR2=MOD(NR12(II),NNRAXE)
      IF(MODNR2.LT.0)MODNR2=MODNR2+NNRAXE
      IF(MODNR1.EQ.MODNR2)THEN
      WRITE(*,2446)
 2446 FORMAT(' ERROR: "EQUAL"(MODULO!)')
      GOTO 9482
      ENDIF
 9480 CONTINUE
      IF(JAEVEN.NE.0.AND.MOD(NR12(I),2).NE.0)THEN
      WRITE(*,9483)
 9483 FORMAT(' ERROR: ODD NUMBER!')
      GOTO 9482
      ENDIF
      IF(JAEVEN.EQ.0.AND.MOD(NR12(I),2).EQ.0)THEN
      WRITE(*,9481)
 9481 FORMAT(' ERROR: EVEN NUMBER!')
      GOTO 9482
      ENDIF
 4482 CONTINUE
C
 4984 QUADRS=ZERO
      DO 1441 I=1,KASSUM
      MODMQU=MOD(MQUER(I,3),NNRAXE)
      IF(MODMQU.LT.0)MODMQU=MODMQU+NNRAXE
      DO 1446 MODNR=1,MODNRR
      IF(NR12(MODNR).EQ.-99)GOTO 1446
      MODNR1=MOD(NR12(MODNR),NNRAXE)
      IF(MODNR1.LT.0)MODNR1=MODNR1+NNRAXE
      IF(MODNR1.EQ.MODMQU)
     1QUADRS=QUADRS+EIVECV(I,I123)**2
 1446 CONTINUE
 1441 CONTINUE
      WRITE(*,1444)I123,MODNRR,QUADRS,PAR,(NR12(I),I=1,MODNRR)
      WRITE(11,1444)I123,MODNRR,QUADRS,PAR,(NR12(I),I=1,MODNRR)
 1444 FORMAT(' I123,MODNRR,QUADRS,PAR =',2I3,2D16.8
     1,/,' (2*)MJ =',9I3)
      IF(DABS(QUADRS-ONE).GT.PAR)THEN
      WRITE(*,4483)
 4483 FORMAT(' NO SUFFICIENT SYMM.QUANTUM No.''s!')
      GOTO 4488
      ELSE
C**   OUTPUT:
      WRITE(*,4481)
 4481 FORMAT(' SUFFICIENT SYMM.QUANTUM No.''s! OUTPUT TO FILE 3')
      II=0
      DO 9450 I=1,KASSUM
      MODMQU=MOD(MQUER(I,3),NNRAXE)
      IF(MODMQU.LT.0)MODMQU=MODMQU+NNRAXE
      DO 8446 MODNR=1,MODNRR
      IF(NR12(MODNR).EQ.-99)GOTO 8446
      MODNR1=MOD(NR12(MODNR),NNRAXE)
      IF(MODNR1.LT.0)MODNR1=MODNR1+NNRAXE
      IF(MODNR1.EQ.MODMQU)THEN
      II=II+1
      BIGEIV(II)=EIVECV(I,I123)
      ENDIF
 8446 CONTINUE
 9450 CONTINUE
C
      WRITE(*,4489)II
      WRITE(11,4489)II
      WRITE(3,4489)II
 4489 FORMAT(' NUMBER OF MICRO STATES FOUND =',I4)
      WRITE(3,'(5D14.6)')(BIGEIV(I),I=1,II)
      WRITE(3,1444)I123,MODNRR,QUADRS,PAR,(NR12(I),I=1,MODNRR)
      GOTO 4488
C
      ENDIF
C
C**   NO RETURN (TO ECKART OR ELSEWHERE!)!)
 4576 CALL FINISH
 5588 CALL FINISI
CEND CHANGE
      END
      SUBROUTINE SAUNDE(
     1NRTOAD,KAESNR,LLSMX,LLS,LLSM1,LLSP1,KAESTC,VORFAK,MSFIX,ISLSM1
     1,LLSM2P,BIGMAT,ND2002,MSMLNW,MSMLNR,MSMLNS,KLWER3,KLWERT,KLWRTM
     2,KLWRTP,MQUER,KASSUM,LOCH,ISLSPL,ISLSP1,JANO,MLONLY,MSONLY,MOROUU
     3,KDIMPL,ISLSMX,VORFAL,KAESTD,KAESNS,KAESNN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
C
C**   CALLED BY CHANGE OR BY RUSSEL! COMPUTES ALL THE (DEGENERATED) STATES
C     OF A RUSSELL-SAUNDERS STATE OF AN ION, IF ONE OF THESE STATES, THE
C     ONE WITH MAX. ML AND MAX. MS VALUE, IS GIVEN AS INPUT. RETURNED TO
C     THE CALLING ROUTINE IS BIGMAT, WHICH CONTAINES THE WEIGHTS OF THE
C     MICRO STATES CORRESPONDING TO EACH OF THE DEGENERATED STATES ABOVE.
C**   USES NUMBER TO GET THE CONSECUTIVE NUMBER OF A MICRO STATE!
      PARAMETER(ZERO=0.0D0,ONE=1.0D0
     1,PARWUR=1.0D-6)
C** DOUBLE PRECISION BIGMAT(-LLSMX:LLSMX,-ISLSMX:ISLSMX,*) - ISLSMX=+4 NOT USED!
      DOUBLE PRECISION BIGMAT(ND2002,*)
     1,VORFAK(-LLSMX:LLSMX,KDIMPL),VORFAL(-ISLSMX:ISLSMX,KDIMPL)
C
      INTEGER MQUER(ND2002,3)
     1,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNR(2,-KLWER3:KLWER3)
     2,MSMLNS(2,-KLWER3:KLWER3),KAESNR(-LLSMX:LLSMX),KAESTC(-LLSMX:
     3LLSMX,KDIMPL),KAESNS(-ISLSMX:ISLSMX),KAESTD(-ISLSMX:ISLSMX,KDIMPL)
     4,LOCH(KDIMPL)
C
      SAVE
C
      ISLS=MSFIX
C
      II=KAESNR(LLS)
      DO 11 I=1,II
      NR=KAESTC(LLS,I)
      WEIGHT=VORFAK(LLS,I)
      ISHIFT=(MSFIX+ISLSPL)*LLSM2P+NRTOAD 
      BIGMAT(LLS+LLSP1+ISHIFT,NR)=WEIGHT
   11 CONTINUE
C
      DO 5 ML=LLS,-LLSM1,-1
C**   ML = STARTING VALUE, MLM1 = NEXT VALUE!
      MLM1=ML-1
      FNENNR=DSQRT(DBLE((LLS+ML)*(LLSP1-ML)))
      KAESNR(MLM1)=0
      DO 56 K=1,KAESNR(ML)
      NR=KAESTC(ML,K)
      DO 566 I=-KLWERT,KLWERT
      MSMLNR(1,I)=MSMLNW(NR,1,I)
  566 MSMLNR(2,I)=MSMLNW(NR,2,I)
      DO 61 IZEILE=1,2
      DO 6 N=KLWERT,-KLWRTM,-1
      NM1=N-1
      IF(MSMLNR(IZEILE,N).EQ.0)GOTO 6
      IF(MSMLNR(IZEILE,NM1).NE.0)GOTO 6
      DENOMI=DSQRT(DBLE((KLWERT+N)*(KLWRTP-N)))
      QUOT=DENOMI/FNENNR
      QUOTTT=QUOT*VORFAK(ML,K)
      DO 567 I=-KLWERT,KLWERT
      MSMLNS(1,I)=MSMLNR(1,I)
  567 MSMLNS(2,I)=MSMLNR(2,I)
      MSMLNS(IZEILE,N)=0
      IF(IZEILE.EQ.1)THEN
      MSMLNS(IZEILE,NM1)=1
      IF(MSMLNS(2,N).EQ.-1)QUOTTT=-QUOTTT
      ELSE
      MSMLNS(IZEILE,NM1)=-1
      IF(MSMLNS(1,NM1).EQ.1)QUOTTT=-QUOTTT
      ENDIF
      CALL NUMBER(NR,MSMLNW,MSMLNS,ND2002,KLWERT,KASSUM,KLWER3)
C**   BIGMAT(MLM1,MSFIX,NR)=BIGMAT(MLM1,MSFIX,NR)+QUOTTT
      ISHIFT=(MSFIX+ISLSPL)*LLSM2P+NRTOAD
      BIGMAT(MLM1+LLSP1+ISHIFT,NR)
     1=BIGMAT(MLM1+LLSP1+ISHIFT,NR)+QUOTTT
      KAESNR(MLM1)=KAESNR(MLM1)+1
      IF(KAESNR(MLM1).GT.KDIMPL)STOP 'KDIMP1'
      IF(KAESNN.LT.KAESNR(MLM1))KAESNN=KAESNR(MLM1)
      KAESTC(MLM1,KAESNR(MLM1))=NR
      VORFAK(MLM1,KAESNR(MLM1))=QUOTTT
    6 CONTINUE
   61 CONTINUE
   56 CONTINUE
C**   NOW THE VORFAK, WHICH BELONG TO THE SAME NUMBERS OF "KAESTC(HEN)"
C     ("BOXES"), HAVE TO BE SUMMED!:
      DO 6550 KDI=1,KDIMPL
      LOCH(KDI)=0
 6550 CONTINUE
C
      KDSUM=0
      DO 65 KDA=1,KAESNR(MLM1)
      KDSUM=KDSUM+1
      KAE=KAESTC(MLM1,KDA)
      KDAP1=KDA+1
      DO 655 KDI=KDAP1,KAESNR(MLM1)
      IF((KAESTC(MLM1,KDI).EQ.KAE).AND.(KAE.NE.0))THEN
C**   NOW PUT THE VALUE ("NUMBER") 0 INTO KAESTC(MLM1,KDI)! 0 CANNOT
C     OCCUR ELSEWHERE!:
      KAESTC(MLM1,KDI)=0
      KDSUM=KDSUM-1
      VORFAK(MLM1,KDA)=VORFAK(MLM1,KDA)+VORFAK(MLM1,KDI)
      VORFAK(MLM1,KDI)=ZERO
      LOCH(KDI)=1
      ENDIF
  655 CONTINUE
   65 CONTINUE
C**   NOW A ROUTINE, WHICH HAS THE EFFECT OF ORDERING! (A HOLE ("LOCH")
C     ON 1 IS NOT POSSIBLE!):
      DO 6551 KDM=2,KAESNR(MLM1)
      KDMP1=KDM+1
      DO 6552 KDIN=KDMP1,KAESNR(MLM1)
      IF(LOCH(KDIN).GE.LOCH(KDM))GOTO 6552
      LOCH(KDM)=0
      LOCH(KDIN)=1
      KAESTC(MLM1,KDM)=KAESTC(MLM1,KDIN)
      VORFAK(MLM1,KDM)=VORFAK(MLM1,KDIN)
 6552 CONTINUE
 6551 CONTINUE
C
      KAESNR(MLM1)=KDSUM
C**   END TO: "SUMMING OF THE VORFAK!"
    5 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,7220)MSFIX
      WRITE(11,7220)MSFIX
      WRITE(1,7220)MSFIX
 7220 FORMAT(' MOROUT',
     1'.NE.0 IN SAUNDE: 1ST OF TWICE OUTPUT => FILE 1; MSFIX=ISLS=',I4)
C**   HERE OUTPUT TO FILE 1 FOR THE FIRST TIME (IN SAUNDE)!:
      WRITE(1,721)MSFIX,NRTOAD
  721 FORMAT(' NOW DO 628 ML=LLS,-LLS,-1: (MSFIX=ISLS,NRTOAD=)',I4,I5)
      DO 628 II=LLS,-LLS,-1
      WRITE(1,632)II,(VORFAK(II,I),I=1,KAESNR(II))
  632 FORMAT(' (VORFAK(II,I),I=1,KAESNR(II=',I4,'))=',(3D16.8))
      SUMVOR=ZERO
      DO 682 I=1,KAESNR(II)
      SUMVOR=SUMVOR+VORFAK(II,I)**2
  682 CONTINUE
      SUMVOS=DABS(SUMVOR-ONE)
      WRITE(1,683)SUMVOR
  683 FORMAT(' SUM OF (VORFAK(II,I)**2,I=1,KAESNR(II)),=',D16.8)
      IF(SUMVOS.GT.PARWUR)WRITE(1,684)SUMVOS
  684 FORMAT(' WARNING: DABS(SUM OF (VORFAK...)-ONE)=',D16.8)
  628 CONTINUE
      WRITE(1,631)(KAESNR(I),I=LLS,-LLS,-1)
  631 FORMAT(' (KAESNR(I),I=LLS,-LLS,-1)=',7I5)
      WRITE(1,720)
  720 FORMAT(' NOW'
     1,' DO 629 ML=LLS,-LLS,-1: (ISHIFT=(ISLS+ISLSPL)*LLSM2P+NRTOAD)')
      DO 629 II=LLS,-LLS,-1
      WRITE(1,630)II,(KAESTC(II,I),I=1,KAESNR(II))
  630 FORMAT(' (KAESTC(II,I),I=1,KAESNR(II=',I4,'))=',(8I5))
  629 CONTINUE
      WRITE(1,7233)
 7233 FORMAT(
     1' NOW DO 666 ML=LLS,-LLS,-1: (BIGMAT, IF > 0.3) ISHIFT+ML+LLS+1=')
      ISHIFT=(MSFIX+ISLSPL)*LLSM2P+NRTOAD
      DO 666 J=LLS,-LLS,-1
      NRTOAN=ISHIFT+J+LLSP1
      DO 333 I=1,KASSUM
C**   IF(DABS(BIGMAT(J,MSFIX,I)).GT.0.3D0)WRITE(1,222)J,I,BIGMAT(J,MSFIX,I)
      IF(DABS(BIGMAT(NRTOAN,I)).GT.0.3D0)
     1WRITE(1,222)J,I,BIGMAT(NRTOAN,I),NRTOAN
  333 CONTINUE
  666 CONTINUE
  222 FORMAT(' ML,I,BIGMAT(ML,MSFIX,I)(IF>.3)=',I3,I6,D16.8,I6)
C
      ENDIF
C
C**   NOW - STARTING WITH KAESTC - THE S-OPERATOR ACTS ON MSMLNR!:
C     ... WORKS VERY SIMILAR; COEFF. ARE ONLY =1 AND =0, 1 FOR MS=1/2,
C     0 FOR MS=-1/2, SO THAT THIS OPERATION GIVES JUST THE SUM OF THE
C     STATES RESULTING WHEN SUCCESSIVE ML+ ARE CHANGED TO ML- (FROM:
C     CONDON/SHORTLEY P.227).
C
C**   NOW THE VORFAL, WHICH BELONG TO THE SAME NUMBERS OF "KAESTC(HEN)"
C     ("BOXES"), HAVE TO BE SUMMED! THIS IS IMPORTANT!:
C
C**   NOW ALL(!) ML, BUT MSFIX=ISLS IS THE STARTING VALUE ONLY(!)!
C     MS = "THE REAL" MS ONLY FOR ISLS=ISLSPL, I.E. FOR ISLS "EVEN"!
      DO 44 ML=LLS,-LLS,-1
C**   PREOCC.; "EACH ML":
      KAESNS(ISLS)=KAESNR(ML)
      DO 444 KA=1,KAESNR(ML)
      KAESTD(ISLS,KA)=KAESTC(ML,KA)
      VORFAL(ISLS,KA)=VORFAK(ML,KA)
  444 CONTINUE
C
C**   FOLLOWING NOW THE ACTING OF THE S-OPERATOR ON MSMLNR (IN ANALOGY TO DO 5;
C     BUT THE OPERATOR WORKS IN A DIFFERENT WAY (SEE DO 66)!):
C
C**   ISLSM1=ISLSPL(!)-1
      DO 55 MS=ISLS,-ISLSM1,-1
C**   THESE ARE MAX. 7(!) VALUES FOR MS! - THE 1TH VALUE NOT REALLY USED HERE!
C**   MS = STARTING VALUE, MSM1 = NEXT VALUE!:
      MSM1=MS-1
C**   MSM1 <=> THE (MAX.) 8TH VALUE!
      FNENNR=DSQRT(DBLE((ISLSPL+MS)*(ISLSP1-MS)))
      QUOT=ONE/FNENNR
C**   DENOMI(NATOR) IN THE PRECEDING ROW IS "ONE"!
      KAESNS(MSM1)=0
      DO 556 K=1,KAESNS(MS)
      NR=KAESTD(MS,K)
      DO 5666 I=-KLWERT,KLWERT
      MSMLNR(1,I)=MSMLNW(NR,1,I)
 5666 MSMLNR(2,I)=MSMLNW(NR,2,I)
      QUOTTT=QUOT*VORFAL(MS,K)
      DO 66 N=KLWERT,-KLWERT,-1
      IF(MSMLNR(1,N).NE.0.AND.MSMLNR(2,N).NE.0)GOTO 66
      IF(MSMLNR(1,N).EQ.0.AND.MSMLNR(2,N).EQ.0)GOTO 66
      IF(MSMLNR(1,N).EQ.0.AND.MSMLNR(2,N).NE.0)GOTO 66
      DO 5567 I=-KLWERT,KLWERT
      MSMLNS(1,I)=MSMLNR(1,I)
 5567 MSMLNS(2,I)=MSMLNR(2,I)
      MSMLNS(1,N)=0
      MSMLNS(2,N)=-1
      CALL NUMBER(NR,MSMLNW,MSMLNS,ND2002,KLWERT,KASSUM,KLWER3)
C**   BIGMAT(ML,MSM1,NR)=BIGMAT(ML,MSM1,NR)+QUOTTT
      ISHIFT=(MSM1+ISLSPL)*LLSM2P+NRTOAD
      BIGMAT(ML+LLSP1+ISHIFT,NR)=
     1BIGMAT(ML+LLSP1+ISHIFT,NR)+QUOTTT
      KAESNS(MSM1)=KAESNS(MSM1)+1
      IF(KAESNS(MSM1).GT.KDIMPL)STOP 'KDIMP2'
      IF(KAESNN.LT.KAESNS(MSM1))KAESNN=KAESNS(MSM1)
      KAESTD(MSM1,KAESNS(MSM1))=NR
      VORFAL(MSM1,KAESNS(MSM1))=QUOTTT
   66 CONTINUE
  556 CONTINUE
C
C**   NOW THE VORFAL, WHICH BELONG TO THE SAME NUMBERS OF "KAESTC(HEN)"
C     ("BOXES"), HAVE TO BE SUMMED! THIS IS IMPORTANT!:
      DO 4550 KDI=1,KDIMPL
 4550 LOCH(KDI)=0
C
      KDSUM=0
      DO 465 KDA=1,KAESNS(MSM1)
      KDSUM=KDSUM+1
      KAE=KAESTD(MSM1,KDA)
      KDAP1=KDA+1
      DO 4655 KDI=KDAP1,KAESNS(MSM1)
      IF((KAESTD(MSM1,KDI).EQ.KAE).AND.(KAE.NE.0))THEN
C**   NOW PUT THE VALUE ("NUMBER") 0 INTO KAESTD(MSM1,KDI)! 0 CANNOT
C     OCCUR ELSEWHERE!:
      KAESTD(MSM1,KDI)=0
      KDSUM=KDSUM-1
      VORFAL(MSM1,KDA)=VORFAL(MSM1,KDA)+VORFAL(MSM1,KDI)
      VORFAL(MSM1,KDI)=ZERO
      LOCH(KDI)=1
      ENDIF
 4655 CONTINUE
  465 CONTINUE
C
C**   (HERE AS ABOVE:) A HOLE ON 1 IS NOT POSSIBLE!:
      DO 4551 KDM=2,KAESNS(MSM1)
      KDMP1=KDM+1
      DO 4552 KDIN=KDMP1,KAESNS(MSM1)
      IF(LOCH(KDIN).GE.LOCH(KDM))GOTO 4552
      LOCH(KDM)=0
      LOCH(KDIN)=1
      KAESTD(MSM1,KDM)=KAESTD(MSM1,KDIN)
      VORFAL(MSM1,KDM)=VORFAL(MSM1,KDIN)
 4552 CONTINUE
 4551 CONTINUE
C
      KAESNS(MSM1)=KDSUM
C**   END TO: "SUMMING OF THE VORFAL!"
C
   55 CONTINUE
C
      IF(JANO.NE.0)THEN
C**   <=> BASISVECTORS TO FILE 2 AND FILE 3 (AND FOR FILE 3 IN ADDITION
C     ML AND MS VALUES, WHICH ONLY => FILE 3)
C
      DO 2269 II=ISLS,-ISLSPL,-1
C**   ORDERING OF THE NUMBERS OF THE "KAESTCHEN" ("BOXES"):
      KAEDIM=KAESNS(II)
      KADIM1=KAEDIM+1
C**   FOR I = KADIM1 ... KDIMPL SET TO "0"!:
      DO 7000 I=KADIM1,KDIMPL
      KAESTD(II,I)=0
 7000 CONTINUE
      KADIM1=KAEDIM-1
      DO 7022 I=1,KADIM1
      IP1=I+1
      DO 7033 J=IP1,KAEDIM
      IF(KAESTD(II,J).GE.KAESTD(II,I))GOTO 7033
      KTEMP=KAESTD(II,J)
      KAESTD(II,J)=KAESTD(II,I)
      KAESTD(II,I)=KTEMP
      TEMP=VORFAL(II,J)
      VORFAL(II,J)=VORFAL(II,I)
      VORFAL(II,I)=TEMP
 7033 CONTINUE
 7022 CONTINUE
C
      IF(MLONLY.EQ.-99)GOTO 2269
      I1=1
      DO 2270 I=1,KASSUM
      IF(I.EQ.KAESTD(II,I1))THEN
      WRITE(2,'(D16.8)')VORFAL(II,I1)
      I1=I1+1
      ELSE
      WRITE(2,'(F4.1)')ZERO
      ENDIF
 2270 CONTINUE
 2269 CONTINUE
C
      IF(ML.NE.MLONLY)GOTO 2368
      DO 2369 II=ISLS,-ISLSPL,-1
      IF(II.NE.MSONLY)GOTO 2369
      I1=1
      DO 2370 I=1,KASSUM
      IF(I.EQ.KAESTD(II,I1))THEN
      WRITE(3,'(D16.8)')VORFAL(II,I1)
      I1=I1+1
      ELSE
      WRITE(3,'(F4.1)')ZERO
      ENDIF
 2370 CONTINUE
 2369 CONTINUE
 2368 CONTINUE
C
      ENDIF
C
      IF(MOROUU.NE.0)THEN
C**   HERE ONCE MORE OUTPUT TO FILE 1!:
      WRITE(*,7221)ML
      WRITE(11,7221)ML
      WRITE(1,7221)ML
 7221 FORMAT(' HERE THE 2ND ONE WITH FIXED ML (MS IS VARIED NOW) =',I3)
      WRITE(1,722)
  722 FORMAT(' NOW'
     1,' DO 728 II=ISLS,-ISLSPL,-1 (ISHIFT=(II+ISLSPL)*LLSM2P+NRTOAD)')
      DO 728 II=ISLS,-ISLSPL,-1
      WRITE(1,732)II,(VORFAL(II,I),I=1,KAESNS(II))
  732 FORMAT(' (VORFAL(II,I),I=1,KAESNS(II=',I4,'))=',(3D16.8))
      SUMVOR=ZERO
      DO 782 I=1,KAESNS(II)
      SUMVOR=SUMVOR+VORFAL(II,I)**2
  782 CONTINUE
      SUMVOS=DABS(SUMVOR-ONE)
      WRITE(1,783)SUMVOR
  783 FORMAT(' SUM OF (VORFAL(II,I)**2,I=1,KAESNS(II)),=',D16.8)
      IF(SUMVOS.GT.PARWUR)WRITE(1,784)SUMVOS
  784 FORMAT(' WARNING: DABS(SUM OF (VORFAL...)-ONE)=',D16.8)
  728 CONTINUE
      WRITE(1,731)(KAESNS(I),I=ISLS,-ISLSPL,-1)
  731 FORMAT(' (KAESNS(I),I=ISLS,-ISLSPL,-1)=',7I5)
      WRITE(1,7222)ISLSPL,LLSM2P,ML
 7222 FORMAT(
     1' NOW DO 729 II=ISLS,-ISLSPL,-1: (ISLSPL,LLSM2P,ML=)',3I3)
      DO 729 II=ISLS,-ISLSPL,-1
      WRITE(1,730)II,(KAESTD(II,I),I=1,KAESNS(II))
  730 FORMAT(' (KAESTD(II,I),I=1,KAESNS(II=',I4,'))=',(8I5))
  729 CONTINUE
      WRITE(1,723)
  723 FORMAT('NOW ',
     1'DO 766 II=ISLS,-ISLSPL,-1: (BIGMAT, IF > 0.3!) ISHIFT+ML+LLS+1=')
      DO 766 J=ISLS,-ISLSPL,-1
      ISHIFT=(J+ISLSPL)*LLSM2P+NRTOAD
      NRTOAN=ISHIFT+ML+LLSP1
      DO 733 I=1,KASSUM
C**   IF(DABS(BIGMAT(ML,J,I)).GT.0.3D0)...
      IF(DABS(BIGMAT(NRTOAN,I)).GT.0.3D0)
     1WRITE(1,223)ML,J,I,BIGMAT(NRTOAN,I),NRTOAN
  223 FORMAT(' ML,II,I,BIGMAT(ML,II,I)(IF>.3)=',2I3,I6,D16.8,I6)
  733 CONTINUE
  766 CONTINUE
      ENDIF
C
   44 CONTINUE
C
      RETURN
C**   RETURN TO CHANGE OR TO RUSSEL!
CEND SAUNDE
      END
CEND-FILE ECKART.F
      SUBROUTINE SUGANO(NRCALL,NRROUT,NRSORT,JAVANV
C**   SUGANO (ONLY(!) FOR OUTPUT) IS CALLED BY SUGANR(EAL) OR SUGANC(OMPLEX)
C     OR SUGANH(EISENBERG) OR SUGANK(OMPLEX HEISENBEREG), AND ALL THESE CALL,
C     DIRECTLY OR INDIRECTLY, SUBROUTINE CHIMAG (<=> CHI & MAGNETISATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
C**   SUBROUTINE SUGANO is only for more O(!)utput for the 4 subroutines
C     SUGANR, SUGANH ("HEISENBERG"), SUGANC and SUGANK (the complex
C     versions of the former two). These 4 ROUTines are numbered:
C     NRROUT=1...4! SUGANH and SUGANK will call SUGANR and SUGANC again,
C     but with NRROUT=3 and =4, respectively.
C     Subroutine SUGANR may be called, for the same temperature and with
C     NRROUT=1, max. 4 times: NRSORT=1...4 <=> z- and x-direction with IGRUND
C     "small" and z- and x-direction with IGRUND "big" ("small"/"big" occuring,
C     if "Combined Model"). NRSORT is smaller for the other subroutines!
C
      DIMENSION KLICK0(4,4),KLICK1(4,4),KLICK2(4,4),KLICK3(4,4)
     1,KLICK4(4,4),WERTIN(*),FMATCH(ND1110,*),EIVEC(ND1110,*),EIWERT(*)
     2,ZEEMAN(*),ZEEMA2(*),DIRECZ(3)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      SAVE
C**   MOROUT.NE.0 HERE!
      DATA KLICK0/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KLICK1/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KLICK2/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KLICK3/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KLICK4/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KLICKS/0/
      IF(KLICKS.EQ.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-SUGANO IN I1: 0 => (ALWAYS) RETURN')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3437)MOROUU
      GOTO 4937
      ENDIF
 3437 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4937 WRITE(*,2239)MOROUU
      WRITE(11,2239)MOROUU
 2239 FORMAT(I2,' =MOROUU IN SUGANO!!!!!!!!!')
      WRITE(7,2392)MOROUU
 2392 FORMAT(I1,' =MOROUU IN SUGANO')
      ENDIF
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      IF(MOROUU.EQ.0)RETURN
      GO TO (33,66,99) NRCALL
   33 CONTINUE
      IF(KLICK0(NRROUT,NRSORT).EQ.0)THEN
      KLICK0(NRROUT,NRSORT)=1
      WRITE(*,669)NRROUT,NRSORT
      WRITE(11,669)NRROUT,NRSORT
  669 FORMAT(' HERE IS SUBROUTINE SUGANO (FOR OUTPUT ONLY), CALLED BY',
     1' (1...4 <=> ',/,' SUGANR, SUGANC, SUGANH, SUGANK):',I2,', NUMBER'
     2,' OF SORT =',I2,', 1ST CALL')
      WRITE(11,9023)
 8252 WRITE(*,9023)
 9023 FORMAT(' INPUT YES(0)/NO ONLY MINIMUM OUTPUT, YES(0)/NO "OUTPUT ON
     1LY ONCE"',/,' AND YES/NO(0) "FULL MATRICES"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3438)JANO1,JANO2,JANO3
      GOTO 4938
      ENDIF
 3438 READ(*,'(3I1)',ERR=8252,END=4576)JANO1,JANO2,JANO3
      LMN=1
 4938 WRITE(7,2393)JANO1,JANO2,JANO3
 2393 FORMAT(3I1,' =JANO1,JANO2,JANO3')
      WRITE(*,2339)JANO1,JANO2,JANO3
      WRITE(11,2339)JANO1,JANO2,JANO3
 2339 FORMAT(3I2,' =JANO1,JANO2,JANO3!!!!!!!!!')
      ENDIF
C
      IF(JANO2.NE.0.OR.(JANO2.EQ.0.AND.KLICK1(NRROUT,NRSORT).EQ.0))THEN
      KLICK1(NRROUT,NRSORT)=1
C**   IGRUND <=> USED No. OF VALUES (NRVAL) OF THE INTERFACE
      WRITE(*,2217)IGRUND
      WRITE(11,2217)IGRUND
 2217 FORMAT(' ALL',I4,' USED'
     1,' EIGENVALUES OF THE INTERFACE, IN ASCENDING ORDER (IN ROWS):')
      WRITE(*,2010)(WERTIN(I),I=1,IGRUND)
      WRITE(11,2010)(WERTIN(I),I=1,IGRUND)
 2010 FORMAT(6(1X,D12.4))
C
      WRITE(*,2218)
      WRITE(11,2218)
 2218 FORMAT(' FIELD IN CM**(-1), DIRECTIONS (Z-, X-, Y-) OF THE FIELD,'
     1,/,' AND MINIMAL AND MAXIMAL DIFFERENCE OF FORMER EIGENVALUES:')
      WRITE(*,2010)TESLAC,(DIRECZ(I),I=1,3),DIFLOW,DIFMAX
      WRITE(11,2010)TESLAC,(DIRECZ(I),I=1,3),DIFLOW,DIFMAX
      ENDIF
C
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      RETURN
   66 CONTINUE
C
      IF(JANO1.NE.0.AND.(JANO2.NE.0.OR.(JANO2.EQ.0.AND
     1.KLICK2(NRROUT,NRSORT).EQ.0)))THEN
      KLICK2(NRROUT,NRSORT)=1
      WRITE(*,2221)
      WRITE(11,2221)
 2221 FORMAT(' 2ND CALL:',
     1' MATRIX TO BE DIAGONALIZED; COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(JANO3.NE.0)KASI=KASSMN
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE "FULL"=0, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' "FULL"=1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEMENT!')
      ENDIF
      IF(NRROUT.EQ.1.OR.NRROUT.EQ.3)THEN
      DO 1019 J=1,KASI
      WRITE(*,2010)(FMATCH(I,J),I=J,KASSMN)
      WRITE(11,2010)(FMATCH(I,J),I=J,KASSMN)
 1019 CONTINUE
      ELSE
      WRITE(*,2025)
      WRITE(11,2025)
 2025 FORMAT(' THE MATRIX IS COMPLEX HERE!')
      DO 2026 J=1,KASI
      WRITE(11,2010)(CPXMAT(I,J),I=J,KASSMN)
      WRITE(*,2010)(CPXMAT(I,J),I=J,KASSMN)
 2026 CONTINUE
      IF(KASI.GT.1)THEN
      WRITE(11,2063)
 2063 FORMAT(' AND THE SAME MATRIX IN LOWER STORAGE MODE:')
      DO 2062 I=1,KASSMN
      WRITE(11,'(/)')
      WRITE(11,2010)(CPXMAT(I,J),J=1,I)
 2062 CONTINUE
      ENDIF
      ENDIF
      ENDIF
C
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      RETURN
   99 CONTINUE
C
      IF(JANO1.NE.0.AND.(JANO2.NE.0.OR.(JANO2.EQ.0
     1.AND.KLICK3(NRROUT,NRSORT).EQ.0)))THEN
      KLICK3(NRROUT,NRSORT)=1
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' 3RD CALL: MATRIX OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(JANO3.NE.0)KASI=KASSMN
      IF(KASI.EQ.1)THEN
      WRITE(*,1012)
      WRITE(11,1012)
      ENDIF
 1012 FORMAT(' BECAUSE "FULL"'
     1,'=0, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      IF(NRROUT.EQ.1.OR.NRROUT.EQ.3)THEN
      DO 101 J=1,KASI
      WRITE(*,2010)(EIVEC(I,J),I=1,KASSMN)
      WRITE(11,2010)(EIVEC(I,J),I=1,KASSMN)
  101 CONTINUE
      ELSE
      WRITE(*,2025)
      WRITE(11,2025)
      DO 1010 J=1,KASI
      WRITE(*,2010)(EIVECC(I,J),I=1,KASSMN)
      WRITE(11,2010)(EIVECC(I,J),I=1,KASSMN)
 1010 CONTINUE
      ENDIF
      ENDIF
C
      IF(JANO2.NE.0.OR.(JANO2.EQ.0.AND.KLICK4(NRROUT,NRSORT).EQ.0))THEN
      KLICK4(NRROUT,NRSORT)=1
      WRITE(*,2219)KASSMN
      WRITE(11,2219)KASSMN
 2219 FORMAT(' ALL',I5,' EIGENVALUES, IN ASCENDING ORDER (IN ROWS):')
      WRITE(*,2010)(EIWERT(I),I=1,KASSMN)
      WRITE(11,2010)(EIWERT(I),I=1,KASSMN)
C
      IF(JAVANV.EQ.0)THEN
      WRITE(*,2033)
      WRITE(11,2033)
 2033 FORMAT(' (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      ELSE
      WRITE(*,2032)
      WRITE(11,2032)
 2032 FORMAT(
     1' ZEEMAN-COEFF. OF FIRST ORDER, INCL. G-FACTOR, ALREADY SQUARED')
      ENDIF
      WRITE(*,2010)(ZEEMAN(I),I=1,KASSMN)
      WRITE(11,2010)(ZEEMAN(I),I=1,KASSMN)
C
      IF(JAVANV.NE.0)THEN
      WRITE(*,2031)
      WRITE(11,2031)
 2031 FORMAT(' ZEEMAN-'
     1,'COEFF. OF SECOND ORDER (INCL. POSS. MANY NON CALC. ("ZERO")')
      WRITE(*,2010)(ZEEMA2(I),I=1,KASSMN)
      WRITE(11,2010)(ZEEMA2(I),I=1,KASSMN)
      ENDIF
      ENDIF
C
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANO
      END
      SUBROUTINE SUGANR(NRROUT
C     CALLED BY SELECT OR BY SUGANH! - CALLS (SUGANO AND) DSPEV(W) AND CHIMAG!
C**   For SUBROUTINE SUGANO - for more O(!)utput only - see below!
C**   SUGANR will not be "really" called, if nothing but temperature has
C     changed (NURTMP.NE.0), i.e. NRTEMP, the consecutive number of
C     temperature, is mostly, but not always, =1 (field may be diff.)!
C**   Subroutine to calculate eigenvalues EIWERT and (neg.) magn. moments
C     ZEEMAN resp. EIWERT and Zeeman coefficients of first and second order
C     ZEEMAN and ZEEMA2 for VanVleck-option JAVANV. There are KASSMN
C     eigenvalues corr. to the KASSMN lowest energy niveaus. The lowest
C     value has always been set to zero. KASSMN may be (much) lower than
C     KASSUM, the number of micro states. Here in SUGANR (only) z- and x-
C     direction of magnetic field are concerned (R <=> real: no complex
C     diagonalization routine needed), and no Heisenberg coupling and/or
C     magnetic dipol-dipol interaction is taken into account here.
C     For the latter ("HEISENBERG"): SUBROUTINE SUGANH, and the complex
C     versions are SUGANC AND SUGANK. These 4 ROUTines are numbered:
C     NRROUT=1...4! SUGANH and SUGANK will call SUGANR and SUGANC again,
C     but with NRROUT=3 and =4, respectively.
C     DIRECZ(1)=ZERO means "no field in z-direction", =ONE means  "field is
C     (only) in z-direction". The sum of the squares of DIRECZ(1:2) and
C     DIRECZ(1:3) RESP. is always =ONE. TESLAC is the field in cm**(-1).
C     Subroutine SUGANR may be called, for the same temperature and with
C     NRROUT=1, max. 4 times: NRSORT=1...4 <=> z- and x-direction with IGRUND
C     "small" and z- and x-direction with IGRUND "big" (=NRVAL) ("small"/"big"
C     occuring, if "Combined Model").
C
C     More output may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C
C     Input to SUGANR, corr. to the general interface, are WERTIN with NRVAL
C     values (max. ND252) and FMAT(ND252,ND252,1:5), FMAT(ND252,ND252,1) for
C     z-direction and FMAT(ND252,ND252,4) for x-direction (THE G-FACTOR FOR
C     SPIN IS CONTAINED IN FMAT). GMAT(ND252,ND252,1:3), belonging to the
C     general interface, too, will be used for Heisenberg coupling and/or
C     magnetic dipol-dipol interaction.
C     DIFLOW and DIFMAX=WERTIN(NRVAL) are the minimal (i.e. 2nd non
C     degenerate minus 1st value) and the maximal difference resp. of the
C     NRVAL values of WERTIN.)
C
C     EIWERT becomes equal to WERTIN for "JAVANV", and no new diagonalization
C     is needed for "JAVANV", the matrix of eigenvectors being the unit matrix,
C     but of course this is not valid, if SUGANR is called by SUGANH.
C     The number of values of WERTIN used here is IGRUND, which may be equal
C     to NRVAL or equal and smaller, resp., if "Combined Model". Here is
C     KASSMN=IGRUND. In subroutine SUGANH there is KASSMN=IGRUND**2, with
C     IGRUND smaller than NRVAL, and this is valid here too, if SUGANR is
C     called by SUGANH (IGRUND here is KASSMN, when SUGANR is called!).
C
C     DIMENSIONs are ND1110=1110 (1001 = the maximum number of micro states
C     possible in PROGRAM CONDON corr. to Ho3+), ND2828=28**2 (<=> 4*7 <=>
C     quartet F-state - d electrons) for KASSMN and ND252=252 (= the maximum
C     number of micro states occuring for d electrons) for NRVAL. In the
C     "real" routines like here, ND1110 is used instead of ND2828, which is
C     used for the complex routines.
C     To speed up computation in the case of "JAVANV", a matrix
C     FMATY(ND1110,*) for intermediate storage is needed, and for the
C     perturbation operator a matrix PERTUR(ND1110,*) is always used.
C     For the diagonalization routine DSPEV, DUMMY(NDMAL3) (DUMMY(*)) is
C     needed, with NDMAL3=3*ND1110. Furthermore, in the case of "JAVANV"
C     with degeneration, the method of GERLOCH (MAGNETISM AND LIGAND FIELD
C     ANALYSIS, CAMBRIDGE UNIVERSITY PRESS LONDON ... 1973) will be applied,
C     and DUMMY will be used once more. It is: 28*28*2*28*28 = 1229312 and
C     1110*1110 = 1232100. DSPEV will not be called directly, but DSPEVW is
C     called and calls DSPEV (SEE PROGRAM CONDON FOR DETAILS!)!
C
     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,PERTUR,FMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,CPXMAT,EIVECC,JACUGD)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      DOUBLE PRECISION WERTIN(*),FMAT(ND252,ND252,5),FMATCH(ND1110,*)
     1,TESLAC,DIRECZ(3),EIVEC(ND1110,*),DUMMY(NDMAL3)
     2,EIWERT(*),ZEEMAN(*),ZEEMA2(*),DIFLOW,DIFMAX,PERTUR(ND1110,*)
     3,FMATY(ND1110,*),GMAT(ND252,ND252,3)
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     3,CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
C**   ABOVE: "FROM CALL", BELOW: "ALL OTHER"
     4,ZERO,ONE,PARWUR,PARWUQ,PARZER
     5,FMIN,ZEE,ZEEWER,WERTIK,EDIFF,SUMMAT,SUMMMM,SUMA,SUMI
      DOUBLE PRECISION CHIZXY,TEMPIK,CHIMEA,SIGMA,TESDAT,FMIST
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,JATEST,MIST,LESS,MIS8(8),IOPT2,MIS4(4)
     1,NDATAP
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),FMIST(1441),MIST1
C**    ,BWWWIN(J20) ((J20=36))
C     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
C     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
C**   2,IN24,IN25
C     INTEGER IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C    1,ND252,ND1110,ND2828,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
C    2,NRTEMP
C**   ABOVE: INTEGER "FROM CALL", BELOW: "OTHER", BUT NOT "ALL"
C    2,NRROUT,KASSMN,KASSIN,KLICKK,ITRANS,ITRANZ,ITRANX
      INTEGER KLICK(4,4),KASSMM(4,4)
      SAVE
      DATA KLICK/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KASSMM/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA KLICKK,KLICK2,KLICK3,JANO,ITRANS,ITRANZ,ITRANX/0,0,0,0,0,0,0/
      KASSMN=IGRUND
C**   IGRUND <=> USED No. OF VALUES (NRVAL) OF THE INTERFACE
      IF(NURTMP.NE.0)GOTO 9999
C**   ... TO CALL CHIMAG!
      IF(NRROUT.GT.2)GOTO 9990
C**   ... TO CALL (SUGANO AND) DSPEV(W) (SUGANR, I.E. THIS ROUTINE
C     HERE, WAS CALLED BY SUGANH)!
      NRROUT=1
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
      IF(JATEST.NE.0.AND.MOROUT.NE.0.AND.JANO.LE.1)THEN
      WRITE(11,6419)
 6418 WRITE(*,6419)
 6419 FORMAT(' (JATEST.NE.0.AND.MOROUT.NE.0.AND.JANO.LE.1):',/
     1,' INPUT YES(>1)/NO(0.OR.1(ONCE)) IN I1 FOR A TEST ON G-FACTORS!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3440)JANO
      GOTO 4940
      ENDIF
 3440 READ(*,'(I1)',ERR=6418,END=4576)JANO
      LMN=1
 4940 WRITE(7,6417)JANO
 6417 FORMAT(I1,' =G-TEST')
      WRITE(*,6461)JANO
      WRITE(11,6461)JANO
 6461 FORMAT(I2,' =G-TEST!!!!!!!!!')
      IF(JANO.GT.1)GOTO 1000
      JANO=JANO+1
      ENDIF
C
      DO 9995 J=1,KASSMN
      DO 9714 I=J,KASSMN
      PERTUR(I,J)=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
C**   THE WHOLE MATRIX IS NEEDED BELOW:
      PERTUR(J,I)=PERTUR(I,J)
 9714 CONTINUE
 9995 CONTINUE
      IF(JAVANV.NE.0)THEN
      DO 9997 J=1,KASSMN
      DO 9715 I=1,KASSMN
      EIVEC(I,J)=ZERO
 9715 CONTINUE
 9997 CONTINUE
      DO 9996 I=1,KASSMN
      EIWERT(I)=WERTIN(I)
      EIVEC(I,I)=ONE
 9996 CONTINUE
      GO TO 9998
      ENDIF
C
      DO 111 J=1,IGRUND
      DO 110 I=J,IGRUND
      FMATCH(I,J)=ZERO
      IF(I.EQ.J)FMATCH(I,J)=WERTIN(I)
C**   THE MAGNETIC FIELD WILL NOW BE TAKEN INTO ACCOUNT EXPLICITLY FOR
C     JAVANV.EQ.0 (TESLAC=FIELD IN CM**(-1)), IN ADDITION TO PERTURBATION
C     THEORY OF FIRST ORDER, WHICH WILL BE APPLIED BELOW WITH HELP OF REAL
C     MATRIX PERTUR.
      FMATCH(I,J)=FMATCH(I,J)+TESLAC*PERTUR(I,J)
C**   COEFF., WHICH ARE LOWER THAN PARWUQ IN ABS. VALUE, NOW BECOME ZERO:
      IF(DABS(FMATCH(I,J)).LT.PARWUQ)FMATCH(I,J)=ZERO
  110 CONTINUE
  111 CONTINUE
C
 9990 CONTINUE
C**   2=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(2,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
C**   AND NOW FOR LOWER STORAGE MODE:
C
      ND11QU=ND1110**2
C
      CALL DSPEVW(1,FMATCH,FMATCH,EIWERT,EIVEC,ND1110,KASSMN,DUMMY
     1,NDMAL3,ND11QU)
C
C**   COEFF., WHICH ARE LOWER THAN PARWUQ IN ABS. VALUE, NOW BECOME ZERO:
      DO 2111 J=1,KASSMN
      DO 8715 I=1,KASSMN
      IF(DABS(EIVEC(I,J)).LT.PARWUQ)EIVEC(I,J)=ZERO
 8715 CONTINUE
 2111 CONTINUE
C
      FMIN=EIWERT(1)
      DO 7615 I=1,KASSMN
      EIWERT(I)=EIWERT(I)-FMIN
 7615 CONTINUE
C
      IF(LESS.NE.0)GOTO 2128
      IF(NRROUT.LE.2.AND.KLICK2.NE.0)GOTO 2128
      IF(NRROUT.GT.2.AND.KLICK3.NE.0)GOTO 2128
      IF(NRROUT.LE.2)KLICK2=1
      IF(NRROUT.GT.2)KLICK3=1
      WRITE(*,2217)FMIN,NRROUT
 2217 FORMAT(
     1/,' < (ALL+1) Z,X- EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',
     1D20.12,/,' ... BECOMES: (OUTPUT ONLY ONCE FOR NRROUT =',I2,')')
      WRITE(11,2217)FMIN,NRROUT
      KASI=KASSMN
      IF(KASI.GT.66)KASI=66
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
 2010 FORMAT(6(1X,D12.4))
      IF(KASI.NE.KASSMN)THEN
      WRITE(*,2216)EIWERT(KASSMN)
      WRITE(11,2216)EIWERT(KASSMN)
 2216 FORMAT(' ... AND THE LAST EIGENVALUE:',D12.4)
      ENDIF
 2128 CONTINUE
C
 9998 CONTINUE
C
      IF(((ITRANZ.EQ.0.AND.NRSORT.EQ.1).OR.(ITRANX.EQ.0.AND.NRSORT.EQ.2)
C    1).AND.JAVANV.EQ.0.AND.IOPT2.NE.2.AND.MOROUT.NE.0)THEN
C**   FOR DIMER NOT YET IMPLEMENTED!:
     1).AND.JAVANV.EQ.0.AND.IOPT2.EQ.0.AND.MOROUT.NE.0)THEN
      WRITE(11,9734)DIRECZ(1),DIRECZ(2),TESLAS,NRTEMP
 9795 WRITE(*,9734)DIRECZ(1),DIRECZ(2),TESLAS,NRTEMP
 9734 FORMAT(' PUT IN IN I1 YES/NO(0): COMPUT. OF TRANSVERSE COMPON.',
     1' OF MAGN. MOMENT FIRSTLY,',/,
     2' THE DIRECTIONCOS. (Z,X) ARE:',2D12.4,/,
     3' (THE MAGNETIC FIELD, IN TESLA, IS ',D14.6,', CORRESP. TO NR = '
     4,I4,',',/,' AND ONLY THIS WILL BE TAKEN INTO ACCOUNT!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=9754)ITRANS
      GOTO 9774
      ENDIF
 9754 READ(*,'(I1)',ERR=9795,END=4576)ITRANS
      LMN=1
 9774 WRITE(7,9784)ITRANS
 9784 FORMAT(I1,' =ITRANS(VERSE COMP.)')
      WRITE(*,9794)ITRANS
      WRITE(11,9794)ITRANS
 9794 FORMAT(I2,' =ITRANS(VERSE COMP.)!!!!!!!!!')
      IF(ITRANS.NE.0)CALL SUGANX(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,KASSMN,FMATY,ND1110,EIVEC,ZEEMAN,EIWERT,TEMPTH,NRTEMP,NDATAP
     2,NRROUT,JACUGD)
      IF(NRSORT.EQ.1)ITRANZ=1
      IF(NRSORT.EQ.2)ITRANX=1
      ENDIF
C
      DO 98 K=1,KASSMN
      ZEE=ZERO
      DO 97 I=1,KASSMN
      ZEEWER=ZERO
      DO 99 J=1,KASSMN
      ZEEWER=ZEEWER+PERTUR(I,J)*EIVEC(J,K)
   99 CONTINUE
      FMATY(I,K)=ZEEWER
      ZEE=ZEE+ZEEWER*EIVEC(I,K)
   97 CONTINUE
      ZEEMAN(K)=ZERO
      ZEEMA2(K)=ZERO
      DUMMY(K)=ZERO
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      IF(DABS(ZEE).GE.PARWUR)ZEEMAN(K)=ZEE
   98 CONTINUE
C
      IF(JAVANV.NE.0)THEN
C**   THE SECOND ORDER (ZEEMA2) AND POSSIBLY CORRECTIONS OF ZEEMAN:
C
      KASSIN=0
      N28=ND28
      IF(NRROUT.GT.2)N28=2*ND28
      IF(KLICK(NRROUT,NRSORT).EQ.0.AND.(KASSMN.GT.N28.OR.JATEST.NE.0))
     1THEN
      KLICK(NRROUT,NRSORT)=1
      WRITE(11,9023)KASSMN
 8253 WRITE(*,9023)KASSMN
 9023 FORMAT(' EVALUATION'
     1,' OF ALL ZEEMAN COEFF. OF 2ND ORDER MAY BE TIME CONSUMING,',
     2/,' BUT THEY MAY BE PARTLY NEGLECTED! INPUT IN I4 0 OR THE NUMBER'
     3,' REMAINING, < ',I4,/,' (USEFUL ALSO FOR PARTICULAR TESTS!: -1 =>
     4 0 ZEEMAN COEFF. OF 2ND ORDER)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3441)KASSIN
      GOTO 4941
      ENDIF
 3441 READ(*,'(I4)',ERR=8253,END=4576)KASSIN
      LMN=1
 4941 WRITE(7,2394)KASSIN
 2394 FORMAT(I4,' =KASSIN("2ND ORDER")')
      WRITE(*,3439)KASSIN
      WRITE(11,3439)KASSIN
 3439 FORMAT(I5,' =KASSIN("2ND ORDER")!!!!!!!!!')
      KASSMM(NRROUT,NRSORT)=KASSMN
      IF(KASSIN.NE.0.AND.KASSIN.LT.KASSMN)KASSMM(NRROUT,NRSORT)=KASSIN
C**   IF(KASSMM(NRROUT,NRSORT).LT.0)KASSMM(NRROUT,NRSORT)=0
      ENDIF
      IF(KLICK(NRROUT,NRSORT).EQ.0.AND.(KASSMN.LE.N28.AND.JATEST.EQ.0))
     1THEN
      KLICK(NRROUT,NRSORT)=1
      WRITE(11,9022)
 8254 WRITE(*,9022)
 9022 FORMAT(' ALL'
     1,' ZEEMAN COEFF. OF 2ND ORDER ARE EVALUATED, BUT PUT IN 0 IN I4!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3442)KASSIN
      GOTO 4942
      ENDIF
 3442 READ(*,'(I4)',ERR=8254,END=4576)KASSIN
      LMN=1
 4942 KASSIN=0
      WRITE(7,2394)KASSIN
      WRITE(*,3439)KASSIN
      WRITE(11,3439)KASSIN
      ENDIF
      IF(KASSMM(NRROUT,NRSORT).EQ.0)KASSMM(NRROUT,NRSORT)=KASSMN
C
      ITRACE=0
      IF(MOROUT.NE.0.AND.KLICKK.EQ.0)THEN
      KLICKK=1
      WRITE(11,2401)
 2402 WRITE(*,2401)
 2401 FORMAT(' MOROUT.NE.0: INPUT YES/NO(0) IN I1 FOR OUTPUT OF THE FIRS
     1T MAX. 21 TERMS OF',/,' THE FIRST ZEEMAN COEFF. OF 2ND ORDER AND 
     2THE CURRENT SUMS OF THEM, AND',/,' OF ANY "GERLOCH"-TERMS, IF THOS
     3E OCCUR! (ONLY TO FILE 11)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3443)ITRACE
      GOTO 4943
      ENDIF
 3443 READ(*,'(I1)',ERR=2402,END=4576)ITRACE
      LMN=1
 4943 WRITE(7,2403)ITRACE
 2403 FORMAT(I1,' =ITRACE("2ND ORDER")')
      WRITE(*,2340)ITRACE
      WRITE(11,2340)ITRACE
 2340 FORMAT(I2,' =ITRACE("2ND ORDER")!!!!!!!!!')
      ENDIF
C**   IF KASSMM < KASSMN, LESS COEFF. OF SECOND ORDER ARE CALC. NOW:
      DO 9024 K=1,KASSMM(NRROUT,NRSORT)
      WERTIK=ZERO
      DO 9025 KA=1,KASSMN
      IF(KA.EQ.K)GOTO 9025
      EDIFF=EIWERT(K)-EIWERT(KA)
      IF(NRROUT.GT.2)THEN
      SUMMAT=ZERO
      DO 9026 LIN=1,KASSMN
      SUMMAT=SUMMAT+FMATY(LIN,KA)*EIVEC(LIN,K)
 9026 CONTINUE
      ELSE
      SUMMAT=FMATY(K,KA)
      ENDIF
      IF(DABS(EDIFF).GE.PARWUR)THEN
      SUMMMM=SUMMAT**2/EDIFF
      WERTIK=WERTIK+SUMMMM
      IF(K.EQ.1.AND.ITRACE.NE.0.AND.KA.LE.21)THEN
      WRITE(11,'(I3,2D16.8)')KA,SUMMMM,WERTIK
      ENDIF
      ELSE IF(DABS(SUMMAT).GE.PARWUR)THEN
C**   NOW, BECAUSE DABS(EDIFF).LT.PARWUR - THE METHOD OF GERLOCH WILL BE 
C     APPLIED, AND THE SQUARED COEFF. ARE: (DUMMY(K)=ZERO "ABOVE")
      SUMMMM=SUMMAT**2
      DUMMY(K)=DUMMY(K)+SUMMMM
      IF(K.EQ.1.AND.ITRACE.NE.0.AND.KA.LE.21)THEN
      WRITE(11,'(I6,2D16.8)')KA,SUMMMM,DUMMY(1)
      ENDIF
      ENDIF
 9025 CONTINUE
C     ZEEMA2(K)=ZERO ("ABOVE")
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      IF(DABS(WERTIK).GE.PARWUR)ZEEMA2(K)=WERTIK
 9024 CONTINUE
C
      DO 6667 I=1,KASSMN
      ZEEMAN(I)=ZEEMAN(I)**2+DUMMY(I)
 6667 CONTINUE
C
      ENDIF
C
C**   3=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(3,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
 9999 CONTINUE
      CALL CHIMAG(JATEST,
     1NRSORT,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE
     1,EIWERT,ZEEMAN,ZEEMA2,JAVANV,KASSMN,NRROUT,MOROUT,NRTEMP,JACUGD)
C**   RETURNS TO SELECT OR TO SUGANH!:
      RETURN
C
 1000 CONTINUE
C**   TEST ON G-FACTOR(S):
C
      DO 9717 J=1,IGR1
      DO 9716 I=J,IGR1
      PERTUR(I,J)=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      PERTUR(J,I)=PERTUR(I,J)
 9716 CONTINUE
 9717 CONTINUE
C
      ND11QU=ND1110**2
      CALL DSPEVW(1,PERTUR,PERTUR,EIWERT,EIVEC,ND1110,IGR1,DUMMY
     1,NDMAL3,ND11QU)
C
      DO 6411 IE=1,IGR1
      DO 6412 IEI=1,IGR1
      SUMA=ZERO
      DO 6413 J=1,IGR1
      SUMI=ZERO
      DO 6414 I=1,IGR1
      SUMI=SUMI+(DIRECZ(1)*(FMAT(J,I,1)-GMAT(J,I,1))+DIRECZ(2)*
     1(FMAT(J,I,4)-0.5D0*(GMAT(J,I,2)+GMAT(J,I,3))))
     1*EIVEC(I,IEI)
 6414 CONTINUE
      SUMA=SUMA+EIVEC(J,IE)*SUMI
 6413 CONTINUE
      FMAT(IE,IEI,2)=SUMA
 6412 CONTINUE
 6411 CONTINUE
C
      IGR12=2
      IF(IGR1.EQ.1)IGR12=1
      WRITE(*,6415)(EIWERT(I),I=1,IGR12)
      WRITE(11,6415)(EIWERT(I),I=1,IGR12)
 6415 FORMAT(' FMAT-DIAGONALIZED: ',2D13.4)
      WRITE(*,2010)(EIWERT(I),I=3,IGR1)
      WRITE(11,2010)(EIWERT(I),I=3,IGR1)
      WRITE(*,6416)(FMAT(I,I,2),I=1,IGR12)
      WRITE(11,6416)(FMAT(I,I,2),I=1,IGR12)
 6416 FORMAT(' SIMIL. TRANSF. OF FMAT-GMAT: DIAGON. ELEM. = ',2D13.4)
      WRITE(*,2010)(FMAT(I,I,2),I=3,IGR1)
      WRITE(11,2010)(FMAT(I,I,2),I=3,IGR1)
      DO 2323 I=1,IGR1
      FMAT(I,1,3)=-999.D0
      IF(FMAT(I,I,2).NE.ZERO)FMAT(I,1,3)=EIWERT(I)/FMAT(I,I,2)
 2323 CONTINUE
      WRITE(*,2322)(FMAT(I,1,3),I=1,IGR12)
      WRITE(11,2322)(FMAT(I,1,3),I=1,IGR12)
 2322 FORMAT(
     1' G-FACTOR(S) (FOR CHOSEN DIR.) CALC. HERE =',2D15.6)
      WRITE(*,2010)(FMAT(I,1,3),I=3,IGR1)
      WRITE(11,2010)(FMAT(I,1,3),I=3,IGR1)
C
      STOP 'G-TEST'
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANR
      END
      SUBROUTINE SUGANC(NRROUT
C     CALLED BY SELECT OR BY SUGANK! - CALLS (SUGANO AND) ZHPEV(W) AND CHIMAG!
C**   SUGANC will not be "really" called, if nothing but temperature has
C     changed (NURTMP.NE.0), i.e. NRTEMP, the consecutive number of
C     temperature, is mostly, but not always, =1 (field may be diff.)!
C**   Similar to subroutine SUGANR to calculate eigenvalues EIWERT and
C     (neg.) magn. moments ZEEMAN resp. EIWERT and Zeeman coefficients of
C     first and second order ZEEMAN and ZEEMA2 for VanVleck-option JAVANV,
C     but now the complex version, which includes the y-direction. The sum
C     of the squares of DIRECZ(1:2) and DIRECZ(1:3) RESP. is always =ONE.
C     (SEE SUBROUTINE SUGANR FOR MORE INFORMATION!)
C     Subroutine SUGANC may be called, for the same temperature and with
C     NRROUT=2, max. 2 times: NRSORT=1...2 <=> IGRUND "small" and IGRUND "big"
C     (=NRVAL) ("small"/"big" occuring, if "Combined Model").
C     Subroutine SUGANK will call SUGANC again, but with NRROUT=4
C
C     More output may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C
C     Input to SUGANC is similar to input to SUGANR, with DIRECZ(3) and
C     FMAT(ND252,ND252,5) for y-direction:
C     FMAT( , ,1)=MATRIX OF OPERATOR FOR Z-DIRECTION,
C     FMAT( , ,2) IN GENERAL NOT(!) THE MATRIX OF STEP UP OPERATOR HERE(!),
C     FMAT( , ,3) IN GENERAL NOT(!) THE MATRIX OF STEP DOWN OPERATOR HERE(!),
C     FMAT( , ,4) (IN GENERAL=HALF*(FMAT( , ,2)+FMAT( , ,3)))
C     =MATRIX OF OPERATOR FOR X-DIRECTION HERE,
C     FMAT( , ,5) (IN GENERAL=HALF*(-FMAT( , ,2)+FMAT( , ,3)))=MATRIX OF OPERA-
C     TOR FOR Y-DIRECTION DIVIDED BY SQRT(-1); THIS MATRIX IS ANTISYMMETRICAL!
C
C     EIWERT becomes equal to WERTIN for "JAVANV", and no new diagonalization
C     is needed for "JAVANV", the matrix of now complex eigenvectors EIVECC
C     being the unit matrix, but this is of course not valid, if SUGANC is
C     called by SUGANK.
C
C     DIMENSIONs are ND2828=28**2 (<=> 4*7 <=> quartet-F state - d electrons)
C     for KASSMN, CPXMAT and EIVECC and ND252=252 (= the maximum number of
C     micro states occuring for d electrons) for NRVAL.
C     To speed up computation in the case of "JAVANV", a matrix
C     CFMATY(ND2828,*) for intermediate storage is needed, and for the
C     perturbation operator a complex matrix CPERTU(ND2828,*) is always used.
C     For the diagonalization routine ZHPEV, DUMMYD(NDMAL4) (DUMMYD(*)) is
C     needed, with NDMAL4=4*ND2828. ZHPEV will not be called directly, but
C     ZHPEVW is called and calls ZHPEV! (SEE DSPEV(W) IN PROGRAM CONDON FOR
C     DETAILS!)
C
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,FMATCH,EIVEC,JACUGD)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION WERTIN(*),FMAT(ND252,ND252,5)
     1,TESLAC,DIRECZ(3),DUMMYD(NDMAL4),DUMMY(NDMAL3)
     2,EIWERT(*),ZEEMAN(*),ZEEMA2(*),DIFLOW,DIFMAX
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     3,CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     3,FMATCH(*),EIVEC(*)
C**   ABOVE: "FROM CALL", BELOW: "ALL OTHER"
     4,ZERO,ONE,PARWUR,PARWUQ,PARZER
     5,FMIN,WERTIK,EDIFF,SUMMAQ,ZEWERT,TEMPPR,TEMPPI
      DOUBLE PRECISION CHIZXY,TEMPIK,CHIMEA,SIGMA,TESDAT,FMIST
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
     1,CPERTU(ND2828,*),CFMATY(ND2828,*),COMZEE,CEEWER
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,JATEST,MIST,LESS,MIS8(8),IOPT2,MIS4(4)
     1,NDATAP
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),FMIST(1441),MIST1
C**    ,BWWWIN(J20) ((J20=36))
C     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
C     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
C**   2,IN24,IN25
C     INTEGER IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C    1,ND252,ND1110,ND2828,NDMAL4
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
C    2,NRTEMP
C**   ABOVE: INTEGER "FROM CALL", BELOW: "OTHER", BUT NOT "ALL"
C    2,NRROUT,KASSMN,KASSIN,JTRANS
      INTEGER KLICK(4,2),KASSMM(4,2)
      SAVE
      DATA KLICK/0,0,0,0,0,0,0,0/
      DATA KASSMM/0,0,0,0,0,0,0,0/
      DATA KLICK2,KLICK3,JTRANS/0,0,0/
      KASSMN=IGRUND
      IF(NURTMP.NE.0)GOTO 9999
      IF(NRROUT.GT.2)GOTO 9990
      NRROUT=2
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
      DO 6121 J=1,KASSMN
      DO 7715 I=J,KASSMN
C**   P=PERTUR(BING); R=REAL; I=IMAGINARY:
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
C     FMAT( , ,5) IS ANTISYMMETRICAL; THE WHOLE MATRIX IS NEEDED BELOW.
      TEMPPI=DIRECZ(3)*FMAT(I,J,5)
      CPERTU(I,J)=DCMPLX(TEMPPR,TEMPPI)
 7715 CONTINUE
 6121 CONTINUE
C
      DO 2123 J=2,KASSMN
      JM1=J-1
      DO 6715 I=1,JM1
      CPERTU(I,J)=DCONJG(CPERTU(J,I))
 6715 CONTINUE
 2123 CONTINUE
C
      IF(JAVANV.NE.0)THEN
      DO 9997 J=1,KASSMN
      DO 5715 I=1,KASSMN
      EIVECC(I,J)=DCMPLX(ZERO,ZERO)
 5715 CONTINUE
 9997 CONTINUE
      DO 9996 I=1,KASSMN
      EIWERT(I)=WERTIN(I)
      EIVECC(I,I)=DCMPLX(ONE,ZERO)
 9996 CONTINUE
      GO TO 9998
      ENDIF
C
      DO 111 J=1,IGRUND
      DO 110 I=J,IGRUND
      CPXMAT(I,J)=DCMPLX(ZERO,ZERO)
      IF(I.EQ.J)CPXMAT(I,J)=DCMPLX(WERTIN(I),ZERO)
C**   THE MAGNETIC FIELD WILL NOW BE TAKEN INTO ACCOUNT EXPLICITLY FOR
C     JAVANV.EQ.0 (TESLAC=FIELD IN CM**(-1)), IN ADDITION TO PERTURBATION
C     THEORY OF FIRST ORDER, WHICH WILL BE APPLIED BELOW WITH HELP OF
C     COMPLEX MATRIX CPERTU.
      CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CPERTU(I,J)
  110 CONTINUE
  111 CONTINUE
C
 9990 CONTINUE
C**   2=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(2,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
C**   AND NOW FOR LOWER STORAGE MODE:
C
      ND28QU=ND2828**2
C
      CALL ZHPEVW(1,CPXMAT,CPXMAT,EIWERT,EIVECC,ND2828,KASSMN,DUMMYD
     1,NDMAL4,DUMMY,ND28QU)
C
      FMIN=EIWERT(1)
      DO 7615 I=1,KASSMN
      EIWERT(I)=EIWERT(I)-FMIN
 7615 CONTINUE
C
      IF(LESS.NE.0)GOTO 2128
      IF(NRROUT.LE.2.AND.KLICK2.NE.0)GOTO 2128
      IF(NRROUT.GT.2.AND.KLICK3.NE.0)GOTO 2128
      IF(NRROUT.LE.2)KLICK2=1
      IF(NRROUT.GT.2)KLICK3=1
      WRITE(*,2217)FMIN,NRROUT
 2217 FORMAT(
     1/,' < (ALL+1) Z,X,Y- EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',
     1D20.12,/,' ... BECOMES: (OUTPUT ONLY ONCE FOR NRROUT =',I2,')')
      WRITE(11,2217)FMIN,NRROUT
      KASI=KASSMN
      IF(KASI.GT.66)KASI=66
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
 2010 FORMAT(6(1X,D12.4))
      IF(KASI.NE.KASSMN)THEN
      WRITE(*,2216)EIWERT(KASSMN)
      WRITE(11,2216)EIWERT(KASSMN)
 2216 FORMAT(' ... AND THE LAST EIGENVALUE:',D12.4)
      ENDIF
 2128 CONTINUE
C
 9998 CONTINUE
C
C     IF(JTRANS.EQ.0.AND.JAVANV.EQ.0.AND.IOPT2.NE.2.AND.MOROUT.NE.0)
C**   FOR DIMER NOT YET IMPLEMENTED!:
      IF(JTRANS.EQ.0.AND.JAVANV.EQ.0.AND.IOPT2.EQ.0.AND.MOROUT.NE.0)
     1THEN
      WRITE(11,9734)DIRECZ(1),DIRECZ(2),DIRECZ(3),TESLAS,NRTEMP
 9795 WRITE(*,9734)DIRECZ(1),DIRECZ(2),DIRECZ(3),TESLAS,NRTEMP
 9734 FORMAT(' PUT IN IN I1 YES/NO(0): COMPUT. OF TRANSVERSE COMPON.',
     1' OF MAGN. MOMENT FIRSTLY,',/,
     2' THE DIRECTIONCOS. (Z,X,Y) ARE:',3D12.4,/,
     3' (THE MAGNETIC FIELD, IN TESLA, IS ',D14.6,', CORRESP. TO NR = '
     4,I4,',',/,' AND ONLY THIS WILL BE TAKEN INTO ACCOUNT!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=9754)JTRANS
      GOTO 9774
      ENDIF
 9754 READ(*,'(I1)',ERR=9795,END=4576)JTRANS
      LMN=1
 9774 WRITE(7,9784)JTRANS
 9784 FORMAT(I1,' =JTRANS(VERSE COMP.)')
      WRITE(*,9794)JTRANS
      WRITE(11,9794)JTRANS
 9794 FORMAT(I2,' =JTRANS(VERSE COMP.)!!!!!!!!!')
      IF(JTRANS.NE.0)CALL SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,KASSMN,CFMATY,ND2828,EIVECC,ZEEMAN,EIWERT,TEMPTH,NRTEMP,NDATAP
     2,NRROUT,JACUGD)
      JTRANS=1
      ENDIF
C
      DO 98 K=1,KASSMN
      COMZEE=DCMPLX(ZERO,ZERO)
      DO 97 I=1,KASSMN
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 99 J=1,KASSMN
      CEEWER=CEEWER+CPERTU(I,J)*EIVECC(J,K)
   99 CONTINUE
      CFMATY(I,K)=CEEWER
      COMZEE=COMZEE+DCONJG(EIVECC(I,K))*CEEWER
   97 CONTINUE
      ZEEMAN(K)=ZERO
      ZEEMA2(K)=ZERO
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERT=DBLE(COMZEE)
      DUMMYD(K)=DIMAG(COMZEE)
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
   98 CONTINUE
C
      IF(LESS.NE.0.OR.MOROUT.EQ.0)GOTO 2129
      IF(NRROUT.LE.2.AND.KLICK2.NE.1)GOTO 2129
      IF(NRROUT.GT.2.AND.KLICK3.NE.1)GOTO 2129
      IF(NRROUT.LE.2)KLICK2=2
      IF(NRROUT.GT.2)KLICK3=2
      WRITE(11,2130)
      WRITE(*,2130)
 2130 FORMAT(' CONTROL: ZEEMAN= AND DIMAG(COMZEE)=')
      WRITE(11,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(*,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(11,2131)(DUMMYD(K),K=1,KASSMN)
      WRITE(*,2131)(DUMMYD(K),K=1,KASSMN)
 2131 FORMAT(6D12.4)
 2129 CONTINUE
C
      IF(JAVANV.NE.0)THEN
C**   THE SECOND ORDER (ZEEMA2) AND POSSIBLY CORRECTIONS OF ZEEMAN:
C
      DO 988 K=1,KASSMN
      DUMMYD(K)=ZERO
  988 CONTINUE
C
      KASSIN=0
      N28=ND28
      IF(NRROUT.GT.2)N28=2*ND28
      IF(KLICK(NRROUT,NRSORT).EQ.0.AND.(KASSMN.GT.N28.OR.JATEST.NE.0))
     1THEN
      KLICK(NRROUT,NRSORT)=1
      WRITE(11,9023)KASSMN
 8253 WRITE(*,9023)KASSMN
 9023 FORMAT(' EVALUATION'
     1,' OF ALL ZEEMAN COEFF. OF 2ND ORDER MAY BE TIME CONSUMING,',
     2/,' BUT THEY MAY BE PARTLY NEGLECTED! INPUT IN I4 0 OR THE NUMBER'
     3,' REMAINING, < ',I4,/,' (USEFUL ALSO FOR PARTICULAR TESTS!: -1 =>
     4 0 ZEEMAN COEFF. OF 2ND ORDER)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3444)KASSIN
      GOTO 4944
      ENDIF
 3444 READ(*,'(I4)',ERR=8253,END=4576)KASSIN
      LMN=1
 4944 WRITE(7,2394)KASSIN
 2394 FORMAT(I4,' =KASSIN("2ND ORDER")')
      WRITE(*,2439)KASSIN
      WRITE(11,2439)KASSIN
 2439 FORMAT(I5,' =KASSIN("2ND ORDER")!!!!!!!!!')
      KASSMM(NRROUT,NRSORT)=KASSMN
      IF(KASSIN.NE.0.AND.KASSIN.LT.KASSMN)KASSMM(NRROUT,NRSORT)=KASSIN
C**   IF(KASSMM(NRROUT,NRSORT).LT.0)KASSMM(NRROUT,NRSORT)=0
      ENDIF
      IF(KLICK(NRROUT,NRSORT).EQ.0.AND.(KASSMN.LE.N28.AND.JATEST.EQ.0))
     1THEN
      KLICK(NRROUT,NRSORT)=1
      WRITE(11,9022)
 8254 WRITE(*,9022)
 9022 FORMAT(' ALL'
     1,' ZEEMAN COEFF. OF 2ND ORDER ARE EVALUATED, BUT PUT IN 0 IN I4!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3445)KASSIN
      GOTO 4945
      ENDIF
 3445 READ(*,'(I4)',ERR=8254,END=4576)KASSIN
      LMN=1
 4945 KASSIN=0
      WRITE(7,2394)KASSIN
      WRITE(*,2439)KASSIN
      WRITE(11,2439)KASSIN
      ENDIF
      IF(KASSMM(NRROUT,NRSORT).EQ.0)KASSMM(NRROUT,NRSORT)=KASSMN
C
C**   IF KASSMM < KASSMN, LESS COEFF. OF SECOND ORDER ARE CALC. NOW:
      DO 9024 K=1,KASSMM(NRROUT,NRSORT)
      WERTIK=ZERO
      DO 9025 KA=1,KASSMN
      IF(KA.EQ.K)GOTO 9025
      EDIFF=EIWERT(K)-EIWERT(KA)
      IF(NRROUT.GT.2)THEN
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 9026 LIN=1,KASSMN
      CEEWER=CEEWER+DCONJG(EIVECC(LIN,K))*CFMATY(LIN,KA)
 9026 CONTINUE
      ELSE
      CEEWER=CFMATY(K,KA)
      ENDIF
      SUMMAQ=DBLE(DCONJG(CEEWER)*CEEWER)
      IF(DABS(EDIFF).GE.PARWUR)THEN
      WERTIK=WERTIK+SUMMAQ/EDIFF
      ELSE IF(DABS(SUMMAQ).GE.PARWUR)THEN
C**   NOW, BECAUSE DABS(EDIFF).LT.PARWUR - THE METHOD OF GERLOCH WILL BE 
C     APPLIED, AND THE SQUARED COEFF. ARE: (DUMMYD(K)=ZERO "ABOVE")
      DUMMYD(K)=DUMMYD(K)+SUMMAQ
      ENDIF
 9025 CONTINUE
C     ZEEMA2(K)=ZERO ("ABOVE")
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      IF(DABS(WERTIK).GE.PARWUR)ZEEMA2(K)=WERTIK
 9024 CONTINUE
C
      DO 6667 I=1,KASSMN
      ZEEMAN(I)=ZEEMAN(I)**2+DUMMYD(I)
 6667 CONTINUE
C
      ENDIF
C
C**   3=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(3,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
 9999 CONTINUE
      CALL CHIMAG(JATEST,
     1NRSORT,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE
     1,EIWERT,ZEEMAN,ZEEMA2,JAVANV,KASSMN,NRROUT,MOROUT,NRTEMP,JACUGD)
C**   RETURNS TO SELECT OR TO SUGANK!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANC
      END
      SUBROUTINE SUGANX(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,KASSMN,FMATY,ND1110,EIVEC,ZEEMAN,EIWERT,TEMPTH,NRTEMP,NDATAP
     2,NRROUT,JACUGD)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      DOUBLE PRECISION DIRECZ(3),TEMPIK(601),TESDAT(601)
     1,FMAT(ND252,ND252,5),DIRB(2),ZEEMAN(*),EIWERT(*)
     2,TEMPUT(3),CHIOUT(3),FMATY(ND1110,*),EIVEC(ND1110,*)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,HALF=0.5D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,BOLZCM=0.695040D0,PREVOR=-AVOGAD*SIMUBC)
      WRITE(*,9743)(DIRECZ(I),I=1,2)
      WRITE(11,9743)(DIRECZ(I),I=1,2)
      WRITE(14,9743)(DIRECZ(I),I=1,2)
 9743 FORMAT(' 2 DIRECTIONCOS., FOR COMPON. IN FIELD DIRECTION,',/
     1,' AS STARTING VALUES:',2D12.4)
      DIRB(1)=-DIRECZ(2)
      DIRB(2)=DIRECZ(1)
      WRITE(*,9744)(DIRB(I),I=1,2)
      WRITE(11,9744)(DIRB(I),I=1,2)
      WRITE(14,9744)(DIRB(I),I=1,2)
 9744 FORMAT(' 2 DIRECTIONCOS., NOW FOR THE TRANSVERSE COMP.:',2D12.4)
C
      DO 9925 J=1,KASSMN
      DO 9724 I=J,KASSMN
      FMATY(I,J)=DIRB(1)*FMAT(I,J,1)+DIRB(2)*FMAT(I,J,4)
C**   THE WHOLE MATRIX IS NEEDED BELOW:
      FMATY(J,I)=FMATY(I,J)
 9724 CONTINUE
 9925 CONTINUE
C
      DO 98 K=1,KASSMN
      ZEE=ZERO
      DO 97 I=1,KASSMN
      ZEEWER=ZERO
      DO 99 J=1,KASSMN
      ZEEWER=ZEEWER+FMATY(I,J)*EIVEC(J,K)
   99 CONTINUE
      ZEE=ZEE+ZEEWER*EIVEC(I,K)
   97 CONTINUE
      ZEEMAN(K)=ZERO
      IF(DABS(ZEE).GE.PARWUR)ZEEMAN(K)=ZEE
   98 CONTINUE
C
      WRITE(11,2033)
      WRITE(*,2033)
 2033 FORMAT(' (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      WRITE(11,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(*,2131)(ZEEMAN(K),K=1,KASSMN)
 2131 FORMAT(6D12.4)
C
      IF(TEMPTH.NE.TEMPIK(NRTEMP))THEN
      WRITE(*,778)NRTEMP,TEMPTH,TEMPIK(NRTEMP)
      WRITE(11,778)NRTEMP,TEMPTH,TEMPIK(NRTEMP)
  778 FORMAT(' WARNING: TEMPTH.NE.TEMPIK(NRTEMP):',
     1' THETA (OF CURIE-WEISS LAW).NE.ZERO! (TEMPTH IGNORED!)',/
     2,' NRTEMP,TEMPTH,TEMPIK(NRTEMP)=',I4,2D10.2)
      ENDIF
      WRITE(*,776)
      WRITE(11,776)
      WRITE(14,776)
      TEMPPI=ZEEMAN(1)*PREVOR/TESLAS
      WRITE(*,774)ZERO,TEMPPI
      WRITE(11,774)ZERO,TEMPPI
      WRITE(14,774)ZERO,TEMPPI
  774 FORMAT(F7.2,D16.8,' (=MAGN.MOM.*(7.018244E-6)/TESLAS)')
      J123=0
      DO 777 J=1,NDATAP
      IF(TEMPIK(J).LE.ZERO)GOTO 777
      IF(TESDAT(J).NE.TESLAS)GOTO 777
      J123=J123+1
      TEMPPI=TEMPIK(J)
      FKT=BOLZCM*TEMPPI
      SUM=ZERO
      ZCHI=ZERO
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
      SUM=SUM+ZEEMAN(I)*EXPWKT
  700 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
C**   THIS RESULT IS NEG. MAGN. MOMENT IN BOHR MAGNETONS:
      FMAGNB=-CHIQUO
      CHIFLD=PREVOR*CHIQUO
      CHISI=CHIFLD/TESLAS
      TEMPUT(J123)=TEMPPI
      CHIOUT(J123)=CHISI
      IF(J123.EQ.3)THEN
      J123=0
      WRITE(*,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      WRITE(11,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      WRITE(14,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      ENDIF
  777 CONTINUE
  776 FORMAT(' TEMP',
     1'/K  CHI.TRANSVERS  TEMP/K  CHI.TRANSVERS  TEMP/K  CHI.TRANSVERS')
  775 FORMAT(3(F7.2,D16.8))
      WRITE(*,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
      WRITE(11,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
      WRITE(14,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
C
      WRITE(*,773)
      WRITE(11,773)
      WRITE(14,773)
  773 FORMAT(' SUGANX(ITRANS) RETURNS TO SUGANR.')
      RETURN
CEND SUGANX
      END
      SUBROUTINE SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,KASSMN,CFMATY,ND2828,EIVECC,ZEEMAN,EIWERT,TEMPTH,NRTEMP,NDATAP
     2,NRROUT,JACUGD)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      DOUBLE PRECISION DIRECZ(3),TEMPIK(601),TESDAT(601)
     1,FMAT(ND252,ND252,5),DIRB(3),DIRC(3),ZEEMAN(*),EIWERT(*)
     2,TEMPUT(3),CHIOUT(3)
      COMPLEX*16 EIVECC(ND2828,*),CFMATY(ND2828,*),COMZEE,CEEWER
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,HALF=0.5D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,BOLZCM=0.695040D0,PREVOR=-AVOGAD*SIMUBC)
      WRITE(*,9743)(DIRECZ(I),I=1,3)
      WRITE(11,9743)(DIRECZ(I),I=1,3)
      WRITE(14,9743)(DIRECZ(I),I=1,3)
 9743 FORMAT(' 3 DIRECTIONCOS., FOR COMPON. IN FIELD DIRECTION,',/
     1,' AS STARTING VALUES:',3D12.4)
      DIRB(3)=ZERO
      IF(DIRECZ(3).EQ.ONE)THEN
      DIRB(2)=ONE
      ELSE
      DIRB(2)=DIRECZ(1)/DSQRT(ONE-DIRECZ(3)**2)
      ENDIF
      DIRB(1)=-DSIGN(ONE,DIRECZ(2))*DSQRT(ONE-DIRB(2)**2)
      WRITE(*,9744)(DIRB(I),I=1,3)
      WRITE(11,9744)(DIRB(I),I=1,3)
      WRITE(14,9744)(DIRB(I),I=1,3)
 9744 FORMAT(' 3 DIRECTIONCOS., NOW FOR THE TRANSVERSE COMP.:',3D12.4)
      JTRANS=2
 9742 IF(JTRANS.EQ.3)THEN
      DIRC(1)=DIRECZ(2)*DIRB(3)-DIRECZ(3)*DIRB(2)
      DIRC(2)=DIRECZ(3)*DIRB(1)-DIRECZ(1)*DIRB(3)
      DIRC(3)=DIRECZ(1)*DIRB(2)-DIRECZ(2)*DIRB(1)
      WRITE(*,9744)(DIRC(I),I=1,3)
      WRITE(11,9744)(DIRC(I),I=1,3)
      WRITE(14,9744)(DIRC(I),I=1,3)
      DO 9726 I=1,3
      DIRB(I)=DIRC(I)
 9726 CONTINUE
      ENDIF
      DO 9925 J=1,KASSMN
      DO 9724 I=J,KASSMN
C**   P=PERTUR(BING); R=REAL; I=IMAGINARY:
      TEMPPR=DIRB(1)*FMAT(I,J,1)+DIRB(2)*FMAT(I,J,4)
C     FMAT( , ,5) IS ANTISYMMETRICAL; THE WHOLE MATRIX IS NEEDED BELOW.
      TEMPPI=DIRB(3)*FMAT(I,J,5)
      CFMATY(I,J)=DCMPLX(TEMPPR,TEMPPI)
 9724 CONTINUE
 9925 CONTINUE
      DO 2124 J=2,KASSMN
      JM1=J-1
      DO 6716 I=1,JM1
      CFMATY(I,J)=DCONJG(CFMATY(J,I))
 6716 CONTINUE
 2124 CONTINUE
C
      DO 98 K=1,KASSMN
      COMZEE=DCMPLX(ZERO,ZERO)
      DO 97 I=1,KASSMN
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 99 J=1,KASSMN
      CEEWER=CEEWER+CFMATY(I,J)*EIVECC(J,K)
   99 CONTINUE
      COMZEE=COMZEE+DCONJG(EIVECC(I,K))*CEEWER
   97 CONTINUE
      ZEEMAN(K)=ZERO
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERT=DBLE(COMZEE)
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
   98 CONTINUE
C
      WRITE(11,2033)
      WRITE(*,2033)
 2033 FORMAT(' (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      WRITE(11,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(*,2131)(ZEEMAN(K),K=1,KASSMN)
 2131 FORMAT(6D12.4)
C
      IF(TEMPTH.NE.TEMPIK(NRTEMP))THEN
      WRITE(*,778)NRTEMP,TEMPTH,TEMPIK(NRTEMP)
      WRITE(11,778)NRTEMP,TEMPTH,TEMPIK(NRTEMP)
  778 FORMAT(' WARNING: TEMPTH.NE.TEMPIK(NRTEMP):',
     1' THETA (OF CURIE-WEISS LAW).NE.ZERO! (TEMPTH IGNORED!)',/
     2,' NRTEMP,TEMPTH,TEMPIK(NRTEMP)=',I4,2D10.2)
      ENDIF
      WRITE(*,776)
      WRITE(11,776)
      WRITE(14,776)
      TEMPPI=ZEEMAN(1)*PREVOR/TESLAS
      WRITE(*,774)ZERO,TEMPPI
      WRITE(11,774)ZERO,TEMPPI
      WRITE(14,774)ZERO,TEMPPI
  774 FORMAT(F7.2,D16.8,' (=MAGN.MOM.*(7.018244E-6)/TESLAS)')
      J123=0
      DO 777 J=1,NDATAP
      IF(TEMPIK(J).LE.ZERO)GOTO 777
      IF(TESDAT(J).NE.TESLAS)GOTO 777
      J123=J123+1
      TEMPPI=TEMPIK(J)
      FKT=BOLZCM*TEMPPI
      SUM=ZERO
      ZCHI=ZERO
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
      SUM=SUM+ZEEMAN(I)*EXPWKT
  700 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
C**   THIS RESULT IS NEG. MAGN. MOMENT IN BOHR MAGNETONS:
      FMAGNB=-CHIQUO
      CHIFLD=PREVOR*CHIQUO
      CHISI=CHIFLD/TESLAS
      TEMPUT(J123)=TEMPPI
      CHIOUT(J123)=CHISI
      IF(J123.EQ.3)THEN
      J123=0
      WRITE(*,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      WRITE(11,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      WRITE(14,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      ENDIF
  777 CONTINUE
  776 FORMAT(' TEMP',
     1'/K  CHI.TRANSVERS  TEMP/K  CHI.TRANSVERS  TEMP/K  CHI.TRANSVERS')
  775 FORMAT(3(F7.2,D16.8))
      WRITE(*,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
      WRITE(11,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
      WRITE(14,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
C
      IF(JTRANS.EQ.3)THEN
      WRITE(*,773)
      WRITE(11,773)
      WRITE(14,773)
  773 FORMAT(' SUGANY(JTRANS) RETURNS TO SUGANC.')
      RETURN
      ENDIF
      JTRANS=3
      GOTO 9742
CEND SUGANY
      END
      SUBROUTINE SUGANH(FKWERT,ABST,GMAT,IGR1
C**   CALLED BY SELECT! - CALLS (SUGANO AND) SUGANR!
     1,WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,PERTUR,FMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP,NRRUFX
     4,ND252,ND1110,ND28,ND2828,NDMAL3
C**   ABOVE PARTLY FOR SUBROUTINE SUGANR.
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,CPXMAT,EIVECC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
C     Here in SUGANH (only) z- and x- direction of magnetic field are concerned.
C     SUGANH will call SUGANR, but with NRROUT=3. Heisenberg coupling and/or
C     magnetic dipol-dipol interaction is taken into account here (H <=> 
C     Heisenberg, "NRROUT.GT.2"). The complex version to SUBROUTINE SUGANH is
C     SUBROUTINE SUGANK. Subroutine SUGANH may be called, for the same
C     temperature, max. 2 times: NRSORT=1...2 <=> z- and x-direction with IGRUND
C     "small", if "Combined Model", and KASSMN=IGRUND**2.
C
C     More output may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C
C     The g-factor for spin is contained in FMAT. GMAT(ND252,ND252,1:3),
C     also belonging to the general interface, containes only spin, but without
C     g-factor, and will be used for Heisenberg coupling.
C     The number of values of WERTIN used here in SUBROUTINE SUGANH is IGRUND,
C     which may be equal to NRVAL or smaller, and KASSMN becomes IGRUND**2.
C
C**   FAKGQK=-TWO*FKWERT is for Heisenberg coupling and ABST=distance of two
C     (equal) centres in PM is for MDDWW = magn. dipol dipol interaction.
C     - FAKGQK and/or ABST are not ZERO in this subroutine her -
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      DOUBLE PRECISION WERTIN(*),FMAT(ND252,ND252,5),FMATCH(ND1110,*)
     1,TESLAC,DIRECZ(3),EIVEC(ND1110,*),DUMMY(NDMAL3)
     2,EIWERT(*),ZEEMAN(*),ZEEMA2(*),DIFLOW,DIFMAX,PERTUR(ND1110,*)
     3,FMATY(ND1110,*),ABST,ABSTFF,FAKGQK,FKWERT,TEMPPR,TEMPMR,FAKMAT
     4,GMAT(ND252,ND252,3)
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     3,CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     3,FACZ,FACXY,FACXYH
C**   ABOVE: "FROM CALL", BELOW: "ALL OTHER"
     4,ZERO,HALF,ONE,TWO,PARWUR,PARWUQ,PARZER
     5,FISOTR,FANISO,FKOLD,FKOLDX
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,JATEST,MIST,LESS,MIST14(14)
      COMMON/KLIXYZ/ISTZXY
      COMMON/MIRROV/FACZ,FACXY,MIRROW
      PARAMETER(ABSTFF=0.43297D+06)
C     FACTOR, WHICH CALCULATES ENERGY IN CM**-1, IF NUMBER OF MAGNETONS
C     ON EACH OF TWO CENTRES AND THEIR DISTANCE IN PM ARE GIVEN (=10**-7
C     *SIMUBA**2*5.03411*10**58, SIMUBA=9.27402*10**-24 A*M**2=J/TESLA
C     =BOHR MAGNETON NAMED AFTER AMPERE, 5.034*10**24(=PLANCK CONSTANT
C     *VELOCITY OF LIGHT)**-1, 1 M=10**12 PM, 1 M=100 CM)
C     INTEGER IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C    1,ND252,ND1110,ND2828,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
C    2,NRTEMP
C**   ABOVE: INTEGER "FROM CALL", BELOW: "OTHER", BUT NOT "ALL"
C    2,NRROUT,KASSMN,NURTMQ
      SAVE
      DATA FKOLD/ZERO/,KLICKF/0/,KLIZXY/0/
      DATA FKOLDX/ZERO/,KLICKG/0/
      FACXYH=FACXY*HALF
      IF(KLIZXY.EQ.0.AND.ISTZXY.NE.0.AND.ABST.GT.ZERO)THEN
      KLIZXY=1
      WRITE(11,77)
 8255 WRITE(*,77)
   77 FORMAT(
     1' ANISOTROPIC PART OF MAGNETIC DIPOL DIPOL INTERACTION MAY BE CALC
     2ULATED',/,' IN Z-, IN X- OR IN Y-DIRECTION: Z,X,Y <=> 1,2,3')
C05     3>2, RESPECTIVELY!')
C      IF(LMN.EQ.0)THEN
C      READ(77,'(I1)',ERR=5588,END=3446)ISTZXY
C      GOTO 4946
C      ENDIF
C 3446 READ(*,'(I1)',ERR=8255,END=4576)ISTZXY
C      LMN=1
C 4946 WRITE(7,2396)ISTZXY
C05 2396 FORMAT(I1,' =ISTZXY IN SUGANH')
      WRITE(*,2639)ISTZXY
      WRITE(11,2639)ISTZXY
 2639 FORMAT(I2,' =ISTZXY IN SUGANH!!!!!!!!!')
      ENDIF
      NURTMQ=0
      IF(NRRUFX.LE.1)THEN
      IF(KLICKF.NE.0.AND.NURTMP.NE.0.AND.FKOLD.EQ.FKWERT)NURTMQ=1
      KLICKF=1
      FKOLD=FKWERT
      ELSE
      IF(KLICKG.NE.0.AND.NURTMP.NE.0.AND.FKOLDX.EQ.FKWERT)NURTMQ=1
      KLICKG=1
      FKOLDX=FKWERT
      ENDIF
      IF(NURTMQ.NE.0)GOTO 9999
      NRROUT=3
      KASSMN=IGRUND**2
      IF(JACUGD.NE.0)KASSMN=IGRUND*JACUGD
      IF(KASSMN.GT.ND1110)STOP 'ND1110'
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
      FISOTR=ZERO
C05      IF(ABST.NE.ZERO)FISOTR=ABSTFF/DABS(ABST)**3
      IF(ISTZXY.NE.0)FISOTR=ABSTFF/DABS(ABST)**3
      FANISO=ZERO
      IF(ISTZXY.NE.0.AND.ABST.GT.ZERO)FANISO=FISOTR*(-3.0D0)
C**   FISOTR AND FANISO MUST NOT CONTAIN ANY G-FACTOR (FMAT CONTAINS THE
C     G-FACTOR FOR SPIN - IN GMAT THE G-FACTOR IS =ONE)!
      FAKGQK=-TWO*FKWERT
C
      IF(MOROUT.NE.0)THEN
      WRITE(*,9328)FISOTR,FANISO,FAKGQK
      WRITE(11,9328)FISOTR,FANISO,FAKGQK
 9328 FORMAT(' FISOTR, FANISO, FAKGQK =',3D16.8)
      ENDIF
      IF(JACUGD.EQ.0)THEN
      LINROW=0
      DO 1215 JJ=1,IGRUND
      DO 1214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 1213 II=1,IGRUND
      DO 1212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 1212
      FMATCH(LINCOL,LINROW)=ZERO
      PERTUR(LINCOL,LINROW)=ZERO
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      TEMPMR=ZERO
      IF(JAVANV.EQ.0)TEMPMR=TEMPPR*TESLAC
      IF(I.EQ.J)TEMPMR=TEMPMR+WERTIN(I)
      FMATCH(LINCOL,LINROW)=TEMPMR
      PERTUR(LINCOL,LINROW)=TEMPPR
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRECZ(1)*FMAT(II,JJ,1)+DIRECZ(2)*FMAT(II,JJ,4)
      TEMPMR=ZERO
      IF(JAVANV.EQ.0)TEMPMR=TEMPPR*TESLAC
      IF(II.EQ.JJ)TEMPMR=TEMPMR+WERTIN(II)
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)+TEMPMR
      PERTUR(LINCOL,LINROW)=PERTUR(LINCOL,LINROW)+TEMPPR
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      FAKMAT=GMAT(II,JJ,1)*GMAT(I,J,1)*FACZ
     1+FACXYH*(GMAT(II,JJ,2)*GMAT(I,J,3)
     2+GMAT(II,JJ,3)*GMAT(I,J,2))
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)+FAKGQK*FAKMAT
      IF(FISOTR.NE.ZERO)FMATCH(LINCOL,LINROW)
     1=FMATCH(LINCOL,LINROW)+(FISOTR*(FMAT(II,JJ,1)*FMAT(I,J,1)
     1+FMAT(II,JJ,4)*FMAT(I,J,4)
     2-FMAT(II,JJ,5)*FMAT(I,J,5)))
C**   Z-AXIS IS ION-ION AXIS
      IF(FANISO.NE.ZERO)THEN
      IF(ISTZXY.EQ.1)THEN
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)
     1+(FANISO*FMAT(II,JJ,1)*FMAT(I,J,1))
      ELSE IF(ISTZXY.EQ.2)THEN
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)
     1+(FANISO*FMAT(II,JJ,4)*FMAT(I,J,4))
      ELSE IF(ISTZXY.EQ.3)THEN
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)
     1-(FANISO*FMAT(II,JJ,5)*FMAT(I,J,5))
      ENDIF
      ENDIF
 1212 CONTINUE
 1213 CONTINUE
 1214 CONTINUE
 1215 CONTINUE
      ELSE IF(JACUGD.NE.0)THEN
      LINROW=0
      DO 2215 JJ=1,JACUGD
      DO 2214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 2213 II=1,JACUGD
      DO 2212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 2212
      FMATCH(LINCOL,LINROW)=ZERO
      PERTUR(LINCOL,LINROW)=ZERO
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      TEMPMR=ZERO
      IF(JAVANV.EQ.0)TEMPMR=TEMPPR*TESLAC
      IF(I.EQ.J)TEMPMR=TEMPMR+WERTIN(I)
      FMATCH(LINCOL,LINROW)=TEMPMR
      PERTUR(LINCOL,LINROW)=TEMPPR
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRECZ(1)*FMATCU(II,JJ,1)+DIRECZ(2)*FMATCU(II,JJ,2)
      TEMPMR=ZERO
      IF(JAVANV.EQ.0)TEMPMR=TEMPPR*TESLAC
      IF(II.EQ.JJ)TEMPMR=TEMPMR+WERTCU(II)
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)+TEMPMR
      PERTUR(LINCOL,LINROW)=PERTUR(LINCOL,LINROW)+TEMPPR
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      FAKMAT=GMATCU(II,JJ,1)*GMAT(I,J,1)*FACZ
     1+FACXYH*(GMATCU(II,JJ,2)*GMAT(I,J,3)
     2+GMATCU(II,JJ,3)*GMAT(I,J,2))
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)+FAKGQK*FAKMAT
      IF(FISOTR.NE.ZERO)FMATCH(LINCOL,LINROW)
     1=FMATCH(LINCOL,LINROW)+(FISOTR*(FMATCU(II,JJ,1)*FMAT(I,J,1)
     1+FMATCU(II,JJ,2)*FMAT(I,J,4)
     2-FMATCU(II,JJ,3)*FMAT(I,J,5)))
C**   Z-AXIS IS ION-ION AXIS
      IF(FANISO.NE.ZERO)THEN
      IF(ISTZXY.EQ.1)THEN
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)
     1+(FANISO*FMATCU(II,JJ,1)*FMAT(I,J,1))
      ELSE IF(ISTZXY.EQ.2)THEN
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)
     1+(FANISO*FMATCU(II,JJ,2)*FMAT(I,J,4))
      ELSE IF(ISTZXY.EQ.3)THEN
      FMATCH(LINCOL,LINROW)=FMATCH(LINCOL,LINROW)
     1-(FANISO*FMATCU(II,JJ,3)*FMAT(I,J,5))
      ENDIF
      ENDIF
 2212 CONTINUE
 2213 CONTINUE
 2214 CONTINUE
 2215 CONTINUE
      ENDIF
C
C**   PERTUR HAS TO BE THE WHOLE(!) MATRIX!:
      DO 2122 J=2,KASSMN
      JM1=J-1
      DO 4715 I=1,JM1
      PERTUR(I,J)=PERTUR(J,I)
 4715 CONTINUE
 2122 CONTINUE
C
 9999 CONTINUE
      CALL SUGANR(NRROUT
C**   HERE KASSMN INSTEAD OF IGRUND:
     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,PERTUR,FMATY
     3,KASSMN,JAVANV,MOROUT,NRSORT,NURTMQ
     4,ND252,ND1110,ND28,ND2828,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,CPXMAT,EIVECC,JACUGD)
C**   RETURNS TO SELECT!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANH
      END
      SUBROUTINE SUGANK(FKWERT,ABST,GMAT
C**   CALLED BY SELECT! - CALLS (SUGANO AND) SUGANC!
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,FMATCH,EIVEC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
C     Here in SUGANK z-, x- and y-direction of magnetic field are concerned,
C     at least the y-direction alone. SUGANK will call SUGANC, but with
C     NRROUT=4. Heisenberg coupling and/or magnetic dipol-dipol interaction is
C     taken into account here (K <=> KOMPL. Heisenberg, "NRROUT.GT.2"). SUGANK
C     is the complex version of SUBROUTINE SUGANH. Subroutine SUGANK may be
C     called, for the same temperature, only once, with IGRUND "small", if
C     "Combined Model", and KASSMN=IGRUND**2.
C     (SEE SUBROUTINE SUGANR FOR MORE INFORMATION!)
C
C     More output may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION WERTIN(*),FMAT(ND252,ND252,5)
     1,TESLAC,DIRECZ(3),DUMMYD(NDMAL4),DUMMY(NDMAL3)
     2,EIWERT(*),ZEEMAN(*),ZEEMA2(*),DIFLOW,DIFMAX
     3,ABST,ABSTFF,FAKGQK,FKWERT,TEMPPR,TEMPMR,FAKMAT
     4,GMAT(ND252,ND252,3),TEMPPI,TEMPMI
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     3,CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     3,FMATCH(*),EIVEC(*),FACZ,FACXY,FACXYH
C**   ABOVE: "FROM CALL", BELOW: "ALL OTHER"
     4,ZERO,HALF,ONE,TWO,PARWUR,PARWUQ,PARZER
     5,FISOTR,FANISO,FKOLD
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
     1,CPERTU(ND2828,*),CFMATY(ND2828,*)
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,JATEST,MIST,LESS,MIST14(14)
      COMMON/KLIXYZ/ISTZXY
      COMMON/MIRROV/FACZ,FACXY,MIRROW
      PARAMETER(ABSTFF=0.43297D+06)
C     INTEGER IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C    1,ND252,ND1110,ND2828,NDMAL4
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
C    2,NRTEMP,NURTMQ
C**   ABOVE: INTEGER "FROM CALL", BELOW: "OTHER", BUT NOT "ALL"
C    2,NRROUT,KASSMN
      SAVE
      DATA FKOLD/ZERO/,KLICKF/0/,KLIZXY/0/
      FACXYH=FACXY*HALF
      IF(KLIZXY.EQ.0.AND.ISTZXY.NE.0.AND.ABST.GT.ZERO)THEN
      KLIZXY=1
      WRITE(11,77)
 8255 WRITE(*,77)
   77 FORMAT(
     1' ANISOTROPIC PART OF MAGNETIC DIPOL DIPOL INTERACTION MAY BE CALC
     2ULATED',/,' IN Z-, IN X- OR IN Y-DIRECTION: Z,X,Y <=> 1,2,3')
C05     3>2, RESPECTIVELY!')
C      IF(LMN.EQ.0)THEN
C      READ(77,'(I1)',ERR=5588,END=3446)ISTZXY
C      GOTO 4946
C      ENDIF
C 3446 READ(*,'(I1)',ERR=8255,END=4576)ISTZXY
C      LMN=1
C 4946 WRITE(7,2396)ISTZXY
C05 2396 FORMAT(I1,' =ISTZXY IN SUGANK')
      WRITE(*,2639)ISTZXY
      WRITE(11,2639)ISTZXY
 2639 FORMAT(I2,' =ISTZXY IN SUGANK!!!!!!!!!')
      ENDIF
      NURTMQ=0
      IF(KLICKF.NE.0.AND.NURTMP.NE.0.AND.FKOLD.EQ.FKWERT)NURTMQ=1
      KLICKF=1
      FKOLD=FKWERT
      IF(NURTMQ.NE.0)GOTO 9999
      NRROUT=4
      KASSMN=IGRUND**2
      IF(JACUGD.NE.0)KASSMN=IGRUND*JACUGD
      IF(KASSMN.GT.ND2828)STOP 'ND2828'
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
      FISOTR=ZERO
C05      IF(ABST.NE.ZERO)FISOTR=ABSTFF/DABS(ABST)**3
      IF(ISTZXY.NE.0)FISOTR=ABSTFF/DABS(ABST)**3
      FANISO=ZERO
      IF(ISTZXY.NE.0.AND.ABST.GT.ZERO)FANISO=FISOTR*(-3.0D0)
C**   FISOTR AND FANISO MUST NOT CONTAIN ANY G-FACTOR (FMAT CONTAINS THE
C     G-FACTOR FOR SPIN - IN GMAT THE G-FACTOR IS =ONE)!
      FAKGQK=-TWO*FKWERT
C
      IF(JACUGD.EQ.0)THEN
      LINROW=0
      DO 1215 JJ=1,IGRUND
      DO 1214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 1213 II=1,IGRUND
      DO 1212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 1212
      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CPERTU(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      TEMPPI=DIRECZ(3)*FMAT(I,J,5)
      TEMPMR=ZERO
      TEMPMI=ZERO
      IF(JAVANV.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(I.EQ.J)TEMPMR=TEMPMR+WERTIN(I)
      CPXMAT(LINCOL,LINROW)=DCMPLX(TEMPMR,TEMPMI)
      CPERTU(LINCOL,LINROW)=DCMPLX(TEMPPR,TEMPPI)
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRECZ(1)*FMAT(II,JJ,1)+DIRECZ(2)*FMAT(II,JJ,4)
      TEMPPI=DIRECZ(3)*FMAT(II,JJ,5)
      TEMPMR=ZERO
      TEMPMI=ZERO
      IF(JAVANV.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(II.EQ.JJ)TEMPMR=TEMPMR+WERTIN(II)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(TEMPMR,TEMPMI)
      CPERTU(LINCOL,LINROW)=CPERTU(LINCOL,LINROW)+DCMPLX(TEMPPR,TEMPPI)
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      FAKMAT=GMAT(II,JJ,1)*GMAT(I,J,1)*FACZ
     1+FACXYH*(GMAT(II,JJ,2)*GMAT(I,J,3)
     2+GMAT(II,JJ,3)*GMAT(I,J,2))
      FAKMAT=FAKMAT*FAKGQK
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(FAKMAT,ZERO)
      IF(FISOTR.NE.ZERO)CPXMAT(LINCOL,LINROW)
     1=CPXMAT(LINCOL,LINROW)+DCMPLX(FISOTR*(FMAT(II,JJ,1)*FMAT(I,J,1)
     1+FMAT(II,JJ,4)*FMAT(I,J,4)
     2-FMAT(II,JJ,5)*FMAT(I,J,5)),ZERO)
C**   Z-AXIS IS ION-ION AXIS
      IF(FANISO.NE.ZERO)THEN
      IF(ISTZXY.EQ.1)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+DCMPLX(FANISO*FMAT(II,JJ,1)*FMAT(I,J,1),ZERO)
      ELSE IF(ISTZXY.EQ.2)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+DCMPLX(FANISO*FMAT(II,JJ,4)*FMAT(I,J,4),ZERO)
      ELSE IF(ISTZXY.EQ.3)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1-DCMPLX(FANISO*FMAT(II,JJ,5)*FMAT(I,J,5),ZERO)
      ENDIF
      ENDIF
 1212 CONTINUE
 1213 CONTINUE
 1214 CONTINUE
 1215 CONTINUE
      ELSE IF(JACUGD.NE.0)THEN
      LINROW=0
      DO 2215 JJ=1,JACUGD
      DO 2214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 2213 II=1,JACUGD
      DO 2212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 2212
      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CPERTU(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      TEMPPI=DIRECZ(3)*FMAT(I,J,5)
      TEMPMR=ZERO
      TEMPMI=ZERO
      IF(JAVANV.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(I.EQ.J)TEMPMR=TEMPMR+WERTIN(I)
      CPXMAT(LINCOL,LINROW)=DCMPLX(TEMPMR,TEMPMI)
      CPERTU(LINCOL,LINROW)=DCMPLX(TEMPPR,TEMPPI)
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRECZ(1)*FMATCU(II,JJ,1)+DIRECZ(2)*FMATCU(II,JJ,2)
      TEMPPI=DIRECZ(3)*FMATCU(II,JJ,3)
      TEMPMR=ZERO
      TEMPMI=ZERO
      IF(JAVANV.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(II.EQ.JJ)TEMPMR=TEMPMR+WERTCU(II)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(TEMPMR,TEMPMI)
      CPERTU(LINCOL,LINROW)=CPERTU(LINCOL,LINROW)+DCMPLX(TEMPPR,TEMPPI)
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      FAKMAT=GMATCU(II,JJ,1)*GMAT(I,J,1)*FACZ
     1+FACXYH*(GMATCU(II,JJ,2)*GMAT(I,J,3)
     2+GMATCU(II,JJ,3)*GMAT(I,J,2))
      FAKMAT=FAKMAT*FAKGQK
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(FAKMAT,ZERO)
      IF(FISOTR.NE.ZERO)CPXMAT(LINCOL,LINROW)
     1=CPXMAT(LINCOL,LINROW)+DCMPLX(FISOTR*(FMATCU(II,JJ,1)*FMAT(I,J,1)
     1+FMATCU(II,JJ,2)*FMAT(I,J,4)
     2-FMATCU(II,JJ,3)*FMAT(I,J,5)),ZERO)
C**   Z-AXIS IS ION-ION AXIS
      IF(FANISO.NE.ZERO)THEN
      IF(ISTZXY.EQ.1)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+DCMPLX(FANISO*FMATCU(II,JJ,1)*FMAT(I,J,1),ZERO)
      ELSE IF(ISTZXY.EQ.2)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+DCMPLX(FANISO*FMATCU(II,JJ,2)*FMAT(I,J,4),ZERO)
      ELSE IF(ISTZXY.EQ.3)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1-DCMPLX(FANISO*FMATCU(II,JJ,3)*FMAT(I,J,5),ZERO)
      ENDIF
      ENDIF
 2212 CONTINUE
 2213 CONTINUE
 2214 CONTINUE
 2215 CONTINUE
      ENDIF
C
C**   CPERTU HAS TO BE THE WHOLE(!) MATRIX!:
      DO 2122 J=2,KASSMN
      JM1=J-1
      DO 3715 I=1,JM1
      CPERTU(I,J)=DCONJG(CPERTU(J,I))
 3715 CONTINUE
 2122 CONTINUE
C
 9999 CONTINUE
C
      CALL SUGANC(NRROUT
C**   HERE KASSMN INSTEAD OF IGRUND:
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,CPERTU,CFMATY
     3,KASSMN,JAVANV,MOROUT,NRSORT,NURTMQ
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,FMATCH,EIVEC,JACUGD)
C**   RETURNS TO SELECT!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANK
      END
      SUBROUTINE CHIMAG(JATEST,
C**   CALLED BY SUGANR OR BY SUGANC!
     1NRSORT,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE
     1,EIWERT,ZEEMAN,ZEEMA2,JAVANV,KASSMN,NRROUT,MOROUT,NRTEMP,JACUGD)
C     <=> CHI-MAGnetisation
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     1,EIWERT(*),ZEEMAN(*),ZEEMA2(*),EIWFKT,CHISII,SUMMIN,CHIQUP,CHISIJ
      DOUBLE PRECISION ZERO,HALF,ONE,TWO,AVOGAD,SIMUBC,SIMUBA,PREVOR
     1,VPREZ6,FKT,FKT2,BOLZCM,BOLTZM,FCHIS,FCHISI,SUM,ZCHI,EXPWKT,CHIQUO
      INTEGER KLICCH(4,4)
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29,SIMUBA=9.27402D-24
     1,BOLZCM=0.695040D0,VPREZ6=1.0D6/(4.D0*3.1415926D0),PREVOR=-AVOGAD
     2*SIMUBC,BOLTZM=1.380622D-23,FCHIS=AVOGAD*SIMUBA*SIMUBC/BOLTZM)
      SAVE
C**   Calculates Chi(molecular) in SI and in CGS units (CHISI, CHICGS)
C     and magnetisation Chi*field=CHISI*TESLAS=CHIFLD, for given temperature
C     (possibly minus THETA) TEMPTH (in Kelvin) and magnetic "field" TESLAS
C     (in Tesla) (CHIFLD not in the case of JAVANV <=> yes"VanVleck", if the
C     magnetic "field" is not given). FMAGNB, the magnetic moment, and FMUE,
C     the effective magnetic moment, both in Bohr magnetons, are also
C     calculated. As input needed: The energy eigenvalues EIWERT and the (neg.)
C     magnetic moments ZEEMAN resp. Zeeman-coefficients of first and second
C     order (ZEEMAN and ZEEMA2; for "JAVANV") for the lowest energy eigenvalues
C     ("niveaus") taken in account, their number being KASSMN. The lowest
C     EIWERT has always been set to zero. Half of Chi etc. calculated is taken,
C     if the calculation concerns a symmetric dimer ("NRROUT.GT.2"), for which
C     Heisenberg coupling and/or magnetic dipol-dipol interaction is taken
C     into account.
C     (THE G-FACTOR FOR SPIN IS CONTAINED IN THE ZEEMAN-COEFF.):
      DATA KLICK,JANO,KLICKT,NRNIV/0,0,0,0/
      DATA KLICCH/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/
      FKT=BOLZCM*TEMPTH
      SUM=ZERO
      ZCHI=ZERO
      IF(JAVANV.EQ.0)THEN
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
      SUM=SUM+ZEEMAN(I)*EXPWKT
  700 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
C**   THIS RESULT IS NEG. MAGN. MOMENT IN BOHR MAGNETONS:
      FMAGNB=-CHIQUO
      CHIFLD=PREVOR*CHIQUO
      CHISI=CHIFLD/TESLAS
      ELSE IF(JAVANV.NE.0)THEN
C**   FORMULA OF VANVLECK:
      FCHISI=FCHIS/TEMPTH
      FKT2=TWO*FKT
      DO 701 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
C**   IF KASSMM < KASSMN, MANY COEFF. OF SECOND ORDER ARE ZERO NOW
C     (BUT NONE BELONGING TO LOW ENERGY EIGENVALUES EIWERT):
      SUM=SUM+(ZEEMAN(I)-FKT2*ZEEMA2(I))*EXPWKT
  701 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
      CHISI=FCHISI*CHIQUO
      CHIFLD=CHISI*TESLAS
C**   THE MAGN. MOMENT IN BOHR MAGNETONS IS (ONLY DEFINED, IF TESLAS.NE.0.):
      FMAGNB=-CHIFLD/PREVOR
      ENDIF
C**   SPECIAL TEST (JATEST.NE.0.AND.MOROUT.NE.0):
      IF(JATEST.EQ.0.OR.MOROUT.EQ.0)GOTO 7771
      IF(KLICKT.EQ.0)THEN
      KLICKT=1
      WRITE(11,7772)
 7773 WRITE(*,7772)
 7772 FORMAT(' TEST: PUT IN in 3I4,I1 (All 0: NO TEST) NRNIV, MAGNNR, NI
     1VOUT, NOCANC!',/' NRNIV: CHI results from 1th, (1th+2nd), ... (1th
     2+...NRNIVth) eigenvalue only',/,' (intermediate result), MAGNNR: o
     3nly MAGNNR of these are magnetic (0=>all),',/,' NIVOUT: only NIVOU
     4T of these are put out (0=>21, but OUTPUT only once, -1=>0),',/
     5,' NOCANC: =1 for not to cancel the results of this test!')
      IF(LMN.EQ.0)THEN
      READ(77,'(3I4,I1)',ERR=5588,END=7774)NRNIV,MAGNNR,NIVOUT,NOCANC
      GOTO 7775
      ENDIF
 7774 READ(*,'(3I4,I1)',ERR=7773,END=4576)NRNIV,MAGNNR,NIVOUT,NOCANC
      LMN=1
 7775 WRITE(7,7776)NRNIV,MAGNNR,NIVOUT,NOCANC
 7776 FORMAT(3I4,I1,' =NRNIV,MAGNNR,NIVOUT,NOCANC')
      WRITE(*,7777)NRNIV,MAGNNR,NIVOUT,NOCANC
      WRITE(11,7777)NRNIV,MAGNNR,NIVOUT,NOCANC
 7777 FORMAT(I5,2I4,I1,' =NRNIV,MAGNNR,NIVOUT,NOCANC!!!!!!!!!')
      IF(NRNIV.GT.KASSMN)NRNIV=KASSMN
      IF(MAGNNR.EQ.0)MAGNNR=NRNIV
      MINOUT=0
      IF(NIVOUT.EQ.0)MINOUT=1
      IF(NIVOUT.EQ.0)NIVOUT=21
      ENDIF
      IF(NRNIV.LE.0)GOTO 7771
      SUM=ZERO
      SUMMIN=ZERO
      ZCHI=ZERO
      DO 7007 I=1,NRNIV
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
      SUM=SUM+ZEEMAN(I)*EXPWKT
      IF(I.LE.MAGNNR)SUMMIN=SUMMIN+ZEEMAN(I)*EXPWKT
      IF(JAVANV.NE.0)SUM=SUM-FKT2*ZEEMA2(I)*EXPWKT
      IF(I.LE.MAGNNR.AND.JAVANV.NE.0)SUMMIN=SUMMIN-FKT2*ZEEMA2(I)*EXPWKT
      CHIQUO=ZERO
      CHIQUP=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
      IF(ZCHI.NE.ZERO)CHIQUP=SUMMIN/ZCHI
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)THEN
      CHIQUO=CHIQUO*HALF
      CHIQUP=CHIQUP*HALF
      ENDIF
      IF(JAVANV.EQ.0)THEN
      CHISII=PREVOR*CHIQUO/TESLAS
      CHISIJ=PREVOR*CHIQUP/TESLAS
      ELSE IF(JAVANV.NE.0)THEN
      CHISII=FCHISI*CHIQUO
      CHISIJ=FCHISI*CHIQUP
      ENDIF
      IF(I.GT.NIVOUT.OR.(MINOUT.NE.0.AND.KLICKT.NE.1))GOTO 7007
      IF(I.EQ.1)WRITE(*,7778)
      IF(I.EQ.1)WRITE(11,7778)
 7778 FORMAT('     Part.function   <=>NRNIV(only)  <=>MAGNNR(too)')
      WRITE(*,'(I3,3D16.8)')I,ZCHI,CHISII,CHISIJ
      WRITE(11,'(I3,3D16.8)')I,ZCHI,CHISII,CHISIJ
 7007 CONTINUE
      KLICKT=2
      IF(NOCANC.NE.0)THEN
C**   NEW CHISI FOR FURTHER USE:
      IF(JAVANV.EQ.0)THEN
      FMAGNB=-CHIQUP
      CHIFLD=PREVOR*CHIQUP
      CHISI=CHIFLD/TESLAS
      ELSE IF(JAVANV.NE.0)THEN
      CHISI=FCHISI*CHIQUP
      CHIFLD=CHISI*TESLAS
      FMAGNB=-CHIFLD/PREVOR
      ENDIF
      ENDIF
 7771 CONTINUE
C**   END OF SPECIAL TEST!
C**   CHIFLT=CHIFLD*VPREZ6
      CHICGS=CHISI*VPREZ6
      FMUE=ZERO
C**   FMUE=SQRT(3.0*BOLTZM/(AVOGAD*SIMUBA*SIMUBC))
      IF(CHISI.GT.ZERO.AND.TEMPTH.GT.ZERO)FMUE
     1=797.730D0*DSQRT(CHISI*TEMPTH)
C     IF(CHICGS.GE.ZERO)FMUE=DSQRT(8.0D0*CHICGS*TEMPTH)
C**   FOOTNOTE: TEMPTH=TEMPERATURE IN KELVIN MINUS THETA FOR PSEUDO-FMUE!
      IF(MOROUT.NE.0)THEN
      IF(KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,77)
 8255 WRITE(*,77)
   77 FORMAT(
     1' MORE OUTPUT IN SUBROUTINE CHIMAG (FOR CHI/MAGN./MAGN.MOMENT)!',/
     2,' FIRST TEMP.: INPUT IN I1: MORE OUTPUT ONLY FOR THIS TEMP. YES(0
     3)/NO',/,' (2 => FIRST TEMP. OF EACH ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3446)JANO
      GOTO 4946
      ENDIF
 3446 READ(*,'(I1)',ERR=8255,END=4576)JANO
      LMN=1
 4946 WRITE(7,2396)JANO
 2396 FORMAT(I1,' =JANO OUTPUT IN CHIMAG')
      WRITE(*,2639)JANO
      WRITE(11,2639)JANO
 2639 FORMAT(I2,' =JANO OUTPUT IN CHIMAG!!!!!!!!!')
      ENDIF
      IF((JANO.EQ.0.AND.KLICCH(NRROUT,NRSORT).GT.0).OR
     1.(JANO.GE.2.AND.NRTEMP.GT.1))GOTO 777
      KLICCH(NRROUT,NRSORT)=1
      WRITE(*,70)CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     1,JAVANV,KASSMN,NRROUT,NRTEMP
      WRITE(11,70)CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     1,JAVANV,KASSMN,NRROUT,NRTEMP
   70 FORMAT(' CHI '
     1,'IN SI AND IN CGS, CHI*FIELD, TEMP.-THETA, FIELD, MAGN.MOMENT,',/
     2,' PSEUDO EFF.MAGN.MOM., "VANVLECK", No.OF MICRO ST. CONS.,'
     3/,' No. (1...4) OF ROUTINE, No.OF NEW TEMP.=',7D12.4,4I4)
  777 CONTINUE
      ENDIF
C**   NOW RETURN TO SUGAN...:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND CHIMAG
      END
      SUBROUTINE SCHEMA(
C**   CALLED BY TANABE OR BY CHANGE!
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW,KLWER3)
C**   Subroutine SCHEMA - running only once - has been written to give
C     all KASSUM micro states of NREL electrons (max. 13 el., if f el.), and
C     the maximum of KASSUM according to DIMENSION is ND2002. KASSUM=0,
C     if NREL=0. KLWERT = 0/1/2/3 is the l value corr. to s, p , d 
C     and f electrons and is given, KLWER3=3 always. The result of SCHEMA, the
C     consecutively and not arbitrarily (see below) numbered micro
C     states, is given in MSML and in a different form in MSMLNW. See below for
C     the manner they are stored! Some special sums of elements of MSML are
C     given in MQUER (see below).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      CHARACTER*27 VORMAT,VORMAU,TAMROF(1:13),TAMROG(0:3)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      DIMENSION MSML(ND2002,2,NREL14),MQUER(ND2002,3)
     1,MSMLNW(ND2002,2,-KLWER3:KLWER3)
      DATA TAMROF /
     1'(I5,5X,3I5,12X,1I2,22X,1I2)','(I5,5X,3I5,11X,2I2,20X,2I2)'
     1,'(I5,5X,3I5,10X,3I2,18X,3I2)','(I5,5X,3I5,9X,4I2,16X,4I2)'
     2,'(I5,5X,3I5,8X,5I2,14X,5I2)','(I5,5X,3I5,7X,6I2,12X,6I2)'
     3,'(I5,5X,3I5,6X,7I2,10X,7I2)','(I5,5X,3I5,5X,8I2,8X,8I2)'
     4,'(I5,5X,3I5,5X,9I2,6X,9I2)','(I5,5X,3I5,5X,10I2,5X,10I2)'
     5,'(I5,5X,3I5,5X,11I2,5X,11I2)','(I5,5X,3I5,5X,12I2,5X,12I2)'
     6,'(I5,5X,3I5,5X,13I2,5X,13I2)'/
      DATA TAMROG /'(I5,3X,3I5,I14,I25)','(I5,3X,3I5,I12,2I2,I21,2I2)',
     1'(I5,3X,3I5,I10,4I2,I17,4I2)','(I5,3X,3I5,I8,6I2,I13,6I2)'/
      DATA KLICKS,MOROUU/0,0/
C(NO) SAVE
      IF(MORTEX.GT.0)THEN
      WRITE(*,9141)
      WRITE(11,9141)
 9141 FORMAT(' HERE IS SUBROUTINE SCHEMA TO PREPARE ALL MICRO STATES')
      ENDIF
      IF(NREL.EQ.0)THEN
      KASSUM=0
      RETURN
      ENDIF
      IF(KLICKS.EQ.0.AND.MOROUT.NE.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-SCHEMA IN I1!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3447)MOROUU
      GOTO 4947
      ENDIF
 3447 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4947 WRITE(*,2739)MOROUU
      WRITE(11,2739)MOROUU
 2739 FORMAT(I2,' =MOROUU IN SCHEMA!!!!!!!!!')
      WRITE(7,2397)MOROUU
 2397 FORMAT(I1,' =MOROUU IN SCHEMA')
      ENDIF
      VORMAT=TAMROF(NREL)
      VORMAU=TAMROG(KLWERT)
      NRMXDI=2*(2*KLWERT+1)
      DO 33 N=1,NREL
      MQUER(N,1)=NRMXDI-N
      MQUER(N,2)=NREL-N
   33 CONTINUE
C
      KASSUM=0
C**   INFINITE LOOP:
   99 CONTINUE
      II=NREL
      KASSUM=KASSUM+1
      IF(KASSUM.GT.ND2002)STOP 'KASSUM'
      DO 21 N=1,NREL
      MSML(KASSUM,1,N)=MQUER(N,1)
   21 CONTINUE
      MQUER(II,1)=MQUER(II,1)-1
   22 CONTINUE
      IF(MQUER(II,1).LT.MQUER(II,2))THEN
      II=II-1
      IF(II.EQ.0)GOTO 55
      MQUER(II,1)=MQUER(II,1)-1
      GOTO 22
      ENDIF
      IIP1=II+1
      DO 3 I=IIP1,NREL
      IM1=I-1
      MQUER(I,1)=MQUER(IM1,1)-1
    3 CONTINUE
      GOTO 99
C
   55 CONTINUE
      DO 56 I=1,KASSUM
      DO 54 II=1,NREL
      MSML(I,2,II)=-1
      IF(((MSML(I,1,II)/2)*2-MSML(I,1,II)).NE.0)THEN
      MSML(I,2,II)=1
      MSML(I,1,II)=MSML(I,1,II)-1
      ENDIF
      MSML(I,1,II)=MSML(I,1,II)/2-KLWERT
   54 CONTINUE
   56 CONTINUE
C
      DO 112 I=1,KASSUM
      MQUER(I,1)=0
      MQUER(I,2)=0
      DO 111 N=1,NREL
      MQUER(I,1)=MQUER(I,1)+MSML(I,1,N)
      MQUER(I,2)=MQUER(I,2)+MSML(I,2,N)
  111 CONTINUE
      MQUER(I,3)=2*MQUER(I,1)+MQUER(I,2)
  112 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(11,9940)KASSUM
 8255 WRITE(*,9940)KASSUM
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3448)KASSUL
      GOTO 4948
      ENDIF
 3448 READ(*,'(I4)',ERR=8255,END=4576)KASSUL
      LMN=1
 4948 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
 2398 FORMAT(I4,' =KASSUL("No.OF ROWS")')
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
 2399 FORMAT(I5,' =KASSUL("No.OF ROWS")!!!!!!!!!')
      WRITE(*,9911)
      WRITE(11,9911)
      DO 9999 II=1,KASSUL
      WRITE(*,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I=1,NREL)
      WRITE(11,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I=1,NREL)
 9999 CONTINUE
 9911 FORMAT(
C - RESULT FROM FILE 11, FOR 3 (D)EL. HERE PARTLY INCLUDED, IS:
     1' No.OF STATE  SUM SUM SUM (MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I
     1=1,NREL)')
C    1         5    1   11           2 2 1                   1-1 1
C    2         5   -1    9           2 2 1                   1-1-1
C    3         4    1    9           2 2 0                   1-1 1
C    4         4   -1    7           2 2 0                   1-1-1
C    5         3    1    7           2 2-1                   1-1 1
C    6         3   -1    5           2 2-1                   1-1-1
C    7         2    1    5           2 2-2                   1-1 1
C    8         2   -1    3           2 2-2                   1-1-1
C    9         4    1    9           2 1 1                   1 1-1
C   10         3    3    9           2 1 0                   1 1 1
C   .........
C CONCERNING (MSML(II,1,I),I=1,NREL): THE NUMBERS PRINTED ABOVE ARE SUCH
C THAT EACH NUMBER (E.G. 1) IS EQUAL TO OR SMALLER THAN THE PRECEDING ONE!
C (MSML(II,2,I),I=1,NREL): THE FIRST NUMBER IS 1 OR -1; IF THERE ARE TWO
C NUMBERS EQUAL TO EACH OTHER IN (MSML(II,1,I),I=1,NREL), THE PAIR 1 -1
C BELONGS TO THESE!
C IF KLWERT IS ADDED TO EACH ML NUMBER, E.G.
C    8         2   -1    3      4 4 0      1-1-1
C    9         4    1    9      4 3 3      1 1-1
C   10         3    3    9      4 3 2      1 1 1
C EACH NUMBER BECOMES A DIGIT, AND IF E.G. 4 4 0 IS TAKEN AS THE NUMBER 440,
C EACH OF THESE NEW NUMBERS OF A GIVEN ROW IS SMALLER THAN OR EQUAL TO THE
C NUMBER OF A PRECEDING ROW!
      ENDIF
C
C**   "CHANGE OF STORE" TO MSMLNW(ND2002,2,-KLWER3:KLWER3), KLWER3=KLWERT!:
      DO 1 I=1,ND2002
      DO 12 J=1,2
      DO 123 K=-KLWER3,KLWER3
      MSMLNW(I,J,K)=0
  123 CONTINUE
   12 CONTINUE
      DO 2 K=1,NREL
      IF(MSML(I,2,K).EQ.1)THEN
      MSMLNW(I,1,MSML(I,1,K))=1
      ELSE
      MSMLNW(I,2,MSML(I,1,K))=-1
      ENDIF
    2 CONTINUE
    1 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,9941)
      WRITE(11,9941)
      WRITE(11,9940)KASSUM
 8256 WRITE(*,9940)KASSUM
 9940 FORMAT(
     1' THERE ARE',I5,' MICRO STATES! OUTPUT OF ALL OR OF .. (IN I4)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3449)KASSUL
      GOTO 4949
      ENDIF
 3449 READ(*,'(I4)',ERR=8256,END=4576)KASSUL
      LMN=1
 4949 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
      DO 9991 II=1,KASSUL
      WRITE(*,VORMAU)II,(MQUER(II,I),I=1,3)
     1,(MSMLNW(II,1,I),I=-KLWERT,KLWERT)
     2,(MSMLNW(II,2,I),I=-KLWERT,KLWERT)
      WRITE(11,VORMAU)II,(MQUER(II,I),I=1,3)
     1,(MSMLNW(II,1,I),I=-KLWERT,KLWERT)
     2,(MSMLNW(II,2,I),I=-KLWERT,KLWERT)
 9991 CONTINUE
      ENDIF
C
 9941 FORMAT(' No.OF ST.  SUM',
C - RESULT FROM FILE 11, FOR 3 (D)EL. HERE PARTLY INCLUDED, IS:
     1' SUM SUM  MSMLNW(II,1,-KLWERT:+KL..) MSMLNW(II,2,-KL..:+KL..)')
C    1       5    1   11         1 1 0 0 0               -1 0 0 0 0
C    2       5   -1    9         1 0 0 0 0               -1-1 0 0 0
C   .........
C
C**   RETURNS TO TANABE OR TO CHANGE!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND SCHEMA
      END
      SUBROUTINE COMPRE(
     1IOPT,KK,MP,II,JJ,NREL,MSML,NREL14,MQUER,MSMLCO,ND2002,NK)
C**   CALLED BY TANABE!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/ABC/MNUR4(2,2),MNUR4C(2,2)
      DIMENSION MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
      INTEGER NR(2)
      SAVE
      DATA NR/0,0/
C
C**   Subroutine COMP(A)RE has been written to compare two of a maximum
C     of ND2002 micro states of NREL electrons (actually the number of states is
C     KASSUM and in most cases lower than ND2002). The micro states ae numbered
C     consecutively (not arbitrarily) and stored in MSML,
C     the actual numbers of the two micro states concerned are II and JJ.
C     Special sums of elements of MSML are given in MQUER. There are three
C     options, IOPT=0, 1 and 2, according to the comparisons needed for
C     the non-diagonal elements of the matrices of crystal field, spin-
C     orbit coupling and electron-electron repulsion, respectively.
C
C     This subroutine is called by TANABE, where the corresponding matrices
C     are calculated, and before each call MP is set to 1, KK to -1 and
C     the variables in COMMON/ABC/ to 0. NREL14=14, the maximum nunber of
C     f elctrons, is not really needed (may be *). If comparison is
C     successfull, KK will become 2 for IOPT=2 and 1 else. According to
C     the interchanges necessary to change the conventional order of sets
C     in the second micro state to the order needed to compare with the
C     sets in the first state (Condon/Shortley page 172), an even or odd
C     number, MP remains 1 or becomes -1. For spin-orbit coupling, an
C     interchange is never needed and MP remains 1. For crystal field,
C     i.e. IOPT=0, NK, i.e. q of the Bqk-value as defined by Wybourne, is always
C     determined, but it may be not correct, if KK.NE.1. The comparison
C     is successfull, if exactly one different set is found for IOPT.NE.2
C     and exactly two different sets are found for IOPT=2. These sets
C     are stored in COMMON/ABC/ to be used in TANABE.
C     NK is set to 0 here and possibly changed below:
      NK=0
C
C**   IN THE FIRST IF-BLOCK NOW FOLLOWING A SCREENING IN ADVANCE!:
      IF(IOPT.LE.0)THEN
C**   NON-DIAG. ELEMENTS CRYSTAL FIELD: 1(!)-EL. OPERATOR!
C     SPIN AND ANYTHING ELSE MUST BE THE SAME, EXCEPT ONE
C     ML VALUE, WHICH IS NOT EQUAL TO ML-DASH (CONDON/SH.P.171 EQ.(8)).
C**   FIRST SPIN: IF THE DIFFERENCE OF THE SUMS OF MS IS NOT ZERO,
C     THE MS CANNOT BE THE SAME, AND COMPARISON WAS NOT SUCCESSFULL:
      IF(MQUER(II,2).NE.MQUER(JJ,2))RETURN
C**   THEN ML VALUES:
      NK=IABS(MQUER(II,1)-MQUER(JJ,1))
      IF(IOPT.EQ.0.AND.(NK.LT.1.OR.NK.GT.6))RETURN
C**   IF NO RETURN: NK IS THE Q VALUE, IF(!) ONE DIFF. WILL BE FOUND!
      ELSE IF(IOPT.EQ.1)THEN
C**   NOW NON-DIAG. ELEMENTS OF SPIN-ORB. COUPL. (1(!)-EL. OPERATOR)!
C**   THE SUM OF THE SUMS OF MS(SPIN!) AND ML VALUES MUST BE EQUAL:
      IF(MQUER(II,3).NE.MQUER(JJ,3))RETURN
      ELSE IF(IOPT.EQ.2)THEN
C**   FOR THE EL.-EL. REPULSION!:
C**   SUM OF MS VALUES(SPIN!) AND SUM OF ML VALUES MUST BE EQUAL!:
      IF(MQUER(II,1).NE.MQUER(JJ,1))RETURN
C**   AND THE SPIN!:
      IF(MQUER(II,2).NE.MQUER(JJ,2))RETURN
      ELSE
      STOP 'ERR 2'
      ENDIF
C     ALL OPTIONS MAY CONTINUE!
C
C**   THERE MUST BE EXACTLY(!) KK=2 OR KK=1 DIFFERENT SETS CORRESPONDING TO
C     IOPT=2 OR IOPT="OTHER"!
C
C     AT FIRST MSML FOR STATE II WILL BE COPIED, THEN THE NUMBER OF DIFFERENT
C     SETS AND MP WILL BE DETERMINED, AND THE (MAX.) 2 DIFFERENCES WILL BE
C     STORED!:
      DO 1 J=1,NREL
      DO 2715 I=1,2
      MSMLCO(I,J)=MSML(II,I,J)
 2715 CONTINUE
    1 CONTINUE
C
C**   THE FOLLOWING CASE IS ALREADY FINISHED HERE:
C     IOPT=1 AND 1(!) EL.:
      IF(IOPT.EQ.1.AND.NREL.EQ.1)THEN
      MNUR4C(1,2)=MSMLCO(1,1)
C**   ,2), BECAUSE THE FIRST(!) DIFFERENCE IS STORED TO THE RIGHT(2!)!
      MNUR4C(2,2)=MSMLCO(2,1)
      KK=1
      RETURN
      ENDIF
C
C**   MICRO STATES JJ AND II: THE NUMBER OF DIFFERENT SETS ARE DETERMINED NOW!
C     (THE NUMBER OF (OF COURSE DIFFERENT) SETS IN EACH MICRO STATE IS NREL!):
      KKK=0
      DO 22 J=1,NREL
      KKKALT=KKK
      DO 2 I=1,NREL
      IF(MSML(JJ,1,J).EQ.MSMLCO(1,I)
     1.AND.MSML(JJ,2,J).EQ.MSMLCO(2,I))THEN
C**   ,1, AND ,2, MEAN ML RESP. MS!
      KKK=KKK+1
C**   ONE MORE CORRESPONDING SET WAS FOUND!
      ENDIF
    2 CONTINUE
      IF(KKK.EQ.KKKALT)THEN
      NR(1)=NR(2)
C**   FOR THE J ABOVE A CORRESPONDING SET WAS SURELY NOT FOUND! - THIS J IS
C     STORED "TO THE RIGHT" IN NR; TWO NR'S, NR(2) AND NR(1), WILL SUFFICE,
C     BECAUSE NR IS USED ONLY IN THE CASE OF MAX. TWO DIFFERENT SETS!:
      NR(2)=J
      ENDIF
   22 CONTINUE
C**   THE NUMBER OF DIFFERENT SETS IS NOW:
      KK=NREL-KKK
C
C**   NOW RETURN, IF KK DOES NOT CORRESP. TO OPTION!:
      IF(IOPT.EQ.2.AND.KK.NE.2)RETURN
      IF(IOPT.NE.2.AND.KK.NE.1)RETURN
C**   NOT CHANGED UP TO NOW: MP=1!
C
C     THE SETS OF THE MICRO STATE IN THE COPY MSMLCO HAVE POSSIBLY TO BE
C     INTERCHANGED BEFORE COMPARED WITH THE STANDARD ORDER OF SETS IN MSML:
C     MP=+-1, CORRESPONDING TO AN EVEN OR ODD NUMBER OF INTERCHANGES NECESSARY,
C     IS TO BE DETERMINED!:
      DO 222 I=1,NREL
C**   IF ONE KNOWS, THAT THERE IS NO COUNTERPART, ONE NEEDS NOT TO LOOK FOR
C     ONE ("I=NR")!:
      IF(I.EQ.NR(2))GOTO 222
      IF(IOPT.EQ.2.AND.I.EQ.NR(1))GOTO 222
      IF(MSML(JJ,1,I).NE.MSMLCO(1,I)
C**   OR THE SPIN:
     1.OR.MSML(JJ,2,I).NE.MSMLCO(2,I))THEN
C**   IF THE COPY MSMLCO(..,I) IS IDENTICAL TO MSML(JJ,..,I) FOR THE I IN
C     QUESTION, NOTHING NEEDS TO BE DONE! - IF NOT, LOOK FOR THE COUNTERPART..
      DO 221 I2=1,NREL
      IF(MSML(JJ,1,I).EQ.MSMLCO(1,I2)
C**   AND THE SPIN:
     2.AND.MSML(JJ,2,I).EQ.MSMLCO(2,I2))THEN
C**   ... AND CHANGE PLACES!:
      IDUMM1=MSMLCO(1,I2)
      IDUMM2=MSMLCO(2,I2)
      MSMLCO(1,I2)=MSMLCO(1,I)
      MSMLCO(2,I2)=MSMLCO(2,I)
      MSMLCO(1,I)=IDUMM1
      MSMLCO(2,I)=IDUMM2
C**   FACTOR OF -1 FOR EACH INTERCHANGE!:
      MP=MP*(-1)
C**   THE SET HAS BEEN INTERCHANGED NOW; IT MUST NOT BE FOUND ONCE MORE,
C     THEREFORE!:
      GOTO 222
      ENDIF
  221 CONTINUE
      ENDIF
  222 CONTINUE
C
C**   NOW MP HAS BEEN DETERMINED, THE (MAX.) 2 DIFFERENCES WILL BE STORED!:
      DO 33 J0=1,2
C**   J0=2 WOULD SUFFICE, IF THERE IS ONLY ONE DIFFERENT SET; NR(1)=0
C     IS THEN EV. POSSIBLE AND MIGHT CAUSE ERROR!:
      IF(NR(J0).EQ.0)GOTO 33
      DO 3 I0=1,2
      MNUR4(I0,J0)=MSML(JJ,I0,NR(J0))
C**   IN MNUR4( ,2) THE ORIGINAL ML RESP. MS (RESP. 2*MS) IS STORED!
      MNUR4C(I0,J0)=MSMLCO(I0,NR(J0))
C**   IN MNUR4C( ,2) THE ML RESP. MS TO BE COMPARED WITH IS STORED
C     (THE OTHER SETS IN MSML CORRESPOND TO THOSE IN MSMLCO, AFTER
C     INTERCHANGING, IF IOPT.NE.2)!
C**   (FOR IOPT.EQ.2:) IN MNUR4( ,1) THE SECOND ORIGINAL ML RESP. MS
C     (RESP. 2*MS) IS STORED, AND IN MNUR4C( ,1) THE SECOND ML RESP.
C     MS (RESP. 2*MS) TO BE COMPARED WITH IS STORED, AFTER INTERCHANGING!
    3 CONTINUE
   33 CONTINUE
C
C**   RETURNS TO TANABE!:
      RETURN
CEND COMPRE
      END
      SUBROUTINE NUMBER(NR,MSMLNW,MSMLNR,ND2002,KLWERT,KASSUM,KLWER3)
C**   CALLED BY REDUCT, RUSSEL, SAUNDE, CHANGE AND MATRIW!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      INTEGER MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNR(2,-KLWER3:KLWER3)
C
C**   EVALUATION OF NR IN MSMLNW(NR, , ) FOR GIVEN MSMLNR( , )!:
C     KLWERT = 0/1/2/3 is the l value corr. to s, p , d 
C     and f electrons and is given, KLWER3=3 always.
C**   Subroutine NUMBER has been written to evaluate the number NR of one
C     of a maximum of ND2002 micro states of NREL electons (actually the
C     number of states is KASSUM and in most cases lower than ND2002), which
C     are numbered consecutevely and stored in MSMLNW. The micro state looked
C     for is given in MSMLNR.
      SAVE
      IHIGH=1
      ILOW=KASSUM
      NR=KASSUM/2
      ISUM=0
    3 CONTINUE
      ISUM=ISUM+1
      IF(ISUM.GT.20)STOP 'ISUM.GT.'
      DO 1 J=KLWERT,-KLWERT,-1
      DO 2 I=1,2
      IF(MSMLNR(I,J).NE.MSMLNW(NR,I,J))THEN
      IF(MSMLNR(I,J).EQ.0)THEN
      IHIGH=NR
      NR=ILOW-(ILOW-IHIGH)/2
      ELSE
      ILOW=NR
      NR=IHIGH+(ILOW-IHIGH)/2
      ENDIF
      GOTO 3
      ENDIF
    2 CONTINUE
    1 CONTINUE
C**   RETURNS TO REDUCT, RUSSEL, SAUNDE, CHANGE OR MATRIW!:
      RETURN
CEND NUMBER
      END
CEND-FILE SUGANO.F
      SUBROUTINE TANFEL(NGROUP,
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   CALLED BY REDUCT(ANABE) TO SAVE TIME, IF THERE ARE MANY ITERATIONS
C     AND/OR MANY PARAMETERS TO FIT. - CALLS SELECT, AND CALLS/USES
C     MATRIV, MATRIW, TRANSF AND DSPEV(W), TOO!
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS,KASSUM,EIVECV
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL, THE PRESENT SUBROUTINE, IN ADDITION:
     6,FMIKR2,FMIKR3,EIVSHT,NRVALF,ND2002,TAFMAT,TAGMAT,TAWERT
     6,CRYMAT,WERMAT,BSTART,FACZ,FACXY,REDFAZ
     7,MSML,MSMLCO,MSMLNW,KLWER3,MSMLNS,MQUER,NOFROW,NROFNR,JAFAST
     7,CRZMAT)
C
C**   FMIKR3 BECOMES PART OF EIVECV OF THE VERY FIRST RUN AND IS NEVER CHANGED!
C
C  SUPPLEMENT TO TAN(ABE) (FOR CRYSTAL FIELD OF) F EL., IF(JAFAST.NE.0)!
C  IT IS CALLED BY REDUCT AND CALLS SELECT JUST AS REDUCT, BUT WITH
C  A NEW EIWERT, A NEW FMAT AND A NEW GMAT INSTEAD OF THE OLD EIWERT, THE
C  OLD FMAT AND THE OLD GMAT, AND THE NEW FMAT AND THE NEW GMAT MAY BE SMALLER
C  THAN THE OLD FMAT AND THE OLD GMAT! TAWERT/TAFMAT/TAGMAT SAVE THE OLD
C  EIWERT/FMAT/GMAT!
C  SUBROUTINE TANFEL IS A SUPPLEMENT TO SUBROUTINE REDUCT FOR HANDLING (SMALL)
C  CHANGES OF THE CRYSTAL FIELD PARAMETERS! A FURTHER DIAGONALIZATION IS NEEDED,
C  AND FOR REDUCTION HERE IN SUBROUTINE TANFEL IN ANY CASE, ALSO IF REDUCTION
C  DOES NOT REALLY TAKE PLACE, SUBROUTINE TRANSF ("SIMILARITY TRANSFORMATION")
C  IS CALLED!
C  ATTENTION: FMAT AND GMAT => TAFMAT AND TAGMAT (ONLY), IF THERE IS THE
C  VERY FIRST CALL OF TANFEL. TAFMAT AND TAGMAT ARE IN SUBROUTINE TRANSF
C  TRANSFORMED TO FMAT AND GMAT THEN, AND SELECT IS CALLED WITH THESE NEW FMAT
C  AND GMAT!
C**  SEE BELOW ("SUBROUTINE MATRIV") FOR INFORMATION ABOUT SAVING OF TIME!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARWUC=1.0D-8)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=36)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
C
      DOUBLE PRECISION FMIKR2(ND2002,*),FMIKR3(ND2002,NDS66)
     1,EIVSHT(ND2002,I10),CRYMAT(NDS66,NDS66,11)
     2,WERMAT(NDS66,*),BSTART(24),BWWWNW(24),REDFAZ(3)
      DOUBLE PRECISION CRZMAT(NDS66,NDS66,4)
      DIMENSION FMAT(ND252,ND252,5),GMAT(ND252,ND252,3)
     1,EIWERT(*),EIVEC(NDS66,*),DUMMY(NDMAL3),EIVECV(ND2002,*)
     2,TAFMAT(NDS66,NDS66,3),TAGMAT(NDS66,NDS66,2),TAWERT(NDS66)
     1,FMATCH(*),DIRECZ(*),EIVAL0(*),EIVAL1(*),EIVAL2(*)
     2,ZEEMN0(*),ZEEMN1(*),ZEEMN2(*),ZEMN20(*),ZEMN21(*),ZEMN22(*)
     3,PERTUR(*),FMATY(*),DUMMYD(*)
      COMPLEX*16 CPERTU(*),CFMATY(*)
      INTEGER MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
     1,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNS(2,-KLWER3:KLWER3)
     2,IVORN(24),IVIER(24)
     7,NOFROW(ND2002,I10),NROFNR(ND2002)
     8,KLBWWW(24)
      SAVE
C
      DATA KLBWWW/24*0/
      DATA IVORN/2,2,4,4,4,4,6,6,6,6,6,0,0,0,0,0,0,0,0,0,2,4,6,6/
      DATA IVIER/0,2,0,2,3,4,0,2,3,4,6,0,0,0,0,0,0,0,0,0,1,1,1,5/
      DATA KLICK,MOROUU/0,0/
C
      IF(KLICK.EQ.0)THEN
      KLICK=1
      IF(J2.NE.J20)STOP 'J.NE.J'
C
      IF(JAFAST.LE.1)THEN
C     (JAFAST.EQ.2 <=> INTERFACE WAS READ IN FORMAT FREE)
C**   ONLY FOR THE VERY FIRST CALL OF TANFEL:
      DO 259 I=1,24
      BSTART(I)=BWWW(I)
  259 CONTINUE
C
      DO 1247 J=1,NRVALF
      TAWERT(J)=EIWERT(J)
      DO 7146 I=1,KASSUM
C**   FMIKR3 NEEDED FOR JAFAST > 0. IT HOLDS EACH NEW EIVECV FROM ABOVE:
      FMIKR3(I,J)=EIVECV(I,J)
 7146 CONTINUE
 1247 CONTINUE
C
      DO 2266 K=1,3
      KP2=K+2
      DO 2265 J=1,NRVALF
      DO 2264 I=1,NRVALF
C**   FMAT => TAFMAT AND GMAT => TAGMAT!:
      IF(K.EQ.1)THEN
      TAFMAT(I,J,K)=FMAT(I,J,K)
      ELSE
      TAFMAT(I,J,K)=FMAT(I,J,KP2)
      ENDIF
      IF(K.LE.2)TAGMAT(I,J,K)=GMAT(I,J,K)
 2264 CONTINUE
 2265 CONTINUE
 2266 CONTINUE
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(JAFAST.LE.1)THEN"!
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8257 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-TANFEL; =0, 1 OR 2!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3450)MOROUU
      GOTO 4950
      ENDIF
 3450 READ(*,'(I1)',ERR=8257,END=4576)MOROUU
      LMN=1
 4950 WRITE(*,2004)MOROUU
      WRITE(11,2004)MOROUU
 2004 FORMAT(I2,' =MOROUU IN TANFEL!!!!!!!!!')
      WRITE(7,2400)MOROUU
 2400 FORMAT(I1,' =MOROUU IN TANFEL')
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(KLICK.EQ.0)THEN"!
C     BREAK OF ALL IF'S
C
C**   NOW FOLLOWING: THE CRYSTAL FIELD (SEE CONDON/SH. PP.169,170,171;
C     AND GRIFFITH P.196,EQ.(8.4))!:
C     (SEE ALSO SUBR. COMPRE - IOPT=0)
C
C**   THE DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(9))!:
C
      IF(NEUEBS.EQ.0)GOTO 2287
C
      DO 258 I=1,24
      BWWWNW(I)=-BSTART(I)+BWWW(I)
  258 CONTINUE
C
      DO 345 JABNNR=1,7
      IF(JABNNR.EQ.2.OR.JABNNR.EQ.4.OR.JABNNR.EQ.5.OR.JABNNR.EQ.6)
     1GOTO 345
C
C**   B2W - B4W - B6W:
      IF(KLBWWW(JABNNR).EQ.0.AND.BWWWNW(JABNNR).NE.ZERO)THEN
      KLBWWW(JABNNR)=1
C
      CALL MATRIV(JABNNR,IVORN(JABNNR),NRVALF,KASSUM,ND2002,KLWERT,MSML
     1,NREL14,NREL,CRYMAT(1,1,JABNNR),FMIKR3,NDS66,MOROUU,EIVSHT)
      ENDIF
C
  345 CONTINUE
C
C**   AND THE NON-DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(8))!:
C
      DO 456 JABNNR=2,11
      IF(JABNNR.EQ.3.OR.JABNNR.EQ.7)GOTO 456
C
C**   B22W - B42W - B43W - B44W - B62W - B63W - B64W - B66W:
      IF(KLBWWW(JABNNR).EQ.0.AND.BWWWNW(JABNNR).NE.ZERO)THEN
      KLBWWW(JABNNR)=1
C
      CALL MATRIW(JABNNR,IVORN(JABNNR),IVIER(JABNNR),NRVALF,KASSUM,FMIKR
     13,ND2002,KLWERT,MSMLNW,KLWER3,MSMLNS,MQUER,CRYMAT,NDS66,MOROUU,EIV
     2SHT,NDUPDO,NOFROW,NROFNR)
      ENDIF
C
  456 CONTINUE
C
C**   THE MATRICES ARE ADDED NOW, FOR THE FIRST RUN, TOO, ALTHOUGH
C     ALL B-VALUES ("DIFFERENCES"!) AND ALL MATRICES ARE ZERO:
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,4111)(BWWWNW(I),I=1,11)
      WRITE(11,4111)(BWWWNW(I),I=1,11)
 4111 FORMAT(' BWWWNW(1:11)=',4D16.8)
      IF(IN24.GT.20)THEN
      WRITE(*,4114)(BWWWNW(I),I=21,24)
      WRITE(11,4114)(BWWWNW(I),I=21,24)
 4114 FORMAT(' BWWWNW(21:24)=',4D16.8)
      ENDIF
      ENDIF
C
      DO 3111 J=1,NRVALF
      DO 1715 I=1,NRVALF
      WERMAT(I,J)=ZERO
      IF(I.EQ.J)WERMAT(I,I)=TAWERT(I)
 1715 CONTINUE
 3111 CONTINUE
C
C**   TAWERT IS ONE DIMENSIONAL AND CONTAINS, IN REDUCED FORM, EL.-EL.
C     REPULSION ENERGY, SPIN-ORBIT COUPLING ENERGIES AND (THE MAIN PART OF)
C     CRYSTAL FIELD ENERGIES!:
C
      DO 5111 K=1,11
      IF(BWWWNW(K).EQ.ZERO)GOTO 5111
      DO 7111 J=1,NRVALF
      DO 6111 I=1,NRVALF
      WERMAT(I,J)=WERMAT(I,J)+CRYMAT(I,J,K)*BWWWNW(K)
 6111 CONTINUE
 7111 CONTINUE
 5111 CONTINUE
C
      IF(IN24.GT.20)THEN
      IF(IN24.NE.24)STOP 'JAFAST'
      DO 2425 JABNNR=21,24
C**   B21W - B41W - B61W - B65W:
      IF(KLBWWW(JABNNR).EQ.0.AND.BWWWNW(JABNNR).NE.ZERO)THEN
      KLBWWW(JABNNR)=1
C
      JABNNM=JABNNR-20
      CALL MATRIW(JABNNM,IVORN(JABNNR),IVIER(JABNNR),NRVALF,KASSUM,FMIKR
     13,ND2002,KLWERT,MSMLNW,KLWER3,MSMLNS,MQUER,CRZMAT,NDS66,MOROUU,EIV
     2SHT,NDUPDO,NOFROW,NROFNR)
      ENDIF
 2425 CONTINUE
      ENDIF
C
      DO 5112 K=1,4
      KP20=K+20
      IF(BWWWNW(KP20).EQ.ZERO)GOTO 5112
      DO 7112 J=1,NRVALF
      DO 6112 I=1,NRVALF
      WERMAT(I,J)=WERMAT(I,J)+CRZMAT(I,J,K)*BWWWNW(KP20)
 6112 CONTINUE
 7112 CONTINUE
 5112 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' MATRIX WERMAT, COLUMNS (GIVEN AS ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVALF
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUT=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUT.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEM.!')
      ENDIF
      DO 1005 J=1,KASI
      WRITE(11,2010)(WERMAT(I,J),I=J,NRVALF)
      WRITE(*,2010)(WERMAT(I,J),I=J,NRVALF)
 2010 FORMAT(6(1X,D12.4))
 1005 CONTINUE
      ENDIF
C
C**   MATRIX WERMAT WILL BE DIAGONALIZED NOW!:
      NDS6QU=NDS66**2
C
C**   EIVEC MUST NOT HAVE ANY OTHER DIMENSION HERE THAN THAT GIVEN ABOVE!
C
      CALL DSPEVW(1,WERMAT,WERMAT,EIWERT,EIVEC,NDS66,NRVALF,DUMMY
     1,NDMAL3,NDS6QU)
C
      EIWER1=EIWERT(1)
C**   TAWERT NOW CHANGED TO EIWERT, NRVALF => NRVAL, BUT IN SPITE OF THIS:
      DO 4447 I=1,NRVALF
      EIWERT(I)=EIWERT(I)-EIWER1
 4447 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2226)EIWER1
 2226 FORMAT(/,' EIGENVALUES (1...NRVAL ONLY), IN ASCENDING ORDER (IN RO
     1WS):',/,D20.12,' ... BECOMES:')
      WRITE(11,2226)EIWER1
      WRITE(11,2010)(EIWERT(I),I=1,NRVAL)
      WRITE(*,2010)(EIWERT(I),I=1,NRVAL)
C
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' MATRIX OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVAL
      IF(KASI.EQ.1)WRITE(11,1012)
 1012 FORMAT(' BECAUSE MOROUT'
     1,'=1, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      DO 101 J=1,KASI
C**   EIVEC(1...NRVALF,1...(MAX.)NRVAL)!:
      WRITE(11,2010)(EIVEC(I,J),I=1,NRVALF)
      WRITE(*,2010)(EIVEC(I,J),I=1,NRVALF)
  101 CONTINUE
      ENDIF
C
      IGR1=NRVALF
      IGRPL=IGR1+1
      DIFLOW=ZERO
      DO 4448 I=2,NRVALF
      EIWER1=DABS(EIWERT(I))
      IF(EIWER1.GT.PARWUC)THEN
      DIFLOW=EIWERT(I)
      IGR1=I-1
C**   IGR=I
      IGRPL=I+1
      GOTO 4449
      ENDIF
 4448 CONTINUE
 4449 CONTINUE
C
      IGR2=NRVALF
      DO 4450 I=IGRPL,NRVALF
      EIWER1=DABS(EIWERT(I)-DIFLOW)
      IF(EIWER1.GT.PARWUC)THEN
      IGR2=I-1
      GOTO 4451
      ENDIF
 4450 CONTINUE
 4451 IGR2=IGR2-IGR1
C
C**   FIRSTLY FOR FMAT: TAFMAT => FMAT (AND NRVALF => NRVAL)!:
      K=1
      CALL TRANSF(ND252,NDS66,NRVALF,NRVAL,TAFMAT(1,1,K),EIVEC
     1,FMAT(1,1,K),MOROUU,K,1)
      DO 2277 K=2,3
      KP2=K+2
      CALL TRANSF(ND252,NDS66,NRVALF,NRVAL,TAFMAT(1,1,K),EIVEC
     1,FMAT(1,1,KP2),MOROUU,K,1)
 2277 CONTINUE
C
      DO 2255 K=1,2
C**   AND THEN FOR GMAT: TAGMAT => GMAT!:
      CALL TRANSF(ND252,NDS66,NRVALF,NRVAL,TAGMAT(1,1,K),EIVEC
     1,GMAT(1,1,K),MOROUU,K,2)
 2255 CONTINUE
C
      DO 2211 I=1,NRVAL
      DO 2200 J=1,NRVAL
      GMAT(I,J,3)=GMAT(J,I,2)
 2200 CONTINUE
 2211 CONTINUE
C
      DO 4148 IE=1,NRVALF
      DO 4248 IEI=1,NRVALF
      FMAT(IEI,IE,1)=FMAT(IEI,IE,1)*REDFAZ(1)+TWO*GMAT(IEI,IE,1)
 4248 CONTINUE
 4148 CONTINUE
      DO 1448 IE=1,NRVALF
      DO 2448 IEI=1,NRVALF
      FMAT(IEI,IE,4)=FMAT(IEI,IE,4)*REDFAZ(2)
     1+GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
      FMAT(IEI,IE,5)=FMAT(IEI,IE,5)*REDFAZ(3)
     1-GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
 2448 CONTINUE
 1448 CONTINUE
C
 2287 CALL SELECT(
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,FACZ,FACXY)
C
C**   RETURNS TO REDUCT!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND TANFEL
      END
      SUBROUTINE MATRIV(JABNNR,IVORN,NRVALF,KASSUM,ND2002,KLWERT,MSML
C**   CALLED BY TANFEL! - NEEDS CKCOE TO CALCULATE CRZMAT, AND CRZMAT
C     HAS LOWER DIMENSION(S) THAN EIVECV WITH THE DIMENSION(S) OF THE
C     FULL MICRO STATE BASIS! (THE DIMENSION(S) MAY NOT ALWAYS BE
C     LOWER, AND EVEN IF THEY ARE THIS REDUCTION HERE MAY CONSUME MORE
C     TIME THAN IT SAVES!)
     1,NREL14,NREL,CRZMAT,FMIKR3,NDS66,MOROUU,EIVSHT)
C**   FMIKR3 CONTAINS EIVECV OF THE VERY FIRST RUN AT ANY TIME!
C     EIVSHT <=> DUMMY!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0)
      DOUBLE PRECISION CRZMAT(NDS66,NDS66),FMIKR3(ND2002,NDS66)
     1,EIVSHT(ND2002,*)
      INTEGER MSML(ND2002,2,NREL14)
      SAVE
C
      DO 36 I=1,KASSUM
C**   EIVSHT <=> DUMMY!:
      EIVSHT(I,1)=ZERO
      DO 364 NR=1,NREL
      ML=MSML(I,1,NR)
      EIVSHT(I,1)=EIVSHT(I,1)+CKCOE(IVORN,KLWERT,ML,KLWERT,ML)
  364 CONTINUE
   36 CONTINUE
C
      DO 1448 IE=1,NRVALF
      DO 2448 IEI=IE,NRVALF
      SUMA=ZERO
      DO 5447 J=1,KASSUM
      SUMI=EIVSHT(J,1)*FMIKR3(J,IEI)
C**   ATTENTION: EIVSHT<=>DUMMY AND FMIKR3<=>EIVECV!
      SUMA=SUMA+FMIKR3(J,IE)*SUMI
 5447 CONTINUE
      CRZMAT(IE,IEI)=SUMA
      CRZMAT(IEI,IE)=SUMA
 2448 CONTINUE
 1448 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2227)JABNNR
      WRITE(11,2227)JABNNR
 2227 FORMAT(' CRZMAT IN SUBR. MATRIV IS READY; NR=',I3)
      ENDIF
C
C**   RETURNS TO TANFEL!:
      RETURN
CEND MATRIV
      END
      SUBROUTINE MATRIW(JABNNR,IVORN,IVIER,NRVALF,KASSUM,FMIKR3,ND2002
C**   CALLED BY TANFEL! - NEEDS CKCOE AND NUMBER TO CALCULATE CRYMAT!
     1,KLWERT,MSMLNW,KLWER3,MSMLNS,MQUER,CRYMAT,NDS66,MOROUU,EIVSHT
     2,NDUPDO,NOFROW,NROFNR)
C**   THIS SUBROUTINE (AND ALSO MATRIV) HAS BEEN WRITTEN TO SAVE TIME,
C     BECAUSE A FORMALY MUCH SIMPLER SIMILARITY TRANSFORMATION
C     OF EIVECV (<=> FMIKR3) IS VERY MUCH TIME CONSUMING!
C**   FMIKR3 CONTAINS EIVECV OF THE VERY FIRST RUN AT ANY TIME!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0)
      DOUBLE PRECISION FMIKR3(ND2002,NDS66),CRYMAT(NDS66,NDS66,11)
     1,EIVSHT(ND2002,*)
      INTEGER MQUER(ND2002,3),MSMLNW(ND2002,2,-KLWER3:KLWER3)
     1,MSMLNS(2,-KLWER3:KLWER3),NOFROW(ND2002,*),NROFNR(ND2002)
C**   10 = 2*((2*3+1)-2) = (MAX.OF IZEILE)*((2*KLWERT+1)-(MIN.OF IVIER))
      SAVE
      KLWRT4=KLWERT-IVIER
C
      DO 642 J=1,KASSUM
      NROFNR(J)=0
      DO 61 IZEILE=1,2
      DO 6 N=KLWERT,-KLWRT4,-1
      IF(MSMLNW(J,IZEILE,N).EQ.0)GOTO 6
      NM4=N-IVIER
      IF(MSMLNW(J,IZEILE,NM4).NE.0)GOTO 6
C**   TAKE A COPY NOW TO CHANGE THE START- AND ARRIVAL- SITUATION THERE
C     FOR SUBROUTINE NUMBER, WHICH LOOKS FOR THE NUMBER OF THE CHANGED COPY
      DO 567 I=-KLWERT,KLWERT
      MSMLNS(1,I)=MSMLNW(J,1,I)
      MSMLNS(2,I)=MSMLNW(J,2,I)
  567 CONTINUE
      MSMLNS(IZEILE,N)=0
      MP=1
      MLSUM=0
      NM1=N-1
      NM3=NM4+1
      IF(IZEILE.EQ.1)THEN
      MSMLNS(IZEILE,NM4)=1
      DO 6781 I=NM1,NM3,-1
      MLSUM=MLSUM+MSMLNW(J,1,I)
 6781 CONTINUE
      DO 6782 I=N,NM3,-1
      MLSUM=MLSUM-MSMLNW(J,2,I)
 6782 CONTINUE
      ELSE
      MSMLNS(IZEILE,NM4)=-1
      DO 6791 I=NM1,NM4,-1
      MLSUM=MLSUM+MSMLNW(J,1,I)
 6791 CONTINUE
      DO 6792 I=NM1,NM3,-1
      MLSUM=MLSUM-MSMLNW(J,2,I)
 6792 CONTINUE
      ENDIF
      IF((MLSUM/2)*2.NE.MLSUM)MP=-1
C
      CALL NUMBER(NR,MSMLNW,MSMLNS,ND2002,KLWERT,KASSUM,KLWER3)
C
      NROFNR(J)=NROFNR(J)+1
C**   NROFNR(J) MAY REMAIN =0 - BUT THIS CANNOT ARRIVE HERE!
C**   EIVSHT <=> DUMMY!:
      EIVSHT(J,NROFNR(J))=CKCOE(IVORN,KLWERT,NM4,KLWERT,N)*DBLE(MP)
      NOFROW(J,NROFNR(J))=NR
C
    6 CONTINUE
   61 CONTINUE
  642 CONTINUE
C
      DO 1446 IE=1,NRVALF
C**   ATTENTION: IEI=1(!),NRVALF HERE (ONLY STEP-DOWN OP. ARE WORKING BELOW!):
      DO 2446 IEI=1,NRVALF
C
      EIVED=ZERO
      DO 5442 J=1,KASSUM
      IF(FMIKR3(J,IEI).EQ.ZERO)GOTO 5442
      DO 6442 I=1,NROFNR(J)
      EIVECQ=FMIKR3(NOFROW(J,I),IE)*FMIKR3(J,IEI)*EIVSHT(J,I)
C**   THE ORDERING OF NM4 AND N IN CKCOE CORRESPONDS TO THE TYPE OF
C     OPERATOR: NM4 < N MEANS "STEP-DOWN OPERATOR", AND SO ONLY STEP-DOWN
C     OPERATORS ARE OCCURING HERE (THAT MEANS: NO TROUBLE WITH STEP-UP
C     OPERATORS, WHICH MAY HAVE A NEGATIVE SIGN, AS FOR INSTANCE -C3 )!
      EIVED=EIVED+EIVECQ
 6442 CONTINUE
 5442 CONTINUE
C
      CRYMAT(IE,IEI,JABNNR)=EIVED
C
 2446 CONTINUE
 1446 CONTINUE
C
      DO 9446 IE=1,NRVALF
C**   NOW BECAUSE OF SYMMETRY TO ADD THE STEP-UP OPERATORS SIMPLY:
      DO 8446 IEI=IE,NRVALF
      CRYMAT(IE,IEI,JABNNR)=CRYMAT(IE,IEI,JABNNR)+CRYMAT(IEI,IE,JABNNR)
C**   AND THE MATRIX WILL BECOME SYMMETRIC:
      CRYMAT(IEI,IE,JABNNR)=CRYMAT(IE,IEI,JABNNR)
 8446 CONTINUE
 9446 CONTINUE
      IF(MOROUU.NE.0)THEN
      WRITE(*,2226)JABNNR
      WRITE(11,2226)JABNNR
 2226 FORMAT(' MATRIX CRYMAT(,) READY FOR NRCALL=',I3)
      WRITE(*,2225)JABNNR
      WRITE(11,2225)JABNNR
 2225 FORMAT(' MATRIX ', 
     1'CRYMAT(,) (PERT. OPER.; COLUMNS (GIVEN AS ROWS); NRCALL=',I3)
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVALF
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUT=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUT.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEM.!')
      ENDIF
      DO 1005 J=1,KASI
      WRITE(11,2010)(CRYMAT(I,J,JABNNR),I=J,NRVALF)
      WRITE(*,2010)(CRYMAT(I,J,JABNNR),I=J,NRVALF)
 2010 FORMAT(6(1X,D12.4))
 1005 CONTINUE
      ENDIF
C
C**   RETURNS TO TANFEL!:
      RETURN
CEND MATRIW
      END
      SUBROUTINE TRANSF(ND252,NDS66,NRVALF,NRVAL,FGMAT,EIVEC
C**   MATRIX MULTIPLICATION CORRESP. TO SIMILARITY TRANSFORMATION!
C     THIS SUBROUTINE IS CALLED BY TANFEL TO TRANSFORM TAFMAT/TAGMAT
C     (HERE: "FGMAT") TO FMAT/GMAT (HERE: "TAMAT") AND TO REDUCE
C     THEIR DIMENSIONS!
     1,TAMAT,MOROUU,NRCALL,NRK)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0)
      DIMENSION EIVEC(NDS66,*),FGMAT(NDS66,*),TAMAT(ND252,*)
C
C**   "REDUCE" MEANS: ONLY EIGENVALUES FROM 1 TO NRVAL WILL BE
C     USED, AND ONLY CORRESP. EIGENVECTORS WILL BE TAKEN INTO ACCOUNT!
C     (NRVAL MAY BE EQUAL TO NRVALF: NO REDUCTION AT ALL, BUT TRANSF.!)
C
      SAVE
C
      DO 1446 IE=1,NRVAL
      DO 2446 IEI=1,NRVAL
      SUMA=ZERO
      DO 5446 J=1,NRVALF
      SUMI=ZERO
      DO 5442 I=1,NRVALF
      SUMI=SUMI+FGMAT(J,I)*EIVEC(I,IEI)
 5442 CONTINUE
      SUMA=SUMA+EIVEC(J,IE)*SUMI
 5446 CONTINUE
      TAMAT(IE,IEI)=SUMA
 2446 CONTINUE
 1446 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2226)NRCALL,NRK
      WRITE(11,2226)NRCALL,NRK
 2226 FORMAT(' MATRIX ', 
     1'TAMAT(,) (TA(F/G)MAT); COLUMNS (GIVEN AS ROWS); NRCALL,NRK=',2I3)
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVAL
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUT=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE MOROUT.GT.1, ALL COLUMNS!')
      ENDIF
      DO 1005 J=1,KASI
      WRITE(11,2010)(TAMAT(I,J),I=1,NRVAL)
      WRITE(*,2010)(TAMAT(I,J),I=1,NRVAL)
 2010 FORMAT(6(1X,D12.4))
 1005 CONTINUE
      ENDIF
C
C**   RETURNS TO TANFEL!:
      RETURN
CEND TRANSF
      END
CEND-FILE TANFEL.F
      FUNCTION DREIJ(FL1,FL2,FL3,FML1,FML2,FML3)
C**   HSCI VERSION, 3J-SYMBOLS;
C     BY MEANS OF THE COUPL. COEFFICIENTS OF WIGNER.
C**   CORRESP. TO THE FORMULA P.75 CONDON/SHORTLEY.
C**   A FUNCTION USED BY CKCOE AND BY ECKART; USES ITSELF FACTLR.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      DIMENSION INTABC(4),LL1L2A(5),LL1L2B(5)
      SAVE
      ZERO=0.0D0
      ONE=1.0D0
      TWO=2.0D0
      TWOM7=2.0D-7
      PAR=0.1D0
C**   THE J RESP. L VALUES CANNOT BE NEGATIV!:
      IF(FL1.LT.ZERO)STOP 'NEG.L1'
      IF(FL2.LT.ZERO)STOP 'NEG.L2'
      IF(FL3.LT.ZERO)STOP 'NEG.L3'
C**   AT FIRST DOUBLE AND MAKE INTEGER
C     (BECAUSE INTEGER AND HALF-INTEGER J VALUES ARE POSSIBLE!)
      L1=INT(TWO*FL1+PAR)
      L2=INT(TWO*FL2+PAR)
      L3=INT(TWO*FL3+PAR)
      M1=INT(TWO*DABS(FML1)+PAR)
      M2=INT(TWO*DABS(FML2)+PAR)
      M3=INT(TWO*DABS(FML3)+PAR)
      IF(FML1.LT.ZERO)M1=-M1
      IF(FML2.LT.ZERO)M2=-M2
      IF(FML3.LT.ZERO)M3=-M3
C**   IT MUST NECESSARELY BE:
      IF((M1+M2+M3).NE.0)STOP 'MSUM'
C**   TEST, IF DOUBLE-J VALUES ARE INTEGER:
      IF(DABS(DBLE(L1)-TWO*FL1).GT.PAR)STOP 'WRONL1'
      IF(DABS(DBLE(L2)-TWO*FL2).GT.PAR)STOP 'WRONL2'
      IF(DABS(DBLE(L3)-TWO*FL3).GT.PAR)STOP 'WRONL3'
      IF(DABS(DBLE(M1)-TWO*FML1).GT.PAR)STOP 'WRONM1'
      IF(DABS(DBLE(M2)-TWO*FML2).GT.PAR)STOP 'WRONM2'
      IF(DABS(DBLE(M3)-TWO*FML3).GT.PAR)STOP 'WRONM3'
C**   FIRST THE COUPL. COEFF. `COPPLC':
      K=L3
       IF (K) 99,100,100
  100  IF (L1) 99,101,101
  101  IF (L2) 99,102,102
  102  IF (L1-IABS(M1)) 29,103,103
  103  IF (L2-IABS(M2)) 29,104,104
  104  M=M1+M2
       IF (K-IABS(M)) 29,105,105
C**   NOW THE TRIANGLE-INEQUALITY!:
  105  IF (K-IABS(L1-L2)) 29,106,106
  106  IF (K-L1-L2) 107,107,29
  107 CONTINUE
      L=K
      ISTART=0
      SUM=ZERO
      IT=-1
C**   DIVIDE BY 2 (INTEGER DIVISION) AND STORE IN INT...:
      INTAA=(L+L2+M1)/2
      INTAB=(L-L1+L2)/2
      INTBA=(L1-M1)/2
      INTBB=(L+M)/2
      INTDB=(L1-L2-M)/2
      INTE=(L2+M2)/2
C**   NOW AN INFINITE LOOP:
    1 CONTINUE
      IT=IT+1
      IF(ISTART.EQ.0.AND.IT.GT.300)GOTO 300
      IF(IT.GT.1000)STOP 'INFINT'
      IF (INTAA-IT) 200,2,2
    2 IF (INTAB-IT) 200,3,3
    3 IF (INTBB-IT) 200,4,4
    4 IF (IT+INTDB) 200,5,5
    5 CONTINUE
C**   ORDERING OF INTAAM=(L+L2+M1)/2-IT AND INTBAP=(L1-M1)/2+IT:
      INTAAM=INTAA-IT
      INTBAP=INTBA+IT
      IF(INTAAM.LT.INTBAP)THEN
      IDUMMY=INTBAP
      INTBAP=INTAAM
      INTAAM=IDUMMY
      ENDIF
C**   ORDERING OF INTABC(1)=(L-L1+L2)/2-IT, INTABC(2)=(L+M)/2-IT,
C     IINTABC(3)=IT AND INTABC(4)=IT+(L1-L2-M)/2:
      INTABC(1)=INTAB-IT
      INTABC(2)=INTBB-IT
      INTABC(3)=IT
      INTABC(4)=IT+INTDB
      DO 44 I=1,3
      IP1=I+1
      DO 444 J=IP1,4
      IF(INTABC(J).GE.INTABC(I))GOTO 444
      IDUMMY=INTABC(J)
      INTABC(J)=INTABC(I)
      INTABC(I)=IDUMMY
  444 CONTINUE
   44 CONTINUE
      A=FACTLR(INTAAM,INTABC(1))
      B=FACTLR(INTBAP,INTABC(2))
      C=FACTLR(1,INTABC(3))
      D=FACTLR(1,INTABC(4))
      E=(-ONE)**((IT+INTE)-(((IT+INTE)/2)*2))
      F=A*B*C*D*E
      SUM=SUM+F
      ISTART=ISTART+1
      GOTO 1
  200 IF(ISTART.EQ.0)GOTO 1
  300 CONTINUE
C**   AND NOW ORDERING ONCE MORE:
      LL1L2A(1)=(L+L1-L2)/2
      LL1L2A(2)=(L-L1+L2)/2
      LL1L2A(3)=(L1+L2-L)/2
      LL1L2A(4)=(L+M)/2
      LL1L2A(5)=(L-M)/2
      DO 55 I=1,4
      IP1=I+1
      DO 555 J=IP1,5
      IF(LL1L2A(J).GE.LL1L2A(I))GOTO 555
      IDUMMY=LL1L2A(J)
      LL1L2A(J)=LL1L2A(I)
      LL1L2A(I)=IDUMMY
  555 CONTINUE
   55 CONTINUE
C**
      LL1L2B(1)=(L+L1+L2)/2+1
      LL1L2B(2)=(L1-M1)/2
      LL1L2B(3)=(L1+M1)/2
      LL1L2B(4)=(L2-M2)/2
      LL1L2B(5)=(L2+M2)/2
      DO 66 I=1,4
      IP1=I+1
      DO 666 J=IP1,5
      IF(LL1L2B(J).GE.LL1L2B(I))GOTO 666
      IDUMMY=LL1L2B(J)
      LL1L2B(J)=LL1L2B(I)
      LL1L2B(I)=IDUMMY
  666 CONTINUE
   66 CONTINUE
C**
      G=FACTLR(LL1L2A(1),LL1L2B(1))
      H=FACTLR(LL1L2A(2),LL1L2B(2))
      O=FACTLR(LL1L2A(3),LL1L2B(3))
      P=FACTLR(LL1L2A(4),LL1L2B(4))
      Q=FACTLR(LL1L2A(5),LL1L2B(5))
      R=DSQRT(G*H*O*P*Q*DBLE(L+1))
      COPPLC=SUM*R
      IF((DABS(COPPLC-ONE)-TWOM7).LT.ZERO)COPPLC=ONE
      IF((DABS(COPPLC)-TWOM7).LT.ZERO)COPPLC=ZERO
      GOTO 30
   99 STOP 'NEGATV'
   29 COPPLC=ZERO
   30 CONTINUE
C**   NOW THE 3J-SYMBOL WITH M=M3(FROM ABOVE)=-M1-M2:
C-ERR:      L1L2M3=(L1-L2+M3)/2
      L1L2M3=(L1-L2-M3)/2
      MPONE=(-1)**((L1L2M3)-((L1L2M3)/2)*2)
      DREIJ=DBLE(MPONE)*COPPLC/DSQRT(DBLE(K+1))
C**   RETURNS TO CKCOE OR TO ECKART!:
      RETURN
CEND DREIJ
      END
      FUNCTION FACTLR(L,M)
C**   A FUNCTION USED BY FUNCTION DREIJ
C**   RATIO OF L FACTORIAL TO M FACTORIAL,
C     L AND M ARE INTEGERS GREATER THAN OR EQUAL TO ZERO.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      SAVE
      IF(L.LT.0)STOP 'L-NEG'
      IF(M.LT.0)STOP 'M-NEG'
      FACTLR=1.0D0
      IF(L.EQ.M)RETURN
      LISLTM=0
      IF(L.GT.M)GOTO 40
      IMIN=L+1
      IMAX=M
      LISLTM=1
      GO TO 9
   40 IMIN=M+1
      IMAX=L
    9 DO 10 I=IMIN,IMAX
      FACTLR=FACTLR*DBLE(I)
   10 CONTINUE
      IF(LISLTM.NE.0)FACTLR=1.0D0/FACTLR
C**   RETURNS TO DREIJ!:
      RETURN
CEND FACTLR
      END
      FUNCTION CKCOE(K,L1,M1,L2,M2)
C**   FUNCTION NEEDED: DREIJ
C**   CKCOE IS USED BY TANABE, ECKART, MATRIW AND MATRIV!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      SAVE
      ZERO=0.0D0
      CKCOE=ZERO
      M=M1-M2
C**   THE FORMULA (3.26) P.43 SILVER (WITHOUT ANY COMPLEX-CONJ.!):
C     (LIT.: B.L.SILVER: IRREDUCIBLE TENSOR METHODS, ACADEMIC PRESS
C     NEW YORK ... 1976)
      DREIJ0=DREIJ(DBLE(K),DBLE(L1),DBLE(L2),ZERO,ZERO,ZERO)
      IF(DREIJ0.EQ.ZERO)RETURN
      DREIJM=DREIJ(DBLE(K),DBLE(L1),DBLE(L2),DBLE(M),DBLE(-M1),DBLE(M2))
      IF(DREIJM.EQ.ZERO)RETURN
      SQL1L2=DSQRT(DBLE((2*L1+1)*(2*L2+1)))
C**   A FACTOR OF (2K+1)/2 AND A FACTOR INCLUDING PHI CANCEL!
C**   A PHASE-FACTOR ARISES, BECAUSE THETA(M)=(-1)**M*THETA(-M)
C     AND BECAUSE THERE IS COMPLEX-CONJ. (IN PHI) IN THE CK-COEFF.:
      FACTOR=DBLE((-1)**(M1-((M1/2)*2)))
      CKCOE=FACTOR*SQL1L2*DREIJ0*DREIJM
C**   RETURNS TO TANABE, ECKART, MATRIW OR MATRIV!:
      RETURN
CEND CKCOE
CEND-FILE WIGNES.F
      END
      SUBROUTINE SHORTL(JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP
C**   ONE OF THE DIFFERENT SUBROUTINES NAMED SHORTL ON DIFFERENT
C     FILES short..f! DIFFERENCES ARE/ MAY BE ND2002=1110 OR
C     =3432, NDS66=66 OR =252, EQUIVALENCE(EIVECV,FMIKR1) OR NOT!
C**   THIS SUBROUTINE HERE CALLS CONSHO ON FILE CONSHO.c, WHICH
C     ALLOCATES DYNAMIC MEMOR AT RUN TIME WITH HELP OF VARIABLES,
C     WHICH ARE COMPUTED HERE. - THESE TWO ROUTINES SUBSTITUTE
C     ANY OF THE FORTRAN SUBROUTINES NAMED SHORTL.
     1,BWWOLD,FKSI,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0
     1,QTEXT0)
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/IEQUIV/JEQUIV
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LNE,NDATA,NDATAP
C01      PARAMETER(ND2002=1110,NDMAL3=ND2002*3)
      PARAMETER(ND1110=1110,ND252=252
     1,ND2828=28*28,NDMAL4=ND2828*4,ND28=28,I10=10
     2,NREL14=14,KLWER3=3,ZERO=0.0D0)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110
C - (E.G.:) EITHER: ND2002=1110
C - OR: ND2002=3432!
C**   IT IS: 28*28*2*28*28 = 1229312; 1110*1110 = 1232100
C**   (I)10 = MAX. OF POSS. FOR ANY MIKRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C - EITHER:
C02      PARAMETER(NDS66=66)
C - OR:      PARAMETER(NDS66=252)
C - EITHER:
C - %
C - OR:      EQUIVALENCE (EIVECV,FMIKR1)
      COMMON/NT/NT2002,NTMAL3,NTS66
C
      CHARACTER*13 QTEXT0
      SAVE
      JEQUIV=0
CCC-STARTING
      IF(QTEXT0(1:1).EQ.'P'.OR.QTEXT0(1:1).EQ.'Q')JEQUIV=1
      NPOIN1=0
      IF(QTEXT0(1:1).EQ.'O'.OR.QTEXT0(1:1).EQ.'Q')NPOIN1=1
      NPOIN3=0
      IF(KLWERT.EQ.3.AND.JAWIGN.EQ.0)THEN
      IF(NREL.EQ.7)NPOIN3=3
      IF(NREL.EQ.6.OR.NREL.EQ.8)NPOIN3=2
      IF(NREL.EQ.5.OR.NREL.EQ.9)NPOIN3=1
      ENDIF
      ND2002=1110
      IF(NPOIN3.EQ.1)ND2002=2002
      IF(NPOIN3.EQ.2)ND2002=3003
      IF(NPOIN3.EQ.3)ND2002=3432
      NDMAL3=ND2002*3
      NDS66=66
      IF(NPOIN1.EQ.1)NDS66=252
CCC
      NT2002=ND2002
      NTMAL3=NDMAL3
      NTS66=NDS66
CCC
      WRITE(*,6621)ND2002,NDS66,JEQUIV,QTEXT0(1:1)
      WRITE(11,6621)ND2002,NDS66,JEQUIV,QTEXT0(1:1)
 6621 FORMAT(' CONTROL OF SOME DIMENSIONS/ EQUIVALENCES:',/
     1,' ND2002, NDS66 =',2I5,', JEQUIV=',I2,1X,A1)
C**   OUTPUT => TERMINAL AND => FILE fort.11
      WRITE(*,6622)
      WRITE(11,6622)
 6622 FORMAT(
     1' shortC.f is linked: The letter following JEQUIV=0/1, if any,'
     2,' means:',/
     3,' (L or "blanc":) shortL.f with NDS66=66 and no equivalence,',/
     4,' (O:) shortO.f with NDS66=252 and no equiv.,',/
     5,' (P:) shortP.f with NDS66=66 and equiv.,',/
     6,' (Q:) shortQ.f with NDS66=(252 instead of 66) and equiv.!')

      IF(MORTEX.GT.0)THEN
      WRITE(*,6623)
      WRITE(11,6623)
 6623 FORMAT(' JEQUIV=0 <=> NO EQUIVALENCE (EIVECV,FMIKR1): NO EL.-EL.'
     1,' REPULSION',/,' AND NO SPIN-ORBIT COUPLING HAVE TO BE (NEW)'
     2,' CALCULATED! THAT',/,' MEANS: IF "JAFAST" (FOR F EL.!),'
     3,' JEQUIV=1 DOES NOT MATTER!')
      ENDIF
C
      CALL CONSHO(
     1JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP,BWWOLD
     1,FKSI,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0)
C
      RETURN
CEND SHORTL from shortC.f
      END
      SUBROUTINE CONSHO(JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP
CCC90 TO BE COMPILED WITH f90
C**   CALLED BY SHORTL ON FILE shortC.f, f2c consho.f => consho.c, AND
C #include <stdio.h>
C #include <stdlib.h>
C /*#include "f2c.h"*/
C void *malloc(size_t size);
C**   (with help of ed:) ,s/integer/int/g and ,s/doublereal/double/g
     1,BWWOLD,FKSI,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0)
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/IEQUIV/JEQUIV
      COMMON/NT/NT2002,NTMAL3,NTS66
C01      PARAMETER(ND2002=1110,NDMAL3=ND2002*3)
      PARAMETER(ND1110=1110,ND252=252
     1,ND2828=28*28,NDMAL4=ND2828*4,ND28=28,I10=10
     2,NREL14=14,KLWER3=3,ZERO=0.0D0)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110
C - (E.G.:) EITHER: ND2002=1110
C - OR: ND2002=3432!
C**   IT IS: 28*28*2*28*28 = 1229312; 1110*1110 = 1232100
C**   (I)10 = MAX. OF POSS. FOR ANY MIKRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C - EITHER:
C02      PARAMETER(NDS66=66)
C - OR:      PARAMETER(NDS66=252)
C - EITHER:
C - %
C - OR:      EQUIVALENCE (EIVECV,FMIKR1)
C**   ALWAYS (SEE BELOW, TOO):
C03      EQUIVALENCE (EIVECV,FMIKR2)
C**   ... (ND2002,2002):
C**   d-el. and shortL.f =>
C     COMMON//IY(10286305)
CCC90      COMMON//IY(10286305)
C**   seven f-el. and shortO.f =>
C     COMMON//IY(98935273) <=> MAX.!
C=>   integer *iy;
      POINTER IY(:)
      COMMON//IY
C03      COMMON//FMIKR1
C     1,EIWERT,DUMMY
C     6,FMIKR3,EIVSHT,TAFMAT,TAGMAT,TAWERT
C     6,CRYMAT,CRZMAT,BLOMAT,EIVECV,WNRW,WERMAT
C     7,DBLMAT
C     8,MQUER,MSML,MSMLNW,NOFROW,NROFNR
C     9,REIHNF,BLOCKD,BLOCKS
C     1,SPAERL
      COMMON/UVW/
     1FMAT,TEMIST,DUMMYD
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,PERTUR,FMATY,GMAT
     5,TEMPTH,TESLAS
     7,BSTART
     8,UPML,DOWNML,BESETZ
     8,KASSUM,IGR1,IGR2,NRSORT,NRVAL,NEUEBS,NRMIST
     8,MQUERR,MSMLCO
     9,MSMLNS
     1,NRVALF,IGRUND,JAFAST
C
C05      DIMENSION FMIKR1(ND2002,ND2002),FMIKR2(ND2002,ND2002)
C     1,DBLMAT(ND2002,ND2002),EIVECV(ND2002,ND2002)
C     2,BLOMAT(ND2002,ND2002)
C**   ... (ND2002,...):
C06      DIMENSION DUMMY(NDMAL3),DUMMYD(NDMAL4),EIVSHT(ND2002,I10)
C     1,EIWERT(ND2002),FMIKR3(ND2002,NDS66),UPML(25),DOWNML(25)
C     1,WNRW(ND2002)
      DIMENSION DUMMYD(NDMAL4)
     1,UPML(25),DOWNML(25)
C07      INTEGER NOFROW(ND2002,I10),NROFNR(ND2002)
C     1,MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
C     2,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNS(2,-KLWER3:KLWER3)
C     3,MQUERR(200)
      INTEGER
     1MSMLCO(2,NREL14)
     2,MSMLNS(2,-KLWER3:KLWER3)
     3,MQUERR(200)
C08      INTEGER REIHNF(ND2002),BLOCKD(ND2002),BLOCKS(0:ND2002)
C**   ... (ND1110,1110):
      DIMENSION PERTUR(ND1110,ND1110),FMATY(ND1110,ND1110)
C09     1,FMATCH(ND1110,ND1110),EIVEC(ND1110,ND1110)
     2,BESETZ(NREL14,I10)
      DIMENSION EIVAL0(ND28,3),EIVAL1(ND28,3),EIVAL2(ND1110,3)
      DIMENSION ZEEMN0(ND28,3),ZEEMN1(ND28,3),ZEEMN2(ND1110,3)
      DIMENSION ZEMN20(ND28,3),ZEMN21(ND28,3),ZEMN22(ND1110,3)
C**
      DIMENSION FMAT(ND252,ND252,5),GMAT(ND252,ND252,3)
C10      DIMENSION TAFMAT(NDS66,NDS66,3),TAGMAT(NDS66,NDS66,2)
C11      DIMENSION CRYMAT(NDS66,NDS66,11),WERMAT(NDS66,NDS66)
C     1,TAWERT(NDS66),TEMPTH(601),BSTART(24),CRZMAT(NDS66,NDS66,4)
      DIMENSION
     1TEMPTH(601),BSTART(24)
C**   COMPLEX:
CU1      COMPLEX*16 CPERTU(ND2828,ND2828),CFMATY(ND2828,ND2828)
C12     1,CPXMAT(ND2828,ND2828),EIVECC(ND2828,ND2828)
C**   LOGICAL:
C13      LOGICAL LMAT(ND2002,ND2002),SPAERL(ND2002)
C**   EQUIVALENCE (SEE ABOVE, TOO):
C14      EQUIVALENCE (EIVECV,LMAT)
C     1,(DBLMAT,FMATCH),(EIVECV,EIVEC)
C15      EQUIVALENCE (CPXMAT,FMATCH),(EIVECC,EIVEC),(CPERTU,PERTUR)
CU2      EQUIVALENCE (CPERTU,PERTUR)
CU3     1,(CFMATY,FMATY)
      SAVE
      JAFAST=0
CCC - STARTING
C**   IJ1=1
      IJ2=1
      IF(JEQUIV.EQ.0)IJ2=2*(NT2002**2)+1
      IJ3=2*NT2002+IJ2
      IJ4=2*NTMAL3+IJ3
      IJ5=2*NT2002*NTS66+IJ4
      IJ6=2*NT2002*10+IJ5
      IJ7=2*(NTS66**2)*3+IJ6
      IJ8=2*(NTS66**2)*2+IJ7
      IJ9=2*NTS66+IJ8
      IJ10=2*(NTS66**2)*11+IJ9
      IJ101=2*(NTS66**2)*4+IJ10
      IJ11=2*(NT2002**2)+IJ101
      IJ12=2*(NT2002**2)+IJ11
      IJ13=2*NT2002+IJ12
      IJ14=2*(NTS66**2)+IJ13
      IJ15=2*(NT2002**2)+IJ14
      IJ16=NT2002*3+IJ15
      IJ17=NT2002*28+IJ16
      IJ18=NT2002*14+IJ17
      IJ19=NT2002*10+IJ18
      IJ20=NT2002+IJ19
      IJ21=NT2002+IJ20
      IJ22=NT2002+IJ21
      IJ23=NT2002+1+IJ22
      IJIJ=IJ11
      IF(JEQUIV.EQ.0)IJIJ=1
C**   AND THE SUM:
      IJ24M1=NT2002+IJ23-1
CCC-END
C    _BLNK__1.iy = (integer*)malloc(ij24m1*sizeof(integer));
C    if (_BLNK__1.iy == 0) {printf(" storage not sufficient: stop\n");
C    exit(1);}
C
      ALLOCATE(IY(IJ24M1))
      CALL SUSFIT(JASTRU,MOLFLD,JAWIGN,NGROUP,SIGMA0
C16     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     1,IY(IJ2),FMAT,IY(IJ14),TEMIST,DIRECZ,IY(IJ11),IY(IJ3)
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,PERTUR,FMATY
C17     3,JAVANV,NRSORT,NRVAL,NEUEBS
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NTMAL3,NREL14,NREL,KLWERT,NTS66,I10
     1,NDMAL4,ABST,GMAT,ND28
C18     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
     2,IY(IJ14),IY(IJ11),PERTUR,FMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
C19     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,IY(IJ11),IY(IJ4),IY(IJ5),NRMIST,NT2002,IY(IJ6),IY(IJ7),IY(IJ8)
C20     6,CRYMAT,WERMAT,KMASKE
     6,IY(IJ9),IY(IJ13),KMASKE
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
C21     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     7,IY(IJ15),MQUERR,REDFAZ,KASSUM,IY(IJ11)
C22     8,UPML,DOWNML,MSML,MSMLCO,KLWER3
     8,UPML,DOWNML,IY(IJ16),MSMLCO,KLWER3
C23     9,MSMLNW,MSMLNS,NOFROW,NROFNR
     9,IY(IJ17),MSMLNS,IY(IJ18),IY(IJ19)
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
C24     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
     1,IY(IJ11),IY(IJ101),IY(IJ20),IY(IJ21),IY(IJ22),IY(IJ12),IY(IJ23)
     1,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
C25     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     7,IY(IJIJ),IY(IJ14),I16,FINTEG,FKSI,BSTART,BWWOLD
C26     8,NRVALF,IGRUND,JAFAST,CRZMAT)
     8,NRVALF,IGRUND,JAFAST,IY(IJ10))
C
      RETURN
CEND CONSHO from consho90.f
      END
      SUBROUTINE STR00(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,IN24,IN25)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/CBWWWS/BWWWS
      DIMENSION XYZ(10,3,3),IANZ(3),BWWWS(16)
      SAVE
      DATA XYZ/90*0.0D0/
      DATA JA2,MITRUF,IANZ/0,0,0,0,0/
      CALL STR001(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,IN24,IN25,
     2XYZ,JA2,MITRUF,NSORT,IANZ,BWWWS)
      RETURN
CEND STR00 from str00.f
      END
      SUBROUTINE STR001(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,IN24,IN25,
     2XYZ,JA2,MITRUF,NSORT,IANZ,BWWWS)
C**   ON FILE str00.f - DATA read in from e.g. str00.dat
C   00 <=> YEAR 2000! - MODEL OF MALTA ... 1998/(JANUARY)1999
C**   IN: MOROUT, KLWERT, NREL, (COV.F, CHARGE OF FIRST AND SECOND SORT OF
C     LIGANDS <=> BWWW(1), BWWW(2), BWWW(3)).
C**   OUT: ((MOROUT,KLWERT,NREL,)) (B2,B22,B40,B42,B43,B44,B60,B62,B63,B64,
C     B66 <=> BWWW(1:11)).
C**   IN 2003: ODD-NUMBERED VALUES TIMES -1, SEE 1712 FORMAT BELOW.
C05   IN 2005: ... WAS AN ERROR: NOW B(calc.)-VALUES = B-VALUES (SEE 1712)!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      CHARACTER*5 QB(28),QW(26),QS(16)
      COMMON/FLAG/LMN
      CHARACTER*2 LANTHA(13),TRANS1(10),TRANS2(10)
      CHARACTER*11 URAN(3)
      CHARACTER*15 QMPC
      CHARACTER DF(2),DF12
      CHARACTER QTEXT1(60)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,VIERTL=0.25D0,FF=219470.D0,BOHRPM=0.529177249D+2)
      DIMENSION XYZ(10,3,3),IANZ(3),ABC(3,11,3),DEF(3,16,3)
      DIMENSION BWWW(I20),ABST(10,3),QBST(10,3),
     1IBWWW(I20),KMASKE(20),ABSTMN(3),QLMFAK(3,3),ABSTB(10,3),BWWWS(16)
      DIMENSION RRT12(10,9),RRT14(10,9),RRT22(10,9),RRT24(10,9)
     1,RRLA2(13),RRLA4(13),RRLA6(13),RRU2(3),RRU4(3),RRU6(3)
     1,QLIG(3),RHO(3),BETA12(3),FAK246(3,3)
      SAVE
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'B22'' ','B42'' ','B43'' ','B44'' ','B62'' ','B63'' ','B64'' '
     2,'B66'' ','     ','B21  '
     3,'B41  ','B61  ','B65  ','B21'' ','B41'' ','B61'' ','B65'' '/
C
      DATA QW/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'B21  ','B41  ','B61  ','B65  ','     ','     '/
C**   (21)/21'/22'/(41)/41'/42'/43'/44'/(61)/61'/62'/63'/64'/(65)/65'/66':
      DATA QS/'    ','B21'' ','B22'' ','    ','B41'' ','B42'' '
     1,'B43'' ','B44'' ','    ','B61'' ','B62'' ','B63'' '
     2,'B64'' ','    ','B65'' ','B66'' '/
C
CJA2  DATA IANZ,ABSTMN/0,0,0,ZERO,ZERO,ZERO/
      DATA ABSTMN/ZERO,ZERO,ZERO/
CJA2  DATA ABC,DEF,XYZ/333*ZERO/
CJA2  DATA BWWWS/16*ZERO/
      DATA DF/'D','F'/
      DATA TRANS1/
     1'Sc','Ti',' V','Cr','Mn','Fe','Co','Ni','Cu','Zn'/
      DATA RRT12/
     13.0010D0,ZERO,1.3768D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,ZERO,2.4472D0,ZERO,1.2266D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,9.9462D0,ZERO,2.0702D0,1.4470D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,6.3481D0,2.8186D0,1.7808D0,1.2864D0,0.9997D0,ZERO,ZERO,ZERO
     1,ZERO
     5,ZERO,ZERO,4.5167D0,ZERO,1.5482D0,1.1500D0,0.9080D0,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,3.6643D0,2.0257D0,1.3926D0,1.0492D0,0.8371D0,ZERO
     1,ZERO
     7,ZERO,ZERO,ZERO,ZERO,2.9992D0,ZERO,1.2509D0,0.9582D0,0.7719D0,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,2.5370D0,ZERO,1.1300D0,0.8763D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.1450D0,ZERO,1.0275D0,ZERO/
      DATA RRT14/
     119.213D0,ZERO,3.5926D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,ZERO,13.171D0,ZERO,2.9055D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,281.93D0,ZERO,9.6047D0,4.2967D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,125.03D0,20.7145D0,7.2112D0,3.4457D0,1.9861D0,ZERO,ZERO,ZERO
     1,ZERO
     5,ZERO,ZERO,65.293D0,ZERO,5.5127D0,2.7894D0,1.6592D0,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,43.1345D0,10.8718D0,4.4958D0,2.3423D0,1.4230D0
     1,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,28.931D0,ZERO,3.6552D0,1.9708D0,1.2209D0,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,20.617D0,ZERO,3.0034D0,1.6623D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,14.704D0,ZERO,2.4978D0,ZERO/
      DATA TRANS2/
     1' Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd'/
      DATA RRT22/
     15.5883D0,3.8567D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,7.6007D0,4.5260D0,3.3077D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,ZERO,ZERO,3.8291D0,2.9052D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,ZERO,ZERO,3.3185D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     5,ZERO,ZERO,ZERO,3.9538D0,2.9033D0,2.3132D0,ZERO,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,ZERO,ZERO,2.6276D0,2.1171D0,ZERO,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.3736D0,1.9390D0,ZERO,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.1584D0,1.7820D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,1.9717D0,1.6424D0/
      DATA RRT24/
     158.9978D0,25.3281D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,133.9293D0,37.8608D0,18.6001D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,ZERO,ZERO,26.9820D0,14.3861D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,ZERO,ZERO,20.2190D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     5,ZERO,ZERO,ZERO,32.9845D0,15.4096D0,9.1689D0,ZERO,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,ZERO,ZERO,12.8668D0,7.7851D0,ZERO,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,10.5999D0,6.5906D0,ZERO,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,8.8319D0,5.6099D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,7.4098D0,4.8032D0/
C**   DATA FOR FIRST AND SECOND TRANSITION SERIES
C     AND DATA FOR LANTHANIDES FROM:
C     A.J.FREEMAN, R.E.WATSON, HYPERFINE INTERACTIONS IN MAGNETIC
C     MATERIALS, in G.T.RADO, H.SUHL (eds.), MAGNETISM, VOL.IIA,
C     ACADEMIC PRESS, NEW YORK 1965.
      DATA LANTHA/
     1'Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb'/
C** - ALL 3+
C**   DATA FOR LANTHANIDES(3+):
C     Eu(2+) and Tm(2+):
C     RRLA2/0.938,0.728/
C     RRLA4/2.273,1.552/
C     RRLA6/11.670,7.510/
      DATA RRLA2/1.2D0,1.086D0,1.001D0,0.0D0,0.883D0,0.832D0,0.785D0
     1,0.755D0,0.726D0,0.695D0,0.666D0,0.646D0,0.613D0/
      DATA RRLA4/3.455D0,2.822D0,2.401D0,0.0D0,1.897D0,1.697D0,1.515D0
     1,1.419D0,1.322D0,1.219D0,1.126D0,1.067D0,0.960D0/
      DATA RRLA6/21.226D0,15.726D0,12.396D0,0.0D0,8.775D0,7.442D0
     1,6.281D0,5.688D0,5.102D0,4.502D0,3.978D0,3.647D0,3.104D0/
      DATA URAN/'URANIUM(5+)','URANIUM(4+)','URANIUM(3+)'/
C**   DATA FOR URANIUM:
      DATA RRU2/1.85739D0,2.07377D0,2.39241D0/
      DATA RRU4/5.99605D0,7.87311D0,1.134654D1/
      DATA RRU6/3.098195D1,5.001814D1,9.603445D1/
C**   DATA FOR ACTINIDES - (ONLY) URAN5+/4+/3+ (5f**1/5f**2/5f**3):
C     J.P. DESCLAUX AND A.J. FREEMAN: HANDBOOK ON THE PHYSICS AND
C     CHEMISTRY OF THE ACTINIDES, ELSEVIER 1984, P.24 (TABLE 4).
C     (RELATIVISTIC VALUES - 5f (NOT: 5f***))
C
      DATA KLICK,KLICKZ,KLICKB/0,0,0/
      DATA LAUF,LAUFIN,LAUF1/3*0/
C
      IF(LAUF.GT.0)GOTO 4
      IF(MITRUF.EQ.0)LAUF=1
      DO 3353 K=1,3
      DO 3352 J=1,16
      DO 3351 I=1,3
      DEF(I,J,K)=ZERO
      IF(J.LE.11)ABC(I,J,K)=ZERO
 3351 CONTINUE
 3352 CONTINUE
 3353 CONTINUE
C
      IF(JA2.GT.0)GOTO 44
C
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,
     1' IS THE NAME OF THE NEXT FILE str00.dat IN FORMAT(5D16.8)?',
     2/,' "RETURN" OR GIVE ITS NAME!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3800)QMPC
      GOTO 4800
      ENDIF
 3800 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4800 IF(QMPC.EQ.'               ')QMPC='str00.dat      '
      WRITE(7,5163)QMPC
 5163 FORMAT(A15,'  (str00)')
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,'  (str00)!!!!!!!!!')
      WRITE(*,5160)BOHRPM
      WRITE(11,5160)BOHRPM
 5160 FORMAT(/,' EACH ROW OF THIS FILE (FIRST ROW MUST BE TEXT!):'
     1,/,' 5 COORD./BOHR IN FORMAT 5D16.8: FIRSTLY 10 X-COORD. OF 1 TH S
     2ORT OF LIG.,',/,' THEN 10 Y-COORD. AND 10 Z-COORD., THEN 2 ND SORT
     3 OF LIG.; BOHR/PM= ',F7.4)
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(' COORD./BOHR OF 3 SORTS OF LIGANDS ARE READ IN FROM ',A15)
      OPEN(1,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(1,63,ERR=33)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,'HEADER:',1X,60A1)
      DO 655 K=1,3
      KK=K
      READ(1,61,END=333,ERR=33)((XYZ(I,J,K),I=1,10),J=1,3)
   61 FORMAT(5D16.8)
  655 CONTINUE
      KK=4
      GOTO 3339
  333 IF((J.NE.1.AND.J.NE.4).OR.(I.NE.1.AND.I.NE.11))THEN
      WRITE(*,3335)
      WRITE(11,3335)
 3335 FORMAT(' WARNING: THERE MAY BE AN ERROR IN DATA FILE!')
      ENDIF
      IF(KK.EQ.3)THEN
      WRITE(*,3337)
      WRITE(11,3337)
 3337 FORMAT(' WARNING: END OF FILE: ONLY 2 SORTS OF LIGANDS!')
      GOTO 3339
      ELSE IF(KK.EQ.2)THEN
      WRITE(*,3336)
      WRITE(11,3336)
 3336 FORMAT(' WARNING: END OF FILE: ONLY 1 SORT OF LIGANDS!')
      GOTO 3339
      ELSE
      WRITE(*,3330)
      WRITE(11,3330)
 3330 FORMAT(' END OF DATA FILE!')
      GOTO 3333
      ENDIF
 3339 CONTINUE
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(' THE VALUES READ IN ARE:')
      KKM1=KK-1
      WRITE(*,6161)(((XYZ(I,J,K),I=1,10),J=1,3),K=1,KKM1)
      WRITE(11,6161)(((XYZ(I,J,K),I=1,10),J=1,3),K=1,KKM1)
 6161 FORMAT(5D16.8)
      CLOSE(1)
 3338 CONTINUE
      GOTO 3334
 3331 PRINT*,' ERROR WHILE READING!'
      GOTO 3333
 3332 PRINT*,' DATA FILE NOT FOUND'
      GOTO 3333
   33 PRINT*,' ERROR IN DATA FILE!'
      GOTO 3333
 3334 CONTINUE
C
      DF12=DF(1)
      IF(KLWERT.EQ.3)DF12=DF(2)
C
      WRITE(*,3114)NREL,DF12
      WRITE(11,3114)NREL,DF12
 3114 FORMAT(' NREL ("No. OF EL.") =',I3,' (',A1,' EL.)')
C
      IF(KLWERT.LE.1)STOP 'L-VAL.'
      IF(KLWERT.EQ.2)THEN
      WRITE(11,4510)(TRANS1(I),I=1,10)
      WRITE(11,4511)(RRT12(I,NREL),I=1,10)
      WRITE(11,4512)(RRT14(I,NREL),I=1,10)
      WRITE(11,4510)(TRANS2(I),I=1,10)
      WRITE(11,4511)(RRT22(I,NREL),I=1,10)
      WRITE(11,4512)(RRT24(I,NREL),I=1,10)
 4510 FORMAT(8X,10(4X,A2,3X))
 4511 FORMAT(' <R**2>:',10(F9.4))
 4512 FORMAT(' <R**4>:',10(F9.4))
      WRITE(*,4510)(TRANS1(I),I=1,10)
      WRITE(*,4511)(RRT12(I,NREL),I=1,10)
      WRITE(*,4512)(RRT14(I,NREL),I=1,10)
      WRITE(*,4510)(TRANS2(I),I=1,10)
      WRITE(*,4511)(RRT22(I,NREL),I=1,10)
      WRITE(*,4512)(RRT24(I,NREL),I=1,10)
C
      WRITE(11,4513)
 4514 WRITE(*,4513)
 4513 FORMAT(' INPUT IN 2I1: (1 OR 2 OR 0 FOR 1TH OR 2ND OR ?TH TRANS.SE
     1R., RESP.)',/,' AND CONSEC.No.(0=>10). ?<=>2 ROWS INPUT REQUIRED')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3801)NRROW,NRCOL
      GOTO 4801
      ENDIF
 3801 READ(*,'(2I1)',ERR=4514,END=4576)NRROW,NRCOL
      LMN=1
 4801 NRCOL0=NRCOL
      IF(NRCOL.EQ.0)NRCOL=10
      WRITE(*,4515)NRROW,NRCOL
      WRITE(11,4515)NRROW,NRCOL
 4515 FORMAT(2I3,' =NRROW,NRCOL!!!!!!!!!')
      WRITE(7,4516)NRROW,NRCOL0
 4516 FORMAT(2I1,' =NRROW,NRCOL0')
C
      IF(NRROW.EQ.1)THEN
      IF(RRT12(NRCOL,NREL).EQ.ZERO.OR.RRT14(NRCOL,NREL).EQ.ZERO)
     1GOTO 4514
      R2=RRT12(NRCOL,NREL)
      R4=RRT14(NRCOL,NREL)
      ELSE IF(NRROW.EQ.2)THEN
      IF(RRT22(NRCOL,NREL).EQ.ZERO.OR.RRT24(NRCOL,NREL).EQ.ZERO)
     1GOTO 4514
      R2=RRT22(NRCOL,NREL)
      R4=RRT24(NRCOL,NREL)
      ELSE
      WRITE(11,4517)
 4518 WRITE(*,4517)
 4517 FORMAT(' INPUT IN F9.4, ONE ROW EACH, <R**2> AND <R**4>')
      IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3802)R2
      GOTO 4802
      ENDIF
 3802 READ(*,'(F9.4)',ERR=4518,END=4576)R2
      LMN=1
 4802 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3803)R4
      GOTO 4803
      ENDIF
 3803 READ(*,'(F9.4)',ERR=4518,END=4576)R4
      LMN=1
 4803 WRITE(7,4519)R2
      WRITE(7,4519)R4
 4519 FORMAT(F9.4,' =R2 OR R4')
      ENDIF
C
      WRITE(*,4520)R2,R4
      WRITE(11,4520)R2,R4
 4520 FORMAT(' R2,R4 =',2D16.8)
C
      ELSE IF(KLWERT.EQ.3)THEN
C
      WRITE(*,4521)LANTHA(NREL),RRLA2(NREL),RRLA4(NREL),RRLA6(NREL)
      WRITE(11,4521)LANTHA(NREL),RRLA2(NREL),RRLA4(NREL),RRLA6(NREL)
 4521 FORMAT('<R**2>,<R**4>,<R**6> OF ',A2,'3+',3F7.3)
      IF(NREL.LE.3)THEN
      WRITE(*,4522)URAN(NREL),RRU2(NREL),RRU4(NREL),RRU6(NREL)
      WRITE(11,4522)URAN(NREL),RRU2(NREL),RRU4(NREL),RRU6(NREL)
 4522 FORMAT('<R**2>,<R**4>,<R**6> OF ',A11,3F9.5)
      ENDIF
C
      WRITE(11,4523)
 4524 WRITE(*,4523)
 4523 FORMAT(' INPUT IN I1: 1 OR 2 OR 0 FOR LN OR U OR DIRECT INPUT, RES
     1P.',/,' 3 ROWS INPUT REQUIRED FOR "DIRECT INPUT" AND U WITH NREL >
     23!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3804)NRROW
      GOTO 4804
      ENDIF
 3804 READ(*,'(I1)',ERR=4524,END=4576)NRROW
      LMN=1
 4804 IF(NRROW.EQ.1.AND.NREL.EQ.4)NRROW=0
      IF(NRROW.EQ.2.AND.NREL.GT.3)NRROW=0
      WRITE(*,4525)NRROW
      WRITE(11,4525)NRROW
 4525 FORMAT(I2,' =LN/U/?!!!!!!!!!')
      WRITE(7,4526)NRROW
 4526 FORMAT(I1,' =LN/U/?')
C
      IF(NRROW.EQ.1)THEN
      R2=RRLA2(NREL)
      R4=RRLA4(NREL)
      R6=RRLA6(NREL)
      ELSE IF(NRROW.EQ.2)THEN
      R2=RRU2(NREL)
      R4=RRU4(NREL)
      R6=RRU6(NREL)
      ELSE
      WRITE(11,4527)
 4528 WRITE(*,4527)
 4527 FORMAT(' INPUT IN F9.4, ONE ROW EACH, <R**2>, <R**4> AND <R**6>')
      IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3805)R2
      GOTO 4805
      ENDIF
 3805 READ(*,'(F9.4)',ERR=4528,END=4576)R2
      LMN=1
 4805 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3806)R4
      GOTO 4806
      ENDIF
 3806 READ(*,'(F9.4)',ERR=4528,END=4576)R4
      LMN=1
 4806 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3807)R6
      GOTO 4807
      ENDIF
 3807 READ(*,'(F9.4)',ERR=4528,END=4576)R6
      LMN=1
 4807 WRITE(7,4529)R2
      WRITE(7,4529)R4
      WRITE(7,4529)R6
 4529 FORMAT(F9.4,' =R2, R4 OR R6')
      ENDIF
C
      WRITE(*,1277)R2,R4,R6
      WRITE(11,1277)R2,R4,R6
 1277 FORMAT(' R2,R4,R6 =',3D16.8)
C
      ENDIF
C
C**   J=1,3 <=> 3 SORTS OF LIGANDS:
      DO 234 J=1,3
      ABSTMN(J)=ZERO
C**   I=1,10 <=> 10 LIGANDS EACH SORT:
      DO 233 I=1,10
      IF(XYZ(I,1,J).EQ.ZERO.AND.XYZ(I,2,J).EQ.ZERO.AND.XYZ(I,3,J)
     1.EQ.ZERO)GOTO 234
      QBST(I,J)=XYZ(I,1,J)**2+XYZ(I,2,J)**2+XYZ(I,3,J)**2
      ABST(I,J)=DSQRT(QBST(I,J))
      ABSTB(I,J)=ABST(I,J)*BOHRPM
      ABSTMN(J)=ABSTMN(J)+ABST(I,J)
      IANZ(J)=IANZ(J)+1
  233 CONTINUE
  234 CONTINUE
      NSORT=3
      IF(IANZ(3).EQ.0)NSORT=2
      IF(IANZ(2).EQ.0.AND.IANZ(3).EQ.0)NSORT=1
C2006      IF(NSORT.EQ.3)THEN
C2006      WRITE(11,2346)
C2006 2347 WRITE(*,2346)
C2006 2346 FORMAT(' INPUT OF IBWWW(4),BWWW(4) IN I1,D12.4 IS REQUIRED HERE!')
C2006      IF(LMN.EQ.0)THEN
C2006      READ(77,'(I1,D12.4)',ERR=5588,END=2348)IBWWW(4),BWWW(4)
C2006      GOTO 2349
C2006      ENDIF
C2006 2348 READ(*,'(I1,D12.4)',ERR=2347,END=4576)IBWWW(4),BWWW(4)
C2006      LMN=1
C2006 2349 WRITE(*,'(I2,D12.4)')IBWWW(4),BWWW(4)
C2006      WRITE(11,'(I2,D12.4)')IBWWW(4),BWWW(4)
C2006      WRITE(7,2350)IBWWW(4),BWWW(4)
C2006 2350 FORMAT(I1,D12.4,' =IBWWW(4),BWWW(4)')
C2006      ENDIF
C2006      IF((NSORT.EQ.1.AND.IBWWW(3).NE.0)
C2006     1.OR.(NSORT.EQ.2.AND.IBWWW(4).NE.0))THEN
      NSOR2=NSORT+2
      DO 2006 I=NSOR2,11
      IF(IBWWW(I).NE.0)THEN
      WRITE(*,2345)
      WRITE(11,2345)
 2345 FORMAT(
     1' ATTEMPT TO FIT LIGANDS OF ..ND SORT, BUT THERE ARE NONE: STOP!')
      STOP 'IBWWW()=1'
      ENDIF
 2006 CONTINUE
      IF(IANZ(1).EQ.0.AND.IANZ(2).EQ.0.AND.IANZ(3).EQ.0)STOP 'NSORT=0'
      DO 235 J=1,NSORT
      IF(IANZ(J).NE.0)ABSTMN(J)=ABSTMN(J)/IANZ(J)
  235 CONTINUE
      FMINIM=ABSTMN(1)
      IF(ABSTMN(2).NE.ZERO)FMINIM=ABSTMN(2)
      IF(ABSTMN(3).NE.ZERO)FMINIM=ABSTMN(3)
      IF(ABSTMN(2).NE.ZERO.AND.ABSTMN(2).LT.FMINIM)FMINIM=ABSTMN(2)
      IF(ABSTMN(1).NE.ZERO.AND.ABSTMN(1).LT.FMINIM)FMINIM=ABSTMN(1)
      WRITE(*,1246)(IANZ(I),I=1,3)
      WRITE(11,1246)(IANZ(I),I=1,3)
 1246 FORMAT(' NUMBER OF LIGANDS OF EACH SORT =',3I5)
C
C**   OUTPUT OF DISTANCES OF ALL ATOMS:
      DO 1183 J=1,NSORT
      WRITE(*,1182)
      WRITE(11,1182)
      WRITE(*,'(6D16.8)')(ABST(I,J),I=1,IANZ(J))
      WRITE(11,'(6D16.8)')(ABST(I,J),I=1,IANZ(J))
 1182 FORMAT(' DISTANCES OF ATOMS IN BOHR:')
 1183 CONTINUE
C
      DO 1184 J=1,NSORT
      WRITE(*,1185)
      WRITE(11,1185)
      WRITE(*,'(6D16.8)')(ABSTB(I,J),I=1,IANZ(J))
      WRITE(11,'(6D16.8)')(ABSTB(I,J),I=1,IANZ(J))
 1185 FORMAT(' DISTANCES OF ATOMS IN PM:')
 1184 CONTINUE
C
      WRITE(*,1181)(ABSTMN(I),I=1,NSORT)
      WRITE(11,1181)(ABSTMN(I),I=1,NSORT)
 1181 FORMAT(' MEAN VALUE(S) =',3D16.8)
C
   44 CONTINUE
C
      IF(MITRUF.NE.0.AND.JA2.NE.0)THEN
C     ELSE: QBST AND ABST WERE CALC. ABOVE!
C**   J=1,3 <=> 3 SORTS OF LIGANDS:
      DO 934 J=1,NSORT
C**   I=1,10 <=> 10 LIGANDS EACH SORT:
      DO 933 I=1,IANZ(J)
      QBST(I,J)=XYZ(I,1,J)**2+XYZ(I,2,J)**2+XYZ(I,3,J)**2
      ABST(I,J)=DSQRT(QBST(I,J))
  933 CONTINUE
  934 CONTINUE
      ENDIF
C
C**   NOW CALCULATION OF STRUCTURE FACTORS:
C
C**   NOW IN PRINCIPLE THE FORMULA P.200 GRIFFITH (RESP. (2.7)P.240
C     HUTCHINGS) FOR GAMMA(Q,(4*PI/(2N+1)),(D-OF Q)**(N+1),Z(N,ALPHA=0...N))!
C**   TESSERAL HARMONICS: FOR EXAMPLE Z20 = Z(N=2,ALPHA=0) =
C     0.25*SQRT(5./PI)*((3.*Z**2-D**2)/D**2)
C**   GAMMA = (A(Q,4*PI/(2N+1)))*(NUMERICAL FACTOR OCCURING IN Z)
C**   FF = PARAMETER = 219470. = 1 HARTREE = E**2/BOHR IN CM**-1
C**   NOTATION OF STEVENS (AND ALSO IN LEA, LEASK, WOLF!):
C     CRYSTAL-FIELD PARAMETERS = A*<R**N>; ONE TERM OF THE OPERATOR =
C     B*(OP.-EQ.) = (A*<R**N>*THETA)*(OP.-EQ.) WITH THETA=ALPHA,BETA,GAMMA!
C
      DO 245 J=1,NSORT
      DO 244 I=1,IANZ(J)
      DZUBQ=QBST(I,J)
      XKOO=XYZ(I,1,J)
      XKOOQ=XKOO**2
      XKOOQQ=XKOOQ**2
      YKOO=XYZ(I,2,J)
      YKOOQ=YKOO**2
      YKOOQQ=YKOOQ**2
      ZKOO=XYZ(I,3,J)
      ZKOOQ=ZKOO**2
      ZKOOQQ=ZKOOQ**2
      DZUB=ABST(I,J)
      DZUBQQ=DZUBQ**2
      DDU=ABST(I,J)
      DD2=QBST(I,J)
      DD3=DDU*DD2
      DD5=DD2*DD3
      DD7=DD2*DD5
C**   B20:
C     "-HALF", BECAUSE THE CHARGE IS E.G. -2 FOR OXYGEN(2-)!
      ABC(J,1,1)=
     1ABC(J,1,1)-HALF*FF*R2*(DREI*ZKOOQ-DZUBQ)/(DZUBQ*DD3)
C**   B22:
      ABC(J,2,1)=
     1ABC(J,2,1)-HALF*FF*DSQRT(1.5D0)*R2*(XKOOQ-YKOOQ)/(DZUBQ*DD3)
C**   B40:
CCC      ABC(J,3,2)=
CCC     1ABC(J,3,2)
      ABCDEA=ZKOOQQ/DZUBQQ
      ABCDEA=ABCDEA*35.0D0
      ABCDEB=ZKOOQ/DZUBQ
      ABCDEB=ABCDEB*(-30.0D0)
      ABCDEF=ABCDEA+ABCDEB+DREI
      ABCDEF=ABCDEF*0.125D0
      ABCDEF=ABCDEF*R4
      ABCDEF=ABCDEF*(-FF)
      ABCDEF=ABCDEF/DD5
      ABC(J,3,2)=
     1ABC(J,3,2)+ABCDEF
C**   B42:
      ABC(J,4,2)=
     1ABC(J,4,2)-VIERTL*FF*DSQRT(2.5D0)*R4*(XKOOQ-YKOOQ)
     1*(7.D0*ZKOOQ-DZUBQ)/(DZUBQQ*DD5)
C**   B43:
      ABC(J,5,2)=
     1ABC(J,5,2)-VIERTL*FF*DSQRT(35.0D0)*R4*(XKOOQ-DREI*YKOOQ)*XKOO*ZKOO
     1/(DZUBQQ*DD5)
C**   B44:
      ABC(J,6,2)=
     1ABC(J,6,2)-(FF/16.D0)*DSQRT(70.0D0)*R4*(XKOOQQ-6.D0*XKOOQ*YKOOQ
     1+YKOOQQ)/(DZUBQQ*DD5)
      IF(KLWERT.EQ.2)GOTO 244
C**   B60:
      ABC(J,7,3)=
     1ABC(J,7,3)-(FF/16.D0)*R6*(231.D0*ZKOOQ*ZKOOQQ
     1-315.D0*ZKOOQQ*DZUBQ+105.D0*ZKOOQ*DZUBQQ-5.D0*DZUBQ*DZUBQQ)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B62:
      ABC(J,8,3)=
     1ABC(J,8,3)-(FF/32.0D0)*DSQRT(105.D0)*R6*(XKOOQ-YKOOQ)
     1*(16.D0*ZKOOQQ-16.D0*(XKOOQ+YKOOQ)*ZKOOQ+(XKOOQ+YKOOQ)**2)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B63
      ABC(J,9,3)=
     1ABC(J,9,3)-(FF/16.0D0)*DSQRT(105.D0)*R6
     1*(8.0D0*ZKOOQ-DREI*XKOOQ-DREI*YKOOQ)*(XKOOQ-DREI*YKOOQ)*XKOO*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B64:
      ABC(J,10,3)=
     1ABC(J,10,3)-DREI*(FF/16.0D0)*DSQRT(3.5D0)*R6*(11.D0*ZKOOQ-DZUBQ)
     1*(XKOOQQ-6.D0*XKOOQ*YKOOQ+YKOOQQ)/(DZUBQ*DZUBQQ*DD7)
C**   B66:
      ABC(J,11,3)=
     1ABC(J,11,3)-(FF/32.0D0)*DSQRT(231.D0)*R6
     1*(XKOOQ*XKOOQQ-15.D0*XKOOQQ*YKOOQ+15.D0*XKOOQ*YKOOQQ
     1-YKOOQ*YKOOQQ)/(DZUBQ*DZUBQQ*DD7)
  244 CONTINUE
  245 CONTINUE
C
      DO 254 J=1,NSORT
      DO 255 I=1,IANZ(J)
      DZUBQ=QBST(I,J)
      XKOO=XYZ(I,1,J)
      XKOOQ=XKOO**2
      XKOOQQ=XKOOQ**2
      YKOO=XYZ(I,2,J)
      YKOOQ=YKOO**2
      YKOOQQ=YKOOQ**2
      ZKOO=XYZ(I,3,J)
      ZKOOQ=ZKOO**2
      ZKOOQQ=ZKOOQ**2
      DZUB=ABST(I,J)
      DZUBQQ=DZUBQ**2
      DDU=ABST(I,J)
      DD2=QBST(I,J)
      DD3=DDU*DD2
      DD5=DD2*DD3
      DD7=DD2*DD5
C***  B21:
      DEF(J,1,1)=
     1DEF(J,1,1)-FF*DSQRT(1.5D0)*R2*XKOO*ZKOO/(DZUBQ*DD3)
C***  B'21:
      DEF(J,2,1)=
     1DEF(J,2,1)-FF*DSQRT(1.5D0)*R2*YKOO*ZKOO/(DZUBQ*DD3)
C**   B'22:
      DEF(J,3,1)=
     1DEF(J,3,1)-HALF*FF*DSQRT(1.5D0)*R2*TWO*XKOO*YKOO/(DZUBQ*DD3)
C***  B41:
      DEF(J,4,2)=
     1DEF(J,4,2)-VIERTL*FF*DSQRT(5.0D0)*R4*XKOO*ZKOO
     1*(7.D0*ZKOOQ-DREI*DZUBQ)/(DZUBQQ*DD5)
C***  B'41:
      DEF(J,5,2)=
     1DEF(J,5,2)-VIERTL*FF*DSQRT(5.0D0)*R4*YKOO*ZKOO
     1*(7.D0*ZKOOQ-DREI*DZUBQ)/(DZUBQQ*DD5)
C**   B'42:
      DEF(J,6,2)=
     1DEF(J,6,2)-VIERTL*FF*DSQRT(2.5D0)*R4*TWO*XKOO*YKOO
     1*(7.D0*ZKOOQ-DZUBQ)/(DZUBQQ*DD5)
C**   B'43:
      DEF(J,7,2)=
     1DEF(J,7,2)-VIERTL*FF*DSQRT(35.0D0)*R4*(DREI*XKOOQ-YKOOQ)*YKOO*ZKOO
     1/(DZUBQQ*DD5)
C**   B'44:
      DEF(J,8,2)=
     1DEF(J,8,2)-VIERTL*FF*DSQRT(70.0D0)*R4*(XKOOQ-YKOOQ)*XKOO*YKOO
     1/(DZUBQQ*DD5)
      IF(KLWERT.EQ.2)GOTO 255
C***  B61:
      DEF(J,9,3)=
     1DEF(J,9,3)-(FF/8.0D0)*DSQRT(10.5D0)*R6*XKOO
     1*(8.D0*ZKOOQQ*ZKOO-20.0D0*ZKOOQ*ZKOO*(XKOOQ+YKOOQ)+5.0D0*ZKOO
     1*(XKOOQ+YKOOQ)**2)/(DZUBQ*DZUBQQ*DD7)
C***  B'61:
      DEF(J,10,3)=
     1DEF(J,10,3)-(FF/8.0D0)*DSQRT(10.5D0)*R6*YKOO
     1*(8.D0*ZKOOQQ*ZKOO-20.0D0*ZKOOQ*ZKOO*(XKOOQ+YKOOQ)+5.0D0*ZKOO
     1*(XKOOQ+YKOOQ)**2)/(DZUBQ*DZUBQQ*DD7)
C**   B'62:
      DEF(J,11,3)=
     1DEF(J,11,3)-(FF/32.0D0)*DSQRT(105.D0)*R6*TWO*XKOO*YKOO
     1*(16.D0*ZKOOQQ-16.D0*(XKOOQ+YKOOQ)*ZKOOQ+(XKOOQ+YKOOQ)**2)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'63
      DEF(J,12,3)=
     1DEF(J,12,3)-(FF/16.0D0)*DSQRT(105.D0)*R6
     1*(8.0D0*ZKOOQ-DREI*XKOOQ-DREI*YKOOQ)*(DREI*XKOOQ-YKOOQ)*YKOO*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'64:
      DEF(J,13,3)=
     1DEF(J,13,3)-DREI*VIERTL*FF*DSQRT(3.5D0)*R6*(11.D0*ZKOOQ-DZUBQ)
     1*(XKOOQ*XKOO*YKOO-XKOO*YKOOQ*YKOO)/(DZUBQ*DZUBQQ*DD7)
C***  B65:
      DEF(J,14,3)=
     1DEF(J,14,3)-DREI*(FF/16.0D0)*DSQRT(77.D0)*R6
     1*(XKOOQQ*XKOO-10.0D0*XKOOQ*XKOO*YKOOQ+5.0D0*XKOO*YKOOQQ)*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C***  B'65:
      DEF(J,15,3)=
     1DEF(J,15,3)-DREI*(FF/16.0D0)*DSQRT(77.D0)*R6
     1*(YKOOQQ*YKOO-10.0D0*YKOOQ*YKOO*XKOOQ+5.0D0*YKOO*XKOOQQ)*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'66:
      DEF(J,16,3)=
     1DEF(J,16,3)-(FF/32.0D0)*DSQRT(231.D0)*R6
     1*(DREI*XKOOQ-YKOOQ)*(XKOOQ-DREI*YKOOQ)*TWO*XKOO*YKOO
     1/(DZUBQ*DZUBQQ*DD7)
  255 CONTINUE
  254 CONTINUE
C
    4 CONTINUE
C
      QLIG(1)=BWWW(2)
      QLIG(2)=ZERO
      IF(NSORT.GE.2)QLIG(2)=BWWW(3)
      QLIG(3)=ZERO
      IF(NSORT.GT.2)QLIG(3)=BWWW(4)
C**   START VALUE OF RHO:
      RHO1=BWWW(1)
      IF(LAUF1.EQ.0)THEN
      LAUF1=1
      WRITE(*,249)RHO1,QLIG(1),QLIG(2),QLIG(3)
      WRITE(11,249)RHO1,QLIG(1),QLIG(2),QLIG(3)
  249 FORMAT(' START: COV.-FAC.("RHO") AND CHARGES:',4D12.4)
      ENDIF
C
      DO 250 I=1,16
      IF(I.LE.11)BWWW(I)=ZERO
      BWWWS(I)=ZERO
  250 CONTINUE
      RHO(1)=RHO1*(FMINIM/ABSTMN(1))**3.5
      RHO(2)=ZERO
      IF(ABSTMN(2).NE.ZERO)RHO(2)=RHO1*(FMINIM/ABSTMN(2))**3.5
      RHO(3)=ZERO
      IF(ABSTMN(3).NE.ZERO)RHO(3)=RHO1*(FMINIM/ABSTMN(3))**3.5
C**   RHO's VARY FROM 0.05D0 TO 0.08D0 FOR LANTHANIDES!
C
      IF(LAUFIN.EQ.0)THEN
      LAUFIN=1
      JAPCEM=JASTRU-1
      IF(JAPCEM.NE.0)THEN
      WRITE(*,1375)
      WRITE(11,1375)
 1375 FORMAT(' "PCEM" (PointChargeElectrostaticModel) was chosen!')
      GOTO 1376
      ENDIF
C**   FOR OUTPUT ONLY:
      MINUS1=-1
      MINUS2=1
      MINUS3=1
      IF(NSORT.EQ.2)MINUS3=0
      IF(NSORT.EQ.1)THEN
      MINUS2=0
      MINUS3=0
      ENDIF
C
      WRITE(11,413)RHO1,RHO(1),RHO(2),RHO(3),MINUS1,MINUS2,MINUS3
      WRITE(*,413)RHO1,RHO(1),RHO(2),RHO(3),MINUS1,MINUS2,MINUS3
  413 FORMAT(' MODEL OF MALTA ... (SIMPLE OVERLAP MODEL ("SOM")):',/
     1,' RHO-INPUT & RHO(1TH&2ND&3RD LIG.),',/
     1,' AND "MINUS"(1TH & 2ND & 3RD SORT OF LIGANDS):'
     1,/,4D16.8,3X,3I3,/,' INPUT IN 3I1 "TIMES MINUS" YES/NO(0)!')
C
      WRITE(11,251)
 4545 WRITE(*,251)
  251 FORMAT(' "MINUS" SHOULD BE -1 FOR THE MORE COVALENT LIGAND',
     1/,' ("NORMAL" IS THE MINUS SIGN!)!:')
C
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3808)MALUS1,MALUS2,MALUS3
      GOTO 4808
      ENDIF
 3808 READ(*,'(3I1)',ERR=4545,END=4576)MALUS1,MALUS2,MALUS3
      LMN=1
 4808 WRITE(*,'(3I2)')MALUS1,MALUS2,MALUS3
      WRITE(11,'(3I2)')MALUS1,MALUS2,MALUS3
      WRITE(7,414)MALUS1,MALUS2,MALUS3
  414 FORMAT(3I1,' =MALUS1,MALUS2,MALUS3')
C**   FOR OUTPUT ONLY:
      IF(MALUS1.NE.0)MINUS1=-MINUS1
      IF(MALUS2.NE.0)MINUS2=-MINUS2
      IF(MALUS3.NE.0)MINUS3=-MINUS3
      WRITE(*,4144)MINUS1,MINUS2,MINUS3
      WRITE(11,4144)MINUS1,MINUS2,MINUS3
 4144 FORMAT(' "MINUS" (1 TH & 2 ND & 3 RD SORT OF LIGANDS):',3I3)
      BETA12(1)=TWO/(ONE-RHO(1))
      IF(MALUS1.NE.0)BETA12(1)=TWO/(ONE+RHO(1))
      BETA12(2)=TWO/(ONE+RHO(2))
      IF(MALUS2.NE.0)BETA12(2)=TWO/(ONE-RHO(2))
      BETA12(3)=TWO/(ONE+RHO(3))
      IF(MALUS3.NE.0)BETA12(3)=TWO/(ONE-RHO(3))
      WRITE(*,4145)(BETA12(I),I=1,NSORT)
      WRITE(11,4145)(BETA12(I),I=1,NSORT)
 4145 FORMAT(' START: FACTOR(S) (DOUBLE)BETA:',3D12.4)
      ENDIF
C**   ENDIF BELONGS TO "IF(LAUFIN.EQ.0)THEN"
      BETA12(1)=TWO/(ONE-RHO(1))
      IF(MALUS1.NE.0)BETA12(1)=TWO/(ONE+RHO(1))
      BETA12(2)=TWO/(ONE+RHO(2))
      IF(MALUS2.NE.0)BETA12(2)=TWO/(ONE-RHO(2))
      BETA12(3)=TWO/(ONE+RHO(3))
      IF(MALUS3.NE.0)BETA12(3)=TWO/(ONE-RHO(3))
C
 1376 CONTINUE
C**   NOW CALCULATION OF B-WYBOURNE VALUES WITH CHARGES, FACTORS 
C     AND STRUCTURE FACTORS AS INPUT!:
C
      DO 137 J=1,3
      DO 136 I=1,NSORT
      FAK246(I,J)=ONE
      IF(JAPCEM.EQ.0)FAK246(I,J)=RHO(I)*BETA12(I)**(2*J+1)
      QLMFAK(I,J)=QLIG(I)*FAK246(I,J)
  136 CONTINUE
  137 CONTINUE
C
      IF(KLICK.EQ.0.AND.JAPCEM.EQ.0)THEN
      KLICK=1
      DO 130 I=1,NSORT
      WRITE(*,131)I,NSORT
      WRITE(11,131)I,NSORT
  131 FORMAT(' No. of SORT =',I2,' OF',I2,' SORTS',/
     1,' QLMFAK(J)=CHARGE*FAK246(J)')
      DO 103 J=1,3
      JM2=J*2
      WRITE(*,132)JM2,QLMFAK(I,J),QLIG(I),FAK246(I,J)
      WRITE(11,132)JM2,QLMFAK(I,J),QLIG(I),FAK246(I,J)
  103 CONTINUE
  132 FORMAT(' J,QLMFAK(J),CHARGE,FAK246(J)=',I2,3D12.4)
  130 CONTINUE
      ENDIF
C
      DO 135 K=1,3
      DO 134 J=1,11
      SUM=ZERO
      DO 133 I=1,NSORT
      SUM=SUM+QLMFAK(I,K)*ABC(I,J,K)
  133 CONTINUE
      BWWW(J)=BWWW(J)+SUM
  134 CONTINUE
  135 CONTINUE
C
      DO 1351 K=1,3
      DO 1341 J=1,16
      SUM=ZERO
      DO 1331 I=1,NSORT
      SUM=SUM+QLMFAK(I,K)*DEF(I,J,K)
 1331 CONTINUE
      BWWWS(J)=BWWWS(J)+SUM
 1341 CONTINUE
 1351 CONTINUE
C
C**   B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66, NOW "WYBOURNE":
      IF(KLICKZ.EQ.0)THEN
      KLICKZ=1
      WRITE(*,2456)
      WRITE(11,2456)
 2456 FORMAT(' BWWW VALUES 20/22/40/42/43/44/60/62/63/64/66:')
      WRITE(*,'(4D16.8)')(BWWW(I),I=1,11)
      WRITE(11,'(4D16.8)')(BWWW(I),I=1,11)
C
      WRITE(*,1332)
      WRITE(11,1332)
 1332 FORMAT(' FURTHER B-VALUES (BWWWS, MOSTLY ONLY FOR CONTROL):',/
     1,61H 21/21'/22'/41/41'/42'/43'/44'/61/61'/62'/63'/64'/65/65'/66':)
      WRITE(*,'(4D16.8)')(BWWWS(I),I=1,16)
      WRITE(11,'(4D16.8)')(BWWWS(I),I=1,16)
C
      JABWWS=0
C     IF(MITRUF.NE.0)GOTO 539
      IF(NGROUP.EQ.20)THEN
      WRITE(11,1712)
 3514 WRITE(*,1712)
 1712 FORMAT(
     1' LIGAND FIELD PARAMETERS CALCULATED HERE ARE WYBOURNE VALUES,',
     1/,' BUT ARE NOT ROTATIONALLY INVARIANT (*(-1)**q to become so)',/,
     1' INPUT YES/NO(0): ROTATIONAL NOT INVARIANT (B-WYBOURNE)',/
     2,' VALUES => fort.9 IN A SPECIAL ORDER, AND STOP?',/
C05   3,' (ELSE: ODD-NUMBERED VALUES ARE MULTIPLIED BY -1 TO BECOME',/
     4,' (ELSE: B-WYBOURNE VALUES ARE POSSIBLY MASKED, AND',/
     5,' GO IN DIFFERENT ORDER => FORT.9, AND => CONDON.)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3901)JABWWS
      GOTO 4901
      ENDIF
 3901 READ(*,'(I1)',ERR=3514,END=4576)JABWWS
      LMN=1
 4901 WRITE(*,'(I2)')JABWWS
      WRITE(11,'(I2)')JABWWS
      WRITE(7,4902)JABWWS
 4902 FORMAT(I1,' =JABWWS')
      ENDIF
C 539 CONTINUE
C
      ENDIF
      REWIND(9)
C
      IF(JABWWS.NE.0)THEN
      WRITE(9,1721)
 1721 FORMAT(' STR00.F!:')
      BWWW(12)=BWWWS(3)
      BWWW(13)=BWWWS(6)
      BWWW(14)=BWWWS(7)
      BWWW(15)=BWWWS(8)
      BWWW(16)=BWWWS(11)
      BWWW(17)=BWWWS(12)
      BWWW(18)=BWWWS(13)
      BWWW(19)=BWWWS(16)
      BWWW(20)=0.0D0
      BWWW(21)=BWWWS(1)
      BWWW(22)=BWWWS(4)
      BWWW(23)=BWWWS(9)
      BWWW(24)=BWWWS(14)
      BWWW(25)=BWWWS(2)
      BWWW(26)=BWWWS(5)
      BWWW(27)=BWWWS(10)
      BWWW(28)=BWWWS(15)
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QB(I),I=1,28)
C05    WRITE(9,'(I2,D16.8,2X,A5)')0,BWWWS(10),QB(27),0,BWWWS(15),QB(28)
C
      WRITE(11,1713)
      WRITE(*,1713)
 1713 FORMAT(' 28-1',
     1' BWWW (WYB.-) VALUES =>fort.9 FINISHED, STOP "fort.9" LATER ON!')
C
      ENDIF
C
      DO 2556 I=1,11
      IF(KMASKE(I).NE.0)BWWW(I)=ZERO
 2556 CONTINUE
C
C**   43/63:
C05      BWWW(5)=-BWWW(5)
C05      BWWW(9)=-BWWW(9)
C**   21/21'/(22')/41/41'/(42')/43'/(44')/61/61'/(62')/63'/(64')/65/65'/(66'):
C05      BWWWS(1)=-BWWWS(1)
C05      BWWWS(2)=-BWWWS(2)
C05      BWWWS(4)=-BWWWS(4)
C05      BWWWS(5)=-BWWWS(5)
C05      BWWWS(7)=-BWWWS(7)
C05      BWWWS(9)=-BWWWS(9)
C05      BWWWS(10)=-BWWWS(10)
C05      BWWWS(12)=-BWWWS(12)
C05      BWWWS(14)=-BWWWS(14)
C05      BWWWS(15)=-BWWWS(15)
C
      IF(NGROUP.EQ.21)THEN
      BWWW(6)=BWWW(3)*DSQRT(5.0D0/14.0D0)
      ELSE IF(NGROUP.EQ.22)THEN
C**   THE SIGN IN FRONT OF DSQRT IS MINUS! THE C3-STEP-UP OPERATOR WITH MINUS
C     SIGN IN FRONT OF IT IS USED (AS USUAL!)!
      BWWW(5)=BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      ENDIF
      IF(KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWWW(10)=BWWW(7)*(-DSQRT(3.5D0))
      ELSE IF(NGROUP.EQ.22)THEN
      BWWW(9)=BWWW(7)*DSQRT(210.0D0)/24.0D0
C**   FORMULA FROM M.T. HUTCHINGS, SOLID STATE PHYSICS VOL.16(1964),227
C     ACADEMIC PRESS NEW YORK AND LONDON; FORMULA (2.15) PAGE 246;
C     (THE OPERATOR IS (Y6-3) - (Y6+3)).
      BWWW(11)=BWWW(7)*DSQRT(231.0D0)/24.0D0
      ENDIF
      ENDIF
C
      IF(IN24.GT.20)THEN
C**   (IN24.GT.20) <=> (NGROUP.EQ.20)
      BWWW(IN24-3)=BWWWS(1)
      BWWW(IN24-2)=BWWWS(4)
      BWWW(IN24-1)=BWWWS(9)
      BWWW(IN24)=BWWWS(14)
      ENDIF
C
      IF(KLICKZ.EQ.1)THEN
      KLICKZ=2
C
      IF(NGROUP.EQ.21.OR.NGROUP.EQ.22)THEN
      WRITE(*,2459)
      WRITE(11,2459)
 2459 FORMAT(' CUBIC: B4Q RE-CALCULATED (AND B6Q FOR F EL.)!')
      IF(NGROUP.EQ.22)THEN
      WRITE(*,2495)
      WRITE(11,2495)
 2495 FORMAT(' GROUP-No.=22: IF OCTAHEDRON, B43 <=> OCTAHEDRON WITH',
     1/,' ONE OF ITS CORNERS AT x>0, y=0, z>0 ("STANDARD")!')
      ENDIF
      ENDIF
C
      WRITE(*,2457)NGROUP
      WRITE(11,2457)NGROUP
 2457 FORMAT(' B-WYBOURNE VALUES AFTER MASKING <=> GROUP-No.=',I3,/
     1,' 20/22/40/42/43/44/60/62/63/64/66:')
      WRITE(*,'(4D16.8)')(BWWW(I),I=1,11)
      WRITE(11,'(4D16.8)')(BWWW(I),I=1,11)
      IF(IN24.GT.20)THEN
      WRITE(*,2475)
      WRITE(11,2475)
 2475 FORMAT(' AND FOR GROUP-No.=20:',/
     1,' 21/41/61/65/21''/22''/41''/42''/43''/44''/61''/62''/63''/64''/'
     2,'65''/66'':')
      WRITE(*,'(4(D16.8,1X,A5))')(BWWW(I),QW(I),I=21,IN24)
      WRITE(11,'(4(D16.8,1X,A5))')(BWWW(I),QW(I),I=21,IN24)
      WRITE(*,'(4(D16.8,1X,A5))')(BWWWS(I),QS(I),I=2,3)
     1,(BWWWS(I),QS(I),I=5,8)
     2,(BWWWS(I),QS(I),I=10,13),(BWWWS(I),QS(I),I=15,16)
      WRITE(11,'(4(D16.8,1X,A5))')(BWWWS(I),QS(I),I=2,3)
     1,(BWWWS(I),QS(I),I=5,8)
     2,(BWWWS(I),QS(I),I=10,13),(BWWWS(I),QS(I),I=15,16)
      ENDIF
      NSORT1=NSORT+1
      WRITE(*,2458)(IBWWW(I),I=1,NSORT1)
      WRITE(11,2458)(IBWWW(I),I=1,NSORT1)
 2458 FORMAT(
     1' COV.-FAC. & (MAX.) 3 CHARGES FITTED YES/NO(0):',4I3)
      ENDIF
C
      IF(JABWWS.NE.0)THEN
      STOP 'fort.9'
      ENDIF
C**   IF(JABWWS.EQ.0)THEN
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      WRITE(11,2460)
      WRITE(*,2460)
 2460 FORMAT(' B-WYBOURNE VALUES => FILE fort.9!')
      WRITE(9,1721)
C1721 FORMAT(' STR00.F!:')
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QW(I),I=1,20)
      IF(IN24.GT.20)THEN
C**   21/41/61/65:
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QW(I),I=21,IN24)
C**   (21)/21'/22'/(41)/41'/42'/43'/44'/(61)/61'/62'/63'/64'/(65)/65'/66':
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWWS(I),QS(I),I=2,3)
     1,(0,BWWWS(I),QS(I),I=5,8)
     2,(0,BWWWS(I),QS(I),I=10,13),(0,BWWWS(I),QS(I),I=15,16)
      ENDIF
C     IF(MITRUF.NE.0)GOTO 538
      WRITE(11,1711)
 3515 WRITE(*,1711)
 1711 FORMAT(
     1' INPUT YES/NO(0): STOP')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3902)ISTOP9
      GOTO 4903
      ENDIF
 3902 READ(*,'(I1)',ERR=3515,END=4576)ISTOP9
      LMN=1
 4903 WRITE(*,'(I2)')ISTOP9
      WRITE(11,'(I2)')ISTOP9
      WRITE(7,4904)ISTOP9
 4904 FORMAT(I1,' =ISTOP9')
      IF(ISTOP9.NE.0)STOP 'ISTOP9'
C 538 CONTINUE
      ENDIF
C**   ENDIF
C
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND STR001 from str00.f
      END
      SUBROUTINE DSPEVW(IONE,DBLMAT,DBLMA1,EIWERT,EIVECV,ND2002,KASSUM
CCC90 TO BE COMPILED WITH f90
     1,DUMMY,NDMAL3,ND20QU)
C**   FILE NAME <=> (PCDSpevZHpev.f - FOR PC-LINUX!) <=> 
C     dszhOQ.f - IBM-UNIX with nag19 & shortO.f-dimens. (or shortQ.f-dim.).
C     IONE=1 - DBLMAT=DBLMA1 - ND20QU=ND2002**2
C     ONE OR THE OTHER NOT USED FOR UNIX AND LINUX, RESPECTIVELY!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      CHARACTER*1 JOBZ,UPLO
      DIMENSION EIVECV(ND2002,*),DBLMAT(ND2002,ND2002),DBLMA1(ND20QU)
C06   PARAMETER (ND3432=3432,KK=12,LWORK=2*ND3432**2+(5+2*KK)*ND3432+1)
C**   PARAMETER (ND3432=3432,LWORK=ND3432**2+6*ND3432+1)
CCC90      DIMENSION WORK(LWORK)
      ALLOCATABLE WORK (:)
      SAVE KLICK,WORKO
      DATA KLICK /0/
      JOBZ='V'
      UPLO='L'
      NDMAL6=NDMAL3*2
C06   IF(ND3432.LT.ND2002)STOP 'ND3432'
      ND3432=KASSUM
      LWORK=2*ND3432**2+29*ND3432+1
      K=0
      DO 4321 J=1,KASSUM
      DO 4323 I=J,KASSUM
      K=K+1
      DBLMA1(K)=DBLMAT(I,J)
 4323 CONTINUE
 4321 CONTINUE
      ALLOCATE (WORK(LWORK))
      CALL DSPEVD(JOBZ,UPLO,KASSUM,DBLMA1,EIWERT,EIVECV,ND2002
     1,WORK,LWORK,DUMMY,NDMAL6,INFO)
      IF(KLICK.EQ.0.OR.(KLICK.NE.0.AND.WORK(1).GT.WORKO))THEN
      WORKO=WORK(1)
      WRITE(*,168)WORKO
      WRITE(11,168)WORKO
  168 FORMAT(' FROM DSPEVD: WORK(1)=',D16.8)
      IF(INT(WORKO).GT.LWORK)STOP 'WORKO'
      KLICK=KLICK+1
      ENDIF
      IF(INFO.NE.0)THEN
      WRITE(*,1119)INFO
      WRITE(11,1119)INFO
 1119 FORMAT(I9,' WARNING: STOP INFORL IGNORED!')
      ENDIF
      DEALLOCATE (WORK)
      RETURN
CEND DSPEVW from dszhLQ90.f
      END
      SUBROUTINE ZHPEVW(IONE,CPXMAT,CPXMA1,EIWERT,EIVECC,ND2828,KASSMN
     1,DUMMYD,NDMAL4,DUMMY,ND28QU)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      CHARACTER*1 JOBZ,UPLO
      COMPLEX*16 CPXMAT,EIVECC,CPXMA1
      DIMENSION CPXMAT(ND2828,ND2828),EIVECC(ND2828,*),CPXMA1(ND28QU)
      PARAMETER (NDZH28=1110,KK=12,LRWORK=3*NDZH28**2+(4+2*KK)*NDZH28+1)
C**   PARAMETER (NDZH28=1110,LRWORK=2*NDZH28**2+5*NDZH28+1)
CCC90      DIMENSION RWORK(LRWORK)
      ALLOCATABLE RWORK (:)
      SAVE KLICK,RWORKO
      DATA KLICK /0/
      JOBZ='V'
      UPLO='L'
      NDMAL6=(NDMAL4*3)/2
      K=0
      DO 4321 J=1,KASSMN
      DO 4323 I=J,KASSMN
      K=K+1
      CPXMA1(K)=CPXMAT(I,J)
 4323 CONTINUE
 4321 CONTINUE
      ALLOCATE (RWORK(LRWORK))
      CALL ZHPEVD(JOBZ,UPLO,KASSMN,CPXMA1,EIWERT,EIVECC,ND2828
     1,DUMMYD,NDMAL4,RWORK,LRWORK,DUMMY,NDMAL6,INFO)
      IF(KLICK.EQ.0.OR.(KLICK.NE.0.AND.RWORK(1).GT.RWORKO))THEN
      RWORKO=RWORK(1)
      WRITE(*,168)RWORKO
      WRITE(11,168)RWORKO
  168 FORMAT(' FROM ZHPEVD: RWORK(1)=',D16.8)
      IF(INT(RWORKO).GT.LRWORK)STOP 'RWORKO'
      KLICK=KLICK+1
      ENDIF
      IF(INFO.NE.0)THEN
      WRITE(*,1119)INFO
      WRITE(11,1119)INFO
 1119 FORMAT(I9,' WARNING: STOP INFOCX IGNORED!')
      ENDIF
      DEALLOCATE (RWORK)
      RETURN
CEND ZHPEVW from dszhLQ90.f
      END
