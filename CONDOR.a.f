      PROGRAM CONDOR
 1920 FORMAT(
     1' PROGRAM CONDOR written in STANDARD FORTRAN 77.',/,
     2' Copyright 2000 Helmut SCHILDER, Fachhochschule Aachen Germany.',
     3/,' PROGRAM CONDOR is free software, covered by the GNU General Pu
     4blic License,',/,' and you are welcome to change it and/or distrib
     5ute copies of it',/,' under certain conditions.',/,
     6' Type "show copying" to see the conditions.',/,
     7' There is absolutely no warranty for PROGRAM CONDOR.  Type "show 
     8warranty" for details.',/,' Type "show more" to see some hints.'
     9,/,' Scientific use of computational results or program code shoul
     4d include the citation:',/,
     5' Helmut Schilder: PROGRAM CONDOR, Fachhochschule Aachen 2000.'
     6,/,' RETURN to start calculation, type "9" to stop.')
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   "ABOUT THIS PROGRAM" SEE TEXT BELOW STARTING AT LINE 1408 (THIS TEXT
C     ONLY CONCERNING D BLOCK ATOMS OR IONS). FOR F BLOCK ATOMS OR IONS
C     SEE LINE 244. IN ADDITION THERE ARE MANY "TESTS" INCORPORATED!
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW
C     IN SUBROUTINE SUSC:
      PARAMETER(J20=44,K24=24,K25=41)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/RRF/RACAHB,RACAHC,FKSIDA
      COMMON/RF/RACAKB(9),FKSIDK(9)
      COMMON/FINTE/FINT(4,13),FKSIWI(13)
      COMMON/BWWOLT/BWWOLD(J20)
      COMMON/JTSTZZ/JTSTZX
      COMMON/KLIXYZ/ISTZXY
      COMMON/QBQVQQ/QB,QV,QQ
      COMMON/MOWDAT/NOWDAT
      CHARACTER XYZ
      CHARACTER QTEXT1(60)
      CHARACTER*13 QTEXT0
      CHARACTER*15 DATEI,QMPC
      CHARACTER*50 QUIVAR,QUIVAQ
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,VIER=4.0D0,I16=44
     1,VPREZ6=1.0D6/(4.D0*3.1415926D0))
C**   I16 NOT(!) FOR DIMENSIONS OF BWW, BWWW AND IBWWW, BECAUSE THESE ARE
C     IN COMMON!
      PARAMETER(REZSQ3=ONE/1.7320507D0,WURZ2=1.4142135D0,REZSQ2=
     1REZSQ3*WURZ2)
      DIMENSION FINTEG(4),RACAHB(9,5,3),RACAHC(9,5,3),FKSIDA(9,5,3)
     1,REDFAZ(3),DIRECZ(3),SIGMA0(601),FKSIU(3),FINTEU(3,2)
C**   THERE ARE 23 DIFFERENT POSSIBILITIES OF INPUT OF (MAX.27) B-VALUES
C     ("MASKE")! (STANDARD: SYMMETRIES DOWN TO ORTHO-RHOMBIC - NO 5-FOLD AXES -
C     IN ADDITION, WITH SPECIAL INPUT: ANY SYMMETRY INCLUDING NO SYMMETRY (C1))
C     LIT.: HANDBOOK ON THE PHYSICS AND CHEMISTRY OF RARE EARTHS VOL.23
C     CHAPTER 155. 1996 ELSEVIER SCIENCE B.V.
      DIMENSION IGROUP(23,4),MASKE(11,19),KMASKE(20),MINPLS(3)
     1,MASKED(23,4),MULMUD(9),MULMUP(5)
     2,LGROUP(5,8),LOLUMM(8)
      COMMON/MAINPR/ZETA,ABST,FINTEG,REDFAZ,DIRECZ,SIGMA0
     1,JASTRU,KLWERT,NREL,JAWIGN,NGROUP,JAVANV,MOLFLD,MIST16,KMASKE
      DATA FKSIU/2113.D0,1926.D0,1748.D0/
      DATA JACHI0,NEUORB,KLICK7/0,0,0/
      DATA MINPLS/1,1,1/
      DATA FINTEU/76557.D0,50078.D0,36429.D0,71278.D0,46251.D0,33423.D0/
C**   DATA INBWWW/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0/ ... (..BWW..) AND
C     DATA NDATAM,NOPROZ,JAFFAK,NOANAL: SEE COMMON WWWWWW!
      DATA MULMUD/10,21,28,25,6,25,28,21,10/
      DATA MULMUP/6,9,4,9,6/
      DATA IGROUP
C**   S EL. - KLWERT=0, KLWER1=1 (19TH COLUMN OF MASKE, ALL ZEROS,
C     I.E NO B-VALUES NO MATTER WHICH POINT GROUP IS GIVEN):
     1/19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19
     1,19,19,19
C**   P EL. - KLWERT=1, KLWER1=2 (ONLY THREE CLASSES OF POINT GROUPS):
     2,18,17,17,17,17,17,17,17,17,17,18,17,17,17,18,17,17,17,17,18
     2,19,19,19
C**   D EL. - KLWERT=2, KLWER1=3 (11TH COLUMN IDENTICAL 10TH COLUMN!):
     3,9,10,12,11,10,11,12,13,11,11,9,13,12,10,9,13,12,10,11,16
     3,14,15,19
C**   F EL. - KLWERT=3, KLWER1=4:
     4,1,2,4,3,2,3,4,5,3,3,1,5,4,2,1,5,4,2,3,8
     4,6,7,19/
      DATA LGROUP
     1/1,11,15,0,0
     2,2,5,14,18,0
     3,4,6,9,10,19
     4,3,7,13,17,0
     5,8,12,16,0,0
     6,21,0,0,0,0
     7,22,0,0,0,0
     8,20,0,0,0,0/
      DATA LOLUMM
     1/3,4,5,4,3,1,1,1/
      DATA MASKE
C - F EL.:
     1/1,1,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,1
     3,1,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,1,1,0,0,1,0
     5,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,0,0,0
     7,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1
C - D EL.:
     1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0
     3,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0
     5,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
     7,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0
C - P EL.:
     9,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0
C - S EL. AND FREE ION (SPH(ERICAL) <=> MASKE(,19)): (ALL =0 <=> NO B-VALUES APPEAR!)
     1,0,0,0,0,0,0,0,0,0,0,0/
C**   MASKED <=> NUMBER OF DIRECTION(S), FOR WHICH CHI IS CALCULATED,
C     IF IOPT1=1 (NRDIRE =1, =2 OR =3) (DIMENSION OF MASKED = 23,4 <=> NGROUP,
C     KLWER1),OR WHERE CHI WILL BE STORED, IF IOPT1.EQ.0!
C**   FOR IOPT1.GT.1 CHI WILL BE STORED (E.G.) IN CHI1(2) OR CHI1(3)!
      DATA MASKED
C**   FIRST LINE S EL., THEN P, D AND F EL.!
     1/1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1
     3,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1
     4,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,2,3,1,1,1/
C
      OPEN(11,ERR=4581,FILE='fort.11',STATUS='NEW')
      OPEN(7,ERR=4581,FILE='fort.7',STATUS='NEW')
      OPEN(77,ERR=4577,FILE='OLDf7.DAT',STATUS='OLD')
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.I16)STOP 'J.NE.I'
      IF(K24.LT.20)STOP'K.LT20'
      IF(K24.NE.20.AND.K24.NE.24)STOP '24NE24'
      IF(K25.LT.K24)STOP'K.LT.K'
      LMN=0
 1921 CONTINUE
      IN24=K24
      IN25=K25
      WRITE(*,1920)
      WRITE(11,1920)
      IF(LMN.EQ.0)THEN
      READ(77,'(A13)',ERR=5588,END=3801)QTEXT0
      WRITE(*,5599)
      WRITE(11,5599)
 5599 FORMAT(
     1' ATTENTION: (PART OF) INPUT COMES FROM FILE OLDf7.DAT!')
      GOTO 4801
      ENDIF
 3801 READ(*,'(A13)',ERR=1921,END=4576)QTEXT0
      LMN=1
 4801 IF(QTEXT0(1:1).EQ.'9')THEN
      STOP
      ELSE IF(QTEXT0(1:6).EQ.'show c')THEN
      CALL SHOWC
      GOTO 1921
      ELSE IF(QTEXT0(1:6).EQ.'show w')THEN
      CALL SHOWW
      GOTO 1921
      ELSE IF(QTEXT0(1:6).EQ.'show m')THEN
      CALL SHOWM
      GOTO 1921
      ENDIF
CKR: Jan.2007 - "QTEXT0(1:1):%"!
C CKR INTRODUCED TO MARK CHANGES FROM CONDOK("COMPLEX") TO CONDOR("HERE")!
CKR      WRITE(7,1922)QTEXT0(1:1)
      WRITE(7,1922)
 1922 FORMAT(1X,' "HERE CONDOR"')
C
      WRITE(*,1298)
      WRITE(11,1298)
 1298 FORMAT(
     1/,' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF ATOMS OR'
     1,' IONS',/,' WITH NS**N, NP**N, ND**N OR NF**N ELECTRONIC'
     2,' CONFIGURATION.',/)
CKR     ,' AND WITH 4F**N ELECTRONIC CONFIGURATION',
CKR     3' WITH SPECIFIC GROUND TERM (2S+1)L,',/,' I.E. FOR THE CASE 4F**N'
CKR     4,' THERE ARE TWO ESSENTIALLY DIFFERENT ROUTINES.',/)
C
      WRITE(11,3321)
 3320 WRITE(*,3321)
 3321 FORMAT(' INPUT 4 DIGITS: L VALUE OF 1 EL.(0..3), FOR MORE (OR LESS
     1) OUTPUT',/,' OF INTERMEDIATE VALUES (1(9)), OF MORE TEX',
     2'T (1 OR 2),',/,' FOR MORE POSSIBILITIES OF TESTS (1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(4I1)',ERR=5588,END=3802)KLWERT,MOROUT,MORTEX,JATEST
      GOTO 4802
      ENDIF
 3802 READ(*,'(4I1)',ERR=3320,END=4576)KLWERT,MOROUT,MORTEX,JATEST
      LMN=1
 4802 IF(KLWERT.GT.3)KLWERT=3
      WRITE(7,3322)KLWERT,MOROUT,MORTEX,JATEST
 3322 FORMAT(4I1,' =KLWERT,MOR(LESS)OUT,MORTEX,JATEST')
      WRITE(*,3323)KLWERT,MOROUT,MORTEX,JATEST
      WRITE(11,3323)KLWERT,MOROUT,MORTEX,JATEST
 3323 FORMAT(I2,3I1,' =KLWERT,MOR(LESS)OUT,MORTEX,JATEST!!!!!!!!!')
      LESS=0
      IF(MOROUT.EQ.9)THEN
      MOROUT=0
      LESS=1
      ENDIF
      IF(MOROUT.GT.1)MOROUT=1
      LTS=0
CKR      IF(JATEST.EQ.9)THEN
      IF(JATEST.EQ.9)JATEST=0
CKR      JATEST=0
CKR      LTS=1
      LTSS=1
CKR      ENDIF
      IF(JATEST.GT.1)JATEST=1
CKR      IF(MORTEX.EQ.9)MORTEX=-1
      IF(MORTEX.EQ.9)MORTEX=0
CKR      IF(MORTEX.GT.1)MORTEX=1
      IF(MORTEX.GT.0)THEN
      WRITE(*,6232)
      WRITE(11,6232)
 6232 FORMAT(' "4 DIGITS" MEANS "FORTRAN FORMAT 4I1".'
     1,/,' !!!!!!!!! MEANS "ALSO TO FILE fort.7".')
      ENDIF
      IF(MOROUT.NE.0.OR.LESS.NE.0.OR.JATEST.NE.0.OR.LTS.NE.0.OR.MORTEX.
     1GT.0)THEN
      WRITE(*,6233)MOROUT,LESS,JATEST,MORTEX
      WRITE(11,6233)MOROUT,LESS,JATEST,MORTEX
 6233 FORMAT(
     1' RESULTING VALUES FOR MOROUT,LESS(OUT),JATEST,MORTEX:',4I2)
      ENDIF
      IF(MORTEX.EQ.2)THEN
      CALL TEXT2R(LMN,0,-1)
      ELSE IF(MORTEX.GT.2)THEN
      CALL TEXT2R(LMN,0,0)
      ENDIF
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,11)
      KLWER1=KLWERT+1
C
      JTSTZX=0
      IF(JATEST.NE.0)THEN
      WRITE(11,1923)
 7323 WRITE(*,1923)
 1923 FORMAT(
     1' HERE FOR TEST "JTSTZX" (MAGN.FIELD IN TANABE/TANAKE)!:',/,
     1' (FOR:) IOPT1=0 OR =2("SUGANC/SUGANCK//SUGANK/SUGANKK"):',/,
     1' NO MAGNETIC FIELD IN SUGANC/SUGANK(JACUGD=0),',/,
     2' INSTEAD =>DBLMAT IN TANABE/TANAKE!',/,
     3' PUT IN YES/NO(0) TO DO THIS TEST!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=7321)JTSTZX
      GOTO 7322
      ENDIF
 7321 READ(*,'(I1)',ERR=7323,END=4576)JTSTZX
      LMN=1
 7322 CONTINUE
      WRITE(7,7324)JTSTZX
 7324 FORMAT(I1,' =JTSTZX')
      WRITE(*,7325)JTSTZX
      WRITE(11,7325)JTSTZX
 7325 FORMAT(I2,' =JTSTZX!!!!!!!!!')
      ENDIF
C
      JAWIGN=0
      IF(KLWERT.EQ.3)THEN
CKR 8323 FORMAT(' "CONDOR": JAWIGN ALWAYS => 0!')
CKR      IF(JAWIGN.EQ.0)THEN
      WRITE(*,1289)
      WRITE(11,1289)
 1289 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF F BLOCK'
     2,' ATOMS OR IONS',/,' WITH NF**N ELECTRONIC CONFIGURATION,'
     3,' SIMILAR TO D BLOCK ATOMS OR IONS!',/)
CKR      ENDIF
      ELSE IF(KLWERT.EQ.2)THEN
      WRITE(*,1297)
      WRITE(11,1297)
 1297 FORMAT(
     1' CALCULATION OF (MOLAR) MAGNETIC SUSCEPTIBILITIES OF D BLOCK'
     1,' ATOMS OR IONS',/,' WITH ND**N ELECTRONIC CONFIGURATION:'
     1,' THE ATOMS OR IONS WILL BE LISTED,',/,' IF ONE CHOOSES DATA'
     1,' FOR RACAH PARAMETERS AND SPIN-ORBIT COUPLING CONSTANTS',/
     1,' FROM THE BOOK BY GRIFFITH LATER ON.',/)
      ENDIF
CKR   ENDIF BEFORE FOR "IF(KLWERT.EQ.3)THEN - ELSE IF(KLWERT.EQ.2)"!:
C**   ENDIF BEFORE FOR "IF(KLWERT.EQ.2)"!:
C** BREAK OF ALL IF's!
      WRITE(11,768)
 7689 WRITE(*,768)
  768 FORMAT(' THERE'
     1,' ARE 23 DIFFERENT POSSIBILITIES OF INPUT OF (POINT) GROUPS:',
     2/,' D2H,D3H,D4H,D5H,D6H,D-INF-H,D2D,D3D,D4D,D6D',/,' D2,D3,D4',
     3',D6,C2V,C3V,C4V,C6V,C-INF-V,C1,CUB(I),CUB(II),O(3)',/,' INPUT ',
     4'IN I2 THE (CONSECUTIVE) NUMBER (0 => 21 <=> CUB-4FOLD ROT.AXIS)')
      IF(MORTEX.GT.0)THEN
      WRITE(*,769)
      WRITE(11,769)
  769 FORMAT(' C-INF-V MEANS: AXIAL WITH VERTICAL PLANES;',
CKR     1' ??? MEANS: "ALL B-VALUES"',/,' ((MORE THAN) "REAL" PART OF C3)')
     1' C1 MEANS: "ALL B-VALUES"')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3804)NGROUP
      GOTO 4804
      ENDIF
 3804 READ(*,'(I2)',ERR=7689,END=4576)NGROUP
      LMN=1
 4804 IF(NGROUP.LT.1.OR.NGROUP.GT.23)NGROUP=21
      WRITE(7,771)NGROUP
  771 FORMAT(I2,' =NGROUP (POINT GROUP)')
      WRITE(*,772)NGROUP
      WRITE(11,772)NGROUP
  772 FORMAT(I3,' =NGROUP (POINT GROUP)!!!!!!!!!')
      IF(NGROUP.EQ.3.OR.NGROUP.EQ.8.OR.NGROUP.EQ.21.OR.NGROUP.EQ.22)THEN
      WRITE(*,770)
      WRITE(11,770)
  770 FORMAT(' SOME USEFUL HINTS FOR THE GROUP CHOSEN: CHOOSE "MORTEX"')
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,1221)
      WRITE(11,1221)
 1221 FORMAT(' B40=21.DQ FOR CUB(I); NEG. B40 FOR CUB(I), IF 4-FOLD COOR
     1D.;',/,' FOR THE TETRAG. CASE, B44=SQRT(5./14.)*B40 => CUB(I), IF 
     2B20=0 (FOR D EL.;',/,' B64=-SQRT(3.5)*B60);',/,' FOR THE TRIG. CAS
     3E, B43=-SQRT(10./7.)*B40 => CUB(II), IF B20=0 (FOR D EL.;',/,' B63
     4=SQRT(210.)*B60/24., B66=SQRT(231.)*B60/24.)',/,' (IT IS THEN B40-
     5CUB(II)=-(2/3)*B40-CUB(I) (FOR D EL.; B60-CUB(II)=',/,' (16/9)*B60
     6-CUB(I)!)')
      ENDIF
      KOLUMN=IGROUP(NGROUP,KLWER1)
      DO 759 I=1,11
      KMASKE(I)=0
      IF(MASKE(I,KOLUMN).EQ.0)KMASKE(I)=1
  759 CONTINUE
C**   IN ADDITION THERE ARE SOME FIXED B-VALUES IN CUBIC SYMMETRY!
C**   PRE-OCCUPATION (REMAINS NEARLY ALWAYS):
      NRDIRE=MASKED(NGROUP,KLWER1)
C**   NRDIRE = No. OF DIRECTIONS CONCERNED
      WRITE(*,760)
      WRITE(11,760)
  760 FORMAT(' FROM THE FOLLOWING LIST OF POSSIBLE B-VALUES THOSE'
     1,' MARKED WITH 1 ARE EXCLUDED:',/
     2,' B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66 ')
      WRITE(*,'(11I5)')(KMASKE(I),I=1,11)
      WRITE(11,'(11I5)')(KMASKE(I),I=1,11)
C
      IF(LESS.EQ.0)THEN
      IF(KLWERT.EQ.1)THEN
      IF(MORTEX.GT.0)THEN
      WRITE(*,1222)
      WRITE(11,1222)
      WRITE(*,1224)
      WRITE(11,1224)
      WRITE(*,1225)
      WRITE(11,1225)
      ELSE IF(MORTEX.EQ.0)THEN
      IF(KOLUMN.EQ.17)THEN
      WRITE(*,1222)
      WRITE(11,1222)
 1222 FORMAT(' EQUIVALENT ARE: 2..10, 12..14, 16..19')
      ELSE IF(KOLUMN.EQ.18)THEN
      WRITE(*,1224)
      WRITE(11,1224)
 1224 FORMAT(' EQUIVALENT ARE: 1, 11, 15, 20')
      ELSE IF(KOLUMN.EQ.19)THEN
      WRITE(*,1225)
      WRITE(11,1225)
 1225 FORMAT(' EQUIVALENT ARE: 21, 22, 23')
      ENDIF
      ENDIF
      ELSE IF(KLWERT.GT.1)THEN
      IF(KOLUMN.NE.19)THEN
      KOLUMM=KOLUMN
      IF(KLWERT.EQ.2)KOLUMM=KOLUMM-8
      IF(MORTEX.GT.0)THEN
      DO 1226 J=1,8
      WRITE(*,1223)(LGROUP(I,J),I=1,LOLUMM(J))
      WRITE(11,1223)(LGROUP(I,J),I=1,LOLUMM(J))
 1226 CONTINUE
      ELSE IF(MORTEX.EQ.0)THEN
      WRITE(*,1223)(LGROUP(I,KOLUMM),I=1,LOLUMM(KOLUMM))
      WRITE(11,1223)(LGROUP(I,KOLUMM),I=1,LOLUMM(KOLUMM))
 1223 FORMAT(' EQUIVALENT ARE:',5I3)
      ENDIF
      ENDIF
      ENDIF
      ENDIF
C  ENDIF BEFORE BELONGS TO "IF(LESS.EQ.0)THEN"!
C** BREAK OF ALL IF'S!
      JAVANV=0
CKR      IOPT1=0
      IOPT1=1
      IOPT2=0
      IOPT3=0
      IOPT4=1
CKR      IF(LTS.NE.0)THEN
      IF(JATEST.EQ.0)THEN
C
      WRITE(11,605)
  604 WRITE(*,605)
  605 FORMAT(/,' INPUT IN I1 IOPT2=1 FOR (SYMM.)DIMER OR =2 FOR DIMER CO
     1MB. MODEL FOR F EL.',/,' (IOPT2=0 FOR (SINGLE) ION)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3805)IOPT2
      GOTO 4805
      ENDIF
 3805 READ(*,'(I1)',ERR=604,END=4576)IOPT2
      LMN=1
 4805 IF(IOPT2.GT.2)IOPT2=2
      WRITE(7,606)IOPT2
  606 FORMAT(I1,' =IOPT2 ("DIMER")')
      WRITE(*,607)IOPT2
      WRITE(11,607)IOPT2
  607 FORMAT(I2,' =IOPT2 ("DIMER")!!!!!!!!!')
      IF(IOPT2.EQ.2.AND.KLWERT.NE.3)THEN
      IOPT2=1
      WRITE(*,652)
      WRITE(11,652)
      ENDIF
CKR      IF(NRDIRE.NE.1)THEN
CKR 6522 FORMAT(' INPUT IN I1 IOPT1=1 FOR MEAN VALUE OF CHI WITH CHI CALCUL
CKR     1ATED FOR',/,' 2 OR 3 DIRECTIONS (IOPT1=0 FOR 1 (MEAN) DIRECTION)')
CKR      ENDIF
CKR      I=1
CKR      IF(IOPT1.EQ.1)I=NRDIRE
CKR      IF(NRDIRE.NE.1)THEN
      WRITE(*,707)NRDIRE
      WRITE(11,707)NRDIRE
  707 FORMAT(' DIRECTION(S) CONCERNED AND TO BE CALCULATED:',I2)
CKR      ENDIF
C
CKR      ELSE IF(LTS.EQ.0)THEN
      ELSE IF(JATEST.NE.0)THEN
CKR      IF(IOPT1.LE.1)THEN
CKR      I=1
CKR      IF(IOPT1.EQ.1)I=NRDIRE
CKR      WRITE(*,706)NRDIRE,I
      WRITE(*,706)NRDIRE
      WRITE(11,706)NRDIRE
  706 FORMAT(' DIRECTION(S) CONCERNED AND TO BE CALCULATED, IF IOPT1=1:'
     1,I2)
CKR      ENDIF
C
      WRITE(11,650)
 6501 WRITE(*,650)
  650 FORMAT(/,' INPUT IN 3I1:',/,
     1' IOPT2=0...2 FOR (SINGLE) ION/ (SYMM.)DIMER/ COMB.MOD. FOR F EL.,
     1,',/,' IOPT1=1 OR 2  FOR DIRECTION(S) OF FIELD, =1 FOR MEAN V',
     2'ALUE OF CHI,',/,' CHI CALCULATED FOR 1,2 OR 3 DIRECTION(S) ACCORD
     3ING TO POINT GROUP.',/,' (DIRECTION AT WILL INCL. Y-DIRECTION: IOP
     4T1=2) (IOPT1=0 => IOPT1=1),',/,' AND JAVANV (=1 FOR OPTION "VANVLE
     5CK")!',/
     1,' (IOPT1=0 FOR 1 (MEAN) DIRECTION IS POSSIBLE FOR JTSTZX.NE.0)')
      IF(MORTEX.GT.0)THEN
      WRITE(*,651)
      WRITE(11,651)
  651 FORMAT(/,
     1' (THERE ARE 12(!) DIFFERENT OPTIONS IOPT12 IN SUBROUTINE SELECT,'
     2,/,' WHICH RESULT FROM 4*3=12 INPUT-OPTIONS, AND THE LATTER ARE:'
     3,/,' (IOPT1=:) (IOPT1=0 WAS DELETED), MEAN VALUE OF CHI WITH',/,
     4' CHI CALCULATED FOR 1,2,3 DIRECTION(S) (=1),',/,' DIRECTION AT'
     5,' WILL (=2), (IOPT1=3 WAS DELETED).',/
     6,' (THEY MAY BE SIMULATED USING IOPT1=2 ACCORDING TO "DIRECTIONS',
     6'CONCERNED"!)',/
     7,' - (IOPT2=:) SINGLE ION (=0), (SYMM.)DIMER (=1), DIMER COMB.MOD.
     8',/,' FOR F EL. (=2)! (IOPT12=3*IOPT1+IOPT2+1=1...12))')
      ENDIF
C
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3807)IOPT2,IOPT1,JAVANV
      GOTO 4807
      ENDIF
 3807 READ(*,'(3I1)',ERR=6501,END=4576)IOPT2,IOPT1,JAVANV
      LMN=1
 4807 IF(IOPT1.GT.2)IOPT1=2
      IF(IOPT1.EQ.0.AND.JTSTZX.EQ.0)IOPT1=1
      IF(IOPT2.GT.2)IOPT2=2
      WRITE(7,653)IOPT2,IOPT1,JAVANV
  653 FORMAT(3I1,' =IOPT2,IOPT1,JAVANV')
      WRITE(*,654)IOPT2,IOPT1,JAVANV
      WRITE(11,654)IOPT2,IOPT1,JAVANV
  654 FORMAT(I2,2I1,' =IOPT2,IOPT1,JAVANV!!!!!!!!!')
      IF(IOPT2.EQ.2.AND.KLWERT.NE.3)THEN
      IOPT2=1
      WRITE(*,652)
      WRITE(11,652)
  652 FORMAT(' COMB. MODEL POSS. ONLY FOR F EL.: IOPT2 => 1')
      ENDIF
      IF(IOPT1.EQ.2)THEN
C**   ZXY DIRECTIONS:
      WRITE(11,4711)
 1147 WRITE(*,4711)
 4711 FORMAT(
     1' INPUT 3 DIRECTIONCOS**2 (Z,X,Y) IN 3E8.0 (INCL. FACT. AT WILL)',
     2/,' (A SIGN IS TRANSFERRED TO THE RESP. ROOT OF THE SQUARE!)',
     3/,' PUT IN 0. 0. 0. ("RETURN") FOR EITHER 1. 1. 1. OR FOR OPTION',
     4/,' "SIMULTANEOUSLY", ACCORDING TO LOWDAT IN CHIINP.DAT (0<=>246,'
     5,'1<=>357)',/,' IF JTSTZX=1, LOWDAT>1 IS IGNORED!')
      IF(LMN.EQ.0)THEN
      READ(77,1146,ERR=5588,END=3808)(DIRECZ(I),I=1,3)
      GOTO 4808
      ENDIF
 3808 READ(*,1146,ERR=1147,END=4576)(DIRECZ(I),I=1,3)
      LMN=1
 4808 WRITE(*,1146)(DIRECZ(I),I=1,3)
      WRITE(7,1146)(DIRECZ(I),I=1,3)
 1146 FORMAT(3D8.2)
      IF(DIRECZ(1).EQ.ZERO.AND.DIRECZ(2).EQ.ZERO.AND.DIRECZ(3).EQ.ZERO)
     1THEN
      NOWDAT=1
      IF(JTSTZX.NE.0)THEN
      NOWDAT=0
      DIRECZ(1)=ONE
      DIRECZ(2)=ONE
      DIRECZ(3)=ONE
      ENDIF
      ELSE
      DO 7411 I=1,3
      IF(DIRECZ(I).LT.ZERO)THEN
      MINPLS(I)=-1
      DIRECZ(I)=DABS(DIRECZ(I))
      ENDIF
 7411 CONTINUE
      ENDIF
      WRITE(*,1246)(DIRECZ(I),I=1,3)
      WRITE(11,1246)(DIRECZ(I),I=1,3)
 1246 FORMAT(' 3 DIRECTIONCOS**2 (Z,X,Y) INCL. FACT. AT WILL =',3D16.8)
      IF(MINPLS(1).LT.0.OR.MINPLS(2).LT.0.OR.MINPLS(3).LT.0)THEN
      WRITE(*,7413)(MINPLS(I),I=1,3)
      WRITE(11,7413)(MINPLS(I),I=1,3)
 7413 FORMAT(' 3 SIGNS OF THE DIRECTIONCOS ITSELF ARE:',3I3)
      ENDIF
      FNENN=DIRECZ(1)+DIRECZ(2)+DIRECZ(3)
      IF(FNENN.NE.ZERO)THEN
      DIRECZ(1)=DBLE(MINPLS(1))*DSQRT(DIRECZ(1)/FNENN)
      DIRECZ(2)=DBLE(MINPLS(2))*DSQRT(DIRECZ(2)/FNENN)
      DIRECZ(3)=DBLE(MINPLS(3))*DSQRT(DIRECZ(3)/FNENN)
      ENDIF
      VLSTNG(1)=DIRECZ(1)
      VLSTNG(2)=DIRECZ(2)
      VLSTNG(3)=DIRECZ(3)
      ENDIF
CKR      IF(IOPT1.EQ.3)THEN
C**   ZX DIRECTIONS:
CKR      DIRECZ(3)=ZERO
C        ...
CKR     1' INPUT 2 DIRECTIONCOS**2 (Z,X) IN 2E8.0 (INCL. FACT. AT WILL)',
CKR     2/,' (A SIGN IS TRANSFERRED TO THE RESP. ROOT OF THE SQUARE!)')
C        ...
CKR      IF(DIRECZ(1).EQ.ZERO.AND.DIRECZ(2).EQ.ZERO)
CKR     1THEN
C      DIRECZ(1)=ONE
C      DIRECZ(2)=TWO
CKR      ELSE
C      DO 7412 I=1,2
C      IF(DIRECZ(I).LT.ZERO)THEN
C      MINPLS(I)=-1
C      DIRECZ(I)=DABS(DIRECZ(I))
CKR      ENDIF
C 7412 CONTINUE
CKR      ENDIF
C        ...
CKR      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(LTS.NE.0)THEN - ELSE IF(LTS.EQ.0)THEN!
C** BREAK OF ALL IF'S!
      IF(JTSTZX.NE.0)THEN
      IF(JTSTZX.GT.1)JTSTZX=1
      IF(JAVANV.NE.0)STOP 'JTSTZX'
      IF(IOPT1.EQ.1)STOP 'JTSTZX'
      IF(IOPT1.EQ.0)THEN
      IF(NRDIRE.NE.1)THEN
      WRITE(*,777)NRDIRE,1
      WRITE(11,777)NRDIRE,1
  777 FORMAT(' BECAUSE (JTSTZX.NE.0).AND.(IOPT1.EQ.0):',/
     1,' DIRECTIONS CONCERNED AND TO BE CALCULATED:',2I2)
      ENDIF
      IF(NRDIRE.EQ.1)THEN
      DIRECZ(1)=ONE
      DIRECZ(2)=ZERO
      DIRECZ(3)=ZERO
      ELSE IF(NRDIRE.EQ.2)THEN
      DIRECZ(1)=REZSQ3
      DIRECZ(2)=REZSQ2
      DIRECZ(3)=ZERO
      ELSE IF(NRDIRE.EQ.3)THEN
      DIRECZ(1)=REZSQ3
      DIRECZ(2)=REZSQ3
      DIRECZ(3)=REZSQ3
      ENDIF
      IF(IOPT2.EQ.2)STOP 'JTSTZX'
      ENDIF
      ENDIF
      ABST=ZERO
      ISTZXY=0
CKR: Jan.2007 - LTS=0:
CKR      IF(IOPT2.NE.0.AND.LTS.EQ.0)THEN - "debugging" may be done with LTSS=0!:
      IF(IOPT2.NE.0.AND.LTSS.EQ.0)THEN
      WRITE(11,764)
 7641 WRITE(*,764)
  764 FORMAT(' IOPT2>0: IF'
     1,' MAGNETIC DIPOL-DIPOL INTERACTION WILL BE TAKEN INTO',/,' ACCOUN
     2T, INPUT IN F7.2 THE DISTANCE OF THE TWO IONS (IN PM, E.G.422.5),'
     3,/,' HOWEVER IN FRONT OF IT ONE OF THE LETTERS Z, X, OR Y.',/,
     3' (IF ANISOTROPIC PART IS CALCULATED, THEN IN THIS DIRECTION)',/,
     4' (A NEGATIVE DISTANCE => ANISOTROPIC PART IS SET TO ZERO!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A1,F7.2)',ERR=5588,END=3810)XYZ,ABST
      GOTO 4810
      ENDIF
 3810 READ(*,'(A1,F7.2)',ERR=7641,END=4576)XYZ,ABST
      LMN=1
 4810 WRITE(7,763)XYZ,ABST
  763 FORMAT(A1,F7.2,' ZXY & ABST IN DIMER')
      WRITE(*,7763)XYZ,ABST
      WRITE(11,7763)XYZ,ABST
 7763 FORMAT(A1,F9.2,' ZXY & ABST IN DIMER!!!!!!!!!')
      IF(XYZ.EQ.'Z')ISTZXY=1
      IF(XYZ.EQ.'X')ISTZXY=2
      IF(XYZ.EQ.'Y')ISTZXY=3
      IF(ISTZXY.NE.0)VLSTNG(4)=ABST
C05      IF(ABST.NE.ZERO.AND.NRDIRE.EQ.1)THEN
      IF(ISTZXY.NE.0.AND.NRDIRE.EQ.1)THEN
      NRDIRE=2
      WRITE(*,765)
      WRITE(11,765)
  765 FORMAT(' BECAUSE MAGNETIC DIPOL DIPOL INTERACTION IS TAKEN INTO AC
     1COUNT,',/,' No. OF DIRECTIONS BECOMES 2 INSTEAD OF 1!')
      ENDIF
C05      IF(JATEST.NE.0.AND.ABST.NE.ZERO.AND.NRDIRE.EQ.2)THEN
      IF((ISTZXY.EQ.2.OR.ISTZXY.EQ.3).AND.NRDIRE.EQ.2)THEN
      WRITE(11,7655)
 7642 WRITE(*,7655)
 7655 FORMAT(' IF MAGNETIC DIPOL DIPOL INTERACTION IS IN X- OR IN Y-',
     1'DIRECTION,',/,' 3 DIRECTIONS ARE NECESSARY!: NRDIRE => 3!')
C05     2' PUT IN 1 IN I1 FOR THESE!')
C      IF(LMN.EQ.0)THEN
C      READ(77,'(I1)',ERR=5588,END=3910)JA3
C      GOTO 4911
C      ENDIF
C 3910 READ(*,'(I1)',ERR=7642,END=4576)JA3
C      LMN=1
C 4911 WRITE(7,7633)JA3
C 7633 FORMAT(I1,' JA3<=>3 DIR.')
C      WRITE(*,7733)JA3
C      WRITE(11,7733)JA3
C 7733 FORMAT(I2,' Ja3<=>3 DIR.!!!!!!!!!')
C05      IF(JA3.NE.0)NRDIRE=3
      NRDIRE=3
      ENDIF
      ENDIF
C**   BREAK OF ALL IFS!
C***********************************************************************
      WRITE(11,391)
   10 WRITE(*,391)
  391 FORMAT(/,' WHERE ARE THE VALUES FOR: "TO BE FITTED YES(0)/NO(1)",'
     1,/,' TEMP. IN K, CHI-MEASURED IN SI, SIGMA, FIELD IN TESLA?',
     2/,' "RETURN" FOR CHIINP.DAT; H OR h FOR "H ATOM" <=> NO INPUT HERE
     3!',/,' INPUT OF "CGS OR cgs" (E.G. CGSCHI.DAT) <=> CHI-MEASURED IN
     1 CGS UNITS!',/,' INPUT OF 888 FOR "STOP"!',/,
     2' (HINT: 1(!) FIELD IN CHIINP.DAT = ZERO => "CHANGE OF FIELDS"!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3811)DATEI
      GOTO 4811
      ENDIF
 3811 READ(*,'(A15)',ERR=29,END=4576)DATEI
      LMN=1
 4811 IF(DATEI.EQ.'               ')DATEI='CHIINP.DAT     '
      WRITE(7,301)DATEI
  301 FORMAT(A15,' (OF CHI ..)')
      WRITE(*,30)DATEI
      WRITE(11,30)DATEI
   30 FORMAT(' NAME READ IN WAS:',1X,A15,'!!!!!!!!!')
      IF(DATEI.EQ.'888            ')STOP '888'
      QUIVAR='(I1,F7.2,3D17.6)'
      IF(DATEI.EQ.'H              '.OR
     1.DATEI.EQ.'h              ')THEN
C**   FOR HYDROGEN (MU-EFF./MU-BOHR=SQRT(3.0)):
      NDATA=71
      NDATAS=1
      IF(LESS.NE.0)TESDAT(1)=0.1D0
      IF(LESS.EQ.0)THEN
      WRITE(11,3929)
 3930 WRITE(*,3929)
 3929 FORMAT(
     1' HOW MANY DIFFERENT TEMPERATURES? INPUT IN I3 (0 OR >71 =>71)',
     2/,' (<0 =>71, BUT ABS(INPUT) =>START OF NDATA)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3812)NDATA
      GOTO 4812
      ENDIF
 3812 READ(*,'(I3)',ERR=3930,END=4576)NDATA
      LMN=1
 4812 NDATAS=1
      NDATAN=NDATA
      IF(NDATA.LT.0)NDATAS=-NDATA
      IF(NDATAS.GT.71)NDATAS=71
      IF(NDATA.LE.0.OR.NDATA.GT.71)NDATA=71
      WRITE(7,3931)NDATAN
 3931 FORMAT(I3,' =NDATA (OF H-ATOM)')
      WRITE(*,3932)NDATAN
      WRITE(11,3932)NDATAN
 3932 FORMAT(I4,' =NDATA (OF H-ATOM)!!!!!!!!!')
      ENDIF
      DO 3012 I=1,NDATA
      CHIMEA(I)=3.0D0/(797.730D0**2*TEMPIK(I))
 3012 CONTINUE
      NDATA=NDATA+1-NDATAS
      NDATAP=NDATA
      DO 3013 I=1,NDATA
      TEMPIK(I)=TEMPIK(I+NDATAS-1)
      CHIMEA(I)=CHIMEA(I+NDATAS-1)
 3013 CONTINUE
      GOTO 3030
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,392)
      WRITE(11,392)
  392 FORMAT(' THERE IS NO NEED TO FIT ANY VALUES! THE STANDARD'
     1,' INPUT HERE IS CHI',/,' IN SI UNIT M**3/MOL. THE INDIVIDUAL'
     2,' STANDARD DEVIATIONS SIGMA CANNOT BE ZERO'
     3,/,' AND ARE E.G. SET TO ONE. FIRST LINE MUST BE TEXT!')
      ENDIF
      WRITE(11,221)
 2212 WRITE(*,221)
  221 FORMAT(' "RETURN",'
     1,' IF FORMAT(I1,F7.2,3D17.6), OR INPUT "FORMAT" IN A50')
      IF(LMN.EQ.0)THEN
      READ(77,'(A50)',ERR=5588,END=3813)QUIVAQ
      GOTO 4813
      ENDIF
 3813 READ(*,'(A50)',ERR=2212,END=4576)QUIVAQ
      LMN=1
 4813 IF(QUIVAQ.NE.'                  ')QUIVAR=QUIVAQ
      WRITE(7,'(A50)')QUIVAR
      WRITE(*,5050)QUIVAR
      WRITE(11,5050)QUIVAR
 5050 FORMAT(1H ,A50,'!!!!!!!!!')
      OPEN(14,ERR=31,FILE=DATEI,STATUS='OLD')
      GOTO 35
   29 WRITE(*,3305)
      WRITE(11,3305)
 3305 FORMAT(' ERROR WHILE READING!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 10
   31 WRITE(*,3306)
      WRITE(11,3306)
 3306 FORMAT(' DATA FILE NOT FOUND')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 10
   32 WRITE(*,3307)
      WRITE(11,3307)
 3307 FORMAT(' ERROR(S) IN DATA FILE')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 10
   35 CONTINUE
C
      N=1
      NMIN=0
      READ(14,63,ERR=32)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,'HEADER:',1X,60A1)
C
   50 CONTINUE
      IF(N.GT.601)STOP '.GT.601'
      READ(14,QUIVAR,END=70,ERR=32)
     1LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
      IF(LOWDAT(N).GT.7)STOP '.GT.7'
      IF(MOD(LOWDAT(N),2).EQ.0)NMIN=NMIN+1
      N=N+1
      GOTO 50
C**   MAXIMUM OF DATA READ IN:
   70 NDATAP=N-1
      IF(NDATAP.LE.0)STOP 'NO DATA'
C**   TO BE FITTED (MAY BE 0!):
      NDATA=NMIN
      CLOSE(14)
C
 3030 CONTINUE
      WRITE(*,6588)
      WRITE(11,6588)
 6588 FORMAT(' HERE THE FIRST MAX. 3 ROWS OF VALUES ("NOT", TEMPIK, CHI,
     1 SIGMA, FIELD)')
      IDREI=3
      IF(NDATAP.LT.3)IDREI=NDATAP
C**   BUT FIRSTLY:
      IF(DATEI(1:3).EQ.'CGS'.OR.DATEI(1:3).EQ.'cgs')THEN
      WRITE(*,5757)
      WRITE(11,5757)
 5757 FORMAT(
     1' CHI VALUES PUT IN WILL BE CHANGED TO SUCH IN SI UNITS!')
      DO 5758 I=1,NDATAP
      IF(TEMPIK(I).GT.ZERO)CHIMEA(I)=CHIMEA(I)/VPREZ6
 5758 CONTINUE
      ENDIF
C
      DO 2022 I=1,IDREI
      WRITE(*,QUIVAR)LOWDAT(I),TEMPIK(I),CHIMEA(I),SIGMA0(I),TESDAT(I)
      WRITE(11,QUIVAR)LOWDAT(I),TEMPIK(I),CHIMEA(I),SIGMA0(I),TESDAT(I)
 2022 CONTINUE
C
   75 IF(MORTEX.GE.0)THEN
      IF(NDATAP.GT.3)THEN
      IF(KLICK7.EQ.0)WRITE(11,7575)
      WRITE(*,7575)
 7575 FORMAT(' NO FURTHER VALUES TO FILE 11 AND/OR TERMINAL (0), VALUES 
     1(ONLY) TO',/,' FILE 11 (1), TO FILE 11 & TERMINAL (2), (ONLY) TO T
     2ERMINAL (3)?')
      ELSE
      IF(KLICK7.EQ.0)WRITE(11,7567)
      WRITE(*,7567)
 7567 FORMAT(' PUT IN ANY DIGIT!')
      ENDIF
      KLICK7=1
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3814)JANO
      GOTO 4814
      ENDIF
 3814 READ(*,'(I1)',ERR=75,END=4576)JANO
      LMN=1
 4814 WRITE(7,7574)JANO
 7574 FORMAT(I1,' =JANO(OUTPUT)')
      WRITE(*,7573)JANO
      WRITE(11,7573)JANO
 7573 FORMAT(I2,' =JANO(OUTPUT)!!!!!!!!!')
      IF(NDATAP.LE.3)JANO=0
      IF(JANO.EQ.0)GOTO 7576
      DO 7577 N=4,NDATAP
      IF(JANO.EQ.2.OR.JANO.EQ.3)
     1WRITE(*,QUIVAR)LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
      IF(JANO.EQ.1.OR.JANO.EQ.2)
     1WRITE(11,QUIVAR)LOWDAT(N),TEMPIK(N),CHIMEA(N),SIGMA0(N),TESDAT(N)
 7577 CONTINUE
      ENDIF
 7576 CONTINUE
C
      JAFELD=1
      SUMSIG=ZERO
      NOSIGM=0
      DO 7578 I=1,NDATAP
      IF(TESDAT(I).EQ.ZERO.AND.TEMPIK(I).GT.ZERO)JAFELD=0
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7578
C
      IF(SIGMA0(I).LE.ZERO)THEN
      IF(NOSIGM.EQ.0)THEN
      WRITE(*,7558)
      WRITE(11,7558)
 7558 FORMAT(' (SIGMA.LE.ZERO) => SIGMA =ONE!')
      ENDIF
      NOSIGM=1
      SIGMA0(I)=ONE
      ENDIF
      SUMSIG=SUMSIG+ONE/SIGMA0(I)**2
C
 7578 CONTINUE
      IF(NDATA.EQ.0)SUMSIG=ONE
      IF(NDATA.NE.0)SUMSIG=DSQRT(SUMSIG/DBLE(NDATA))
C**   SUMSIG NOW =ONE, IF ALL SIGMA =ONE! - NOW NORMALIZATION OF SIGMA!:
      DO 7579 I=1,NDATAP
      SIGMA(I)=ZERO
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7579
      SIGMA(I)=SIGMA0(I)*SUMSIG
 7579 CONTINUE
C**   NO COMPUTATION POSSIBLE WITHOUT MAGNETIC FIELD, IF NOT "VANVLECK"!:
      IF(JAVANV.EQ.0.AND.(JATEST.NE.0.OR.JAFELD.EQ.0))THEN
      WRITE(11,7597)JAFELD
 7598 WRITE(*,7597)JAFELD
 7597 FORMAT(' THE MAGNETIC FIELD: MUST BE (IF 0) OR MAY BE (IF 1) CHANG
     1ED:',I2,/,' INPUT IN E14.6 (ONE AND THE SAME FOR ALL CASES) FIELD 
     2IN TESLA')
      IF(LMN.EQ.0)THEN
      READ(77,'(D14.6)',ERR=5588,END=3815)TESLAN
      GOTO 4815
      ENDIF
 3815 READ(*,'(D14.6)',ERR=7598,END=4576)TESLAN
      LMN=1
 4815 WRITE(*,7599)TESLAN
      WRITE(11,7599)TESLAN
      WRITE(7,7599)TESLAN
 7599 FORMAT(D14.6,' =TESLAN')
      IF(TESLAN.EQ.ZERO)THEN
      WRITE(*,7600)
      WRITE(11,7600)
 7600 FORMAT(' FIELD(S) NOT CHANGED!')
      ELSE
      JAFELD=1
      DO 7587 I=1,NDATAP
      TESDAT(I)=TESLAN
 7587 CONTINUE
      VLSTNG(5)=TESLAN
      ENDIF
      ENDIF
      IF(JAFELD.EQ.0.AND.JAVANV.EQ.0)STOP 'NOFELD'
C**   BREAK OF ALL IFS!
C-----------------------------------------------------------------------
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,
     1' IS THE NAME OF THE NEXT FILE BWYBIN.DAT IN FORMAT(I2,D16.8)?',
     2/,' "RETURN" OR GIVE ITS NAME! (8 => STOP, H OR h "NO INPUT FROM F
     3ILE")')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3816)QMPC
      GOTO 4816
      ENDIF
 3816 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4816 IF(QMPC.EQ.'               ')QMPC='BWYBIN.DAT     '
      WRITE(7,5163)QMPC
 5163 FORMAT(A15,' (BWYBIN)')
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,' (BWYBIN)!!!!!!!!!')
      IF(QMPC.EQ.'8              ')STOP '8'
      IF(QMPC.EQ.'h              '.OR.
     1QMPC.EQ.'H              ')THEN
      WRITE(11,5162)
      WRITE(*,5162)
 5162 FORMAT(' h OR H FOR H ATOM OR TESTS: ZERO''s ONLY!')
      IN24=20
      IN25=20
      GOTO 3338
      ENDIF
      IF(MORTEX.GT.0)THEN
      WRITE(*,5160)
      WRITE(11,5160)
 5160 FORMAT(/,' EACH ROW OF THIS FILE (FIRST ROW MUST BE TEXT!):'
     1,/,' "TO BE FITTED YES(01)/NO(00)" (THERE IS NO NEED TO FIT'
     1,' ANY COEFFICIENTS!),',/,' AND COEFF. OF LIG. FIELD (WYBOURNE C',
     2'OEFFICIENTS)',/
     3,' 11 SUCH COEFF. PLUS 9 FURTHER ROWS (B20,B22,',/,' B40,B42,B43,'
     4,'B44,B60,B62,B63,B64,B66+J,LAM,THET,CHI0,F,...) ARE NEEDED!'
     5,/,' (09/08 INSTEAD OF 01/00 AS SPECIAL OPTION FOR B43,B44,B63,B64
     6,B66: ',/,' INPUT MEANS "FACTOR" IN E.G. B44=B40*SQRT(5./14.)*FACT
     7OR)',/
     8,' ADDITIONAL INPUT FOR No.20("C1"): B21,B41,B61,B65,',/
     9,' RED-F,ZETA,F(2),F(3),F(4),B21'',B22'',B41'',B42'',B43'',B44'','
     5,/,' B61'',B62'',B63'',B64'',B65'',B66''')
      WRITE(*,5159)
      WRITE(11,5159)
 5159 FORMAT(' J <=> HEISENBERG COUPLING IN A (SYMMETRICAL) DIMER'
     2,/,' LAM <=> MOLECULAR FIELD PARAMETER'
     3,/,' THET <=> THETA OF CURIE WEISS LAW'
     4,/,' CHI0 <=> CHI DIAMAGNETIC',
     5/,' F <=> CORR. OF WEIGHT OF SAMPLE MEASURED CHI COMES FROM'
CKR     6',/,' MOLF <=> PARAMETER OF MOLECULAR FIELD THEORY OF WEISS'
CKR     6,/,' (FIELD WILL BE ITERATED UNTIL CONVERGENCE HAS ACHIEVED)',/
CKR     7,' MIX/CROSSOVR <=> A MIXTURE OF SINGLE ION AND DIMER OR',/
CKR     7,' DENOMINATOR OF "SPIN CROSSOVER" (ONLY D EL.!),',/
CKR     8,' ENTHALPY <=> ENTHALPY FOR "SPIN CROSSOVER",',/
CKR     9,' ENTROPY <=> ENTROPY FOR "SPIN CROSSOVER".')
     6,/,' 6 AND 7 AND 8 AND 9 NOT USED ANYMORE!')
      ENDIF
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(' CRYSTAL FIELD PARAMETERS ETC. ARE READ IN FROM ',A15)
      OPEN(14,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(14,63,ERR=33)(QTEXT1(I),I=1,60)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
      IF(NGROUP.NE.20)IN24=20
      IF(NGROUP.NE.20)IN25=20
      DO 8581 N=1,IN25
      READ(14,61,END=3330,ERR=33)INBWWW(N),BWWWIN(N)
   61 FORMAT(1X,I1,D16.8)
 8581 CONTINUE
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(' THE VALUES READ IN ARE:')
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
      IF((INBWWW(I).GE.8).AND.(QB(I).EQ.QV(I)))INBWWW(I)=INBWWW(I)-8
 1511 CONTINUE
      WRITE(*,6161)(INBWWW(I),BWWWIN(I),QQ(I),I=1,IN25)
      WRITE(11,6161)(INBWWW(I),BWWWIN(I),QQ(I),I=1,IN25)
 6161 FORMAT(3(I3,D16.8,1X,A5))
      CLOSE(14)
 3338 CONTINUE
CKR      IF(NDATA.EQ.0)THEN
CKR 3344 FORMAT(' NDATA=0 => INBWWW(I)=0/=8? INPUT YES(0)/NO IN I1!')
CKR      ENDIF
      GOTO 3334
 3330 WRITE(*,3300)
      WRITE(11,3300)
 3300 FORMAT(' ERROR: END OF DATA FILE!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3331 WRITE(*,3301)
      WRITE(11,3301)
 3301 FORMAT(' ERROR WHILE READING!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3332 WRITE(*,3302)
      WRITE(11,3302)
 3302 FORMAT(' DATA FILE NOT FOUND')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
   33 WRITE(*,3303)
      WRITE(11,3303)
 3303 FORMAT(' ERROR IN DATA FILE!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3334 CONTINUE
C**   BREAK OF ALL IFS!
C
C**   BWWWIN(12:I16) <=> (12) FKWERT (HEISENBERG COUPLING IN A SYMM. DIMER),
C     (13) LAMBDA (MOLECULARFIELD PARAMETER),
C     (14) THETA (OF CURIE-WEISS LAW),
C     (15) CHI-0 ("CHI DIAMAGNETIC"),
C     (16) CORR. OF WEIGHT OF THE SAMPLE, WHERE MEASURED CHI COMES FROM,
CKR     AND(!)
CKR     (17) LAMBDA FOR "MOL(ECULAR)F(IE)LD" (I16>18!) AND
CKR     (18) WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF DIMER AND SINGLE ION
CKR     OR DENOMINATOR OF "SPIN CROSSOVER" (ONLY D EL.!)!
CKR     (19) AND (20): ENTHALPY AND ENTROPY FOR (18)!
C
CKR      IF(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO)THEN
CKR      IF(IOPT2.EQ.0)THEN
CKR2      IF(KLWERT.EQ.2)THEN
CKR  716 FORMAT(' IOPT2=0.AND.(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO): SPIN
CKR     1 CROSSOVER",',/,' NOT COMPATIBLE WITH ANY OF THE PARAMETERS 12...17
CKR2      ELSE IF(KLWERT.NE.2)THEN
CKR  715 FORMAT(' WARNING: IOPT2=0, THEREFORE BWWW(18) BECOMES ZERO',
CKR     1' AND MUST NOT',/,' BE FITTED): "NO MIXTURE WITHOUT ANY DIMER"!')
C**   KMASKE(18)=1
CKR2      ENDIF
CKR      ELSE IF(IOPT2.NE.0)THEN
CKR  717 FORMAT(' IOPT2>0.AND.(INBWWW(18).NE.0.OR.BWWWIN(18).NE.ZERO):',/
CKR     1,' "A MIXTURE OF DIMER AND SINGLE ION"!')
CKR      MIXTUR=1
CKR      ENDIF
CKR      ELSE
CKR      IF(IOPT2.NE.0)KMASKE(18)=0
CKR      ENDIF
C
      IF(BWWWIN(16).EQ.ZERO)THEN
      BWWWIN(16)=ONE
      WRITE(*,1313)
      WRITE(11,1313)
 1313 FORMAT(' CORR. FACTOR OF CHI-MEAS. IS ZERO, BUT BECOMES ONE!')
      ENDIF
C**   (13), (14) AND (17) ARE NOT COMPATIBLE!:
CKR 1314 FORMAT(' "THETA" INSTED OF MOLECULARFIELD PARAMETER, WHICH LATTER'
CKR     1,' BECOMES ZERO!')
C
CKR 1315 FORMAT(' "THETA" BECOMES ZERO, BECAUSE "MOL(ECULAR)F(IE)LD"!')
C
CKR 1316 FORMAT(' MOLECULARFIELD PARAMETER BECOMES ZERO, BECAUSE'
CKR     1,' "MOL(ECULAR)F(IE)LD"!')
C
C**   (15) AND (17) ARE NOT COMPATIBLE!:
CKR 1317 FORMAT(' "MOL(ECULAR)F(IE)LD": CHI0 THEREFORE BECOMES ZERO!')
C
      IF(IOPT2.EQ.0.AND.(((BWWWIN(12).NE.ZERO).OR.(INBWWW(12).NE.0).AND.
     1KMASKE(12).EQ.0)))THEN
      WRITE(*,761)
      WRITE(11,761)
  761 FORMAT(' WARNING: IOPT2=0, THEREFORE BWWW(12) BECOMES ZERO',
     1' (AND MUST NOT',/,' BE FITTED: "NOT A DIMER" CANNOT BE COUPLED!')
      KMASKE(12)=1
      ENDIF
C
C**   SPECIAL FITS / SPECIAL CONDITIONS? (I.E. 13: LAMB, 15: CHI-0, 16: F):
      IF((INBWWW(15).NE.0.OR.BWWWIN(15).NE.ZERO).AND.KMASKE(15).EQ.0)
     1JACHI0=1
      IF(JACHI0.NE.0.OR.((INBWWW(13).NE.0.OR.BWWWIN(13).NE.ZERO).AND.
     1KMASKE(13).EQ.0).OR.((INBWWW(16).NE.0.OR.BWWWIN(16).NE.ONE).AND.
     2KMASKE(16).EQ.0))JAFFAK=1
C
CKR      IF((INBWWW(17).NE.0.OR.BWWWIN(17).NE.ZERO).AND.KMASKE(17).EQ.0)
CKR     1MOLFLD=1
C
CKR      IF(LTS.NE.0.OR.KLWERT.LE.1)THEN
      IF(JATEST.EQ.0.OR.KLWERT.LE.1)THEN
      JASTRU=0
      ELSE
      WRITE(11,6788)
 6787 WRITE(*,6788)
 6788 FORMAT(' INPUT IN I1 YES/NO(0): CALL OF STR00 (1=SOM, 2=PCEM)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3818)JASTRU
      GOTO 4818
      ENDIF
 3818 READ(*,'(I1)',ERR=6787,END=4576)JASTRU
      LMN=1
 4818 IF(JASTRU.GT.2)JASTRU=2
      WRITE(7,6786)JASTRU
 6786 FORMAT(I1,' =JASTRU(cture)')
      WRITE(*,6768)JASTRU
      WRITE(11,6768)JASTRU
 6768 FORMAT(I2,' =JASTRU(cture)!!!!!!!!!')
      ENDIF
C**   NOW CHANGE TO STBWWW AND IBWWW; KMASKE IS USED!:
CKR   (17 AND 18 AND 19 AND 20 NOT USED ANYMORE!: SEE DATA WWWWWW!)
      DO 762 I=1,20
      IF(KMASKE(I).EQ.0)THEN
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
C**   THE NEXT LINE FOR THE CASE THAT E.G. B44 IS GIVEN AS B40*FACTOR!:
C     ("FITTED" <=> IABS(INBWWW())=1)
      IF(I.LE.11
     1.AND.INBWWW(I).GE.8)IBWWW(I)=INBWWW(I)-10
      ENDIF
  762 CONTINUE
      IF(KMASKE(16).NE.0)STBWWW(16)=ONE
      IF(IN24.GT.20)THEN
      DO 7631 I=21,IN25
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
      IF(I.LE.IN24.AND.INBWWW(I).GE.8)IBWWW(I)=INBWWW(I)-10
      IF(KLWERT.EQ.2.AND.I.EQ.28.AND.INBWWW(I).GE.8)IBWWW(I)=
     1INBWWW(I)-10
 7631 CONTINUE
      ENDIF
      IF(JASTRU.NE.0)THEN
      IF(JASTRU.GT.1)THEN
      STBWWW(1)=ZERO
      IBWWW(1)=0
      ENDIF
      DO 7622 I=JASTRU,11
C2006      DO 7622 I=JASTRU,3
C FITTING OF 3rd SORT OF LIG. IN STR00 WAS IMPOSS.!
      STBWWW(I)=BWWWIN(I)
      IF(INBWWW(I).GE.1)IBWWW(I)=1
 7622 CONTINUE
C2006      DO 7623 I=4,11
C2006      STBWWW(I)=ZERO
C2006      IBWWW(I)=0
C2006 7623 CONTINUE
      IF(IN24.GT.20)THEN
      DO 7624 I=21,IN24
      STBWWW(I)=ZERO
      IBWWW(I)=0
 7624 CONTINUE
C     AND:
      IN241=IN24+1
      DO 1254 I=IN241,IN25
      STBWWW(I)=ZERO
      IBWWW(I)=0
 1254 CONTINUE
      ENDIF
      ENDIF
C
CKR   JA SPECial FITS (SEE BELOW!) - PRE-OCC.:
CKR      JASPEC=0
      IF(NDATA.EQ.0)THEN
      WRITE(11,1150)
 1117 WRITE(*,1150)
 1150 FORMAT(' THERE IS NO FIT REQUIRED, BECAUSE NDATA=0!',/
     1,' NEVERTHELESS: PUT IN ANY DIGIT, FIRSTLY FOR "NOPROZ" (ONLY)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=1938)NOPROZ
      GOTO 1948
      ENDIF
 1938 READ(*,'(I1)',ERR=1117,END=4576)NOPROZ
      LMN=1
 1948 NOPROZ=0
      WRITE(7,1125)NOPROZ
      WRITE(*,1152)NOPROZ
      WRITE(11,1152)NOPROZ
      WRITE(11,1105)
 1118 WRITE(*,1105)
 1105 FORMAT(' ... AND: PUT IN ANY DIGIT FOR "IOPT4"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=8321)IOPT4
      GOTO 2148
      ENDIF
 8321 READ(*,'(I1)',ERR=1118,END=4576)IOPT4
      LMN=1
 2148 IOPT4=1
      WRITE(7,1320)IOPT4
      WRITE(*,1321)IOPT4
      WRITE(11,1321)IOPT4
      GOTO 1155
      ENDIF
C**   NOW FOLLOWING: INPUT (ONLY) FOR FITS!
C
      IF(LTS.EQ.0.AND.LESS.EQ.0)THEN
      WRITE(11,1151)
 1116 WRITE(*,1151)
 1151 FORMAT(/,
     1' THERE ARE TWO ESSENTIALLY DIFFERENT POSSIBILITIES FOR A LEAST SQ
     2UARE FIT:',/,' THE MEASURED VALUES AND THE CALCULATED VALUES ARE B
     3OTH DIVIDED BY THE MEASURED',/,' VALUES (THE RESULT FOR THE QUALIT
     4Y OF THE FIT IS IN %, AND THIS SHOULD BE',/,' PREFERRED HERE: INPU
     5T 0) OR THIS DIVISION IS NOT DONE (INPUT 1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3819)NOPROZ
      GOTO 4819
      ENDIF
 3819 READ(*,'(I1)',ERR=1116,END=4576)NOPROZ
      LMN=1
 4819 WRITE(7,1125)NOPROZ
 1125 FORMAT (I1,' =NOPROZ (IN % YES/NO)')
      WRITE(*,1152)NOPROZ
      WRITE(11,1152)NOPROZ
 1152 FORMAT(' THE RESULT ',
     1'FOR THE QUALITY OF THE FIT IS IN % YES(0)/NO(1):',I2,'!!!!!!!!!')
      ENDIF
C
C**   IOPT3 IS 0 HERE, BUT MAY BECOME 1 (I.E. .NE.0)!
C     (IOPT31=-2*IOPT3+4=4 OR 2 <=> CHI( ,IOPT31, ))
      IF(JACHI0.EQ.0)THEN
      IF(MORTEX.GE.0.AND.LESS.EQ.0)THEN
      WRITE(11,1134)
      WRITE(*,1134)
 1134 FORMAT(/,' BECAUSE CHI-0 IS NOT CONCERNED, IOPT3 REMAINS 0 <=> FIT
     1TING IS BASED ON',/,' UNCORRECTED MEASURED CHI!',/
     5,' WARNING!: CHI0 SHOULD BE ZERO AND/OR SHOULD NOT BE FITTED!')
      ENDIF
      ELSE IF(JACHI0.NE.0)THEN
      IF(LTS.EQ.0.AND.LESS.EQ.0)THEN
      WRITE(11,1153)
 1135 WRITE(*,1153)
 1153 FORMAT(/,
     1' CHI-0, AN ADDITIVE CONSTANT TO CHI IN SI UNITS, IS NOT ZERO',/
     2,' AND/OR WILL BE FITTED! THERE IS AN OPTION IOPT3 (=0 AS A STAN'
     3,'DARD):',/,' INPUT 1, IF FITTING SHALL NOT BE BASED ON '
     4,'UNCORRECTED MEASURED CHI!',/
     5,' WARNING!: CHI0 SHOULD BE ZERO AND/OR SHOULD NOT BE FITTED!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3820)IOPT3
      GOTO 4820
      ENDIF
 3820 READ(*,'(I1)',ERR=1135,END=4576)IOPT3
      LMN=1
 4820 IF(IOPT3.NE.0)IOPT3=1
      WRITE(7,1319)IOPT3
 1319 FORMAT(I1,' =IOPT3 ("CHI-0")')
      WRITE(*,1318)IOPT3
      WRITE(11,1318)IOPT3
 1318 FORMAT(I2,' =IOPT3 ("CHI-0")!!!!!!!!!')
      ENDIF
      ENDIF
C
CKR      IF(MOLFLD.NE.0)THEN
CKR     1' IOPT3 BECOMES 0, BECAUSE "MOL(ECULAR)F(IE)LD" (JACHI0=0)!')
CKR      ENDIF
C
C**   IOPT4 IS 1 HERE, BUT MAY BECOME 2 OR 3 OR 4!:
      IF(LTS.EQ.0.AND.LESS.EQ.0)THEN
      WRITE(11,1154)
 1136 WRITE(*,1154)
 1154 FORMAT(/,
     1' CHI ITSELF MAY BE FITTED OR ONE/CHI OR MAGNETIC MOMENT OF 1 ATOM
     2 OR',/,' EFFECTIVE MAGNETIC MOMENT (BOTH IN BOHR MAGNETONS): INPUT
     3 (IOPT4=)1...4 (0=>1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3821)IOPT4
      GOTO 4821
      ENDIF
 3821 READ(*,'(I1)',ERR=1136,END=4576)IOPT4
      LMN=1
 4821 IF(IOPT4.EQ.0.OR.IOPT4.GT.4)IOPT4=1
      WRITE(7,1320)IOPT4
 1320 FORMAT(I1,' =IOPT4 (CHI,1/CHI,..)')
      WRITE(*,1321)IOPT4
      WRITE(11,1321)IOPT4
 1321 FORMAT(I2,' =IOPT4 (CHI,1/CHI,..)!!!!!!!!!')
      ENDIF
C
C"DATA" NOANAL=1
CKR      JAANAL=0
CKR      IF(LTS.NE.0)GOTO 1163
CKR 1163 CONTINUE
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(NDATA.EQ.0)THEN ... GOTO"!:
 1155 CONTINUE
C***********************************************************************
      IF(KLWERT.EQ.0)THEN
      NREL=1
      IF(JATEST.NE.0)THEN
      WRITE(11,1165)
 1164 WRITE(*,1165)
 1165 FORMAT(' ONE S EL.! IF "NONE", INPUT 2 IN I1! ("RETURN" => 1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3823)NONE
      GOTO 4823
      ENDIF
 3823 READ(*,'(I1)',ERR=1164,END=4576)NONE
      LMN=1
 4823 IF(NONE.EQ.0)NONE=1
      WRITE(7,1133)NONE
 1133 FORMAT(I1,' =NONE (S EL.)')
      WRITE(*,1132)NONE
      WRITE(11,1132)NONE
 1132 FORMAT(I2,' =NONE (S EL.)!!!!!!!!!')
      IF(NONE.GE.2)NREL=0
      ENDIF
      GOTO 9999
      ENDIF
C
      IF(KLWERT.EQ.1)THEN
      WRITE(11,2130)
 1138 WRITE(*,2130)
 2130 FORMAT(' INPUT IN I1 NUMBER OF P EL.; 0 OR .GT.5 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3824)NREL
      GOTO 4824
      ENDIF
 3824 READ(*,'(I1)',ERR=1138,END=4576)NREL
      LMN=1
 4824 IF(NREL.EQ.0.OR.NREL.GT.5)NREL=1
      WRITE(7,2103)NREL
 2103 FORMAT(I1,' = No.OF P EL.')
      WRITE(11,1119)NREL
 4140 WRITE(*,1119)NREL
 1119 FORMAT(' THE NUMBER OF P ELECTRONS IS =',I3,'!!!!!!!!!')
      IF(NREL.EQ.1.OR.NREL.EQ.5)THEN
      WRITE(*,4141)
      WRITE(11,4141)
 4141 FORMAT(' ZETA FOR BOR (ONE P ELECTRON!) IS 2.6(?) CM**-1'
     1,/,' INPUT IN D16.8 ZETA!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3825)ZETA
      GOTO 4825
      ENDIF
 3825 READ(*,'(D16.8)',ERR=4140,END=4576)ZETA
      LMN=1
 4825 WRITE(7,2104)ZETA
 2104 FORMAT(D16.8,' =ZETA')
      WRITE(*,2104)ZETA
      WRITE(11,2104)ZETA
      VLSTNG(11)=ZETA
      ELSE
      WRITE(11,1120)
 1139 WRITE(*,1120)
 1120 FORMAT(' MORE THEN 1 (<6) P EL.: INPUT IN 2D16.8 F-INTEG. AND ZETA
     1! E.G. FROM CONDON/SHORTLEY,',/,' P.274/275/301, FOR GE/SN/PB/AS/S
     2B/BI/TE F(**2);ZETA: 25423.;880.1',/,' /22965.;2097.3/23038.;7294.
     3/30250.;1500./26250.;3400./24750.;10100./30675.;4203.')
      IF(MORTEX.GT.0)THEN
      WRITE(*,3025)
      WRITE(11,3025)
 3025 FORMAT(
     1' F(INDEX 2 BELOW) = F(**2)/25. FOR P EL.; ZETA FOR ONE(!) P EL.')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(2D16.8)',ERR=5588,END=3826)FIN,ZETA
      GOTO 4826
      ENDIF
 3826 READ(*,'(2D16.8)',ERR=1139,END=4576)FIN,ZETA
      LMN=1
 4826 WRITE(7,2105)FIN,ZETA
 2105 FORMAT(2D16.8,' =FIN,ZETA')
      WRITE(*,2105)FIN,ZETA
      WRITE(11,2105)FIN,ZETA
      FINTEG(2)=FIN
      VLSTNG(8)=FIN
      VLSTNG(11)=ZETA
      ENDIF
      GOTO 8889
      ENDIF
C
      IF(KLWERT.NE.2)GOTO 6666
C
C THE PROGRAM CONDOR CALCULATES ENERGIES, EIGENFUNCTIONS AND PARAMAGNETIC
C SUSCEPTIBILITIES AS A FUNCTION OF TEMPERATURE AND MAGNETIC FIELD STRENGTH
C OF D BLOCK ATOMS OR IONS WITH ND**N ELECTRONIC CONFIGURATION IN CUBIC,
C CYLINDRICAL, TETRAGONAL, TRIGONAL AND OTHER LIGAND FIELDS OF ANY STRENGTH AND
C DIRECTION. WITH RESPECT TO INTERELECTRONIC REPULSION AND SPIN-ORBIT COUPLING
C LITERATURE DATA FOR RACAH PARAMETERS AND SPIN-ORBIT COUPLING CONSTANTS
C ARE USED WHICH MAY BE CHANGED ACCORDING TO REQUIREMENTS.
C THE PROGRAM USES FORMULAS OF CONDON - SHORTLEY (THE THEORY OF ATOMIC SPECTRA)
C AND OF GRIFFITH (THE THEORY OF TRANSITION-METAL IONS) AND IS WRITTEN IN
C STANDARD FORTRAN77 AND PARTLY IN C. A DIAGONALIZATION ROUTINE FOR
C HERMITIAN MATRICES MUST BE AVAILABLE FOR A MATRIX OF MAX. DIMENSION 252*252.
C THE SUBROUTINE ZHPEVD OF LIBRARY LAPACK (BLAS) IS SUCH A ROUTINE, ALSO
C AVAILABLE AS F08GQF OF LIBRARY NAG, AND IS HERE AVAILABLE ON FILE dsdzhd.f.
C THE PROGRAM ASKS FOR INPUT IN A SELF-EXPLAINING MANNER AND IS
C WELL COMMENTATED.
C THE PROGRAM CONDOR HAS BEEN EXTENDED FOR F ELECTRONS! THEREFORE THE MATRIX
C TO BE DIAGONALIZED HAS DIMENSION 1001*1001 OR EVEN MORE - UP TO 3432*3432.
C INSTEAD OF ND2002=1001 ND2002=1110 IS USED AS A MINIMUM, BECAUSE THERE IS
C A FURTHER DIMENSION ND1110=1110 IMPORTANT FOR OTHER PURPOSES.
C THE DIMENSION ND2002 IS SET IN SUBROUTINE SHORTL ON FILE shortR.f IN
C COMBINATION WITH SUBROUTINE CONSHO ON FILE konsho.c, AND THE RELEVANT
C DIMENSION IS CHOSEN AT RUNTIME!
C THE ROUTINE ZHPEVD IS CALLED VIA TWO LINK-ROUTINES, ZHPEVK ON FILE dszhK.c
C AND ZHPEVW ON FILE dszhLQ.c.
C RELEVANT FILES TO BE LINKED ARE THEREFORE: shortR.f, konsho.c, dszhK.c,
C dszhLQ.c, AND dsdzhd.f, IF AN ORIGINAL LIBRARY IS NOT AVAILABLE /NOT USED!
C
      WRITE(11,9119)
 8201 WRITE(*,9119)
 9119 FORMAT(' INPUT IN I1 NUMBER OF D EL.; 0 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3827)NREL
      GOTO 4827
      ENDIF
 3827 READ(*,'(I1)',ERR=8201,END=4576)NREL
      LMN=1
 4827 IF(NREL.EQ.0.OR.NREL.GT.9)NREL=1
      WRITE(7,2106)NREL
 2106 FORMAT(I1,' = No.OF D EL.')
      WRITE(*,1110)NREL
      WRITE(11,1110)NREL
 1110 FORMAT(' THE NUMBER OF D ELECTRONS IS =',I3,'!!!!!!!!!')
C
      JANOC=0
      IF(LTS.EQ.0.AND.LESS.EQ.0)THEN
      WRITE(11,2131)
 8202 WRITE(*,2131)
 2131 FORMAT(' INPUT IN I1 YES/NO(0), IF DATA FROM KOENIG/KREMER, I.E. '
     1,'DIFFERENT ZETA,',/,' AND RACAHC WILL BECOME =4.*RACAHB!'
     2,' - STANDARD: 0<=>GRIFFITH')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3828)JANOC
      GOTO 4828
      ENDIF
 3828 READ(*,'(I1)',ERR=8202,END=4576)JANOC
      LMN=1
 4828 WRITE(7,2107)JANOC
 2107 FORMAT(I1,' =JANOC ("RACAHC=4*B")')
      WRITE(*,2710)JANOC
      WRITE(11,2710)JANOC
 2710 FORMAT(I2,' =JANOC ("RACAHC=4*B")!!!!!!!!!')
      ENDIF
      RACAHP=RACAKB(NREL)
      RACAHQ=VIER*RACAHP
      ZETA=FKSIDK(NREL)
      IF(JANOC.NE.0)THEN
      WRITE(*,2123)
      WRITE(11,2123)
 2123 FORMAT(
     1' DATA FROM KOENIG/KREMER (RACAHC=4.*RACAHB) HAVE BEEN CHOSEN!')
      ELSE
      WRITE(11,2132)
 8203 WRITE(*,2132)
 2132 FORMAT(
     1' DATA FROM GRIFFITH INCL. RACAHC AND COUPL.-CONST. HAVE BEEN'
     1,' CHOSEN!',/,' INPUT IN 2I1 CHARGE OF THE ION (0=ATOM, >4=>4)'
     1,' AND',/,' 1ST, 2ND, 3RD TRANS.-SERIES (0=>1, >3=>3)!')
C**   IN THE FOLLOWING: LDG=CHARGE AND NRSR=No.OF TRANS.-SERIES; BOTH
C     FOR GRIFFITH ONLY:
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3829)LDG,NRSR
      GOTO 4829
      ENDIF
 3829 READ(*,'(2I1)',ERR=8203,END=4576)LDG,NRSR
      LMN=1
 4829 CONTINUE
      WRITE(7,2108)LDG,NRSR
 2108 FORMAT(2I1,' =LDG(CHARGE),NRSR(TRANS-SER)')
      IF(LDG.GT.4)LDG=4
      IF(NRSR.EQ.0)NRSR=1
      IF(NRSR.GT.3)NRSR=3
      WRITE(*,3232)LDG,NRSR
      WRITE(11,3232)LDG,NRSR
 3232 FORMAT(' CHARGE OF THE ION (0=ATOM) AND No.OF TRANS.-SERIES=',2I2,
     1'!!!!!!!!!')
C
      IF(LDG.GE.1.AND.NRSR.EQ.3)THEN
      WRITE(*,2133)
      WRITE(11,2133)
 2133 FORMAT(
     1' ((CHARGE.GE.1).AND.(3RD TRANS.-SERIES)): WITH GRIFFITH-DATA'
     1,/,' POSSIBLE ARE ONLY RE3+, BUT WITH DATA OF RE+-0,'
     1,/,' AND HF1+, THE LAST ONE WITH S ORB.**2!')
      ENDIF
C
      IF(LDG.EQ.0)THEN
      IF(NRSR.EQ.1)WRITE(*,2136)
      IF(NRSR.EQ.1)WRITE(11,2136)
 2136 FORMAT(' SC TI  V %% MN FE CO %% %%; ALL WITH S ORB.**2')
      IF(NRSR.EQ.2)WRITE(*,2137)
      IF(NRSR.EQ.2)WRITE(11,2137)
 2137 FORMAT('  Y ZR %% %% %% %% %% %% %%; ALL WITH S ORB.**2')
      IF(NRSR.EQ.3)WRITE(*,2138)
      IF(NRSR.EQ.3)WRITE(11,2138)
 2138 FORMAT(' LU %% TA  W RE %% %% %% %%; ALL WITH S ORB.**2')
      ENDIF
C
      IF(LDG.EQ.1)THEN
      IF(NRSR.EQ.1)WRITE(*,2139)
      IF(NRSR.EQ.1)WRITE(11,2139)
 2139 FORMAT(' %% %% %%  V CR %% %% CO NI; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2140)
      IF(NRSR.EQ.2)WRITE(11,2140)
 2140 FORMAT(' %% %% %% NB MO %% RU RH %%; ALL WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.2)THEN
      IF(NRSR.EQ.1)WRITE(*,2151)
      IF(NRSR.EQ.1)WRITE(11,2151)
 2151 FORMAT(' SC TI  V CR MN FE CO NI CU; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2152)
      IF(NRSR.EQ.2)WRITE(11,2152)
 2152 FORMAT('  Y ZR NB %% %% %% RH PD %%; ALL WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.3)THEN
      IF(NRSR.EQ.1)WRITE(*,2153)
      IF(NRSR.EQ.1)WRITE(11,2153)
 2153 FORMAT(' TI  V CR MN %% %% %% %% %%; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2154)
      IF(NRSR.EQ.2)WRITE(11,2154)
 2154 FORMAT(' NB %% %% %% %% %% %% %% %%; WITHOUT S ORB.-OCC.')
      ENDIF
C
      IF(LDG.EQ.4)THEN
      IF(NRSR.EQ.1)WRITE(*,2155)
      IF(NRSR.EQ.1)WRITE(11,2155)
 2155 FORMAT('  V CR %% FE %% %% %% %% %%; ALL WITHOUT S ORB.-OCC.')
      IF(NRSR.EQ.2)WRITE(*,2156)
      IF(NRSR.EQ.2)WRITE(11,2156)
 2156 FORMAT(' %% %% %% %% %% %% %% %% %%; NOTHING IS THERE!')
      ENDIF
C
      LDG1=LDG+1
      IF(FKSIDA(NREL,LDG1,NRSR).EQ.ZERO)THEN
      WRITE(*,2134)
      WRITE(11,2134)
 2134 FORMAT(' GRIFFITH-DATA NOT'
     1,' AVAILABLE: DATA FROM KOENIG/KREMER, I.E. RACAHC=4.*RACAHB!')
      ELSE
      IF(LTS.EQ.0.AND.LESS.EQ.0)WRITE(*,2135)
      IF(LTS.EQ.0.AND.LESS.EQ.0)WRITE(11,2135)
 2135 FORMAT(
     1' DATA FROM GRIFFITH ARE USED INCL. RACAHC AND COUPL.-CONST.!')
      RACAHP=RACAHB(NREL,LDG1,NRSR)
      RACAHQ=RACAHC(NREL,LDG1,NRSR)
      ZETA=FKSIDA(NREL,LDG1,NRSR)
      ENDIF
C**   THE FOLLOWING ENDIF BELONGS TO "IF(JANOC.NE.0)THEN ... ELSE ..."!:
      ENDIF
C
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C
C**   IN PRACTICE RACAHA AND FINTEG(1)=F(**0) ARE BOTH ZERO (SHIFT ONLY)!
C     - FORMULA: RACAHA=F(**0)-49.*F(**4)/441.
C
      NEURAH=0
      IF(LTS.EQ.0.AND.LESS.EQ.0.AND.NREL.EQ.1)THEN
      WRITE(11,9121)
 9204 WRITE(*,9121)
 9121 FORMAT(' RACAHB RESP. RACAHC ARE AND REMAIN ZERO!',/,' BECAUSE '
     2,'ANY CHANGE IS NOT POSSIBLE, INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3830)NEURAH
      GOTO 4830
      ENDIF
 3830 READ(*,'(I1)',ERR=9204,END=4576)NEURAH
      LMN=1
 4830 NEURAH=0
      WRITE(7,2109)NEURAH
      WRITE(*,2100)NEURAH
      WRITE(11,2100)NEURAH
      ENDIF
      IF(LTS.EQ.0.AND.NREL.NE.1)THEN
C**   THE RACAH-PARAMETERS MAY BE CHANGED!:
      WRITE(11,2121)RACAHP,RACAHQ
 8204 WRITE(*,2121)RACAHP,RACAHQ
 2121 FORMAT(' INPUT IN I1'
     1,' YES/NO(0), IF NEW-INPUT OF RACAHB RESP. RACAHC - STANDARD: 0',
     2/,' (THESE ARE = ',2D16.8,')',
     3/,' (HINT: LIGANDS MAY BE IMPORTANT, TOO!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3831)NEURAH
      GOTO 4831
      ENDIF
 3831 READ(*,'(I1)',ERR=8204,END=4576)NEURAH
      LMN=1
 4831 WRITE(7,2109)NEURAH
 2109 FORMAT(I1,' =NEURAH(NEW RACAH)')
      WRITE(*,2100)NEURAH
      WRITE(11,2100)NEURAH
 2100 FORMAT(I2,' =NEURAH(NEW RACAH)!!!!!!!!!')
      ENDIF
      IF(NEURAH.NE.0)THEN
      WRITE(11,2113)
 8205 WRITE(*,2113)
 2113 FORMAT(
     1' INPUT NEW RACAHB AND C (IF REQ.) IN 1 RESP. 2 ROWS IN E16.8')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3832)RACAHP
      GOTO 4832
      ENDIF
 3832 READ(*,'(D16.8)',ERR=8205,END=4576)RACAHP
      LMN=1
 4832 WRITE(7,2110)RACAHP
 2110 FORMAT(D16.8,' =RACAHP')
      WRITE(*,2110)RACAHP
      WRITE(11,2110)RACAHP
      IF(JANOC.EQ.0)THEN
      GOTO 8207
 8206 WRITE(*,8208)
 8208 FORMAT(' INPUT RACAHC!:')
 8207 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3833)RACAHQ
      GOTO 4833
      ENDIF
 3833 READ(*,'(D16.8)',ERR=8206,END=4576)RACAHQ
      LMN=1
 4833 WRITE(7,2111)RACAHQ
 2111 FORMAT(D16.8,' =RACAHQ')
      WRITE(*,2111)RACAHQ
      WRITE(11,2111)RACAHQ
      ELSE
      RACAHQ=VIER*RACAHP
      ENDIF
      ENDIF
      VLSTNG(6)=RACAHP
      VLSTNG(7)=RACAHQ
C**   CALCULATION OF THE F'S:
      FINTEG(3)=(RACAHQ/35.0D0)*441.0D0
CF1   FINTEG(1)=RACAHA+49.D0*FINTEG(3)/441.D0
C**   FINTEG(1)=F(**0) (OR INDEX 0 BELOW: IS THE SAME THING!)
C     =49.*F(**4)/441.=49.*F-(INDEX 4 BELOW)
      FINTEG(2)=(RACAHP+5.D0*FINTEG(3)/441.D0)*49.0D0
C**   FINTEG(2)=F(**2)
C**   FINTEG(3)=F(**4)!
C**   FINTEG(4)=F(**6) - FOR F EL.!
C**   RACAHC IS OR IS NOT (THEN: RACAHC=FOUR*RACAHB) USED!
      IF(MOROUT.NE.0)THEN
      WRITE(*,3168)
      WRITE(11,3168)
 3168 FORMAT(/,' F-INTEG(RAL),I=2,3:')
      WRITE(*,'(2D16.8)')(FINTEG(I),I=2,3)
      WRITE(11,'(2D16.8)')(FINTEG(I),I=2,3)
      ENDIF
C
      IF(JANOC.EQ.0.AND.JATEST.NE.0.AND.NREL.EQ.1)THEN
      WRITE(11,9122)
 9205 WRITE(*,9122)
 9122 FORMAT(' INPUT OF NEW F''S IS NOT POSSIBLE! INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3834)NEUEFS
      GOTO 4834
      ENDIF
 3834 READ(*,'(I1)',ERR=9205,END=4576)NEUEFS
      LMN=1
 4834 NEUEFS=0
      WRITE(7,2112)NEUEFS
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
      ENDIF
      IF(JANOC.EQ.0.AND.JATEST.NE.0.AND.NREL.NE.1)THEN
C**   IN THE FOLLOWING THE POSSIBILITY FOR DIRECT INPUT OF
C     THE F'S-(TO THE KTH) OF CONDON/SHORTLEY (FINTEG(1)=F(**0)!):
      WRITE(11,21)
 8209 WRITE(*,21)
   21 FORMAT(' DIRECT INPUT OF NEW F''S IN I1 YES/NO(0); (OR THESE'
     1,/,' ARE QUASI PREOCC./THOSE OF BEFORE)! - STANDARD: 0 (9=STOP)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3835)NEUEFS
      GOTO 4835
      ENDIF
 3835 READ(*,'(I1)',ERR=8209,END=4576)NEUEFS
      LMN=1
 4835 WRITE(7,2112)NEUEFS
 2112 FORMAT(I1,' =NEUEFS(NEW F''S)')
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
 2101 FORMAT(I2,' =NEUEFS(NEW F''S)!!!!!!!!!')
      IF(NEUEFS.EQ.9)STOP 'END-9'
      IF(NEUEFS.NE.0)THEN
      WRITE(11,211)
 8210 WRITE(*,211)
  211 FORMAT(' INPUT (ONE ROW EACH!) IN E16.8. F(**2) AND F(**4)')
CF1   READ(*,'(D16.8)')FIN
CF1   FINTEG(1)=FIN (NOT USED!)
C**   ATTENTION: FINTEG(3)=F(**4)!
      IF(MORTEX.GT.0)THEN
      WRITE(*,2118)
      WRITE(11,2118)
 2118 FORMAT(
     1' F(INDEX 2 (4) BELOW) = F(**2 (**4))/49. (/441.) FOR D EL.!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3836)FIN
      GOTO 4836
      ENDIF
 3836 READ(*,'(D16.8)',ERR=8210,END=4576)FIN
      LMN=1
 4836 WRITE(*,2270)FIN
      WRITE(7,2270)FIN
 2270 FORMAT(D16.8,' =FIN(TEGRAL)')
      FINTEG(2)=FIN
      GOTO 8212
 8211 WRITE(*,8213)
 8213 FORMAT(' INPUT 2ND ROW!:')
 8212 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3837)FIN
      GOTO 4837
      ENDIF
 3837 READ(*,'(D16.8)',ERR=8211,END=4576)FIN
      LMN=1
 4837 WRITE(*,2270)FIN
      WRITE(7,2270)FIN
      FINTEG(3)=FIN
      WRITE(*,'(2D16.8)')(FINTEG(I),I=2,3)
      WRITE(11,'(2D16.8)')(FINTEG(I),I=2,3)
      ENDIF
      VLSTNG(8)=FINTEG(2)
      VLSTNG(10)=FINTEG(3)
      ENDIF
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.NE.2)GOTO"!:
 6666 CONTINUE
      IF(KLWERT.NE.3)GOTO 7777
      WRITE(11,9118)
 8214 WRITE(*,9118)
 9118 FORMAT(/,' INPUT IN I2 NUMBER OF F EL.; .LT.1 OR .GT.13 => 1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3838)NREL
      GOTO 4838
      ENDIF
 3838 READ(*,'(I2)',ERR=8214,END=4576)NREL
      LMN=1
 4838 IF(NREL.LE.0.OR.NREL.GT.13)NREL=1
      WRITE(7,9117)NREL
 9117 FORMAT(I2,' = No.OF F EL.')
      WRITE(*,1111)NREL
      WRITE(11,1111)NREL
 1111 FORMAT(' THE NUMBER OF F ELECTRONS IS =',I4,'!!!!!!!!!')
      IF(NREL.EQ.1.OR.NREL.EQ.13)THEN
      WRITE(11,9122)
 9250 WRITE(*,9122)
C9122 FORMAT(' INPUT OF NEW F''S IS NOT POSSIBLE! INPUT NO(0) IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3934)NEUEFS
      GOTO 4934
      ENDIF
 3934 READ(*,'(I1)',ERR=9250,END=4576)NEUEFS
      LMN=1
 4934 NEUEFS=0
      WRITE(7,2112)NEUEFS
      WRITE(*,2101)NEUEFS
      WRITE(11,2101)NEUEFS
      ENDIF
C**   JAWIGN.NE.0 <=> SUBROUTINE (WIGNER-)ECKART RUNS: (JAWIGN=0 HERE!)
      IF(JAWIGN.NE.0.OR.NREL.EQ.1.OR.NREL.EQ.13)GOTO 6678
CF1   FINTEG(1)=ZERO
      DO 3100 I=2,4
      FINTEG(I)=FINT(I,NREL)
 3100 CONTINUE
CKR LTS=0 ALWAYS!:
CKR      IF(LTS.NE.0.AND.NREL.GT.3)GOTO 6677
      WRITE(11,112)(FINTEG(I),I=2,4)
 8215 WRITE(*,112)(FINTEG(I),I=2,4)
  112 FORMAT(/,' (FINTEG(I),I=2,4):',3D14.6
     1,/,' INPUT IN I1 YES/NO(0): "OTHER"')
      WRITE(*,4121)
      WRITE(11,4121)
 4121 FORMAT(
     1' IF 5F EL. (NOT 4F EL.!): YOU OUGHT TO CHOOSE "YES(1): OTHER"!',
     2/,' DATA FOR U(4+), U(3+): CHOOSE "YES(2)"!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,1121)
      WRITE(11,1121)
 1121 FORMAT(' THE DATA STORED HERE ARE SUFFICIENTLY GOOD FOR'
     1,' MAGNETOCHEM.,',/,' BUT NOT FOR LIGAND FIELDS IN GENERAL!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3839)JANO
      GOTO 4839
      ENDIF
 3839 READ(*,'(I1)',ERR=8215,END=4576)JANO
      LMN=1
 4839 IF(JANO.GT.2)JANO=2
      WRITE(7,2271)JANO
 2271 FORMAT(I1,' =JANO(FINTEG)')
      WRITE(*,2207)JANO
      WRITE(11,2207)JANO
 2207 FORMAT(I2,' =JANO(FINTEG)!!!!!!!!!')
      IF(JANO.GT.1)THEN
      FINTEG(2)=FINTEU(1,NREL-1)
      FINTEG(3)=FINTEU(2,NREL-1)
      FINTEG(4)=FINTEU(3,NREL-1)
      WRITE(11,2217)(FINTEG(I),I=2,4)
 8251 WRITE(*,2217)(FINTEG(I),I=2,4)
 2217 FORMAT(' (FINTEG(I),I=2,4) =',3D16.8,
     1/,' (THEOR. RELATIVISTIC VALUES FOR FREE IONS! LESS 40, 30, 20% (F
     2INTEG(2,3,4))',/,' FOR EXP.VAL.: INPUT OF NEW VALUES YES/NO(0)?)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3840)JANO
      GOTO 4840
      ENDIF
 3840 READ(*,'(I1)',ERR=8251,END=4576)JANO
      LMN=1
 4840 IF(JANO.GT.1)JANO=1
      WRITE(7,2271)JANO
      WRITE(*,2207)JANO
      WRITE(11,2207)JANO
      ENDIF
      IF(JANO.EQ.1)THEN
      WRITE(*,113)
      WRITE(11,113)
  113 FORMAT(
     1' INPUT IN D14.6 (FINTEG(I),I=2,4) -  F(**2)...! - ONE ROW EACH!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,1089)
      WRITE(11,1089)
 1089 FORMAT(
     1' F(INDICES 2,4,6 BELOW) = F(**2,4,6)/(225.,1089.,184041./25.)'
     1,' FOR F EL.!')
      ENDIF
      DO 3101 I=2,4
 8216 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,114,ERR=5588,END=3841)FINTEG(I)
      GOTO 4841
      ENDIF
 3841 READ(*,114,ERR=8216,END=4576)FINTEG(I)
      LMN=1
 4841 WRITE(*,114)FINTEG(I)
      WRITE(7,114)FINTEG(I)
      WRITE(11,114)FINTEG(I)
  114 FORMAT(D14.6)
 3101 CONTINUE
      ENDIF
CKR 6677 CONTINUE
      VLSTNG(8)=FINTEG(2)
      VLSTNG(9)=FINTEG(3)
      VLSTNG(10)=FINTEG(4)
 6678 CONTINUE
      ZETA=FKSIWI(NREL)
C
C**   THE FOLLOWING CONTINUE BELONGS TO "IF(KLWERT.NE.3)GOTO"!: 
 7777 CONTINUE
C
CKR LTS=0 ALWAYS!:
      IF(LTS.NE.0.AND.(NREL.GT.3.OR.KLWERT.EQ.2))GOTO 8888 
      WRITE(11,1199)ZETA
 8217 WRITE(*,1199)ZETA
      WRITE(11,41)
      WRITE(*,41)
   41 FORMAT(' INPUT IN I1 ',
     1'YES/NO(0): NEW (POS.!) SPIN-ORBIT COUPL.-CONST. FOR 1 ELECTRON.')
      IF(KLWERT.EQ.3)THEN
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,4112)
      WRITE(11,4112)
 4112 FORMAT(
     1' IF 5F EL. (NOT 4F EL.!): YOU OUGHT TO CHOOSE "YES(1): OTHER"!',
     2/,' DATA FOR U(5+), U(4+), U(3+): CHOOSE "YES(2)"!')
CKR      ELSE
      ENDIF
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3842)NEUKSI
      GOTO 4842
      ENDIF
 3842 READ(*,'(I1)',ERR=8217,END=4576)NEUKSI
      LMN=1
 4842 IF(NEUKSI.GT.2)NEUKSI=2
      WRITE(7,2272)NEUKSI
 2272 FORMAT(I1,' =NEUKSI(NEW ZETA)')
      WRITE(*,2227)NEUKSI
      WRITE(11,2227)NEUKSI
 2227 FORMAT(I2,' =NEUKSI(NEW ZETA)!!!!!!!!!')
C**   ZETA: (POS.!) SPIN-ORBIT COUPL.-CONST. FOR ONE ELECTRON!
      IF(NEUKSI.GT.1)THEN
      ZETA=FKSIU(NREL)
      WRITE(*,1199)ZETA
      WRITE(11,1199)ZETA
C1199 FORMAT: SEE BELOW!
      ENDIF
      IF(NEUKSI.EQ.1)THEN
C
      WRITE(11,4111)
 8218 WRITE(*,4111)
 4111 FORMAT(' INPUT'
     1,' IN E12.4 (POS.!) COUPL.-CONST. ZETA FOR ONE ELECTRON,',/
     1,' (A POSS. ORB.-RED.-FACTOR IS POSS.(!) TO BE TAKEN INTO ACCOUNT'
     1,/,' HERE TOO, IN AS MUCH AS THE CONST. HAS TO BE REDUCED!)')
C
CKR 4118 FORMAT(' FOR THE SPEC. ROUTINE WIGNER/ECKART: A POSS. INPUT IS 1.0
CKR     1E6 ("TEST")')
      IF(LMN.EQ.0)THEN
      READ(77,'(D12.4)',ERR=5588,END=3843)FKSII
      GOTO 4843
      ENDIF
 3843 READ(*,'(D12.4)',ERR=8218,END=4576)FKSII
      LMN=1
 4843 ZETA=DABS(FKSII)
      WRITE(7,2273)FKSII
 2273 FORMAT(D12.4,' =FKSII(=ZETA)')
      WRITE(*,1200)FKSII
      WRITE(11,1200)FKSII
 1200 FORMAT(D12.4,' =FKSII(=ZETA)!!!!!!!!!')
      WRITE(*,1199)ZETA
      WRITE(11,1199)ZETA
 1199 FORMAT(/,' THE '
     1,'(POS.!) COUPL.-CONST. ZETA (1(!) EL.) IS =',D13.4)
C
      ENDIF
C
C**   THE FOLLOWING CONTINUE'S BELONG TO "IF(LTS.NE.0)GOTO"! 
C     AND TO "IF(KLWERT.EQ.1)THEN ... GOTO"!:
 8888 CONTINUE
      VLSTNG(11)=ZETA
 8889 CONTINUE
C
C**   FOR ALL SORTS OF ELECTRONS EXCEPT S EL., BUT ONLY TEST, IF 4F EL.:
C     (SEE DATA!:)
C     DO 4100 I=1,3
C4100 REDFAZ(I)=ONE
CKR LTS=0 ALWAYS (AND JAWIGN=0)!:
      IF((LTS.NE.0.OR.JAWIGN.NE.0.OR.LESS.NE.0).AND.JATEST.EQ.0)
     1GOTO 9998
      IF(KLWERT.EQ.3)THEN
      WRITE(*,8899)
      WRITE(11,8899)
 8899 FORMAT(/,' F EL.:'
     1,' ORB.-RED.-FACTOR(S) OTHER THEN ONE ONLY AS A TEST, IF 4F EL.!')
      ENDIF
      WRITE(11,410)
 8219 WRITE(*,410)
  410 FORMAT(
     1/,' INPUT IN I1 YES/NO(0): ORB.-RED.-FACTOR(S) OTHER THAN ONE')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3844)NEUORB
      GOTO 4844
      ENDIF
 3844 READ(*,'(I1)',ERR=8219,END=4576)NEUORB
      LMN=1
 4844 WRITE(7,2274)NEUORB
 2274 FORMAT(I1,' =NEUORB(ORB.-RED.-F.)')
      WRITE(*,2244)NEUORB
      WRITE(11,2244)NEUORB
 2244 FORMAT(I2,' =NEUORB(ORB.-RED.-F.)!!!!!!!!!')
      IF(NEUORB.NE.0)THEN
      WRITE(*,4101)NRDIRE
 4101 FORMAT(' INPUT (ONE'
     1,' ROW EACH!)',I2,' ORB.-RED.-FACTOR(S) (ZERO>=ONE) IN F12.8')
      DO 4102 I=1,NRDIRE
 8220 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(F12.8)',ERR=5588,END=3845)REDFA
      GOTO 4845
      ENDIF
 3845 READ(*,'(F12.8)',ERR=8220,END=4576)REDFA
      LMN=1
 4845 WRITE(*,2275)REDFA
      WRITE(7,2275)REDFA
 2275 FORMAT(F12.8,' =RED.FA(CT)')
      IF(REDFA.NE.ZERO)REDFAZ(I)=REDFA
 4102 CONTINUE
C**   NOTE: IOPT1=2 OR =3 <=> 3 OR 2 DIRECTIONS ARE INVOLVED. THE POINT
C     GROUP, HOWEVER, REMAINS! (CKR: IOPT1=3 CANCELED!)
      IF(NRDIRE.EQ.2)REDFAZ(3)=REDFAZ(2)
      IF(NRDIRE.EQ.1)THEN
      REDFAZ(2)=REDFAZ(1)
      REDFAZ(3)=REDFAZ(1)
      ENDIF
      WRITE(*,4103)(REDFAZ(I),I=1,3)
      WRITE(11,4103)(REDFAZ(I),I=1,3)
 4103 FORMAT(' (THREE) ORB.-RED.-FACTORS =',3F13.8)
C
      ENDIF
C
C**   THE FOLLOWING CONTINUE'S BELONG TO "IF(LTS.NE.0.OR.JAWIGN.NE.0)GOTO"!
C     AND TO "IF(KLWERT.EQ.0)THEN NREL=1 GOTO"!:
 9998 CONTINUE
      IF(REDFAZ(1).NE.ONE)VLSTNG(12)=REDFAZ(1)
      IF(REDFAZ(2).NE.ONE)VLSTNG(13)=REDFAZ(2)
      IF(REDFAZ(3).NE.ONE)VLSTNG(14)=REDFAZ(3)
 9999 CONTINUE
      NRVALJ=1
      IF(NREL.EQ.1)NRVALJ=2
      IF(KLWERT.EQ.1)NRVALJ=MULMUP(NREL)
      IF(KLWERT.EQ.2)NRVALJ=MULMUD(NREL)
      IF(KLWERT.EQ.3)NRVALJ=JMULTI(NREL)
      CALL SHORTL(JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP,BWWOLD
     1,ZETA,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0,QTEXT0)
C
C**   SUBROUTINE SHORTL WILL CALL SUSFIT (NOT SUSC), THE FITTING
C     ROUTINE! THERE IS NO RETURN FROM SUSFIT TO SHORTL!
 4576 CALL FINISH
 5588 CALL FINISI
 4577 WRITE(*,4578)
      WRITE(11,4578)
 4578 FORMAT(' (NEW, EMPTY INPUT FILE OLDf7.DAT OPENED!)')
      OPEN(77,ERR=4581,FILE='OLDf7.DAT',STATUS='NEW')
      LMN=1
      GOTO 1921
 4581 STOP 'STOP'
CEND CONDOR
      END
      SUBROUTINE FINISH
      WRITE(*,1)
      WRITE(11,1)
    1 FORMAT(' END OF FILE OF INPUT FILE: STOP')
      STOP 'STOPSH'
      END
      SUBROUTINE FINISI
      WRITE(*,1)
      WRITE(11,1)
    1 FORMAT(' ERROR IN FILE OLDf7.DAT: STOP')
      STOP 'STOPSI'
      END
      SUBROUTINE SUSC(JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
C**   IS CALLED BY LEVSQX OR LEVDER, THE LATTER A SUBROUTINE OF LEVMAR,
C     THE "LEVENBERG-MARQUARDT METHOD", TO CALCULATE THE SUSCEPTIBILITY!
C**   CALLS TANABE, WHERE THE CALCULATION OF
C     THE SUSCEPTIBILITY REALLY STARTS.
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/CBWWWS/BWWWS(16)
      COMMON/QBQVQQ/QB,QV,QQ
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      CHARACTER*4 QXX
      PARAMETER(KLWERD=3,KDIMPL=500,LLSMX=12,ISLSMX=4,J20=44)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      INTEGER REIHNF,BLOCKD,BLOCKS,MASKX2(11)
     1,MSMLNR(2,-KLWERD:KLWERD),KAESNR(-LLSMX:LLSMX)
     2,KAESTC(-LLSMX:LLSMX,KDIMPL),LOCH(KDIMPL)
     3,KAESTD(-ISLSMX:ISLSMX,KDIMPL),KAESNS(-ISLSMX:ISLSMX)
      DIMENSION STEV(17),BWWALT(J20)
     1,BSTART(24),EIWERT(*)
     1,VORFAK(-LLSMX:LLSMX,KDIMPL),VORFAL(-ISLSMX:ISLSMX,KDIMPL)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW
C     IN SUBROUTINE SUSC:
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/INSUSC/TESINT
     1,VORFAK,VORFAL,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,NOFORM
CKR      COMMON/DIRZX4/DIRZXY(4),TTT(10)
      SAVE
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0
     1,VPREZ6=1.0D6/(4.D0*3.1415926D0),BOLZCM=0.695040D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
      DATA MASKX2/1,0,1,0,1,1,1,0,1,1,0/
C**   MASKX2=0 <=> B22, B42, B62 AND B66.
      DATA KLICKK,KLICKL,KLICKS,KLICKT,KLICKV,KLICKX,KLICK,LAUFNR,LAUFNS
     1,MOROUU,MOROUV,KLICKM,KLICKN/0,0,0,0,0,0,0,0,0,0,0,0,0/
      DATA JANOL,JANOS,JANOV,JAREVS,LOWOLD
     1,KLICOV,JAOCTA/0,0,0,0,1,0,0/
      DATA CHIALT,XXX,FNENNE/ZERO,ZERO,ZERO/
      DATA BWWALT/44*ZERO/
      DATA KLICOC,JAWARN/0,-1/
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,12)
      IF(KLICOC.EQ.0)THEN
      KLICOC=1
      NOFORM=0
      ENDIF
C     B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66:
      NEWBWW=0
      DO 1243 I=1,11
      IF(BWW(I).NE.BWWALT(I))NEWBWW=1
 1243 CONTINUE
C     AND:
      DO 1246 I=12,20
      BWWW(I)=BWW(I)
 1246 CONTINUE
      IF(IN24.GT.20)THEN
      DO 1247 I=21,IN24
      IF(BWW(I).NE.BWWALT(I))NEWBWW=1
 1247 CONTINUE
C     AND:
      BWWW(25)=BWW(25)
C      BWWW(26)=BWW(26) - ZETA!
C      IN243=IN24+3
      IN242=IN24+2
      DO 1245 I=IN242,IN25
      IF(BWW(I).NE.BWWALT(I))NEWBWW=1
 1245 CONTINUE
      ENDIF
C BBBBBBBBBB BJLTCF%%%% BBBBRZFFFB BBBBBBBBBB B
      IF(KLICKK.EQ.0)THEN
      KLICKK=1
      NEWBWW=1
      ENDIF
      IF(NEWBWW.EQ.0.AND.LOWHIG.EQ.LOWOLD)GOTO 8765
      LOWOLD=LOWHIG
C
      DO 1 I=1,11
      BWWW(I)=BWW(I)
      BWWALT(I)=BWW(I)
    1 CONTINUE
      IF(IN24.GT.20)THEN
      DO 1248 I=21,IN24
      BWWW(I)=BWW(I)
      BWWALT(I)=BWW(I)
 1248 CONTINUE
C      IN243=IN24+3
      IN242=IN24+2
      DO 1249 I=IN242,IN25
      BWWW(I)=BWW(I)
      BWWALT(I)=BWW(I)
 1249 CONTINUE
      ENDIF
C
      IF(JASTRU.NE.0)THEN
      CALL STR00(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,J20,IN24,IN25)
      IF(IN24.GT.20)THEN
C**   //21'/22'//41'/42'/43'/44'//61'/62'/63'/64'//65'/66':
      BWWW(30)=BWWWS(2)
      BWWW(31)=BWWWS(3)
      BWWW(32)=BWWWS(5)
      BWWW(33)=BWWWS(6)
      BWWW(34)=BWWWS(7)
      BWWW(35)=BWWWS(8)
      BWWW(36)=BWWWS(10)
      BWWW(37)=BWWWS(11)
      BWWW(38)=BWWWS(12)
      BWWW(39)=BWWWS(13)
      BWWW(40)=BWWWS(15)
      BWWW(41)=BWWWS(16)
C**   IN STR00:
C     WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWWS(I),QS(I),I=2,3)
C    1,(0,BWWWS(I),QS(I),I=5,8)
C    2,(0,BWWWS(I),QS(I),I=10,13),(0,BWWWS(I),QS(I),I=15,16)
      ENDIF
      GOTO 6789
      ENDIF
C**   ONLY FOR F EL., BUT NOT EU3+, GD3+! (THESE 2 NOT MENTIONED IN TABLE 1
C     OF LEA/ LEASK/ WOLF! - J=0 FOR EU3+ AND SPIN-ONLY FOR GD3+!):
C(NO) IF(KLWERT.NE.3.OR.NREL.EQ.6.OR.NREL.EQ.7)GOTO 1234
      IF(KLWERT.NE.3)GOTO 1234
      IF(NREL.EQ.6.OR.NREL.EQ.7)GOTO 1233
C
C**   ONLY FOR "STANDARD" CUBIC GROUP, BUT NOT CE3+, SM3+! (BECAUSE X=1 FOR THESE 2!):
      IF(NGROUP.NE.21)GOTO 1233
C
C**   BWWW(3) AND BWWW(7) MAY BE INTERPRETED HERE AS X AND W OF:
C     (LIT.:) K.R.LEA, M.J.M.LEASK, W.P.WOLF: J.PHYS.CHEM.SOLIDS
C     VOL.23, PP.1381-1405.
      IF(KLICKL.EQ.0.AND.LESS.EQ.0)THEN
      KLICKL=1
      IF(NREL.EQ.1.OR.NREL.EQ.5)THEN
C**   JANO-Lea/Leask/Wolf=0
      WRITE(11,8219)
 8220 WRITE(*,8219)
 8219 FORMAT(' F EL. AND CUBIC GROUP WITH 4-FOLD AXIS: WYBOURNE ',
     1'COEFFICIENTS',/,' BWWW(3) AND BWWW(7) SHOULD BE INTERPRETED'
     2,' HERE AS X AND W:',/,' BECAUSE NOT POSSIBLE FOR 1 OR 5'
     3,' ELECTRONS, INPUT NO(0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3846)JANOL
      GOTO 4846
      ENDIF
 3846 READ(*,'(I1)',ERR=8220,END=4576)JANOL
      LMN=1
 4846 JANOL=0
      WRITE(7,2276)JANOL
      WRITE(*,2762)JANOL
      WRITE(11,2762)JANOL
      ELSE
      WRITE(11,3736)
 8221 WRITE(*,3736)
 3736 FORMAT(' F EL. AND CUBIC GROUP WITH 4-FOLD AXIS: WYBOURNE ',
     1'COEFFICIENTS',/,' BWWW(3) AND BWWW(7) SHOULD BE INTERPRETED'
     2,' HERE AS X AND W',/,' OF LEA, LEASK, WOLF IN J.PHYS.CHEM.SOLIDS,
     3 YES/NO(0)?')
C**   JANO-Lea/Leask/Wolf
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3847)JANOL
      GOTO 4847
      ENDIF
 3847 READ(*,'(I1)',ERR=8221,END=4576)JANOL
      LMN=1
 4847 WRITE(7,2276)JANOL
 2276 FORMAT(I1,' =JANOL(ea/Leask/Wolf)')
      WRITE(*,2762)JANOL
      WRITE(11,2762)JANOL
 2762 FORMAT(I2,' =JANOL(ea/Leask/Wolf)!!!!!!!!!')
      IF(JANOL.NE.0)THEN
      JANOLS=2
      IF(MORTEX.GT.0)THEN
      WRITE(*,3763)
      WRITE(11,3763)
 3763 FORMAT(' (FOR CE;PR;ND;PM;;;;TB;DY;HO;ER;TM;YB:)',/,' THE SIGNS'
     1,' GIVEN BY LEA/LEASK/WOLF FOR W/X FOR POINT GROUP OH (CUB(I)):',/
     2,' +/+1;+/-;-/+;+/+;-/-;+/-;-/+;+/+;-/-;+/-; AND FOR POINT GROUP T
     3D:',/,' -/+1;+/+;-/-;+/-;-/+;+/+;-/-;+/-;-/+;+/+.')
      ENDIF
      ENDIF
      ENDIF
      ENDIF
      IF(JANOL.NE.0)THEN
 3730 IF(BWWW(3).GT.ONE)BWWW(3)=BWWW(3)-TWO
      IF(BWWW(3).LT.-ONE)BWWW(3)=BWWW(3)+TWO
      IF(BWWW(3).LT.-ONE.OR.BWWW(3).GT.ONE)GOTO 3730
C
      ONEMX=ONE-DABS(BWWW(3))
      WLEA=BWWW(7)
      BWWW(3)=WLEA*BWWW(3)/F4F(NREL)
      BWWW(7)=WLEA*ONEMX/F6F(NREL)
C
      JANOS=1
      GOTO 3738
C**   ENDIF FOLLOWING BELONGS TO "IF(JANOL.NE.0) ELSE "!:
      ENDIF
C
 1233 CONTINUE
CKR      IF(NREL.EQ.6.OR.NREL.EQ.7)THEN
CKR 3734 FORMAT(/,' F EL. AND (NREL.EQ.6.OR.NREL.EQ.7): THE (WYBOURNE)'
CKR     1,' COEFFICIENTS',/,' PUT IN CANNOT BE INTERPRETED HERE AS STEVENS'
CKR     2,' COEFFICIENTS: INPUT NO(0)!')
C**   JANO-Stevens
CKR      READ(77,'(I1)',ERR=5588,END=3848)JANOS
CKR      GOTO 1234
CKR      ENDIF
C
CKR      IF(KLICKS.EQ.0.AND.LESS.EQ.0)THEN
CKR 3735 FORMAT(/,' F EL.: THE (WYBOURNE) COEFFICIENTS PUT IN SHOULD BE'
CKR     1,' INTERPRETED',/,' HERE AS STEVENS COEFFICIENTS: YES/NO(0)?',/
CKR     2,' (IF THERE ARE ANY RELATIONS OF COEFFICIENTS, THESE ARE',/
CKR     3,' RELATIONS OF THE COMPUTED WYBOURNE COEFFICIENTS, HOWEVER!)')
C**   JANO-Stevens
CKR 3849 READ(*,'(I1)',ERR=8222,END=4576)JANOS
CKR 2772 FORMAT(I2,' =JANOS(tevens)!!!!!!!!!') - FOR DEBUGGING:
CKR      ENDIF
C
 3738 IF(JANOS.NE.0)THEN
C**   GAMMA=ZERO FOR CE3+ AND SM3+!:
      IF(KLWERT.EQ.3.AND.(NREL.EQ.1.OR.NREL.EQ.5))THEN
      IF(BWWW(7).NE.ZERO.OR.BWWW(8).NE.ZERO.OR.BWWW(9).NE.ZERO.OR.BWWW
     1(10).NE.ZERO.OR.BWWW(11).NE.ZERO.OR.IBWWW(7).NE.0.OR.IBWWW(8).NE.0
     2.OR.IABS(IBWWW(9)).EQ.1.OR.IABS(IBWWW(10)).EQ.1.OR.IABS(IBWWW(11))
     3.EQ.1)THEN
      WRITE(*,3731)
      WRITE(11,3731)
 3731 FORMAT(
     1' GAMMA, NEEDED HERE FOR CE3+ AND SM3+, IS ZERO: THEREFORE STOP')
      STOP 'GAMMA'
      ENDIF
      ENDIF
C     B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66:
      BWWW(1)=BWWW(1)*TWO/ALPHAJ(NREL)
      IF(IBWWW(2).GE.0)BWWW(2)=BWWW(2)*0.8164966D0/ALPHAJ(NREL)
      BWWW(3)=BWWW(3)*8.0D0/BETAJ(NREL)
      IF(IBWWW(4).GE.0)BWWW(4)=BWWW(4)*1.264911D0/BETAJ(NREL)
      IF(IBWWW(5).GE.0)BWWW(5)=-BWWW(5)*0.3380617D0/BETAJ(NREL)
      IF(IBWWW(6).GE.0)BWWW(6)=BWWW(6)*0.9561828D0/BETAJ(NREL)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-3).GE.0)BWWW(IN24-3)=-BWWW(IN24-3)
     1*0.40824829D0/ALPHAJ(NREL)
      IF(IBWWW(IN24-2).GE.0)BWWW(IN24-2)=-BWWW(IN24-2)
     1*0.89442719D0/BETAJ(NREL)
      ENDIF
      IF(NREL.NE.1.AND.NREL.NE.5)THEN
C**   NOW ONLY FOR F EL.! (BECAUSE OF KMASKE!):
      BWWW(7)=BWWW(7)*16.0D0/GAMMAJ(NREL)
      IF(IBWWW(8).GE.0)BWWW(8)=BWWW(8)*1.561440D0/GAMMAJ(NREL)
      IF(IBWWW(9).GE.0)BWWW(9)=-BWWW(9)*0.7807201D0/GAMMAJ(NREL)
      IF(IBWWW(10).GE.0)BWWW(10)=BWWW(10)*1.425393D0/GAMMAJ(NREL)
      IF(IBWWW(11).GE.0)BWWW(11)=BWWW(11)*1.052723D0/GAMMAJ(NREL)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-1).GE.0)BWWW(IN24-1)=-BWWW(IN24-1)
     1*1.23442680D0/GAMMAJ(NREL)
      IF(IBWWW(IN24).GE.0)BWWW(IN24)=-BWWW(IN24)
     1*0.30389487D0/GAMMAJ(NREL)
      ENDIF
      ENDIF
      ENDIF
C
 1234 CONTINUE
C**   BELONGS TO "IF(KLWERT.NE.3).." OR "IF(NREL.EQ.6.OR.NREL.EQ.7)GOTO 1234"
C
CKR      IF(JATEST.NE.0.AND.NRDIRE.EQ.3.AND.KLICKX.EQ.0)THEN
CKR 3031 FORMAT(' BECAUSE X- AND(!) Y-DIRECTION ARE INVOLVED, THESE MAY BE'
CKR     1,' EXCHANGED',/,' ONE TO EACH OTHER (FOR TEST PURPOSES!), IF SOME 
CKR     2SIGNS ARE REVERSED:',/,' INPUT >0 TO DO SO (B22, B42, B62, B66)!')
CKR      READ(77,'(I1)',ERR=5588,END=3850)JAREVS
CKR      ENDIF
CKR      IF(JAREVS.NE.0)THEN
CKR      DO 3033 I=1,11
CKR      IF(MASKX2(I).EQ.0)BWWW(I)=-BWWW(I)
CKR 3033 CONTINUE
CKR      ENDIF
C
      IF(KLWERT.EQ.2.OR.KLWERT.EQ.3)THEN
      IF(IN25.GT.25)THEN
      IF(KLWERT.LT.3.OR.NREL.EQ.1)BWWW(29)=ZERO
      IF(NREL.EQ.1)BWWW(28)=ZERO
      IF(NREL.EQ.1)BWWW(27)=ZERO
      IF(NREL.NE.1.AND.KLWERT.EQ.2)THEN
      IF(IBWWW(28).LT.0)BWWW(28)=BWWW(28)*BWWW(27)
      BWWW(28)=(BWWW(28)/35.0D0)*441.D0
C**   FINTEG(3)=(RACAHQ/35.0D0)*441.D0
      BWWW(27)=(BWWW(27)+5.D0*BWWW(28)/441.D0)*49.0D0
C**   FINTEG(2)=(RACAHP+5.D0*FINTEG(3)/441.D0)*49.0D0
      ENDIF
      ENDIF
      IF(NGROUP.EQ.21)THEN
      BWWW(6)=BWWW(3)*DSQRT(5.0D0/14.0D0)
      ELSE IF(NGROUP.EQ.22)THEN
C**   THE SIGN IN FRONT OF DSQRT IS MINUS! THE C3-STEP-UP OPERATOR WITH MINUS
C     SIGN IN FRONT OF IT IS USED (AS USUAL!)!
      BWWW(5)=BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      ENDIF
C**   NEXT TWO LINES ARE MASKED, IF "CUBIC" (I.E. IBWWW=0!)!:
      IF(IBWWW(6).LT.0)BWWW(6)=BWWW(6)*BWWW(3)*DSQRT(5.0D0/14.0D0)
      IF(IBWWW(5).LT.0)BWWW(5)=BWWW(5)*BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      IF(JAWARN.EQ.-1.AND.IBWWW(5).EQ.-1)JAWARN=5
      IF(JAWARN.EQ.-1.AND.IBWWW(5).EQ.-2.AND.BWWW(5).NE.ZERO)JAWARN=5
      IF(JAWARN.EQ.-1.AND.IBWWW(6).EQ.-1)JAWARN=6
      IF(JAWARN.EQ.-1.AND.IBWWW(6).EQ.-2.AND.BWWW(6).NE.ZERO)JAWARN=6
      IF(IBWWW(4).LT.0)BWWW(4)=BWWW(4)*BWWW(3)
      IF(IBWWW(2).LT.0)BWWW(2)=BWWW(2)*BWWW(1)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-3).LT.0)BWWW(IN24-3)=BWWW(IN24-3)*BWWW(1)
      IF(IBWWW(IN24-2).LT.0)BWWW(IN24-2)=BWWW(IN24-2)*BWWW(3)
      ENDIF
      ENDIF
      IF(KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWWW(10)=BWWW(7)*(-DSQRT(3.5D0))
      ELSE IF(NGROUP.EQ.22)THEN
      BWWW(9)=BWWW(7)*DSQRT(210.0D0)/24.0D0
C**   FORMULA FROM M.T. HUTCHINGS, SOLID STATE PHYSICS VOL.16(1964),227
C     ACADEMIC PRESS NEW YORK AND LONDON; FORMULA (2.15) PAGE 246;
C     (THE OPERATOR IS (Y6-3) - (Y6+3)).
      BWWW(11)=BWWW(7)*DSQRT(231.0D0)/24.0D0
      ENDIF
      IF(IBWWW(10).LT.0)BWWW(10)=BWWW(10)*BWWW(7)*(-DSQRT(3.5D0))
      IF(IBWWW(9).LT.0)BWWW(9)=BWWW(9)*BWWW(7)*DSQRT(210.0D0)/24.0D0
      IF(IBWWW(11).LT.0)BWWW(11)=BWWW(11)*BWWW(7)*DSQRT(231.0D0)/24.0D0
      IF(JAWARN.EQ.-1.AND.IBWWW(9).EQ.-1)JAWARN=9
      IF(JAWARN.EQ.-1.AND.IBWWW(9).EQ.-2.AND.BWWW(9).NE.ZERO)JAWARN=9
      IF(JAWARN.EQ.-1.AND.IBWWW(10).EQ.-1)JAWARN=10
      IF(JAWARN.EQ.-1.AND.IBWWW(10).EQ.-2.AND.BWWW(10).NE.ZERO)JAWARN=10
      IF(JAWARN.EQ.-1.AND.IBWWW(11).EQ.-1)JAWARN=11
      IF(JAWARN.EQ.-1.AND.IBWWW(11).EQ.-2.AND.BWWW(11).NE.ZERO)JAWARN=11
      IF(IBWWW(8).LT.0)BWWW(8)=BWWW(8)*BWWW(7)
      IF(IN24.GT.20)THEN
      IF(IBWWW(IN24-1).LT.0)BWWW(IN24-1)=BWWW(IN24-1)*BWWW(7)
      IF(IBWWW(IN24).LT.0)BWWW(IN24)=BWWW(IN24)*BWWW(7)
      ENDIF
      ENDIF
      IF(JAWARN.GT.4.AND.JAWARN.LT.12)THEN
      WRITE(*,1198)JAWARN
      WRITE(11,1198)JAWARN
 1198 FORMAT(' WARNING: AT LEAST ONE OF THE RATIOS OF WYBOURNE PARAMETER
     1S PUT IN IS CHANGED NOW',/,' OR LATER ON, NAMELY THE',I3,'TH PARAM
     2ETER. IT IS MULTIPLIED BY',/,' -SQRT(10./7.),SQRT(5./14.),SQRT(210
     3.)/24.,-SQRT(3.5),',/,' AND SQRT(231.)/24., FOR No.=5,6,9,10, AND 
     411, RESPECTIVELY.')
      JAWARN=12
      ENDIF
C
CKR      IF(KLWERT.EQ.3.AND.KLICKV.EQ.0.AND
CKR     1.LESS.EQ.0.AND.JANOS.EQ.0.AND.JATEST.NE.0)THEN
CKR 3664 FORMAT(' FOR EU'
CKR     1,' OR GD: CALC. OF STEVENS VALUES NOT POSS.: INPUT NO(0)!')
CKR      READ(77,'(I1)',ERR=5588,END=3851)JANOV
CKR 3663 FORMAT(' FOR TEST'
CKR     1,' PURPOSES: CALC. AND OUTPUT OF STEVENS VALUES: YES/NO(0)?')
CKR      READ(77,'(I1)',ERR=5588,END=3852)JANOV
CKR      ENDIF
C
 6789 CONTINUE
      IF(KLICKT.EQ.0)THEN
      KLICKT=1
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
      WRITE(*,9101)(IBWWW(I),BWWW(I),QQ(I),I=1,IN25)
      WRITE(11,9101)(IBWWW(I),BWWW(I),QQ(I),I=1,IN25)
 9101 FORMAT(/,' CALCULATED WYBOURNE VALUES (PLUS 9 OTHER VALUES) (1 OR 
     1-1 MEANS "FITTED"):',/,(1X,3(I3,D16.8,1X,A5)))
      IF(IN24.GT.20)THEN
      WRITE(*,9111)
      WRITE(11,9111)
 9111 FORMAT(' MORE THEN 20 VALUES HERE!')
CKR     1,' B21/B41/B61/B65 (5 OTHER VALUES)',/
CKR     2,' B21''/B22''/B41''/B42''/B43''/B44''/B61''/B62''/B63''/B64'''
CKR     3,'/B65''/B66''')
      ENDIF
      ENDIF
C
CKR      IF(LOWHIG.EQ.2)THEN
CKR      ENDIF
 8765 CONTINUE
C**   "MOL(ECULAR)F(IE)LD" (MOLFLD.NE.0):
C**   "INTERNAL" FIELD = "EXTERNAL" FIELD:
      TESINT=TESLAS
CKR      IF(JAOCTA.NE.0)GOTO 9753
C**   AN "INFINIT" LOOP:
CKR      NRTURN=0
CKR 9876 CONTINUE
C
      IF(TEMPIK(NRTEMP).EQ.ZERO)STOP 'T.EQ.0'
      IF(CHIMEA(NRTEMP).EQ.ZERO.AND.MOD(LOWDAT(NRTEMP),2).EQ.0
     1.AND.KLICK.EQ.0)THEN
      KLICK=1
      WRITE(*,9877)
      WRITE(11,9877)
 9877 FORMAT(' WARNING: CHIMEA(NRTEMP).EQ.ZERO AND WILL POSSIBLY BECOME'
     1,/,' A DENOMINATOR: "NO FIT POSSIBLE IN THIS CASE!"')
      ENDIF
      IFIRST=0
      IF(TEMPIK(NRTEMP).LT.ZERO)THEN
      ITEMP=INT(DABS(TEMPIK(NRTEMP))+0.0000000001D0)
C**   NEWBWW NEEDED HERE, BECAUSE "NEUEBS" FIRSTLY IN TANABE!
      IF(NEWBWW.NE.0)THEN
C**   BECAUSE A CALCULATION MAY START HERE, HOWEVER NOTHING BUT
C     TEMPERATURE IS CHANGED AFTERWARDS, ONE(!) "FICTITIOUS"
C     CALCULATION (FOR IFIRST=1) IS STARTED HERE ("TEMPTH=ONE")! 
C     LABELS 975. SERVE TO MANAGE THIS AND TO STORE THE ENERGIES!
C     (HINT: IF CHIINP.DAT STARTS WITH TEMPIK(NRTEMP).GT.ZERO,
C     LABELS 975. ARE NOT USED IN ANY WAY!)
      IFIRST=1
      TEMPTH=ONE
      IF(TESLAS.EQ.ZERO)TESLAS=0.1D0
      GOTO 9752
      ENDIF 
      ENDIF
 9751 CONTINUE
      IFIRST=0
C
      IF(TEMPIK(NRTEMP).LT.ZERO)THEN
CKR      IF(ITEMP.LT.980)THEN
      FIWERT=EIWERT(ITEMP)
CKR      ELSE - DIRZXY FOR MAGMOM.OR.MAGMOL -
CKR         TTT FOR TRANSP.f-CALLED BY (MAGMOM.OR.(MAGMOL.OR.MOLLAM))
CKR      IF(ITEMP.EQ.997)FIWERT=-DIRZXY(2)
CKR      IF(ITEMP.EQ.998)FIWERT=-DIRZXY(3)
CKR      IF(ITEMP.EQ.999)FIWERT=DIRZXY(4)
CKR      DO 4112 I=1,10
CKR      IF(ITEMP.EQ.(979+I))FIWERT=TTT(I)
CKR 4112 CONTINUE
CKR      ENDIF
      CHISTA(NRTEMP)=FIWERT
      CHIZXY(1,NRTEMP)=FIWERT
      CHIZXY(2,NRTEMP)=FIWERT
      CHIZXY(3,NRTEMP)=FIWERT
C      
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=FIWERT
      CHI(2,I,J)=CHIMEA(NRTEMP)
 4121 CONTINUE
 4122 CONTINUE
C
      GOTO 9753
      ENDIF
C
 9752 IF(JAWIGN.EQ.0)THEN
C**   RELEVANT ONLY FOR LOWHIG.EQ.2:
CKR      CHIOLD=CHISTA(NRTEMP) - USED FOR "LOWHIG.EQ.2"!
CKR      CHIZ=CHIZXY(1,NRTEMP) - USED FOR "LOWHIG.EQ.2"!
CKR      CHIX=CHIZXY(2,NRTEMP) - "
CKR      CHIY=CHIZXY(3,NRTEMP) - "
C
CKR      IF(LESS.NE.0.OR.LTS.NE.0)GOTO 2110
CKR     1' INTERFACE FORMAT FREE <=> FILE fort.13 NOT POSSIBLE! INPUT 0')
CKR 2110 CONTINUE
C
      CALL TANABE(NGROUP,NOFORM,
     1EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,TESINT
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE, THE SUBROUTINE CALLED HERE:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS)
C
CKR      IF(LOWHIG.EQ.2)THEN
CKR      ENDIF
C
CKR      ELSE IF(JAWIGN.NE.0)THEN
C**   JAWIGN.NE.0 <=> SUBROUTINE (WIGNER-)ECKART RUNS (FOR F EL.;
C     IF "JATEST", ALSO FOR D EL.):
CK      CALL ECKART(NGROUP
C       ......
CK     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS,CRZMAT)
      ENDIF
C
CKR      IF(MOLFLD.NE.0)THEN
CKR      NRTURN=NRTURN+1
CKR      STRILA=BWWW(17)
C**   CALCULATION OF "INTERNAL"(!) FIELD "TESINT" (= EXT.FIELD+LAMBDA*MAGN.)
C     (MAGN. NOT(!) A FUNCTION OF TESLAS, BUT OF TESINT!):
CKR      TESINT=TESLAS+STRILA*CHI(1,1,5)
CKR      DIFF=CHI(1,1,1)-CHIALT
CKR      CHIALT=CHI(1,1,1)
C
CKR      IF(DABS(DIFF).GT.PARMOL)GOTO 9876
CKR      TESINT=TESLAS
CKR      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(MOLFLD.NE.0)THEN"!
C
 9753 CONTINUE
C
      IF(IFIRST.NE.0)GOTO 9751
C**   RETURNS TO LEVSQX OR LEVDER!
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUSC
      END
      BLOCKDATA GRIFFI
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/RRF/RACAHB,RACAHC,FKSIDA
      COMMON/RF/RACAKB(9),FKSIDK(9)
      PARAMETER(ZERO=0.0D0,ZE=ZERO)
      DOUBLE PRECISION RACAHB(9,5,3),RACAHC(9,5,3),FKSIDA(9,5,3)
      SAVE
CF1   DATA RACAHA/ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO/
C**   STORAGE NAMED ...KB AND ...DK CORRESP. TO DATA OF KOENIG/KREMER:
C**   DATA FOR IONS WITH ONE TO NINE D ELECTRONS
C     FROM KOENIG/KREMER (1(!) EL. HAS ZERO EL.-EL. REPULSION!)!:
      DATA RACAKB/ZERO,630.D0,700.D0,800.D0,825.D0,806.D0
     1,825.D0,905.D0,ZERO/
C**   ABOVE: RACAH-PARAMETERS; BELOW: KSI RESP. ZETA (SPIN-ORBIT
C     COUPL.-CONST. FOR ONE(!) ELECTRON)!
      DATA FKSIDK/200.D0,210.D0,270.D0,290.D0,400.D0,420.D0
     1,515.D0,650.D0,830.D0/
C
C**   NOW DATA FROM GRIFFITH HERE IN BLOCKDATA GRIFFI!:
C**   LIT.: J.S.GRIFFITH: THE THEORY OF TRANSITION-METAL IONS,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1971.                    
C
      DATA RACAHB
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/ZERO,560.D0,578.D0,ZERO,720.D0,806.D0,798.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,659.D0,710.D0,ZERO,ZERO,878.D0,1037.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,718.D0,766.D0,830.D0,960.D0,1058.D0
     3,1115.D0,1084.D0,1238.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,861.D0,1030.D0,1140.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,1039.D0,ZERO,1144.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,ZERO,254.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,260.D0,440.D0,ZERO,474.D0,667.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,ZERO,539.D0,532.D0,ZERO,ZERO,ZERO,620.D0,826.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,602.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,ZERO,ZERO,345.D0,371.D0,847.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,847.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
C
      DATA RACAHC
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/ZERO,1840.D0,2273.D0,ZERO,3087.D0,3506.D0,4167.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,2417.D0,2790.D0,ZERO,ZERO,3828.D0,4314.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,2629.D0,2855.D0,3430.D0,3325.D0,3901.D0
     3,4366.D0,4831.D0,4659.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,4165.D0,3850.D0,3675.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,4238.D0,ZERO,4459.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,ZERO,1975.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,1990.D0,1987.D0,ZERO,1806.D0,2313.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,ZERO,1640.D0,2095.D0,ZERO,ZERO,ZERO,4002.D0,2620.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,1367.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,ZERO,ZERO,1289.D0,1900.D0,1182.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZERO,ZERO,ZERO,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,1182.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
C
      DATA FKSIDA
C - FOR HALF FILLED SHELLS - (HERE: WITH S ORB.**2 AND WITHOUT S ORB., RESP.)
C - I.E. MN2+=MNIII, MNI, CRII, MOII, TCI, REI - LAMBDA BECOMES ZERO!
C**   1ST TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 1ST TRANS.-SERIES (ALL WITH S ORB.**2):
     1/67.D0,111.D0,158.D0,ZERO,239.D0,391.D0,517.D0,ZERO,ZERO
C**   2ND 9 VALUES IONS-1+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,ZERO,ZERO,ZERO,136.D0,222.D0,ZERO,ZERO,456.D0,603.D0
C**   3RD 9 VALUES IONS-2+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,79.D0,121.D0,167.D0,230.D0,347.D0,410.D0
     3,533.D0,649.D0,829.D0
C**   4TH 9 VALUES IONS-3+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,154.D0,209.D0,273.D0,352.D0,ZERO,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 1ST TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,248.D0,327.D0,ZERO,514.D0,ZERO,ZE,ZE,ZE,ZE
C
C**   2ND TRANS.-SERIES:
C**   1ST 9 VALUES NEUTRAL ATOMS 2ND TRANS.-SERIES (ALL WITH S ORB.**2):
     6,212.D0,335.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     7,ZERO,ZERO,ZERO,490.D0,672.D0,ZERO,887.D0,1212.D0,ZERO
C**   3RD 9 VALUES IONS-2+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     8,290.D0,403.D0,554.D0,ZERO,ZERO,ZERO,1235.D0,1615.D0,ZERO
C**   4TH 9 VALUES IONS-3+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     9,ZERO,670.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 2ND TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     *,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C
C**   3RD TRANS.-SERIES
C     (IONS (CHARGE.GE.1): HF1+ AND RE3+ (WITH DATA OF RE+-0) ONLY):
C**   1ST 9 VALUES NEUTRAL ATOMS 3RD TRANS.-SERIES (ALL WITH S ORB.**2):
     1,798.D0,ZERO,1657.D0,2089.D0,2285.D0,ZERO,ZE,ZE,ZE
C**   2ND 9 VALUES IONS-1+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     2,1336.D0,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE
C**   3RD 9 VALUES IONS-2+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     3,ZERO,ZERO,ZERO,ZERO,ZE,ZE,ZE,ZE,ZE
C**   4TH 9 VALUES IONS-3+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     4,ZERO,ZE,ZE,2285.D0,ZE,ZE,ZE,ZE,ZE
C**   5TH 9 VALUES IONS-4+ 3RD TRANS.-SERIES (ALL WITHOUT S ORB.-OCC.):
     5,ZERO,ZE,ZE,ZE,ZE,ZE,ZE,ZE,ZE/
CEND BLOCKDATA GRIFFI
      END
      BLOCKDATA WIGNER
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FINTE/FINT(4,13),FKSIWI(13)
      SAVE
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0
     1,F22=225.0D0,F440=1089.0D0,F660=7361.64D0,F42=0.145D0,F62=0.0164D0
     1,F44=F42*F440,F66=F62*F660
     1,FCE=ZERO,FPR=320.D0,FND=327.D0,FPM=ZERO,FSM=370.D0,FEU=401.D0
     2,FGD=408.D0,FTB=434.D0,FDY=420.D0,FHO=450.D0,FER=433.D0,FTM=447.D0
     2,FYB=ZERO,DAT22=FPR*F22,DAT23=FPR*F44,DAT24=FPR*F66
     3,DAT32=FND*F22,DAT33=FND*F44,DAT34=FND*F66
     5,DAT52=FSM*F22,DAT53=FSM*F44,DAT54=FSM*F66
     6,DAT62=FEU*F22,DAT63=FEU*F44,DAT64=FEU*F66
     7,DAT72=FGD*F22,DAT73=FGD*F44,DAT74=FGD*F66
     8,DAT82=FTB*F22,DAT83=FTB*F44,DAT84=FTB*F66
     9,DAT92=FDY*F22,DAT93=FDY*F44,DAT94=FDY*F66
     1,DAT102=FHO*F22,DAT103=FHO*F44,DAT104=FHO*F66
     1,DAT112=FER*F22,DAT113=FER*F44,DAT114=FER*F66
     2,DAT122=FTM*F22,DAT123=FTM*F44,DAT124=FTM*F66)
      DATA FINT/ZERO,ZERO,ZERO,ZERO,ZERO,DAT22,DAT23,DAT24,ZERO,DAT32
     2,DAT33,DAT34,ZERO,ZERO,ZERO,ZERO,ZERO,DAT52,DAT53,DAT54
     3,ZERO,DAT62,DAT63,DAT64,ZERO,DAT72,DAT73,DAT74
     2,ZERO,DAT82,DAT83,DAT84,ZERO,DAT92,DAT93,DAT94
     4,ZERO,DAT102,DAT103,DAT104,ZERO,DAT112,DAT113,DAT114
     5,ZERO,DAT122,DAT123,DAT124,ZERO,ZERO,ZERO,ZERO/
      DATA FKSIWI/640.D0,759.D0,885.D0,0.0D0,1200.D0,1320.D0
     1,1470.D0,1705.D0,1900.D0,2163.D0,2393.D0,2617.D0,2883.D0/
CEND BLOCKDATA WIGNER
      END
      BLOCKDATA STEVEN
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      SAVE
      PARAMETER(ZERO=0.0D0,SZ=60.0D0,SECHSS=6.0D0/7.0D0
     1,VIERDR=4.0D0/3.0D0,SIEBSE=7.0D0/6.0D0,ACHTSI=8.0D0/7.0D0
     1,ACHELF=8.0D0/11.0D0,ZWEISI=2.0D0/7.0D0)
C
C**   ALPHA=ZERO <=> GD AND EU!
      DATA ALPHAJ/-0.57142857D-1,-0.21010101D-1,-0.64279153D-2
     1,0.77134985D-2,0.41269843D-1,ZERO,ZERO
     2,-0.10101010D-1,-0.63492064D-2,-0.22222223D-2
     3,0.25396824D-2,0.10101010D-1,0.31746034D-1/
C
C**   BETA =ZERO <=> GD AND EU!
      DATA BETAJ/0.63492064D-2,-0.73461892D-3,-0.29110772D-3
     1,0.40755083D-3,0.25012025D-2,ZERO,ZERO
     2,0.12243648D-3,-0.59200058D-4,-0.33300032D-4
     3,0.44400043D-4,0.16324865D-3,-0.17316018D-2/
C
C**   GAMMA=ZERO <=> GD, EU, CE AND SM!
      DATA GAMMAJ/ZERO,0.60994000D-4,-0.37987957D-4
     1,0.60781D-4,ZERO,ZERO,ZERO
C**   FOR PM(3+) SEE LEA/LEASK/...!
     2,-0.11212132D-5,0.10349661D-5,-0.12937076D-5
     3,0.20699322D-5,-0.56060662D-5,0.14800015D-3/
C
      DATA F4F/SZ,SZ,84.0D0,SZ,SZ,ZERO,ZERO
     1,SZ,SZ,420.D0,SZ,SZ,SZ/
C**   ZERO <=> EU(J=0) - 84. <=> ND(J=9/2) - 420. <=> HO(J=8)
C
      DATA F6F/ZERO,1260.D0,5040.D0,1260.D0,ZERO,ZERO,ZERO
     1,7560.D0,13860.D0,13860.D0,13860.D0,7560.D0,1260.D0/
C**   ZERO <=> EU(J=0), SM(J=5/2), CE(J=7/2)!
C
      DATA GFACTA/SECHSS,0.8D0,ACHELF,0.6D0,ZWEISI,ZERO,2.0D0
     1,1.5D0,VIERDR,1.25D0,1.2D0,SIEBSE,ACHTSI/
C
      DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
CEND BLOCKDATA STEVEN
      END
      BLOCKDATA WWWWWW
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,J20=44)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/MAINPR/ZETA,ABST,FINTEG(4),REDFAZ(3),DIRECZ(3),SIGMA0(601)
     1,JASTRU,KLWERT,NREL,JAWIGN,NGROUP,JAVANV,MOLFLD,MIST16,KMASKE(20)
      COMMON/QBQVQQ/QB,QV,QQ
      COMMON/MOWDAT/NOWDAT
      COMMON/BWWOLT/BWWOLD(J20)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      SAVE
      DATA J2,JAVANV,NOWDAT/44,0,0/
      DATA TEMPIK/300.,250.,200.,150.,100.,90.,80.,70.,60.,50.,45.,40.
     1,35.,30.,25.,20.,19.,18.,17.,16.,15.,14.5,14.
     2,13.5,13.,12.5,12.,11.5,11.,10.5,10.,9.5,9.,8.5,8.
     3,7.5,7.,6.5,6.,5.5,5.,4.5,4.,3.5,3.,2.5,2.
     4,1.9,1.8,1.7,1.6,1.5,1.4,1.3,1.2,1.1,1.0
     5,0.9,0.8,0.7,0.6,0.5,0.45,0.4,0.35,0.3,0.25,0.2,0.15,0.1,0.05
     6,530*ZERO/
      DATA SIGMA/71*ONE,530*ZERO/
      DATA TESDAT/ZERO,70*0.1D0,530*ZERO/
      DATA LOWDAT/601*0/
      DATA INBWWW/44*0/
      DATA IBWWW/44*0/
      DATA BWWWIN/44*ZERO/
      DATA STBWWW/44*ZERO/
      DATA BWW/44*ZERO/
      DATA BWWW/44*ZERO/
      DATA BWWOLD/44*ZERO/
      DATA NDATAM,NOPROZ,JAFFAK,NOANAL,MIXTUR,JAOVER/0,0,0,1,0,1/
      DATA VLSTNG/44*ZERO/
      DATA KMASKE/0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1/
      DATA SIGMA0/601*ONE/
      DATA DIRECZ/ONE,ONE,ONE/
      DATA REDFAZ/ONE,ONE,ONE/
      DATA ZETA/ZERO/
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','%%%%%','%%%%%','%%%%%'
     2,'%%%%%'
     3,'B21  ','B41  ','B61  ','B65  ','RED-F','ZETA ','F(2) ','F(3) '
     4,'F(4) ','B21'' ','B22'' ','B41'' ','B42'' ','B43'' ','B44'' '
     5,'B61'' ','B62'' ','B63'' ','B64'' ','B65'' ','B66'' ',3*'     '/
      DATA QV/'B20  ','2ZU20','B40  ','2ZU40','3ZU40','4ZU40'
     1,'B60  ','2ZU60','3ZU60','4ZU60','6ZU60'
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','%%%%%','%%%%%','%%%%%'
     2,'%%%%%'
     3,'1ZU20','1ZU40','1ZU60','5ZU60','RED-F','ZETA ','F(2) ','F(3) '
     4,'F(4) ','B21'' ','B22'' ','B41'' ','B42'' ','B43'' ','B44'' '
     5,'B61'' ','B62'' ','B63'' ','B64'' ','B65'' ','B66'' ',3*'     '/
CEND BLOCKDATA WWWWWW
      END
CEND-FILE CONDOR.F
      SUBROUTINE SHOWW
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(/,26H               NO WARRANTY,/
     1,73H 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS 
     2NO WARRANTY,/
     1,73H FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  
     2EXCEPT WHEN,/
     1,71H OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHE
     2R PARTIES,/
     1,75H PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EIT
     2HER EXPRESSED,/
     1,69H OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRAN
     2TIES OF,/
     1,74H MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE EN
     2TIRE RISK AS,/
     1,71H TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  S
     2HOULD THE,/
     1,73H PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     2 SERVICING,/
     1,22H REPAIR OR CORRECTION.,//
     1,74H 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED T
     2O IN WRITING)
      WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(
     168H WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY A
     2ND/OR,/
     1,75H REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU
     2 FOR DAMAGES,,/
     1,76H INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL D
     2AMAGES ARISING,/
     1,74H OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
     2 NOT LIMITED,/
     1,73H TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES S
     2USTAINED BY,/
     1,75H YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE W
     2ITH ANY OTHER,/
     1,70H PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISE
     2D OF THE,/
     1,29H POSSIBILITY OF SUCH DAMAGES.,/)
      RETURN
CEND SHOWW
      END
      SUBROUTINE SHOWC
      CHARACTER Q
      COMMON/FLAG/LMN
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(/,28H  GNU GENERAL PUBLIC LICENSE,/
     1,21H Version 2, June 1991,//
     1,56H Copyright (C) 1989, 1991 Free Software Foundation, Inc.,/
     1,67H            59 Temple Place, Suite 330, Boston, MA  02111-1307
     2  USA,/
     1,62H Everyone is permitted to copy and distribute verbatim copies,
     1/,58H of this license document, but changing it is not allowed.,//
     1,30H                      Preamble,//
     1,64H   The licenses for most software are designed to take away yo
     2ur,/
     1,69H freedom to share and change it.  By contrast, the GNU General
     2 Public,/
     1,71H License is intended to guarantee your freedom to share and ch
     2ange free,/
     1,69H software--to make sure the software is free for all its users
     2.  This,/
     1,60H General Public License applies to most of the Free Software,/
     1,71H Foundation's software and to any other program whose authors 
     2commit to)
      WRITE(*,2006)
      WRITE(11,2006)
 2006 FORMAT(
     171H using it.  (Some other Free Software Foundation software is co
     2vered by,/
     1,70H the GNU Library General Public License instead.)  You can app
     2ly it to,/
     1,20H your programs, too.,//
     1,66H  When we speak of free software, we are referring to freedom,
     2 not,/
     1,71H price.  Our General Public Licenses are designed to make sure
     2 that you,/
     1,71H have the freedom to distribute copies of free software (and c
     2harge for,/
     1,70H this service if you wish), that you receive source code or ca
     2n get it,/
     1,69H if you want it, that you can change the software or use piece
     2s of it,/
     1,65H in new free programs; and that you know you can do these thin
     2gs.,//
     1,67H   To protect your rights, we need to make restrictions that f
     2orbid)
      WRITE(*,2007)
      WRITE(11,2007)
 2007 FORMAT(
     171H anyone to deny you these rights or to ask you to surrender the
     2 rights.,/
     1,72H These restrictions translate to certain responsibilities for 
     2you if you,/
     1,56H distribute copies of the software, or if you modify it.,//
     1,67H   For example, if you distribute copies of such a program, wh
     2ether,/
     1,70H gratis or for a fee, you must give the recipients all the rig
     2hts that,/
     1,69H you have.  You must make sure that they, too, receive or can 
     2get the,/
     1,68H source code.  And you must show them these terms so they know
     2 their,/
     1,8H rights.,//
     1,73H   We protect your rights with two steps: (1) copyright the so
     2ftware, and,/
     1,69H (2) offer you this license which gives you legal permission t
     2o copy,)
      WRITE(*,2008)
      WRITE(11,2008)
 2008 FORMAT(
     139H distribute and/or modify the software.,//
     1,72H   Also, for each author's protection and ours, we want to mak
     2e certain,/
     1,66H that everyone understands that there is no warranty for this 
     2free,/
     1,73H software.  If the software is modified by someone else and pa
     2ssed on, we,/
     1,72H want its recipients to know that what they have is not the or
     2iginal, so,/
     1,72H that any problems introduced by others will not reflect on th
     2e original,/
     1,22H authors' reputations.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3858)Q
      GOTO 4858
      ENDIF
 3858 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4858 WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(29H   GNU GENERAL PUBLIC LICENSE,/
     1,65H   Finally, any free program is threatened constantly by softw
     2are,/
     1,68H patents.  We wish to avoid the danger that redistributors of 
     2a free,/
     1,71H program will individually obtain patent licenses, in effect m
     2aking the,/
     1,70H program proprietary.  To prevent this, we have made it clear 
     2that any,/
     1,72H patent must be licensed for everyone's free use or not licens
     2ed at all.,//
     1,65H   The precise terms and conditions for copying, distribution 
     2and,/
     1,21H modification follow.,//
     1,29H   GNU GENERAL PUBLIC LICENSE,/
     1,66H   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICA
     2TION,//
     1,69H  0. This License applies to any program or other work which c
     2ontains)
      WRITE(*,2009)
      WRITE(11,2009)
 2009 FORMAT(
     169H a notice placed by the copyright holder saying it may be distr
     2ibuted,/
     1,71H under the terms of this General Public License.  The "Program
     2", below,,/
     1,70H refers to any such program or work, and a "work based on the 
     2Program",/
     1,69H means either the Program or any derivative work under copyrig
     2ht law:,/
     1,66H that is to say, a work containing the Program or a portion of
     2 it,,/
     1,69H either verbatim or with modifications and/or translated into 
     2another,/
     1,71H language.  (Hereinafter, translation is included without limi
     2tation in,/
     1,64H the term "modification".)  Each licensee is addressed as "you
     2".,//
     1,69H Activities other than copying, distribution and modification 
     2are not)
      WRITE(*,2010)
      WRITE(11,2010)
 2010 FORMAT(
     165H covered by this License; they are outside its scope.  The act 
     2of,/
     1,71H running the Program is not restricted, and the output from th
     2e Program,/
     1,63H is covered only if its contents constitute a work based on th
     2e,/
     1,66H Program (independent of having been made by running the Progr
     2am).,/
     1,55H Whether that is true depends on what the Program does.,//
     1,66H   1. You may copy and distribute verbatim copies of the Progr
     2am's,/
     1,64H source code as you receive it, in any medium, provided that y
     2ou,/
     1,68H conspicuously and appropriately publish on each copy an appro
     2priate,/
     1,65H copyright notice and disclaimer of warranty; keep intact all 
     2the,/
     1,71H notices that refer to this License and to the absence of any 
     2warranty;)
      WRITE(*,2011)
      WRITE(11,2011)
 2011 FORMAT(
     168H and give any other recipients of the Program a copy of this Li
     2cense,/
     1,24H along with the Program.,//
     1,70H You may charge a fee for the physical act of transferring a c
     2opy, and,/
     1,72H you may at your option offer warranty protection in exchange 
     2for a fee.,//
     1,70H   2. You may modify your copy or copies of the Program or any
     2 portion,/
     1,62H of it, thus forming a work based on the Program, and copy and
     2)
      WRITE(*,2012)
      WRITE(11,2012)
 2012 FORMAT(
     167H distribute such modifications or work under the terms of Secti
     2on 1,/
     1,60H above, provided that you also meet all of these conditions:,/
     2/
     1,68H     a) You must cause the modified files to carry prominent n
     2otices,/
     1,67H     stating that you changed the files and the date of any ch
     2ange.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3859)Q
      GOTO 4859
      ENDIF
 3859 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4859 WRITE(*,2002)
      WRITE(11,2002)
 2002 FORMAT(
     170H    b) You must cause any work that you distribute or publish, 
     2that in,/
     1,68H     whole or in part contains or is derived from the Program 
     2or any,/
     1,70H     part thereof, to be licensed as a whole at no charge to a
     2ll third,/
     1,45H     parties under the terms of this License.,//
     1,69H     c) If the modified program normally reads commands intera
     2ctively,/
     1,63H     when run, you must cause it, when started running for suc
     2h,/
     1,69H     interactive use in the most ordinary way, to print or dis
     2play an,/
     1,65H     announcement including an appropriate copyright notice an
     2d a,/
     1,71H     notice that there is no warranty (or else, saying that yo
     2u provide,/
     1,66H     a warranty) and that users may redistribute the program u
     2nder)
      WRITE(*,2013)
      WRITE(11,2013)
 2013 FORMAT(
     170H     these conditions, and telling the user how to view a copy 
     2of this,/
     1,67H     License.  (Exception: if the Program itself is interactiv
     2e but,/
     1,69H     does not normally print such an announcement, your work b
     2ased on,/
     1,59H     the Program is not required to print an announcement.),//
     1,62H These requirements apply to the modified work as a whole.  If
     2,/
     1,69H identifiable sections of that work are not derived from the P
     2rogram,,/
     1,67H and can be reasonably considered independent and separate wor
     2ks in,/
     1,68H themselves, then this License, and its terms, do not apply to
     2 those,/
     1,67H sections when you distribute them as separate works.  But whe
     2n you,/
     1,70H distribute the same sections as part of a whole which is a wo
     2rk based)
      WRITE(*,2014)
      WRITE(11,2014)
 2014 FORMAT(
     170H on the Program, the distribution of the whole must be on the t
     2erms of,/
     1,66H this License, whose permissions for other licensees extend to
     2 the,/
     1,74H entire whole, and thus to each and every part regardless of w
     2ho wrote it.,//
     1,70H Thus, it is not the intent of this section to claim rights or
     2 contest,/
     1,70H your rights to work written entirely by you; rather, the inte
     2nt is to,/
     1,64H exercise the right to control the distribution of derivative 
     2or,/
     1,39H collective works based on the Program.,//
     1,71H In addition, mere aggregation of another work not based on th
     2e Program,/
     1,70H with the Program (or with a work based on the Program) on a v
     2olume of,/
     1,69H a storage or distribution medium does not bring the other wor
     2k under)
      WRITE(*,2015)
      WRITE(11,2015)
 2015 FORMAT(
     127H the scope of this License.,//
     1,69H   3. You may copy and distribute the Program (or a work based
     2 on it,,/
     1,70H under Section 2) in object code or executable form under the 
     2terms of,/
     1,71H Sections 1 and 2 above provided that you also do one of the f
     2ollowing:,//
     1,69H     a) Accompany it with the complete corresponding machine-r
     2eadable,/
     1,71H     source code, which must be distributed under the terms of
     2 Sections,/
     1,77H     1 and 2 above on a medium customarily used for software i
     2nterchange; or,,//
     1,67H     b) Accompany it with a written offer, valid for at least 
     2three,/
     1,67H     years, to give any third party, for a charge no more than
     2 your)
      WRITE(*,2016)
      WRITE(11,2016)
 2016 FORMAT(
     166H     cost of physically performing source distribution, a compl
     2ete,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3860)Q
      GOTO 4860
      ENDIF
 3860 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4860 WRITE(*,2003)
      WRITE(11,2003)
 2003 FORMAT(
     166H     machine-readable copy of the corresponding source code, to
     2 be,/
     1,70H     distributed under the terms of Sections 1 and 2 above on 
     2a medium,/
     1,51H     customarily used for software interchange; or,,//
     1,70H     c) Accompany it with the information you received as to t
     2he offer,/
     1,67H     to distribute corresponding source code.  (This alternati
     2ve is,/
     1,64H     allowed only for noncommercial distribution and only if y
     2ou,/
     1,69H     received the program in object code or executable form wi
     2th such,/
     1,50H     an offer, in accord with Subsection b above.),//
     1,68H The source code for a work means the preferred form of the wo
     2rk for,/
     1,69H making modifications to it.  For an executable work, complete
     2 source)
      WRITE(*,2017)
      WRITE(11,2017)
 2017 FORMAT(
     169H code means all the source code for all modules it contains, pl
     2us any,/
     1,64H associated interface definition files, plus the scripts used 
     2to,/
     1,71H control compilation and installation of the executable.  Howe
     2ver, as a,/
     1,64H special exception, the source code distributed need not inclu
     2de,/
     1,66H anything that is normally distributed (in either source or bi
     2nary,/
     1,69H form) with the major components (compiler, kernel, and so on)
     2 of the,/
     1,69H operating system on which the executable runs, unless that co
     2mponent,/
     1,35H itself accompanies the executable.,//
     1,65H If distribution of executable or object code is made by offer
     2ing,/
     1,65H access to copy from a designated place, then offering equival
     2ent)
      WRITE(*,2018)
      WRITE(11,2018)
 2018 FORMAT(
     161H access to copy the source code from the same place counts as,/
     1,67H distribution of the source code, even though third parties ar
     2e not,/
     1,57H compelled to copy the source along with the object code.,//
     1,69H   4. You may not copy, modify, sublicense, or distribute the 
     2Program,/
     1,62H except as expressly provided under this License.  Any attempt
     2,/
     1,67H otherwise to copy, modify, sublicense or distribute the Progr
     2am is,/
     1,71H void, and will automatically terminate your rights under this
     2 License.,/
     1,69H However, parties who have received copies, or rights, from yo
     2u under,/
     1,69H this License will not have their licenses terminated so long 
     2as such,/
     1,35H parties remain in full compliance.,//
     1,69H   5. You are not required to accept this License, since you h
     2ave not)
      WRITE(*,2019)
      WRITE(11,2019)
 2019 FORMAT(
     169H signed it.  However, nothing else grants you permission to mod
     2ify or,/
     1,67H distribute the Program or its derivative works.  These action
     2s are,/
     1,68H prohibited by law if you do not accept this License.  Therefo
     2re, by,/
     1,64H modifying or distributing the Program (or any work based on t
     2he,/
     1,69H Program), you indicate your acceptance of this License to do 
     2so, and,/
     1,68H all its terms and conditions for copying, distributing or mod
     2ifying,/
     1,34H the Program or works based on it.,//
     1,70H   6. Each time you redistribute the Program (or any work base
     2d on the,/
     1,66H Program), the recipient automatically receives a license from
     2 the,/
     1,71H original licensor to copy, distribute or modify the Program s
     2ubject to)
      WRITE(*,2020)
      WRITE(11,2020)
 2020 FORMAT(
     160H these terms and conditions.  You may not impose any further,/
     3/,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3861)Q
      GOTO 4861
      ENDIF
 3861 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4861 WRITE(*,2004)
      WRITE(11,2004)
 2004 FORMAT(
     171H restrictions on the recipients' exercise of the rights granted
     2 herein.,/
     1,69H You are not responsible for enforcing compliance by third par
     2ties to,/
     1,14H this License.,//
     1,70H   7. If, as a consequence of a court judgment or allegation o
     2f patent,/
     1,69H infringement or for any other reason (not limited to patent i
     2ssues),,/
     1,68H conditions are imposed on you (whether by court order, agreem
     2ent or,/
     1,71H otherwise) that contradict the conditions of this License, th
     2ey do not,/
     1,63H excuse you from the conditions of this License.  If you canno
     2t,/
     1,71H distribute so as to satisfy simultaneously your obligations u
     2nder this,/
     1,71H License and any other pertinent obligations, then as a conseq
     2uence you)
      WRITE(*,2021)
      WRITE(11,2021)
 2021 FORMAT(
     165H may not distribute the Program at all.  For example, if a pate
     2nt,/
     1,71H license would not permit royalty-free redistribution of the P
     2rogram by,/
     1,70H all those who receive copies directly or indirectly through y
     2ou, then,/
     1,68H the only way you could satisfy both it and this License would
     2 be to,/
     1,51H refrain entirely from distribution of the Program.,//
     1,70H If any portion of this section is held invalid or unenforceab
     2le under,/
     1,71H any particular circumstance, the balance of the section is in
     2tended to,/
     1,63H apply and the section as a whole is intended to apply in othe
     2r,/
     1,15H circumstances.,//
     1,68H It is not the purpose of this section to induce you to infrin
     2ge any)
      WRITE(*,2022)
      WRITE(11,2022)
 2022 FORMAT(
     169H patents or other property right claims or to contest validity 
     2of any,/
     1,65H such claims; this section has the sole purpose of protecting 
     2the,/
     1,61H integrity of the free software distribution system, which is,
     2/
     1,64H implemented by public license practices.  Many people have ma
     2de,/
     1,65H generous contributions to the wide range of software distribu
     2ted,/
     1,66H through that system in reliance on consistent application of 
     2that,/
     1,71H system; it is up to the author/donor to decide if he or she i
     2s willing,/
     1,70H to distribute software through any other system and a license
     2e cannot,/
     1,20H impose that choice.,//
     1,70H This section is intended to make thoroughly clear what is bel
     2ieved to)
      WRITE(*,2023)
      WRITE(11,2023)
 2023 FORMAT(
     146H be a consequence of the rest of this License.,//
     1,68H   8. If the distribution and/or use of the Program is restric
     2ted in,/
     1,70H certain countries either by patents or by copyrighted interfa
     2ces, the,/
     1,68H original copyright holder who places the Program under this L
     2icense,/
     1,67H may add an explicit geographical distribution limitation excl
     2uding,/
     1,68H those countries, so that distribution is permitted only in or
     2 among,/
     1,70H countries not thus excluded.  In such case, this License inco
     2rporates,/
     1,58H the limitation as if written in the body of this License.,//
     1,74H   9. The Free Software Foundation may publish revised and/or 
     2new versions,/
     1,73H of the General Public License from time to time.  Such new ve
     2rsions will)
      WRITE(*,2024)
      WRITE(11,2024)
 2024 FORMAT(
     173H be similar in spirit to the present version, but may differ in
     2 detail to,/
     1,34H address new problems or concerns.,//
     3,36H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3862)Q
      GOTO 4862
      ENDIF
 3862 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4862 WRITE(*,2005)
      WRITE(11,2005)
 2005 FORMAT(
     171H Each version is given a distinguishing version number.  If the
     2 Program,/
     1,72H specifies a version number of this License which applies to i
     2t and "any,/
     1,74H later version", you have the option of following the terms an
     2d conditions,/
     1,69H either of that version or of any later version published by t
     2he Free,/
     1,74H Software Foundation.  If the Program does not specify a versi
     2on number of,/
     1,77H this License, you may choose any version ever published by th
     2e Free Software,/
     1,12H Foundation.,//
     1,70H   10. If you wish to incorporate parts of the Program into ot
     2her free,/
     1,74H programs whose distribution conditions are different, write t
     2o the author,/
     1,70H to ask for permission.  For software which is copyrighted by 
     2the Free)
      WRITE(*,2025)
      WRITE(11,2025)
 2025 FORMAT(
     173H Software Foundation, write to the Free Software Foundation; we
     2 sometimes,/
     1,72H make exceptions for this.  Our decision will be guided by the
     2 two goals,/
     1,74H of preserving the free status of all derivatives of our free 
     2software and,/
     1,58H of promoting the sharing and reuse of software generally.,//)
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SHOWC
      END
      SUBROUTINE SHOWM
      CHARACTER Q
      COMMON/FLAG/LMN
      WRITE(*,2000)
      WRITE(11,2000)
 2000 FORMAT(
     146H Program CONDOR is written on different files!,/ 
     1,53H File CONDOR.f consists of the .MAIN. PROGRAM CONDOR,,/
     1,55H many SUBROUTINEs, FUNCTIONs and BLOCKDATA subprograms,,/
     1,56H but 3 subroutines are text only, concerning `WARRANTY',,/
     1,60H `GNU GENERAL PUBLIC LICENSE', and this `OUTLINE' of CONDOR.,/
     1/,53H File dszhK.c, with subroutine ZHPEVK, serves to link,/
     1,54H a library routine for diagonalizing complex hermitian
     2,10H matrices,,/
     1,41H which may be a routine on file dsdzhd.f,,/
     1,67H which contains the relevant part of library LAPACK in source 
     2code,,/
     1,56H or the corresponding routine of library NAG (and BLAS).,
     2//)
      WRITE(*,2002)
      WRITE(11,2002)
 2002 FORMAT(
     166H The matrix to be firstly diagonalized has dimension 1001*1001
     2for,/
     1,55H Ho(3+), 2002*2002 for Dy(3+), 3003*3003 for Tb(3+) and,/
     1,58H 3432*3432 for Gd(3+), respectively. A PARAMETER ND2002 is,/
     1,50H introduced in subroutine SHORTL on file shortR.f,,/ 
     1,73H but instead of ND2002=1110, which is the minimum for ND2002, 
     2ND2002=2002,/
     1,65H or ND2002=3003 or ND2002=3432 is set, if necessary, in konsho
     2.c.)
      WRITE(*,2003)
      WRITE(11,2003)
 2003 FORMAT(
     336H   --- Type <return> to continue ---)
      IF(LMN.EQ.0)THEN
      READ(77,'(1A1)',ERR=5588,END=3863)Q
      GOTO 4863
      ENDIF
 3863 READ(*,'(1A1)',END=4576)Q
      LMN=1
 4863 WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(
     162H Subroutine STR00, a very special routine, is on file str00.f!,
     2//
     1,68H An example for a command file "gCOR.com" to compile and link 
     2CONDOR,/
     1,9H follows:,/ 
     1,53H ( -g produces debug information (not really needed)))
      WRITE(*,2004)
      WRITE(11,2004)
 2004 FORMAT(
     161H ( -o condor <=> name of the executable file becomes condor):,/
     1,51H g77 -g CONDOR.f shortR.f text2R.f str00.f dsdzhd.f,/
     2,27H konsho.c dszhK.c -o condor,//)
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SHOWM
      END
CEND-FILE SHOWCW.F
CEND-FILE SHORTR.F
      SUBROUTINE SUSFIT(
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C**   THIS ROUTINE IS CALLED BY SUBROUTINE(S) SHORT...(NO RETURN TO
C     SHORT..F) AND IS THE FIRST ROUTINE WHICH WILL REALLY RUN AFTER
C     STARTING WITH CONDOR!
C**   SUSFIT WILL CALL THE FITTING ROUTINES LEVSQX AND LEVMAR,
C     AND THE LATTER WILL CALL SUBROUTINE LEVDER. SUSFIT WILL DECIDE
C     FOR CONVERGENCE OF THE FIT. (SUBROUTINE LEVSQX WILL RUN ALSO, IF
C     NO FITTING IS DONE!) TO THE VERY END, E.G. AFTER CONVERGENCE, BUT
C     MAY BE BEFORE, SUBROUTINE RES(ULT)T(A)BL/ES) IS CALLED TO GIVE THE
C     RESULTS IN FORM OF TABLES!
     1JASTRU,MOLFLD,JAWIGN,NGROUP,SIGMA0
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION (FMIKR2&FMIKR3 NOT USED!):
     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
C**   (MUST REMAIN HERE, BUT: TAFMAT&TAGMAT&TAWERT&CRYMAT&WERMAT NOT USED!)
     6,CRYMAT,WERMAT,KMASKE
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION (FMIKR1 NOT USED!):
     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   (MUST REMAIN HERE, BUT: CRZMAT NOT USED!:)
     8,NRVALF,IGRUND,JAFAST,CRZMAT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW
C     IN SUBROUTINE SUSC:
      PARAMETER(J20=44)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      COMMON/QBQVQQ/QB,QV,QQ
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
C
      PARAMETER(I20=44,ZERO=0.0D0,ONE=1.0D0)
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(I20),CHIFIX
     1,CFOSXJ,NOTONE,JAFIX,BWWTMP(J20),BWWWMN(J20),BWWWMX(J20),MINMAX
C
      DIMENSION LIST(I20),ALPHAM(I20,I20),ALPHA(I20,I20),SIGMA0(601)
     1,BETA(I20),BETAM(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     1,CHIFIX(601,4)
     2,SIG2I(601),CHIGEM(601),ISR(3),ISS(3),KMASKE(20),EIWERT(*)
      SAVE
CKR   "JAFAST=0" IN FILE konsho..!!!
      DATA ITMIN,ITMAX,ISR,ISSSSS,ISS,JANOLS,JUMPTO,LASERY
     1/0,0,0,0,0,0,0,0,0,0,0,0/
      DATA CHISQQ,OMEGA/ZERO,ZERO/
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,13)
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.I20)STOP 'J.NE.I'
      LAUFNR=0
   55 MFIT=0
      II=I16+1
      DO 11 I=1,I16
      IF(IABS(IBWWW(I)).EQ.1)THEN
      MFIT=MFIT+1
      LIST(MFIT)=I
      ELSE
      II=II-1
      LIST(II)=I
      ENDIF
   11 CONTINUE
C
      WRITE(*,15)MFIT
      WRITE(11,15)MFIT
   15 FORMAT(/,
     1' MFIT, I.E. No. OF PARAMETERS ACTUALLY BEEN ADJUSTED, =',I3)
C
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
C
      JASTOP=0
      LOWER0=1
C**   LAST ROW FOR INITIALIZATION IN SUBROUTINES LEVSQX AND LEVMAR!
   25 IF(MFIT.EQ.0.OR.NDATA.EQ.0)THEN
      WRITE(11,2933)
 5010 WRITE(*,2933)
 2933 FORMAT(/,' PUT IN ANY TWO NUMBERS IN (I5,I3) OR "RETURN"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I5,I3)',ERR=5588,END=6438)IITMAX,IITMIN
      GOTO 6448
      ENDIF
 6438 READ(*,'(I5,I3)',ERR=5010,END=4576)IITMAX,IITMIN
      LMN=1
 6448 IITMAX=0
      IITMIN=0
      WRITE(7,2272)IITMAX,IITMIN
      WRITE(*,2722)IITMAX,IITMIN
      WRITE(11,2722)IITMAX,IITMIN
C**   TO GET EQUAL NUMBER OF LINES FOR INPUT!:
      IF(LESS.EQ.0)THEN
      IF(MORTEX.GT.0.OR.JATEST.NE.0)THEN
      WRITE(11,667)
 5577 WRITE(*,667)
C 667 FORMAT(/,' INPUT IN I1 YES/NO(0): "STOP INSTEAD OF FURTHER INPUT"'
C    1,/,' (FURTHER INPUT FOR: MORE ITER., CHANGE OF PARAMETERS/(PARAMET
C    2ERS/VALUES TO FIT)',/,' OR (FURTHER) TABLES OF OUTPUT)',/,' YES'
C    3,' =1,3,6/ =2 MEANS STOP FOLLOWING / BEFORE FIRST TABLE OF OUTPUT'
C    4,/,' (=3 / =6 MEANS "NO FITTING / FITTING, BUT 6 COLUMNS")')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3856)JASTOP
      GOTO 4856
      ENDIF
 3856 READ(*,'(I1)',ERR=5577,END=4576)JASTOP
      LMN=1
 4856 IF(JASTOP.GT.3)JASTOP=6
      WRITE(7,2273)JASTOP
C2273 FORMAT(I1,' =JASTOP(later on!)')
      WRITE(*,2732)JASTOP
      WRITE(11,2732)JASTOP
C2732 FORMAT(I2,' =JASTOP(later on!)!!!!!!!!!')
      IF(JASTOP.NE.0.AND.MOROUT.NE.0)THEN
      JASTOP=0
      WRITE(*,668)
      WRITE(11,668)
C 668 FORMAT(' BECAUSE MOROUT.NE.0, JASTOP BECOMES 0!') 
      ENDIF
      ENDIF
      ENDIF
      ELSE IF(MFIT.NE.0.AND.NDATA.NE.0)THEN
      WRITE(11,293)LAUFNR,ITMAX,ITMIN
 1005 WRITE(*,293)LAUFNR,ITMAX,ITMIN
  293 FORMAT(/,' THERE IS No. OF ITERATION =',I6,/,
     1' INPUT IN I5,I3 MAX. AND MIN. NUMBER OF (FURTHER) ITERATIONS!:',/
     2,' (ITER.COUNT',I6,I4,', INPUT MAY BE NEG. FOR "FURTHER" ITER.!)')
      IF(MFIT.EQ.1.AND.LAUFNR.EQ.0)THEN
      WRITE(*,1006)
      WRITE(11,1006)
 1006 FORMAT(' FOR THIS FIT WITH 1 PARAMETER: FOR MAX.=MIN. NUMBER OF IT
     1ERATIONS',/,' LEVENBERG/MARQUARDT MAY BE DISABLED LATER ON (OMEGA 
     2SERVES AS A STEP-WIDE)!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I5,I3)',ERR=5588,END=3864)IITMAX,IITMIN
      GOTO 4864
      ENDIF
 3864 READ(*,'(I5,I3)',ERR=1005,END=4576)IITMAX,IITMIN
      LMN=1
 4864 WRITE(7,2272)IITMAX,IITMIN
 2272 FORMAT(I5,I3,' =IITMAX,IITMIN')
      WRITE(*,2722)IITMAX,IITMIN
      WRITE(11,2722)IITMAX,IITMIN
 2722 FORMAT(I6,I4,' =IITMAX,IITMIN!!!!!!!!!')
      ITMIN=ITMIN+IITMIN
      ITMAX=ITMAX+IITMAX
      ITMAX=IABS(ITMAX)
      ITMIN=IABS(ITMIN)
      IF(ITMIN.GT.ITMAX)ITMIN=ITMAX
      IF(ITMIN.NE.IITMIN.OR.ITMAX.NE.IITMAX)THEN
      WRITE(*,'(I6,I4)')ITMAX,ITMIN
      WRITE(11,'(I6,I4)')ITMAX,ITMIN
      ENDIF
      IF(LESS.EQ.0)THEN
      IF(MORTEX.GT.0)THEN
      WRITE(11,6671)
      WRITE(*,6671)
 6671 FORMAT(' ESPECIALLY FOR TIME CONSUMING COMPUTATIONS AND/OR',/
     1,' FOR COMPUTATIONS IN BATCH MODE (TO GUARANTEE A DEFINITE END):')
      ENDIF
      IF(MORTEX.GT.0.OR.JATEST.NE.0)THEN
      WRITE(11,667)
  557 WRITE(*,667)
  667 FORMAT(/,' INPUT IN I1 YES/NO(0): "STOP INSTEAD OF FURTHER INPUT"'
     1,/,' (FURTHER INPUT FOR: MORE ITER., CHANGE OF PARAMETERS/(PARAMET
     2ERS/VALUES TO FIT)',/,' OR (FURTHER) TABLES OF OUTPUT)',/,' YES'
     3,' =1,3,6/ =2 MEANS STOP FOLLOWING / BEFORE FIRST TABLE OF OUTPUT'
     4,/,' (=3 / =6 MEANS "NO FITTING / FITTING, BUT 6 COLUMNS")')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3865)JASTOP
      GOTO 4865
      ENDIF
 3865 READ(*,'(I1)',ERR=557,END=4576)JASTOP
      LMN=1
 4865 IF(JASTOP.GT.3)JASTOP=6
      WRITE(7,2273)JASTOP
 2273 FORMAT(I1,' =JASTOP(later on!)')
      WRITE(*,2732)JASTOP
      WRITE(11,2732)JASTOP
 2732 FORMAT(I2,' =JASTOP(later on!)!!!!!!!!!')
      IF(JASTOP.NE.0.AND.MOROUT.NE.0)THEN
      JASTOP=0
      WRITE(*,668)
      WRITE(11,668)
  668 FORMAT(' BECAUSE MOROUT.NE.0, JASTOP BECOMES 0!') 
      ENDIF
      ENDIF
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "25 IF(MFIT.NE.0.AND.NDATA.NE.0)THEN"!
      IF(JUMPTO.NE.0)GOTO 2155
C**   INITIALIZATION FOR SUBROUTINES LEVSQX AND LEVMAR SEE ABOVE!
    5 CONTINUE
      CHISQO=CHISQQ
C**   AND NOW THE LEVENBERG-MARQUARDT METHOD IN SUBROUTINES LEVSQX, LEVMAR
C     AND LEVDER. FIRSTLY LEVSQX HERE TO CALCULATE SQX, WHICH WILL BE NEEDED
C     IN ANY CASE, LEVENBERG-MARQUARDT MAY BE APPLIED OR NOT!:
      CALL LEVSQX(
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE,CHISQW)
C
      SXR=CHISQQ-CHISQO
      IF(NDATA.EQ.0)GOTO 1202
      IF(NDATAM.EQ.0)THEN
      WRITE(11,1206)OMEGA
 1205 WRITE(*,1206)OMEGA
 1206 FORMAT(' AT TIME THERE ARE NO MORE DATA (OMEGA=',D10.2,')!',/
     1,' IF NO MORE ITERATIONS, INPUT 0/RETURN, ELSE:',/
     1,' TRIAL TO GET SOME YES(1 PLUS INPUT NEW OMEGA IN D10.2)/NO(0)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1,D10.2)',ERR=5588,END=3866)JANODA,BOMEGA
      GOTO 4866
      ENDIF
 3866 READ(*,'(I1,D10.2)',ERR=1205,END=4576)JANODA,BOMEGA
      LMN=1
 4866 WRITE(7,2274)JANODA,BOMEGA
 2274 FORMAT(I1,D10.2,' =JANODA,BOMEGA')
      WRITE(*,2742)JANODA,BOMEGA
      WRITE(11,2742)JANODA,BOMEGA
 2742 FORMAT(I2,D10.2,' =JANODA,BOMEGA!!!!!!!!!')
      IF(JANODA.EQ.0)GOTO 1202
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
      GOTO 2155
      ENDIF
      SMIN=DSQRT(CHISQ/NDATAM)
      SMINN=DSQRT(CHISQQ/NDATAM)
      SXRABS=DABS(SXR)
      KLEINR=0
      IF(SXRABS.LT.0.000001D0)KLEINR=1
      ISX=1+MOD(LAUFNR,3)
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED
C     BY THE SECOND
      ISR(ISX)=KLEINR
      NOCONV=0
C**   ... MEANS "CONVERGENCE OR NOT"!
      IF(LAUFNR.LT.ITMIN)NOCONV=1
      IF(OMEGA.GT.0.1D10)GOTO 877
      IF(ISR(1).EQ.1.AND.ISR(2).EQ.1.AND.ISR(3).EQ.1)GOTO 877
      DIFMIN=(SMINN-SMIN)/SMIN
C**   DIFMIN CANNOT BE NEGATIV, BUT ZERO!
      IF(DIFMIN.NE.ZERO)THEN
      KLEINS=0
      ISSSSS=ISSSSS+1
      ISY=1+MOD(ISSSSS,3)
      IF(DIFMIN.LE.0.00001D0)KLEINS=1
      ISS(ISY)=KLEINS
      ENDIF
      IF(ISS(1).NE.1.OR.ISS(2).NE.1.OR.ISS(3).NE.1)NOCONV=1
C
   44 FORMAT(
     1/,' AFTER',I5,'TH ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
    4 FORMAT(/,' AFTER',I5,'TH ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  144 FORMAT(
     1/,' AFTER',I5,'ST ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   14 FORMAT(/,' AFTER',I5,'ST ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  244 FORMAT(
     1/,' AFTER',I5,'ND ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   24 FORMAT(/,' AFTER',I5,'ND ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
  344 FORMAT(
     1/,' AFTER',I5,'RD ITER.: OMEGA,SQX-FIX,SXR=',D10.2,D16.8,D12.4)
   34 FORMAT(/,' AFTER',I5,'RD ITER.: OMEGA,FIX,SQX,SXR',D10.2,2D16.8
     1,/,20X,D14.4)
 1515 FORMAT(' LIST(I), BWYB(LIST(I))=',/,(5(I3,D16.8)))
 4444 FORMAT(' LIST(I), BWYB(LIST(I))=',4(I3,D12.4),/
     1,(6(I3,D12.4)))
  444 FORMAT(' LIST(I), BWYB(LIST(I))=',4(I3,D12.4),/
     1,(8(I3,D12.4)))
C
  877 IF(JASUCC.NE.0)THEN
      SQXFIX=SMIN
      IF(LAUFNR.EQ.0.OR.LAUFNR.GT.3)THEN
      WRITE(11,44)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,44)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.1)THEN
      WRITE(11,144)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,144)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.2)THEN
      WRITE(11,244)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,244)LAUFNR,OMEGA,SMIN,SXR
      ELSE IF(LAUFNR.EQ.3)THEN
      WRITE(11,344)LAUFNR,OMEGA,SMIN,SXR
      WRITE(*,344)LAUFNR,OMEGA,SMIN,SXR
      ENDIF
      ELSE
      IF(LAUFNR.EQ.0.OR.LAUFNR.GT.3)THEN
      WRITE(11,4)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,4)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.1)THEN
      WRITE(11,14)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,14)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.2)THEN
      WRITE(11,24)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,24)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ELSE IF(LAUFNR.EQ.3)THEN
      WRITE(11,34)LAUFNR,OMEGA,SMIN,SMINN,SXR
      WRITE(*,34)LAUFNR,OMEGA,SMIN,SMINN,SXR
      ENDIF
      ENDIF
      IF(NOCONV.EQ.0.OR.LAUFNR.EQ.ITMAX)THEN
      WRITE(11,1712)(IBWWW(I),I=1,IN25)
      WRITE(*,1712)(IBWWW(I),I=1,IN25)
 1712 FORMAT(/,' "FITTED"=+-1; -2/-1<=>8/9 IN INPUT FILE: ',20I2)
      WRITE(11,1515)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      WRITE(*,1515)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,1721)LAUFNR,SMIN
      WRITE(9,1721)LAUFNR,SMIN
 1721 FORMAT(' NOCONV.EQ.0.OR.LAUFNR.EQ.ITMAX,',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      CLOSE(8)
      CLOSE(9)
      IF(JANOLS.NE.0)THEN
C**   JANO-Lea/leask/Wolf(.NE.0=2) .OR.-Stevens(.NE.0=1)
      WRITE(11,8777)
      WRITE(*,8777)
 8777 FORMAT(' ATTENTION: NO WYBOURNE COEFFICIENTS!')
      IF(JANOLS.GT.1)THEN
      WRITE(*,8778)
      WRITE(11,8778)
 8778 FORMAT(
     1' THE (LIST=3)- VALUE, X, IS MODULO 2 AND REALLY IS /X/ < 1.')
      ENDIF
      ENDIF
CKR      IF(BWNULL(18).NE.ZERO)THEN
C      WRITE(*,8787)BWNULL(18)
C      WRITE(11,8787)BWNULL(18)
C 8787 FORMAT(' ATTENTION: WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF
C     1 DIMER',/,' AND SINGLE ION  OR DENOMINATOR OF "SPIN CROSSOVER" =',
C     2D16.8)
CKR      ENDIF
      IF(NOPROZ.NE.0)THEN
      WRITE(11,8786)CHISQW
      WRITE(*,8786)CHISQW
 8786 FORMAT(' (SQX-)FIX NOT CORRECTED =',D16.8)
      ENDIF
      ELSE
C     ... IF(NOCONV.NE.0.AND.LAUFNR.NE.ITMAX)THEN
C     HERE NOT THE SAME PRECISION FOR BWNULL!:
      IF(LESS.EQ.0)THEN
      IF(LAUFNR.EQ.1)THEN
      WRITE(11,8779)
      WRITE(*,8779)
 8779 FORMAT(' IN ADDITION TO THE FOLLOWING PARAMETERS, WHICH ARE THE FI
     1XED ONES FOR',/,' "FIX.NE.SQX", THE TRIAL PARAMETERS, IF DIFF., AR
     2E GIVEN, BUT MAX. 8 TIMES!')
      ENDIF
      WRITE(11,444)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      WRITE(*,4444)(LIST(I),BWNULL(LIST(I)),I=1,MFIT)
      ENDIF
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,1722)LAUFNR,SMIN
      WRITE(9,1722)LAUFNR,SMIN
 1722 FORMAT(' NOCONV.NE.0.AND.LAUFNR.NE.ITMAX,',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      CLOSE(8)
      CLOSE(9)
      ENDIF
      IF(NOCONV.NE.0)THEN
      IF(LESS.EQ.0)WRITE(11,8001)CFMSFX,CFOSFX,CFOSXJ
      IF(LESS.EQ.0)WRITE(*,8001)CFMSFX,CFOSFX,CFOSXJ
 8001 FORMAT(' CFMS, "CFOS/ CFOSJ" =',3D12.3)
      ELSE IF(NOCONV.EQ.0)THEN
      WRITE(11,8002)DIFLOW,CFOS,CFOSJ
      WRITE(*,8002)DIFLOW,CFOS,CFOSJ
 8002 FORMAT(/,' CRYSTAL FIELD MIN. SPLIT. (CFMS) AND EIGENVALUE OF THE 
     1LEVEL "No. OF VAL.',/,' (NRVAL)", WHICH MAY BE THE CRYSTAL FIELD O
     2VER ALL SPLITTING (CFOS),',/,' AND CFOSJ (<=> NRVALJ) = ',3D12.3)
      WRITE(11,2156)LAUFNR,ITMIN,ITMAX,SXR,DIFMIN
      WRITE(*,2156)LAUFNR,ITMIN,ITMAX,SXR,DIFMIN
 2156 FORMAT(
     1/,' CONV.MAY BE TOO SLOW: ITER/IT-MIN/IT.-MAX.=',2I4,I6
     1,/,' SXR (=(SQX**2-(SQX**2-BEFORE))*NRDATA)=',D9.2,/
     1,' DIFMIN (=(SQX-FIX)/(SQX, IF"BETTER")-ONE, "ELSE"=ZERO)=',D9.2)
      IF(JASTOP.EQ.2)THEN
      WRITE(*,2157)
      WRITE(11,2157)
 2157 FORMAT(' NOW STOP "JASTOP" BECAUSE OF "JASTOP" PUT IN ABOVE!')
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2175)LAUFNR,SMIN
      WRITE(9,2175)LAUFNR,SMIN
 2175 FORMAT(' JASTOP.EQ.2 (STOP JASTOP1),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2175)LAUFNR,SMIN
      STOP 'JASTOP1'
      ENDIF
      IF(JASTOP.EQ.0)GOTO 1202
      JASTOQ=0
      GOTO 1300
      ENDIF
      IF(SMIN.NE.SMINN.AND.(LAUFNR.LT.9.OR.JAFIX.EQ.2).AND.LAUFNR.NE.0
     1.AND.LESS.EQ.0)THEN
      WRITE(11,41)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
      WRITE(*,4441)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
   41 FORMAT(
     1' LI(I),BTRIAL(LI(I))=',4(I3,D12.4),/,(8(I3,D12.4)))
 4441 FORMAT(
     1' LI(I),BTRIAL(LI(I))=',4(I3,D12.4),/,(6(I3,D12.4)))
      WRITE(11,8001)DIFLOW,CFOS,CFOSJ
      WRITE(*,8001)DIFLOW,CFOS,CFOSJ
      ENDIF
C
      IF(LAUFNR.EQ.ITMAX)THEN
      WRITE(11,6)LAUFNR,ITMAX
      WRITE(*,6)LAUFNR,ITMAX
    6 FORMAT(' (LAUFNR.EQ.ITMAX): LAUFNR, ITMAX=',2I6)
      IF(JASTOP.EQ.2)THEN
      WRITE(*,2157)
      WRITE(11,2157)
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2176)LAUFNR,SMIN
      WRITE(9,2176)LAUFNR,SMIN
 2176 FORMAT(' JASTOP.EQ.2 (STOP JASTOP2),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2176)LAUFNR,SMIN
      STOP 'JASTOP2'
      ENDIF
      IF(JASTOP.EQ.0)GOTO 1202
      JASTOQ=0
      GOTO 1300
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LAUFNR.EQ.ITMAX)THEN"!
 2155 CONTINUE
      JUMPTO=0
      IF(LAUFNR.LT.ITMAX.AND.MFIT.NE.0)THEN
C**   AND NOW THE LEVENBERG-MARQUARDT METHOD ITSELF (SUBROUTINES LEVSQX, LEVMAR
C     AND LEVDER). HERE THE SECOND ONE, LEVMAR, WHICH MAKES A NEW PROPOSAL OF
C     PARAMETERS FOR A HOPEFULLY "BETTER" SQX!:
      CALL LEVMAR(
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHAM,ALPHA,I20,BETA,BETAM,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,LAUFNR,ITMIN,ITMAX)
C
      IF(OMEGA.GT.0.1D10)THEN
      NOCONV=0
      GOTO 877
      ENDIF
      GOTO 5
      ENDIF
C
 1202 CONTINUE
      WRITE(11,1302)
 1301 WRITE(*,1302)
 1302 FORMAT(/,
     1' INPUT 0/RETURN FOR TABLES OF OUTPUT, 1 TO CONTINUE, >1: STOP!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3867)JASTOQ
      GOTO 4867
      ENDIF
 3867 READ(*,'(I1)',ERR=1301,END=4576)JASTOQ
      LMN=1
 4867 WRITE(7,2275)JASTOQ
 2275 FORMAT(I1,' =JASTOQ(2=STOP)')
      WRITE(11,2752)JASTOQ
      WRITE(*,2752)JASTOQ
 2752 FORMAT(I2,' =JASTOQ(2=STOP)!!!!!!!!!')
      IF(JASTOQ.GT.1)THEN
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2177)LAUFNR,SMIN
      WRITE(9,2177)LAUFNR,SMIN
 2177 FORMAT(' JASTOQ.GT.1 (STOP JASTOQ),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2177)LAUFNR,SMIN
      STOP 'JASTOQ'
      ENDIF
 1300 IF(JASTOQ.EQ.0)THEN
      NUROUT=1
C     NUROUT.NE.0 <=> "TABLES OF OUTPUT ( SUBROUTINE RESult TaBLes)"!
C**   ONLY NRVAL OF THE FOLLOWING VARIABLES IN BRACES WILL BE USED (USED
C     ARE THE FIXED VARIABLES IN COMMON/FIX/ FROM LEVSQX - THESE HERE ARE
C     DUMMYS)!:
      CALL RESTBL(DIFLOW,CFOS,IGR1,IGR2,NRVALF,IGRUND,NOCONV,JASUCC
     1,NRVAL,JASTOP,LAUFNR,JAFAST,CFOSJ,NRVALJ,NREL,KLWERT,KASSUM)
      NUROUT=0
      ENDIF
C**   NOW FOR "FURTHER INPUT"!:
      WRITE(11,1303)NDATAP,NDATA,NDATAM,ITMAX,ITMIN
 1203 WRITE(*,1303)NDATAP,NDATA,NDATAM,ITMAX,ITMIN
 1303 FORMAT(' NDATAP, NDATA, NDATAM =',3I4,/,' IF THERE ARE (STILL)'
     1,' DATA TO FIT, YOU MAY CONTINUE WITH MORE ITER.:',/,' INPUT'
     2,' 0/RETURN TO DO SO! ITMAX, ITMIN =',I6,I3)
      WRITE(11,1330)MFIT,OMEGA
      WRITE(*,1330)MFIT,OMEGA
 1330 FORMAT(' (I.E. INPUT 1 TO CHANGE PARAMETERS (OR 0, IF MFIT=0)!)',
     1/,' MFIT, OMEGA =',I3,D10.2,/,' (TO CHANGE OMEGA ONLY, WITHOUT OR 
     2WITH INITIALIZ., INPUT 0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3868)JAFURT
      GOTO 4868
      ENDIF
 3868 READ(*,'(I1)',ERR=1203,END=4576)JAFURT
      LMN=1
 4868 WRITE(7,2276)JAFURT
 2276 FORMAT(I1,' =JAFURT(her INPUT)')
      WRITE(11,2762)JAFURT
      WRITE(*,2762)JAFURT
 2762 FORMAT(I2,' =JAFURT(her INPUT)!!!!!!!!!')
      IF(JAFURT.EQ.0.AND.MFIT.NE.0)THEN
      WRITE(11,1313)
 1333 WRITE(*,1313)
 1313 FORMAT(' INPUT IN I1 YES/NO(0): "NEW INITIALIZATION"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3869)JANOOO
      GOTO 4869
      ENDIF
 3869 READ(*,'(I1)',ERR=1333,END=4576)JANOOO
      LMN=1
 4869 WRITE(7,2287)JANOOO
 2287 FORMAT(I1,' =JANOOO("NEW INITIAL.")')
      WRITE(*,2872)JANOOO
      WRITE(11,2872)JANOOO
 2872 FORMAT(I2,' =JANOOO("NEW INITIAL.")!!!!!!!!!')
      IF(JANOOO.NE.0)THEN
      LOWER0=1
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      OMEGA=0.1D0
      GOTO 25
      ENDIF
      WRITE(11,1331)
 1332 WRITE(*,1331)
 1331 FORMAT(' INPUT OF A NEW VALUE OF OMEGA IS POSSIBLE (IN E10.2, ZERO
     1 <=> OLD VALUE)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D10.2)',ERR=5588,END=3870)OOMEGA
      GOTO 4870
      ENDIF
 3870 READ(*,'(D10.2)',ERR=1332,END=4576)OOMEGA
      LMN=1
 4870 WRITE(7,2277)OOMEGA
 2277 FORMAT(D10.2,' =OOMEGA')
      WRITE(*,2277)OOMEGA
      WRITE(11,2277)OOMEGA
      IF(OOMEGA.NE.ZERO)THEN
      IF(JAFIX.NE.2)JAFIX=0
      IF(JAFIX.NE.2.AND.OOMEGA.LT.ZERO)JAFIX=1
      OMEGA=DABS(OOMEGA)
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      ENDIF
      JUMPTO=1
      GOTO 25
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(JAFURT.EQ.0.AND.MFIT.NE.0)THEN"!
C**   PRE-OCCUPATION NOW:
      DO 7580 I=1,MFIT
      STBWWW(LIST(I))=BWNULL(LIST(I))
 7580 CONTINUE
C
      NR=0
 4751 CONTINUE
      DO 291 N=1,20
      IF(KMASKE(N).NE.0.AND.N.GT.11)GOTO 291
      IF(KMASKE(N).NE.0.AND.JASTRU.EQ.0)GOTO 291
      IF(JASTRU.GT.1.AND.N.EQ.1)GOTO 291
      IF(JASTRU.NE.0.AND.N.GT.3.AND.N.LE.11)GOTO 291
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      ELSE
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N),BWWWMX(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N)
     1,BWWWMX(N)
 2210 FORMAT(' STBWWW(',I2,')=',D16.8,1X,I2,' (WYB.=',D16.8,')',2D10.2)
      ENDIF
  291 CONTINUE
      INBW15=INBWWW(15)
      IF(IN24.GT.20.AND.JASTRU.EQ.0)THEN
      DO 2911 N=21,IN25
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N)
      ELSE
      WRITE(*,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N),BWWWMX(N)
      IF(NR.EQ.0)WRITE(11,2210)N,STBWWW(N),INBWWW(N),BWWTMP(N),BWWWMN(N)
     1,BWWWMX(N)
      ENDIF
 2911 CONTINUE
      ENDIF
 4753 WRITE(*,393)
  393 FORMAT(' THE VALUES OF WHICH ROW NUMBER WILL BE CHANGED (IN I2,'
     1,'END=00,INFO=99)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3871)NR
      GOTO 4971
      ENDIF
 3871 READ(*,'(I2)',ERR=4753,END=4576)NR
      LMN=1
 4971 WRITE(*,2278)NR
      WRITE(7,2278)NR
 2278 FORMAT(I2,' =NR')
      IF(NR.EQ.99)GOTO 4751
      IF(NR.EQ.0)GOTO 295
      IF(NR.LT.0.OR.NR.GT.IN25)GOTO 4753
      IF(NR.GT.20)GOTO 8722
      IF((KMASKE(NR).NE.0.AND.JASTRU.EQ.0).OR
     1.(KMASKE(NR).NE.0.AND.JASTRU.NE.0.AND.NR.GT.11).OR
     2.(JASTRU.NE.0.AND.NR.GT.3.AND.NR.LE.11))THEN
      WRITE(*,294)
  294 FORMAT(' THIS NUMBER IS MASKED AND THEREFORE IMPOSSIBLE!')
      GOTO 4753
      ENDIF
 8722 CONTINUE
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR)
      WRITE(11,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR)
      ELSE
      WRITE(*,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      WRITE(11,2210)NR,STBWWW(NR),INBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      ENDIF
 4747 CONTINUE
      IF(MINMAX.EQ.0)THEN
      WRITE(11,493)
      WRITE(*,493)
  493 FORMAT(' INPUT (NEW) VALUE FOR IBWWW, AND YES/NO(0):'
     1,/,' NEW VALUE FOR STBWWW (IN 2I1)!:')
      ELSE
      WRITE(11,4931)
      WRITE(*,4931)
 4931 FORMAT(' INPUT (NEW) VALUE FOR IBWWW, AND YES(1/2/>2)/NO(0):'
     1,/,' NEW VALUE FOR STBWWW/BWWWMN/BWWWMX (IN 2I1)!:')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3872)INBWWW(NR),JANOST
      GOTO 4872
      ENDIF
 3872 READ(*,'(2I1)',ERR=4747,END=4576)INBWWW(NR),JANOST
      LMN=1
 4872 WRITE(*,2279)INBWWW(NR),JANOST
      WRITE(7,2279)INBWWW(NR),JANOST
 2279 FORMAT(2I1,' =INBWWW(NR),JANOST')
      IF(MINMAX.EQ.0.AND.JANOST.GT.1)JANOST=1
      IBWWW(NR)=0
      IF(INBWWW(NR).GE.1)IBWWW(NR)=1
      IF(NR.LE.11
     1.AND.INBWWW(NR).GE.8)IBWWW(NR)=INBWWW(NR)-10
      IF(NR.GE.20.AND.NR.LE.24
     1.AND.INBWWW(NR).GE.8)IBWWW(NR)=INBWWW(NR)-10
      IF(KLWERT.EQ.2.AND.NR.EQ.28.AND.INBWWW(NR).GE.8)IBWWW(NR)=
     1INBWWW(NR)-10
      IF(JANOST.EQ.1)THEN
      WRITE(11,494)
  449 WRITE(*,494)
  494 FORMAT(' INPUT NEW VALUE FOR STBWWW (IN F20.8)!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F20.8)',ERR=5588,END=3873)STBWWW(NR)
      GOTO 4873
      ENDIF
 3873 READ(*,'(F20.8)',ERR=449,END=4576)STBWWW(NR)
      LMN=1
 4873 WRITE(*,2290)STBWWW(NR)
      WRITE(7,2290)STBWWW(NR)
 2290 FORMAT(F20.8,' =STBWWW(NR)')
      ELSE IF(JANOST.EQ.2)THEN
      WRITE(11,4949)
 4491 WRITE(*,4949)
 4949 FORMAT(' INPUT NEW VALUE FOR BWWWMN (IN F20.8)!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F20.8)',ERR=5588,END=3773)BWWWMN(NR)
      GOTO 4773
      ENDIF
 3773 READ(*,'(F20.8)',ERR=4491,END=4576)BWWWMN(NR)
      LMN=1
 4773 WRITE(*,2299)BWWWMN(NR)
      WRITE(7,2299)BWWWMN(NR)
 2299 FORMAT(F20.8,' =BWWWMN(NR)')
      ELSE IF(JANOST.GT.2)THEN
      WRITE(11,4948)
 4492 WRITE(*,4948)
 4948 FORMAT(' INPUT NEW VALUE FOR BWWWMX (IN F20.8)!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F20.8)',ERR=5588,END=3673)BWWWMX(NR)
      GOTO 4673
      ENDIF
 3673 READ(*,'(F20.8)',ERR=4492,END=4576)BWWWMX(NR)
      LMN=1
 4673 WRITE(*,2298)BWWWMX(NR)
      WRITE(7,2298)BWWWMX(NR)
 2298 FORMAT(F20.8,' =BWWWMX(NR)')
      ENDIF
C**   LAST ENDIF BELONGS TO "IF(JANOST.EQ.1)THEN"!
      IF(STBWWW(16).EQ.ZERO)STBWWW(16)=ONE
      IF(MINMAX.EQ.0)THEN
      WRITE(*,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR)
      WRITE(11,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR)
      ELSE
      WRITE(*,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      WRITE(11,2210)NR,STBWWW(NR),IBWWW(NR),BWWTMP(NR),BWWWMN(NR)
     1,BWWWMX(NR)
      ENDIF
      IF(NR.EQ.13)THEN
      KMASKE(14)=1
      KMASKE(17)=1
      ENDIF
      IF(NR.EQ.14)THEN
      KMASKE(13)=1
      KMASKE(17)=1
      ENDIF
      IF(NR.EQ.17)THEN
      KMASKE(13)=1
      KMASKE(14)=1
      KMASKE(15)=1
      ENDIF
      IF(NR.EQ.15)THEN
      KMASKE(17)=1
      ENDIF
      GOTO 4753
C
  295 CONTINUE
C
C**   ATTENTION: HERE IS SUBROUTINE SUSFIT!
      IF((INBW15.EQ.0.AND.BWWWIN(15).EQ.ZERO)
     1.AND.(IBWWW(15).NE.0.OR.STBWWW(15).NE.ZERO))THEN
      IF(MORTEX.GT.0)THEN
      WRITE(*,155)
      WRITE(11,155)
  155 FORMAT(' CHI-0 WILL BE INVOLVED NOW FOR THE FIRST TIME,',/,' THERE
     1FORE THE SPECIAL OPTION IOPT3 CAN BE CHOSEN (FIRSTLY) NOW!')
      ENDIF
      WRITE(11,153)
 8223 WRITE(*,153)
  153 FORMAT(
     1' THE OPTION IOPT3=0 MAY BE CHANGED TO =1: INPUT IOPT3 IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3874)IOPT3
      GOTO 4874
      ENDIF
 3874 READ(*,'(I1)',ERR=8223,END=4576)IOPT3
      LMN=1
 4874 IF(IOPT3.GT.1)IOPT3=1
      WRITE(7,2291)IOPT3
 2291 FORMAT(I1,' =IOPT3 ("CHI-0")')
      WRITE(11,2912)IOPT3
      WRITE(*,2912)IOPT3
 2912 FORMAT(I2,' =IOPT3 ("CHI-0")!!!!!!!!!')
      ENDIF
C
      WRITE(11,5160)
 8225 WRITE(*,5160)
 5160 FORMAT(
     1' THE NUMBER OF DATA TO BE FITTED MAY BE CHANGED NOW, BUT THE TOT'
     1,'AL',/,' NUMBER REMAINS THE SAME! YOU WANT TO CHANGE? YES/NO(0)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3875)JANO
      GOTO 4875
      ENDIF
 3875 READ(*,'(I1)',ERR=8225,END=4576)JANO
      LMN=1
 4875 WRITE(7,2292)JANO
 2292 FORMAT(I1,' =JANO(CHANGE)')
      WRITE(11,2922)JANO
      WRITE(*,2922)JANO
 2922 FORMAT(I2,' =JANO(CHANGE)!!!!!!!!!')
      IF(JANO.NE.0)THEN
      WRITE(*,158)
      WRITE(11,158)
  158 FORMAT(' THE FIT-STATUS (YES, WILL BE FITTED: 0(NO: 1)) OF ALL ROW
     1S',/,' OF INPUT-CHI VALUES WILL BE GIVEN NOW:')
      WRITE(11,'(60I1)')(LOWDAT(I),I=1,NDATAP)
  999 WRITE(*,'(60I1)')(LOWDAT(I),I=1,NDATAP)
  157 CONTINUE
      WRITE(11,156)
 8226 WRITE(*,156)
  156 FORMAT(' INPUT IN I3 A NUMBER OF A ROW OF AN INPUT-CHI VALUE, WHOS
     1E',/,' FIT-STATUS (YES/NO) WILL BE CHANGED! END=0; INFO=999',/,
     2' (To change an active SIGMA, change fitting status twice: =>no/=>
     3yes!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3876)NR
      GOTO 4876
      ENDIF
 3876 READ(*,'(I3)',ERR=8226,END=4576)NR
      LMN=1
 4876 WRITE(7,2293)NR
 2293 FORMAT(I3,' =NR')
      WRITE(11,2932)NR
      WRITE(*,2932)NR
 2932 FORMAT(I4,' =NR!!!!!!!!!')
      IF(NR.EQ.0)GOTO 159
      IF(NR.EQ.999)GOTO 999
      IF(NR.LT.0.OR.NR.GT.NDATAP)GOTO 157
      IF(MOD(LOWDAT(NR),2).EQ.0)THEN
CKR      LOWDAT(NR)=1
      LOWDAT(NR)=LOWDAT(NR)+1
      NDATA=NDATA-1
      ELSE
      LOWDAT(NR)=LOWDAT(NR)-1
      NDATA=NDATA+1
      WRITE(11,1566)SIGMA0(NR)
 1567 WRITE(*,1566)SIGMA0(NR)
 1566 FORMAT(' TO CHANGE SIGMA(NR)=',D10.2,' INPUT NEW SIGMA IN D10.2')
      IF(LMN.EQ.0)THEN
      READ(77,'(D10.2)',ERR=5588,END=3877)SIGMAI
      GOTO 4877
      ENDIF
 3877 READ(*,'(D10.2)',ERR=1567,END=4576)SIGMAI
      LMN=1
 4877 WRITE(7,1568)SIGMAI
 1568 FORMAT(D10.2,' =SIGMAI')
      WRITE(11,1569)SIGMAI
      WRITE(*,1569)SIGMAI
 1569 FORMAT(D12.2,' =SIGMAI!!!!!!!!!')
      IF(SIGMAI.NE.ZERO)SIGMA0(NR)=SIGMAI
      ENDIF
      GOTO 157
  159 CONTINUE
C**   NEW SIGMA:
      SUMSIG=ZERO
      NOSIGM=0
      DO 7578 I=1,NDATAP
      IF(JAVANV.EQ.0.AND.TESDAT(I).EQ.ZERO.AND.TEMPIK(I).GT.ZERO)
     1STOP 'FIELD=0'
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7578
C**   SOME SIGMA0(I) MAY NOW BE ZERO, BUT THEY MUST NOT BE ZERO!:
      IF(SIGMA0(I).LE.ZERO)THEN
      IF(NOSIGM.EQ.0)THEN
      WRITE(*,7558)
      WRITE(11,7558)
 7558 FORMAT(' (SIGMA.LE.ZERO) => SIGMA =ONE!')
      ENDIF
      NOSIGM=1
      SIGMA0(I)=ONE
      ENDIF
      SUMSIG=SUMSIG+ONE/SIGMA0(I)**2
C
 7578 CONTINUE
      SUMSIG=DSQRT(SUMSIG/DBLE(NDATA))
C**   SUMSIG NOW =ONE, IF ALL SIGMA =ONE! - NOW NORMALIZATION OF SIGMA!:
      DO 7579 I=1,NDATAP
      SIGMA(I)=ZERO
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7579
      SIGMA(I)=SIGMA0(I)*SUMSIG
 7579 CONTINUE
C
C**   THE FOLLOWING ENDIF BELONGS TO "IF(JANO.NE.0)THEN"!:
      ENDIF
C
      WRITE(*,5555)
      WRITE(11,5555)
 5555 FORMAT(
     1' NEXT ITERATION WITH "FIXED" VALUES, EXCEPT THE CHANGED ONES!')
      ISR(1)=0
      ISR(2)=0
      ISR(3)=0
      ISS(1)=0
      ISS(2)=0
      ISS(3)=0
      OMEGA=0.1D0
      GOTO 55
C**   NO RETURN (TO SHORT..F)! - STOP HERE IN SUSFIT OR IN RESTBL!
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUSFIT
      END
      SUBROUTINE LEVMAR(
C**   CALLED BY SUBROUTINE SUSFIT! - CALLS LEVDER, IF THERE WAS "SUCCESS"
C     IN SUBROUTINE LEVSQX, RESPECTIVELY ALWAYS FOR THE FIRST ITERATION.
C     (LEVDER WIL CALL SUSC, THE ROUTINE WHICH EVALUATES THE DERIVATIVES
C     OF THE FITTING FUNCTION (THE SUSCEPTIBILITY)). THIS SUBROUTINE HERE
C     NEEDS GAUSS TO SOLVE A SYSTEM OF LINEAR EQUATIONS AND TO MAKE A PROPOSAL
C     FOR NEW PARAMETERS.
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHAM,ALPHA,I20,BETA,BETAM,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,LAUFNR,ITMIN,ITMAX)
C
C**   LEVENBERG-MARQUARDT METHOD: PAGE -526-  NUMERICAL RECIPES,
C     THE ART OF SCIENTIFIC COMPUTING, CAMBRIDGE UNIVERSITY PRESS 1992.
C  LEVENBERG-MARQUARDT METHOD, ATTEMPTING TO REDUCE CHISQ, THE SUM OF
C  THE DIFFERENCES OF CHI(I)-MEASURED AND CHI(I)-CALCULATED SQUARED.
C  THERE ARE NDATA POINTS TEMPIK(I), CHI(I)-MEASURED WITH INDIVIDUAL
C  STANDARD DEVIATIONS SIG(I), AND A FIT IS REQUIRED BETWEEN THESE
C  NDATA POINTS AND CHI(I)-CALCULATED. THE STANDARD DEVIATIONS ARE OFTEN
C  EQUAL TO CHI(I)-MEASURED. CHI(I)-CALCULATED DEPENDS ON UP TO 20
C  COEFFICIENTS, AND UP TO 11 OF THESE ARE WYBOURNE COEFFICIENTS OF
C  A LIGAND FIELD. THE ACTUAL COEFFICIENTS ARE STORED IN STBWWW AND
C  THE FIXED ONES IN BWNULL. ONLY MFIT COEFFICIENTS ARE ACTUALLY
C  BEEN ADJUSTED.
C  SUBROUTINE SUSC EVALUATES CHI(I) AND ITS DERIVATIVES WITH RESPECT TO THE
C  FITTING PARAMETERS, CHI(I) ITSELF USING SUBROUTINE LEVSQX AND THE
C  DERIVATIVES OF CHI(I) USING SUBROUTINE LEVDER.
C  A PROPOSAL FOR THE FITTING PARAMETERS (NOT FOR THE 0TH ITERATION!) IS
C  MADE HERE WITH HELP OF THE ABOVE MENTIONED DERIVATIVES (BUT NOT ALWAYS,
C  EXCEPT THERE IS THE FIRST ITERATION), AND WITH HELP OF SUBROUTINE GAUSS.
C  IF, IN SUBROUTINE LEVSQX, SQX BECOMES "BETTER" (FORMALLY ALWAYS IN THE
C  0TH ITERATION!), NEW DERIVATIVES ARE CALCULATED AND A NEW PROPOSAL IS
C  MADE WITH HELP OF THESE DERIVATIVES AND SUBROUTINE GAUSS. IN THE OPPOSITE
C  CASE, A NEW PROPOSAL IS MADE WITH HELP OF THE "OLD" DERIVATIVES AGAIN
C  AND SUBROUTINE GAUSS, BUT IN A DIFFERENT WAY WITH AN INCREASED OMEGA,
C  A PARAMETER OF THE LEVENBERG-MARQUARDT METHOD.
C  THIS PARAMETER DECREASES IN THE CASE, THAT SQX BECOMES SMALLER.
C  IF SQX REMAINS PRACTICALLY CONSTANT DURING FURTHER ITERATIONS, CONVERGENCE
C  IS ACHIEVED (OR IF OMEGA HAS BECOME VERY BIG!).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      CHARACTER QTEXT1(60)
      CHARACTER*15 QMPC
      PARAMETER (II20=44,ZERO=0.0D0,ONE=1.0D0,J20=44)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW
C     IN SUBROUTINE SUSC:
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
C
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(II20),CHIFIX
     1,CFOSXJ,NOTONE,JAFIX,BWWTMP(J20),BWWWMN(II20),BWWWMX(II20),MINMAX
C
      DIMENSION LIST(I20),ALPHAM(I20,I20),ALPHA(I20,I20)
     1,BETA(I20),BETAM(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     1,CHIFIX(601,4)
     2,SIG2I(601),CHIGEM(601),EIWERT(*)
      DIMENSION INMIST(II20),BWMIST(II20),JZEILE(II20),WURZEL(II20)
      SAVE
      DATA KLICKI,NOWYB/0,0/
      DATA MINMAX,MINMAY/0,0/
      DATA JZEILE/0,1,0,3,3,3,0,7,7,7,7,0,0,0,0,0,0,0,0,0,1,3,7,7,20*0/
      DATA WURZEL/4*ONE,-1.19522861D0,0.59761430D0,2*ONE,0.60380736D0
     1,-1.87082869,0.63327851D0,33*ONE/
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,14)
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.II20)STOP 'J.NEII'
      IF(LOWER0.EQ.0)GOTO 3344
      OMEGA=0.1D0
      IF(LESS.EQ.0)THEN
      WRITE(11,1213)OMEGA
 1033 WRITE(*,1213)OMEGA
 1213 FORMAT(/,' OMEGA =',D16.8,', RETURN FOR THIS OMEGA OR INPUT OTHER' 
     1,/,' IN E16.8 (IS CHANGED AUTOM., OTHERWISE INPUT A<=>"ERROR"!)',
     2/,' (A NEGATIVE OMEGA BECOMES POSITIVE WITH THIS VALUE THE LOWER L
     3IMIT!)')
      WRITE(*,6508)
      WRITE(11,6508)
 6508 FORMAT(' (A SPECIAL TEST FOR AN OMEGA>0 AND <1 IS ENABLED, IF 999 
     1IS ADDED TO OMEGA)')
      IF(MFIT.EQ.1.AND.ITMIN.EQ.ITMAX)THEN
      WRITE(*,6510)
      WRITE(11,6510)
 6510 FORMAT(' FOR THIS FIT WITH 1 PARAMETER: IN ADD. TO A NEG. OMEGA PU
     1T IN AS A NEW LINE',/,' IN I1 YES/NO(0) "NO LEVENBERG/MARQUARDT, B
     2UT OMEGA SERVES AS A (POS.) STEP-WIDE"!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3878)BOMEGA
      GOTO 4878
      ENDIF
 3878 READ(*,'(D16.8)',ERR=103,END=4576)BOMEGA
      LMN=1
 4878 WRITE(7,102)BOMEGA
      IOMEGA=INT(BOMEGA)
      FOMEGA=BOMEGA-DBLE(IOMEGA)
      IF(IOMEGA.EQ.999.AND.FOMEGA.NE.ZERO)THEN
      LASERY=1
      WRITE(*,6509)
      WRITE(11,6509)
 6509 FORMAT(' A SPECIAL TEST ON OMEGA WAS ENABLED!')
      BOMEGA=FOMEGA
      ENDIF
  102 FORMAT(D16.8,' =(B)OMEGA')
 1021 FORMAT(' OMEGA (A PARAMETER OF LEVENBERG/MARQUARDT)=',D16.8,
     1'!!!!!!!!!')
 1020 FORMAT(' OMEGA ((POS.) STEP-WIDE (NO LEVENBERG/MARQUARDT))=',D16.8
     1,'!!!!!!!!!')
      JAFIX=0
      IF(BOMEGA.LT.ZERO)THEN
      JAFIX2=0
      IF(MFIT.EQ.1.AND.ITMIN.EQ.ITMAX)THEN
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3879)JAFIX2
      GOTO 4879
      ENDIF
 3879 READ(*,'(I1)',ERR=1033,END=4576)JAFIX2
      LMN=1
 4879 WRITE(7,1024)JAFIX2
 1024 FORMAT(I1,' =JAFIX2')
      ENDIF
      JAFIX=1
      IF(JAFIX2.NE.0)THEN
      JAFIX=2
      WRITE(*,1020)BOMEGA
      WRITE(11,1020)BOMEGA
      WRITE(*,1025)JAFIX2
      WRITE(11,1025)JAFIX2
 1025 FORMAT(I2,' =JAFIX2!!!!!!!!!')
      ELSE
      WRITE(*,1021)BOMEGA
      WRITE(11,1021)BOMEGA
      ENDIF
      BOMEGA=DABS(BOMEGA)
      GOMEGA=BOMEGA
      ENDIF
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
      IF(JAFIX.EQ.0)WRITE(*,1021)OMEGA
      IF(JAFIX.EQ.0)WRITE(11,1021)OMEGA
      NOMEGA=0
      GOTO 104
  103 NOMEGA=1
      WRITE(7,105)
      WRITE(*,105)
      WRITE(11,105)
  105 FORMAT(' A<=>ERR')
  104 CONTINUE
      ENDIF
C
 3344 CONTINUE
C**   3344 CONTINUE: LOWER0=1 <=> INITIALIZATION, =0 <=> CONTINUATION
C     OF THE CURRENT (FIRST, SECOND, ...) ITERATION!
C**   FOR THE FIRST TIME LAUFNR=0 BECOMES LAUFNR=1!:
      LAUFNR=LAUFNR+1
C**   END OF INITIALIZATION!:
      LOWER0=0
C
      IF(JASUCC.NE.0.AND.NDATAM.NE.0)THEN
C**   JASUCC SURELY =1 FOR THE FIRST ITERATION!
C**   CALCULATION OF NEW DERIVATIVES, NEW ALPHA AND NEW BETA!:
C
      CALL LEVDER(
     1JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE)
C
      ENDIF
C
      IF(KLICKI.EQ.0.AND.NDATA.NE.0.AND.LESS.EQ.0)THEN
      KLICKI=1
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,' POSSIBLE'
     1,' INPUT OF LIMITS FOR VALUES TO BE FITTED (WYB.-VAL. HERE!):',/
     1,' IS THE NAME OF THE NEXT FILE BWYBIN.DAT IN FORMAT(I2,3D16.8)?',
     2/,' "9" OR GIVE ITS NAME! (RETURN => NO INPUT HERE, 8 => STOP,',/
     3,' "79"(RESP. 7NAME)<=>IGNORE TEST(<=>START-VAL..NE.WYB.-VAL.)!)',
     4/,' IF WYBOURNE VALUES ARE GIVEN AS LIMITS FOR RELATIONS,',/
     5,' PUT IN 69 INSTEAD OF 79, BUT 59 FOR NOT TO IGNORE TEST!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3880)QMPC
      GOTO 4880
      ENDIF
 3880 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4880 WRITE(7,5163)QMPC
 5163 FORMAT(A15,' (BWYBIN 2nd)')
      IF(QMPC(1:1).EQ.'6'.OR.QMPC(1:1).EQ.'5')MINMAY=1
      IF(QMPC(1:1).EQ.'7'.OR.QMPC(1:1).EQ.'6')NOWYB=1
      IF(QMPC(1:1).EQ.'7'.OR.QMPC(1:1).EQ.'6'.OR.QMPC(1:1).EQ.'5')THEN
      WRITE(*,'(A1)')QMPC(1:1)
      WRITE(11,'(A1)')QMPC(1:1)
      DO 3330 I=1,14
      IP1=I+1
      QMPC(I:I)=QMPC(IP1:IP1)
 3330 CONTINUE
      QMPC(15:15)=' '
      IF(QMPC.EQ.'               ')QMPC='9              '
      ENDIF
      IF(QMPC.EQ.'9              ')QMPC='BWYBIN.DAT     '
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,' (BWYBIN)!!LEVMAR!!')
      IF(QMPC.EQ.'8              ')STOP '8'
      IF(QMPC.EQ.'               ')GOTO 3334
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(
     1' CRYSTAL FIELD PARAMETERS ETC. ARE READ IN FROM ',A15)
      OPEN(14,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(14,63,ERR=33)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,60A1)
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(
     1' RELEVANT VALUES READ IN ARE (ONLY MIN AND MAX ARE PUT OUT,',/
     2,' VALUES MARKED WITH 8 MAY BE RELEVANT!):')
      DO 8581 N=1,IN25
      READ(14,61,END=3304,ERR=33)INMIST(N),BWMIST(N),BWWWMN(N),BWWWMX(N)
   61 FORMAT(1X,I1,3D16.8)
      IF(BWMIST(16).EQ.ZERO)BWMIST(16)=ONE
      IF(((BWWWIN(N).NE.BWMIST(N)).OR.(INMIST(N).NE.INBWWW(N)))
     1.AND.NOWYB.EQ.0)STOP '=.NE.='
      IF(((INBWWW(N).NE.0.AND.INBWWW(N).NE.8.AND.MINMAY.EQ.0).OR
     1.(MINMAY.NE.0.AND.INBWWW(N).NE.0))
     1.AND.(BWWWMN(N).NE.ZERO.OR.BWWWMX(N).NE.ZERO))
     1THEN
      WRITE(*,6161)N,INBWWW(N),BWWWIN(N),BWWWMN(N),BWWWMX(N)
      WRITE(11,6161)N,INBWWW(N),BWWWIN(N),BWWWMN(N),BWWWMX(N)
 6161 FORMAT(2I3,3D16.8)
      IF(BWWWMN(N).GT.BWWWMX(N))STOP 'MINMAX'
      IF(((BWWWMN(N).GT.BWWWIN(N)).OR.(BWWWMX(N).LT.BWWWIN(N)))
     1.AND.((INBWWW(N).NE.9.AND.INBWWW(N).NE.8.AND.MINMAY.NE.0).OR
     2.(INBWWW(N).EQ.9.AND.MINMAY.EQ.0)))
     1STOP '.LT..GT.'
      MINMAX=1
      ENDIF
 8581 CONTINUE
      CLOSE(14)
      GOTO 3334
 3304 WRITE(*,3300)
      WRITE(11,3300)
 3300 FORMAT(' ERROR: END OF DATA FILE!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3331 WRITE(*,3301)
      WRITE(11,3301)
 3301 FORMAT(' ERROR WHILE READING!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3332 WRITE(*,3302)
      WRITE(11,3302)
 3302 FORMAT(' DATA FILE NOT FOUND')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
   33 WRITE(*,3303)
      WRITE(11,3303)
 3303 FORMAT(' ERROR IN DATA FILE!')
      IF(LMN.EQ.0)STOP 'LMN=0'
      GOTO 3333
 3334 CONTINUE
      ENDIF
C
C**   ALTER LINEARIZED FITTING MATRIX, BY AUGMENTING DIAGONAL ELEMENTS:
      OMEGAX=OMEGA
      IOMEX2=0
      JOLD=0
      JFIX=0
 3337 CONTINUE
      IF(IOMEX2.NE.0.AND.JOLD.NE.JFIX)THEN
      JOLD=JFIX
      WRITE(*,3342)IOMEX2,LIST(JFIX)
      WRITE(11,3342)IOMEX2,LIST(JFIX)
 3342 FORMAT(
     1' OMEGAX=2.*OMEGAX WAS TAKEN',I5,' TIMES ("SUM")! LIST(J) =',I3)
      ENDIF
      IF(JAFIX.EQ.2)GOTO 1928
      DO 599 J=1,MFIT
      DO 499 K=1,MFIT
      ALPHAM(J,K)=ALPHA(J,K)
  499 CONTINUE
      ALPHAM(J,J)=ALPHA(J,J)*(ONE+OMEGAX)
      BETAM(J)=BETA(J)
  599 CONTINUE
      ISING=0
      LEVRUS=0
      CALL GAUSS(ALPHAM,MFIT,I20,BETAM,ISING,MOROUT,LEVRUS)
      IF(ISING.NE.0)STOP 'ISING'
C**   MATRIX SOLUTION. - THE "RESULT" IS BETAM(ATRIX)(I20)!
C**   NOW FOR THE NEXT ITERATION STBWWW (MEANS BTRIAL = B-TRI-AL!):
      DO 699 J=1,MFIT
      STBWWW(LIST(J))=BWNULL(LIST(J))+BETAM(J)
  699 CONTINUE
 1928 CONTINUE
      IF(JAFIX.EQ.2)
     1STBWWW(LIST(1))=STBWWW(LIST(1))+GOMEGA
C
      IF(MINMAX.NE.0)THEN
      DO 3336 J=1,MFIT
      BWWMAX=BWWWMX(LIST(J))
      BWWMIN=BWWWMN(LIST(J))
      BWWMEA=STBWWW(LIST(J))
      IF(BWWMIN.NE.ZERO.OR.BWWMAX.NE.ZERO)THEN
      IF(MINMAY.NE.0.AND.INBWWW(LIST(J)).EQ.9.AND.JZEILE(LIST(J)).NE.0)
     1THEN
      BWWMEA=BWWMEA*(STBWWW(JZEILE(LIST(J)))*WURZEL(LIST(J)))
      ENDIF
      IF((BWWMIN.GT.BWWMEA).OR.(BWWMAX.LT.BWWMEA))THEN
      OMEGAX=2.D0*OMEGAX
      IF(OMEGAX.GT.0.1D10)THEN
      OMEGA=OMEGAX
      WRITE(*,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
      WRITE(11,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
 3338 FORMAT(
     1' WARNING: OMEGAX.GT.0.1D10; J, LIST(J), STBWWW(LIST(J));BWWMEA ='
     1,/,I3,I5,2D16.8)
      RETURN
      ENDIF
      IOMEX2=IOMEX2+1
      JFIX=J
      GOTO 3337
      ENDIF
      ENDIF
 3336 CONTINUE
      IF(MINMAY.NE.0)THEN
      MFIT1=MFIT+1
      DO 3339 J=I16,MFIT1,-1
      BWWMAX=BWWWMX(LIST(J))
      BWWMIN=BWWWMN(LIST(J))
      BWWMEA=STBWWW(LIST(J))
      IF(BWWMIN.NE.ZERO.OR.BWWMAX.NE.ZERO)THEN
      IF(INBWWW(LIST(J)).EQ.8.AND.JZEILE(LIST(J)).NE.0)
     1THEN
      BWWMEA=BWWMEA*(STBWWW(JZEILE(LIST(J)))*WURZEL(LIST(J)))
      IF((BWWMIN.GT.BWWMEA).OR.(BWWMAX.LT.BWWMEA))THEN
      IF(INBWWW(JZEILE(LIST(J))).NE.0)THEN
      OMEGAX=2.D0*OMEGAX
      IF(OMEGAX.GT.0.1D10)THEN
      OMEGA=OMEGAX
      WRITE(*,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
      WRITE(11,3338)J,LIST(J),STBWWW(LIST(J)),BWWMEA
      RETURN
      ENDIF
      IOMEX2=IOMEX2+1
      JFIX=J
      GOTO 3337
      ELSE
      WRITE(*,3340)J,LIST(J),BWWMIN,BWWMEA,BWWMAX,STBWWW(LIST(J))
      WRITE(11,3340)J,LIST(J),BWWMIN,BWWMEA,BWWMAX,STBWWW(LIST(J))
 3340 FORMAT(
     1' WARNING: BWWMIN.GT.BWWMEAN.OR.BWWMAX.LT.BWWMEAN: IGNORED!',/
     2,' J, LIST(J), BWWMIN, BWWMEAN, BWWMAX, AND STBWWW(LIST(J)) =',
     3/,I3,I5,4D16.8)
      GOTO 3339
      ENDIF
      ENDIF
      ENDIF
      ENDIF
 3339 CONTINUE
      ENDIF
      IF(IOMEX2.NE.0)THEN
      WRITE(*,3343)IOMEX2,LIST(JFIX)
      WRITE(11,3343)IOMEX2,LIST(JFIX)
 3343 FORMAT(
     1' OMEGAX=2.*OMEGAX WAS TAKEN',I5,' TIMES ("SUMS")! LIST(J) =',I3)
      ENDIF
      ENDIF
C
      IF(NOMEGA.NE.0)THEN
C**   NOW OMEGA FOR THE NEXT ITERATION?:
      WRITE(*,1618)OMEGA
 1618 FORMAT(
     1' NOW OMEGA =',D10.2,', IF OTHER, INPUT IN E10.2 (A<=>"ERROR"=>"AU
     2TOM."!)')
      IF(LMN.EQ.0)THEN
      READ(77,102,ERR=5588,END=3881)BOMEGA
      GOTO 4881
      ENDIF
 3881 READ(*,102,ERR=1044,END=4576)BOMEGA
      LMN=1
 4881 BOMEGA=DABS(BOMEGA)
      IF(BOMEGA.NE.ZERO)OMEGA=BOMEGA
      WRITE(7,102)BOMEGA
      WRITE(*,1021)OMEGA
      WRITE(11,1021)OMEGA
      GOTO 1043
 1044 NOMEGA=0
      WRITE(7,105)
      WRITE(*,105)
      WRITE(11,105)
 1043 CONTINUE
      ENDIF
C
      RETURN
C**   LEVMAR RETURNS TO SUSFIT!
 4576 CALL FINISH
 5588 CALL FINISI
CEND LEVMAR
      END
      SUBROUTINE LEVSQX(
     1GOMEGA,LASERY,JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION:
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE,CHISQW)
C     CALLS SUBROUTINE SUSC, WHICH EVALUATES THE FITTING FUNCTION
C     (THE SUSCEPTIBILITY).
C**   EVALUATES SQX, IF THE PARAMETERS TO BE FITTED  AND CHI(I)-MEASURED
C     ARE GIVEN. THE PARAMETERS ARE GIVEN AS INPUT FOR THE FIRST TIME AND
C     ARE COMPUTED BY SUBROUTINE LEVMAR FOR THE ITERATIONS!
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      PARAMETER (DELTAF=1.0001D0,DELTAX=0.000001D0
     1,ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6,II20=44,J20=44)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW
C     IN SUBROUTINE SUSC:
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
C
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWMIST(II20),CHIFIX
     1,CFOSXJ,NOTMST,JAFIX,BWWTMP(J20),BWWWMN(II20),BWWWMX(II20),MINMAX
      DIMENSION LIST(I20),ALPHA(I20,I20),BWNULL(I20)
     1,BETA(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     2,SIG2I(601),CHIGEM(601),EIWERT(*),CHIFIX(601,4)
     3,BSTART(*)
      SAVE
      DATA KLICK,KLICKY,KLICKC,KLICKM,KLICKS,KLICLA,KLICL/0,0,0,0,0,0,0/
      DATA KLICKV/0/
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,15)
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.II20)STOP 'J.NEII'
      IF(LOWER0.EQ.0)GOTO 3344
C**   LOWER0=1 <=> INITIALIZATION!
C
      DO 1718 J=1,IN25
      BWNULL(J)=STBWWW(J)
      BWWTMP(J)=BWWW(J)
      JPL=J+15
      IF(JPL.LE.44)VLSTNG(JPL)=STBWWW(J)
 1718 CONTINUE
C
      NOTONE=0
      DO 7578 I=1,NDATAP
      IF(MOD(LOWDAT(I),2).NE.0)GOTO 7578
C
      IF(SIGMA(I).NE.ONE)NOTONE=1
C
 7578 CONTINUE
      IF(NOTONE.NE.0)THEN
      WRITE(*,3112)
      WRITE(11,3112)
 3112 FORMAT(' ANY OF THE STANDARD DEVIATIONS ARE NOT ONE!')
      IF(IOPT4.NE.1.OR.MORTEX.GT.0)THEN
      WRITE(*,3121)
      WRITE(11,3121)
 3121 FORMAT(' NOTE: THEY BELONG TO CHI, IF CHI IS FITTED,'
     1,/,' BUT TO 1/CHI, IF 1/CHI IS FITTED, ETC.!')
      ENDIF
      ENDIF
C
 3344 CONTINUE
      CHISQ=ZERO
C
      JTHETA=0
      THETA=ZERO
      IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
      JTHETA=1
      THETA=STBWWW(14)
      ENDIF
      NDATAO=NDATAM
      IF(KLICK.EQ.0)NDATAO=NDATA
      KLICK=1
      NDATAM=NDATA
C
      IOPT31=-2*IOPT3+4
CKR      DO 597 J=1,JAOVER
      J=1
      LOWHIG=J
      DO 598 I=1,NDATAP
      NRTEMP=I
      MINDAT(I)=0
      TEMPII=TEMPIK(I)
      IF(JTHETA.NE.0.AND.TEMPII.GT.ZERO)THEN
      TEMPII=TEMPII-THETA
      IF(TEMPII.LT.PARWUR)THEN
      MINDAT(I)=1
      IF(MOD(LOWDAT(I),2).EQ.0)NDATAM=NDATAM-1
      CHIBER(I)=ZERO
      GOTO 598
      ENDIF
      ENDIF
      TEMPTH=TEMPII
      TESLAS=TESDAT(I)
      DO 116 II=1,I16
      BWW(II)=STBWWW(II)
  116 CONTINUE
C**   BWW NEEDED IN SUSC! - NOW THE FIRST CALL OF SUSC!:
      CALL SUSC(JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD)
C
      IF(LOWER0.EQ.1)THEN
      DO 1962 JJ=1,3
      CHIFIX(I,JJ)=CHIZXY(JJ,I)
 1962 CONTINUE
      CHIFIX(I,4)=CHISTA(I)
      ENDIF
C
      CHIMOD=CHI(1,IOPT31,IOPT4)
      CHIGEM(I)=CHI(2,IOPT31,IOPT4)
      CHIBER(I)=CHIMOD
      IF(NREL.EQ.0)THEN
      IF(CHI(1,IOPT31,1).EQ.ZERO.AND.CHI(2,IOPT31,1).GT.ZERO)GOTO 7198
      ENDIF
C**   NO FITTING USING NEG. CHI VALUES!:
C..   BUT EXCEPTION: (=>-CKR-)
CKR      IF(TEMPIK(NRTEMP).LT.-995.0D0)GOTO 7198
      IF(((CHI(1,IOPT31,1).LT.ZERO.OR.CHI(2,IOPT31,1).LE.ZERO).AND
     1.NOPROZ.EQ.0).OR.((CHI(1,IOPT31,1).LT.ZERO.OR.CHI(2,IOPT31,1).LT
     1.ZERO).AND.NOPROZ.NE.0))THEN
      MINDAT(I)=1
      IF(MOD(LOWDAT(I),2).EQ.0)NDATAM=NDATAM-1
C**   CHIBER(I)=ZERO - "ENERGIES"
      ENDIF
 7198 CONTINUE
C
      IF(CHI(1,2,1).LT.ZERO.AND.CHI(1,4,1).GT.ZERO)THEN
      IF(KLICKC.EQ.0)THEN
      KLICKC=1
      WRITE(11,588)
      WRITE(*,588)
  588 FORMAT(' WARNING:',/
     1,' CHISTART BECOMES NEG. FIRSTLY AND POS., WHEN CHI-0 IS ADDED!')
      ENDIF
      ENDIF
      IF(CHI(2,2,1).LT.ZERO.AND.CHI(2,4,1).GT.ZERO)THEN
      IF(KLICKM.EQ.0)THEN
      KLICKM=1
      WRITE(11,589)
      WRITE(*,589)
  589 FORMAT(' WARNING:',/
     1,' CHI-MEAS. BECOMES NEG., WHEN CHI-0 IS SUBTR.!')
      ENDIF
      ENDIF
  598 CONTINUE
C**   LAST CONTINUE BELONGS TO "DO 598 I=1,NDATAP"!
CKR  597 CONTINUE
C
      IF(NDATAM.NE.NDATAO)THEN
      WRITE(*,1555)NDATA,NDATAM
      WRITE(11,1555)NDATA,NDATAM
 1555 FORMAT(
     1' NDATA.NE.NDATAM (OR NDATAM WAS CHANGED)! THEY ARE=',2I4)
      WRITE(*,1514)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
      WRITE(11,1514)(LIST(I),STBWWW(LIST(I)),I=1,MFIT)
 1514 FORMAT(' LIST(I), BWYB(LIST(I))=',/,(5(I3,D16.8)))
      ENDIF
C
      IF(NDATAP.EQ.1.AND.KLICKY.EQ.0)THEN
      KLICKY=1
      WRITE(*,55)CHIMOD
      WRITE(11,55)CHIMOD
   55 FORMAT(
     1' CALCULATED VALUE OF CHI FOR "ONLY 1 ROW OF INPUT":',D16.8)
      ENDIF
C**   NOW F-FACTOR, LAMBDA AND CHI-0:
C     (13) LAMBDA, (15) CHI-0 ("CHI DIAMAGNETIC") AND (16) F-FACTOR
C     (CORR. OF WEIGHT OF THE SAMPLE, WHERE MEASURED CHI COMES FROM)
      SQXKOR=ONE
      IF(NOPROZ.NE.0)SQXKOR=ZERO
C
      DO 152 I=1,NDATAP
      IF(MINDAT(I).EQ.0.AND.MOD(LOWDAT(I),2).EQ.0)THEN
      SIGI=CHIGEM(I)
      SIGMI=SIGMA(I)
      SIG2I(I)=ONE
      IF(NOPROZ.EQ.0)THEN
      IF(SIGI.EQ.ZERO)THEN
      WRITE(*,1541)I
      WRITE(11,1541)I
 1541 FORMAT(' ATTEMPT TO DIVIDE BY MEASURED CHI = ZERO:'
     1,/,' THIS FIT IS NOT POSSIBLE! LINE NO. =',I4)
      STOP ':ZERO'
      ENDIF
      SIG2I(I)=ONE/(SIGI*SIGI)
      ENDIF
C**   NOTONE.NE.0: ANY OF THE SIGMI ("STANDARD DEVIATIONS") IS NOT ONE!:
      IF(NOTONE.NE.0)SIG2I(I)=SIG2I(I)/(SIGMI*SIGMI)
C**   AND IN ANALOGY (ALL CASES)!:
      IF(NOPROZ.NE.0.AND.KLICKS.EQ.0)THEN
      IF(SIGI.GT.DELTAX)THEN
      SQXKOR=SQXKOR+ONE/(CHIGEM(I)*SIGMI)**2
      ELSE
      SQXKOR=ONE
      KLICKS=1
      WRITE(*,1598)
      WRITE(11,1598)
 1598 FORMAT(' WARNING: SQXKOR BECOMES TOO BIG, THEREFORE SET TO ONE!')
      ENDIF
      ENDIF
      DLCHII=CHIGEM(I)-CHIBER(I)
      DELCHI(I)=DLCHII
C
C**   NOW CHISQ WILL BE CALCULATED!
C
      DLIDLI=DLCHII*DLCHII*SIG2I(I)
      CHISQ=CHISQ+DLIDLI
      ELSE
      CHIGEM(I)=ZERO
      DELCHI(I)=ZERO
      ENDIF
  152 CONTINUE
      IF(NOPROZ.NE.0)SQXKOR=SQXKOR/DBLE(NDATAM)
C**   CHISQW <=> CHISQW(ITHOUT) SQXKOR!:
      CHISQW=CHISQ
      CHISQ=CHISQ*SQXKOR
C
      CHISQQ=CHISQ
C**   = THE NEWLY CALCULATED CHISQ!
      IF(LOWER0.NE.0)THEN
      OCHISQ=CHISQ*TWO
      ELSE
C**   FOR CLARITY ONLY!:
      IF(NDATAM.EQ.0)CHISQ=ONE
      ENDIF
C
      JASUCC=0
      IF(CHISQ.LT.OCHISQ.AND.NDATAM.NE.0)JASUCC=1
      CFOS=EIWERT(NRVAL)
      CFOSJ=EIWERT(NRVALJ)
C
      IF(JASUCC.NE.0)THEN
C**   SUCCESS!: ACCEPT THE NEW SOLUTION.
      DO 1717 J=1,IN25
      BWNULL(J)=STBWWW(J)
      BWWTMP(J)=BWWW(J)
      JPL=J+15
      IF(JPL.LE.44)VLSTNG(JPL)=BWWW(J)
 1717 CONTINUE
      KLICKV=1
C**   THIS MEANS: STBWWW=BWNULL IN THE CALLING ROUTINE SUSFIT, IF JASUCC=1!
C     ... AND FOR OUTPUT LATER ON:
C**   CRYSTAL FIELD MINIMAL SPLITTING AND THE TWO DEGENERATIONS
C     BELONGING TO THESE TWO LEVELS, AND CRYSTAL FIELD OVER ALL SPLITTING
C     (REALLY OR NOT: INDEED THE EIGENVALUE OF THE LEVEL "NRVAL"! AND:
C     THE EIGENVALUE OF THE LEVEL NRVALJ.) 
      CFMSFX=DIFLOW
      CFOSFX=CFOS
      CFOSXJ=CFOSJ
      IGR1FX=IGR1
      IGR2FX=IGR2
      DO 188 J=1,NDATAP
      DO 1963 JJ=1,3
      CHIFIX(J,JJ)=CHIZXY(JJ,J)
 1963 CONTINUE
      CHIFIX(J,4)=CHISTA(J)
  188 CONTINUE
      OCHISQ=CHISQ
C**   OCHISQ WILL BE USED IN THE NEXT ITERATION!
      CHISQV=CHISQW
      IF(LOWER0.EQ.0.AND.JAFIX.EQ.0)THEN
      OMEGA=0.3D0*OMEGA
      IF(OMEGA.LT.1.0D-33)OMEGA=1.0D-33
      ENDIF
C**   STBWWW AND BWNULL ARE BOTH RELEVANT FURTHERMORE (BWNULL FOR OUTPUT (ONLY)
C     OR FOR NEW STARTING!).
C
      IF(LOWER0.EQ.0.AND.JAFIX.EQ.1)THEN
      OMEGA=0.3D0*OMEGA
      IF(OMEGA.LT.GOMEGA)OMEGA=GOMEGA
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LOWER0.EQ.0.AND.JAFIX.EQ.1)THEN"
      KLICLA=1
      ELSE IF(JASUCC.EQ.0)THEN
C**   NO SUCCESS!: INCREASE OMEGA, HOLD THE OLD SHISQ ("OCHISQ"), AND RETURN.
C
      IF(KLICKV.EQ.0)THEN
      KLICKV=1
      DO 1771 J=1,IN25
      JPL=J+15
      IF(JPL.LE.44)VLSTNG(JPL)=BWWW(J)
 1771 CONTINUE
      ENDIF
      IF(LASERY.EQ.0.AND.JAFIX.NE.2)OMEGA=3.D0*OMEGA
      IF(LASERY.NE.0)THEN
      IF(KLICLA.EQ.0)OMEGA=3.D0*OMEGA
      IF(KLICLA.NE.0)THEN
      IF(KLICL.EQ.0)THEN
      KLICL=1
      WRITE(11,6502)
 6503 WRITE(*,6502)
 6502 FORMAT(' INPUT IN D16.8 NEW (POS.) OMEGA FOR SPECIAL TEST HERE, E.
     1G. 0.1D-7',/,' ATTENTION: A MINIMUM OF ITER. IS MOSTLY REQUIRED!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3882)FOMEGA
      GOTO 4882
      ENDIF
 3882 READ(*,'(D16.8)',ERR=6503,END=4576)FOMEGA
      LMN=1
 4882 FOMEGA=DABS(FOMEGA)
      IF(FOMEGA.EQ.ZERO)FOMEGA=0.1D-07
      WRITE(7,6504)FOMEGA
 6504 FORMAT(D16.8,' = FOMEGA IN LEVSQX')
      WRITE(11,6505)FOMEGA
      WRITE(*,6505)FOMEGA
 6505 FORMAT(D16.8,' = (F)OMEGA IN LEVSQX!!!!!!!!!')
      ENDIF
      OMEGA=FOMEGA
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(KLICLA.NE.0)THEN"
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LASERY.NE.0)THEN"
      KLICLA=0
      CHISQ=OCHISQ
      CHISQW=CHISQV
      ENDIF
C
      RETURN
C**   RETURNS TO SUSFIT AND HAS THE ACTUAL VALUES READY NOW FOR OUTPUT!
C     THE LEVENBERG-MARQUARTD METHOD ITSELF WILL FOLLOW IN SUBROUTINE LEVMAR,
C     IF THERE ARE DATA TO FIT AND IF THESE DATA SHALL BE FITTED!
 4576 CALL FINISH
 5588 CALL FINISI
CEND LEVSQX
      END
      SUBROUTINE LEVDER(
     1JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
C**   ... AND FOR SUBROUTINES LEVSQX, LEVMAR AND LEVDER IN ADDITION
     8,LOWER0,OMEGA,LIST,ALPHA,I20,BWNULL,BETA,CHISQ,CHISQQ,JASUCC
     9,ABLCHM,CHIBER,DELCHI,SIG2I,CHIGEM,OCHISQ,SQXKOR,NOTONE)
C     USED BY LEVMAR TO EVALUATE THE LINEARIZED FITTING MATRIX ALPHA,
C     AND VECTOR BETA. - CALLS SUBROUTINE SUSC, WHICH EVALUATES THE
C     (DERIVATIVES OF THE) FITTING FUNCTION (THE SUSCEPTIBILITY).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S) - ST(ART)BWWW => BWW IN SUBROUTINES
C     LEVSQX AND LEVDER AND => BWWW
C     IN SUBROUTINE SUSC:
      PARAMETER(J20=44)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      PARAMETER (DELTAF=1.0001D0,DELTAX=0.000001D0
     1,ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6)
      DIMENSION LIST(I20),ALPHA(I20,I20),BWNULL(I20)
     1,BETA(I20),ABLCHM(I20,601),CHIBER(601),DELCHI(601)
     2,SIG2I(601),CHIGEM(601)
     3,EIWERT(*),BSTART(*)
      SAVE
      DATA LOWER1/1/
C**   HERE STARTS THE FIRST ITERATION AND SO ON ...!
C     BEFORE: THE "0TH ITERATION"! DERIVATIVES ARE CALCULATED HERE!
C     DERIVATIVES ARE ALWAYS CALCULATED FOR THE FIRST ITERATION, BUT
C     ARE CALCULATED OR NOT CALCULATED FOR THE FURTHER ONES: THEY ARE
C     CALCULATED, IF SQX HAS BECOME "BETTER", AND NOT "ELSE"! 
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,16)
      IF(J2.NE.J20)STOP 'J.NE.J'
      JAABLT=1
C
      IF(LOWER1.EQ.0)GOTO 3344
C**   LOWER1=1 <=> INITIALIZATION!
      LOWER1=0
C
      IOPT31=-2*IOPT3+4
 3344 CONTINUE
C**   LAUFNR=LAUFNR+1, IF THERE WAS A NEW ALPHA AND/ OR(!) A NEW OMEGA!
      JTHETA=0
      THETA=ZERO
      IF(STBWWW(14).NE.ZERO.OR.IBWWW(14).NE.0)THEN
      JTHETA=1
      THETA=STBWWW(14)
      LISTL=0
      DO 52 I=1,MFIT
   52 IF(LIST(I).EQ.14)LISTL=I
      ENDIF
      DO 1516 II=1,MFIT
      DO 1517 I=1,I16
      BWW(I)=STBWWW(I)
 1517 CONTINUE
      BWII=BWW(LIST(II))
      BWIID=BWII*DELTAF
      DELTA=BWIID-BWII
      DELTAQ=DELTAX
C**   CHI-0 <=> 15:
      IF(LIST(II).EQ.15)DELTAQ=DELTAX**2
      IF(DABS(DELTA).LT.DELTAQ)THEN
      IF(DELTA.GE.ZERO)DELTA=DELTAQ
      IF(DELTA.LT.ZERO)DELTA=-DELTAQ
      ENDIF
      BWW(LIST(II))=BWII+DELTA
C**   BWW NEEDED IN SUSC JUST AS BEFORE!
CKR      DO 1957 J=1,JAOVER
      J=1
      LOWHIG=J
      DO 1515 I=1,NDATAP
      NRTEMP=I
      IF(MINDAT(I).EQ.0.AND.MOD(LOWDAT(I),2).EQ.0)THEN
      TEMPII=TEMPIK(I)
      IF(JTHETA.NE.0.AND.TEMPII.GT.ZERO)THEN
      TEMPII=TEMPII-THETA
      IF(LISTL.EQ.II)TEMPII=TEMPII-DELTA
      ENDIF
      TEMPTH=TEMPII
      TESLAS=TESDAT(I)
C**   NOW THE SECOND CALL OF SUSC (TO GET DIFFERENT VALUES FOR CHI(I)-
C     CALCULATED, DIFFERENT FROM THOSE OF THE FIRST CALL IN SUBROUTINE
C     LEVSQX, IN ORDER TO EVALUATE THE DERIVATIVES OF CHI(I) WITH RESPECT
C     TO THE FITTING PARAMETERS)!:
      CALL SUSC(JASTRU,KMASKE,MOLFLD,JAWIGN,NGROUP
     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,JANOLS
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD)
C
      CBERRR=CHI(1,IOPT31,IOPT4)
C**   CHIBER(I) (=CHI-CALC. ABOVE) = -DELCHI(I)+CHIGEM(I)
C     (=-DELCHI(I)+CHI-MEASURED ABOVE)
C     (CHI-MEASURED HERE AND ABOVE IS NOT (ALWAYS) THE SAME!
C     THE REASON IS, THAT E.G. A DERIVATIVE WITH RESPECT TO CHI-0
C     IN THE CASE OF IOPT31=2 WOULD BE ZERO, IF CHI-MEASURED WOULD
C     NOT BE TAKEN INTO ACCOUNT, BECAUSE ONLY CHI-MEASURED, BUT NOT
C     CHI-CALCULATED IS CHANGED BY CHI-0! (INDEED THE DIFFERENCE IS
C     CONCERNED AND NOT CHI-CALCULATED ALONE!))
C**   ABLNEN=(CHI(1,,HERE)-CHI(1,,ABOVE))-(CHI(2,,HERE)-CHI(2,,ABOVE))!:
      ABLNEN=CBERRR+DELCHI(I)-CHI(2,IOPT31,IOPT4)
      ABLCHI=ABLNEN/DELTA
      ELSE
      ABLCHI=ZERO
      ENDIF
      ABLCHM(II,I)=ABLCHI
 1515 CONTINUE
CKR 1957 CONTINUE
 1516 CONTINUE
      JAABLT=0
C**   THE DERIVATIVES ARE READY! - NOW FOLLOWING: CALCULATION OF NEW
C     ALPHA UND BETA:
      DO 211 J=1,MFIT
      DO 1111 K=1,J
      ALPHA(J,K)=ZERO
 1111 CONTINUE
      BETA(J)=ZERO
  211 CONTINUE
C
      DO 1518 I=1,NDATAP
C**   ABLCHM(,I)=ABLCHI=ZERO, IF MINDAT(I).NE.0.OR.MOD(LOWDAT(I),2).NE.0,
C     AND ZWI TOO!
      DO 498 J=1,MFIT
      ABLCJI=ABLCHM(J,I)
      ZWI=ABLCJI*SIG2I(I)
      DO 399 K=1,J
      ABLCKI=ABLCHM(K,I)
      ALPHA(J,K)=ALPHA(J,K)+ZWI*ABLCKI
  399 CONTINUE
      BETA(J)=BETA(J)+DELCHI(I)*ZWI
  498 CONTINUE
 1518 CONTINUE
      DO 799 J=2,MFIT
      DO 698 K=1,J-1
      ALPHA(K,J)=ALPHA(J,K)
  698 CONTINUE
  799 CONTINUE
C**   RETURNS TO LEVMAR!
      RETURN
CEND LEVDER 
      END
      SUBROUTINE GAUSS(WATRIX,N,KDIM,COLUMN,ISING,MOROUT,LEVRUS)
C**   LINEAR EQUATION SOLUTION BY THE ALGORITHM OF GAUSS WITH 
C     PIVOTING. THE INPUT MATRIX OF DIMENSION=KDIM*KDIM IS NAMED
C     WATRIX, AND THE RIGHT HAND SIDE OF THE SYSTEM OF LINEAR
C     EQUATIONS IS NAMED COLUMN. THERE ARE N EQUATIONS OF N UNKNOWNS.
C     THE SOLUTION, I.E. THE UNKNOWNS, IS / ARE IN COLUMN, WHEN
C     GAUSS RETURNS, AND KOLUMN IS USED TO REARRANGE THE SOLUTION
C     VECTOR.
C**   THIS SUBROUTINE WILL BE CALLED BY LEVMAR, AND IN THE
C     CASE OF A SINGULAR MATRIX RETURN WILL OCCUR WITH THE LABEL ISING=1
C     (NEEDED FOR SUBROUTINE RUSSELL).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MISTMO,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      PARAMETER (ZERO=0.D0,ONE=1.D0,KKDIM=119)
      DIMENSION WATRIX(KDIM,KDIM),COLUMN(KDIM),KOLUMN(KKDIM)
      SAVE
      DATA KLICK,MOROUU/0,0/
      DATA PARGAU,PARGAB/1.0D-12,1.0D-4/
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,17)
      IF(LEVRUS.NE.0)PARGAU=PARGAB
      NLEV=N
C**   FOR OUTPUT ONLY!:
      IF(LEVRUS.NE.0)NLEV=N+LEVRUS-ISING
      IF(MOROUT.NE.0.AND.KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,10)
  100 WRITE(*,10)
   10 FORMAT(
     1' MOROUT.NE.0 IN GAUSS: INPUT 1 IN I1 FOR MORE OUTPUT HERE!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3883)MOROUU
      GOTO 4883
      ENDIF
 3883 READ(*,'(I1)',ERR=100,END=4576)MOROUU
      LMN=1
 4883 WRITE(7,2294)MOROUU
 2294 FORMAT(I1,' =MOROUU IN GAUSS')
      WRITE(11,2942)MOROUU
      WRITE(*,2942)MOROUU
 2942 FORMAT(I2,' =MOROUU IN GAUSS!!!!!!!!!')
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,3025)N,NLEV
      WRITE(11,3025)N,NLEV
 3025 FORMAT(' SUBR. GAUSS: MATRIX AND COLUMN, N= , NLEV= ',2I6)
      DO 30 I=1,N
      WRITE(*,25)(WATRIX(I,J),J=1,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=1,NLEV)
   25 FORMAT(6D13.3)
   30 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
C**   BACKWARDS NUMBERING OF (THE COLUMNS OF) THE MATRIX:
      J=N+1
      DO 11 I=1,N
      J=J-1
      KOLUMN(I)=J
   11 CONTINUE
C
C**   EACH ROW - NO INTERCHANGE OF ROWS - 1 CONTINUE: 150 ROWS BELOW!:
      JROW=0
      DO 1 IROW=N,1,-1
C
      IROWM1=IROW-1
      ICOLM1=IROWM1
      ICOLMP=ICOLM1+1
      JROW=JROW+1
      TEMP=WATRIX(JROW,JROW)
      ABSBIG=DABS(TEMP)
      JNRCOL=JROW
      JCOL=JROW
C**   ALL COLUMNS > JCOL=JROW!:
      DO 2 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      IF(DABS(WATRIX(JROW,JCOL)).GT.ABSBIG)THEN
      ABSBIG=DABS(WATRIX(JROW,JCOL))
      JNRCOL=JCOL
      ENDIF
    2 CONTINUE
      IF(JROW.NE.JNRCOL)THEN
C**   EXCHANGE:
      ITEMP=KOLUMN(JROW)
      KOLUMN(JROW)=KOLUMN(JNRCOL)
      KOLUMN(JNRCOL)=ITEMP
C**   ALL(!) ROWS (I=1,N)!:
      DO 24 I=1,N
      TEMP=WATRIX(I,JROW)
      WATRIX(I,JROW)=WATRIX(I,JNRCOL)
      WATRIX(I,JNRCOL)=TEMP
   24 CONTINUE
      ENDIF
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,3029)JROW
      WRITE(11,3029)JROW
 3029 FORMAT(
     1' IN DO 1 IROW=N,2,-1:(MATRIX((I=1,N),J),J=JROW,NLEV), JROW =',I6)
C**   ALL(!) ROWS (I=1,N)!:
      DO 29 I=1,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROW,NLEV)
   29 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
C**   WATRIX(JROW,JROW) => ONE!:
      ISING=0
      IF(DABS(WATRIX(JROW,JROW)).LT.PARGAU)THEN
      ISING=1
      IF(LEVRUS.EQ.0)THEN
      DO 26 I=JROW,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,N)
      WRITE(11,25)(WATRIX(I,J),J=JROW,N)
   26 CONTINUE
      WRITE(11,27)PARGAU
   28 WRITE(*,27)PARGAU
   27 FORMAT(' MATRIX MAY BE ILL CONDITIONED FOR PAR =',D16.8,/,' INPUT 
     1SMALLER PAR (ZERO <=> NO CHANGE) OR "ONE" TO STOP (IN E16.8)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(D16.8)',ERR=5588,END=3884)PARGIN
      GOTO 4884
      ENDIF
 3884 READ(*,'(D16.8)',ERR=28,END=4576)PARGIN
      LMN=1
 4884 WRITE(7,2295)PARGIN
 2295 FORMAT(D16.8,' =PARGIN')
      WRITE(11,2295)PARGIN
      WRITE(*,2295)PARGIN
      IF(PARGIN.GT.ZERO.AND.PARGIN.LT.PARGAU)PARGAU=PARGIN
      IF(PARGIN.NE.ONE)THEN
      ISING=0
      GOTO 33
C     ELSE
C (IN LEVMAR:) STOP 'ISING'
      ENDIF
      ENDIF
      RETURN
      ENDIF
   33 DENOM=ONE/(WATRIX(JROW,JROW))
C
C**   ALL COLUMNS > JCOL=JROW, BUT ONLY ONE ROW (=JROW)!:
      JCOL=JROW
      DO 3 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      WATRIX(JROW,JCOL)=WATRIX(JROW,JCOL)*DENOM
    3 CONTINUE
      COLUMN(JROW)=COLUMN(JROW)*DENOM
C
C**   WATRIX(JROW,JROW) IS NOW = ONE (AT LEAST VIRTUALLY!):
      WATRIX(JROW,JROW)=ONE
C
C**   NORMALIZATION OF THE MATRIX WATRIX INCL. COLUMN:
      JROM=JROW
      DO 4 IROM=IROWM1,1,-1
      JROM=JROM+1
C**   NEARLY EQUAL WEIGHT TO EACH ROW!:
      ABSBIG=DABS(WATRIX(JROM,JROW))
      JCOL=JROW
C**   ALL COLUMNS > JCOL=JROW, ROW <=> JROM <=> DO 4!:
      DO 41 ICOL=ICOLM1,1,-1
      JCOL=JCOL+1
      IF(DABS(WATRIX(JROM,JCOL)).GT.ABSBIG)
     1ABSBIG=DABS(WATRIX(JROM,JCOL))
   41 CONTINUE
      IF(ABSBIG.GT.ZERO)THEN
      DENOM=ONE/ABSBIG
      ELSE
C**   RESULTS IN ISING=1 ("SINGULAR MATRIX") LATER(!) ON:
      DENOM=ONE
      ENDIF
C**   ALL COLUMNS > JCOL=JROW-1, ROW <=> JROM <=> DO 4!:
      JCOL=JROW-1
      DO 43 ICOL=ICOLMP,1,-1
      JCOL=JCOL+1
      WATRIX(JROM,JCOL)=WATRIX(JROM,JCOL)*DENOM
   43 CONTINUE
      COLUMN(JROM)=COLUMN(JROM)*DENOM
    4 CONTINUE
C**   END OF NORMALIZATION!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,3032)
      WRITE(11,3032)
 3032 FORMAT(
     1' IN DO 1 AFTER NORMAL.: (MATRIX(I,J),J=JROW,NLEV) AND COLUMN')
      DO 32 I=JROW,N
      WRITE(*,25)(WATRIX(I,J),J=JROW,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROW,NLEV)
   32 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=JROW,NLEV)
      WRITE(11,25)(COLUMN(I),I=JROW,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
      IF(JROW.EQ.N)GOTO 13
      JROM=JROW
      DO 14 IROM=IROWM1,1,-1
      JROM=JROM+1
      FIRST=WATRIX(JROM,JROW)
      JCOL=JROW
      DO 44 ICOL=IROWM1,1,-1
      JCOL=JCOL+1
      WATRIX(JROM,JCOL)=WATRIX(JROM,JCOL)-FIRST*WATRIX(JROW,JCOL)
   44 CONTINUE
      COLUMN(JROM)=COLUMN(JROM)-FIRST*COLUMN(JROW)
   14 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      JROWP1=JROW+1
      WRITE(*,3034)JROWP1
      WRITE(11,3034)JROWP1
 3034 FORMAT(
     1' & SMALLER: (MATRIX(I,J),J=JROWP1,NLEV) AND COLUMN, JROWP1=',I6)
      DO 34 I=JROWP1,N
      WRITE(*,25)(WATRIX(I,J),J=JROWP1,NLEV)
      WRITE(11,25)(WATRIX(I,J),J=JROWP1,NLEV)
   34 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,25)(COLUMN(I),I=JROWP1,NLEV)
      WRITE(11,25)(COLUMN(I),I=JROWP1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
    1 CONTINUE
   13 CONTINUE
C**   BACKSUBSTITUTION ("FORWARDS" IN DO 5):
C     (ATTENTION: STARTING AT "N"!:)
      JROW=N
      DO 5 IROW=2,N
      IROWM1=IROW-1
      JROW=JROW-1
      JCOL=JROW
      DO 55 ICOL=IROWM1,1,-1
      JCOL=JCOL+1
      COLUMN(JROW)=COLUMN(JROW)-COLUMN(JCOL)*WATRIX(JROW,JCOL)
   55 CONTINUE
    5 CONTINUE
      IF(MOROUU.NE.0)THEN
      WRITE(*,665)
      WRITE(11,665)
  665 FORMAT(' NOT YET ORDERED IN GAUSS: (COLUMN(I),I=1,NLEV) =')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C**   REARRANGEMENT ("ORDERING") OF THE SOLUTION VECTOR COLUMN
C     WITH HELP OF KOLUMN:
      NM1=N-1
      DO 6 I=1,NM1
      IP1=I+1
      DO 66 II=IP1,N
      ITEMP=KOLUMN(I)
      TEMP=COLUMN(I)
      IF(KOLUMN(II).GT.ITEMP)THEN
      KOLUMN(I)=KOLUMN(II)
      KOLUMN(II)=ITEMP
      COLUMN(I)=COLUMN(II)
      COLUMN(II)=TEMP
      ENDIF
   66 CONTINUE
    6 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,666)
      WRITE(11,666)
  666 FORMAT(' NOW ORDERED IN GAUSS: (COLUMN(I),I=1,NLEV) =')
      WRITE(*,25)(COLUMN(I),I=1,NLEV)
      WRITE(11,25)(COLUMN(I),I=1,NLEV)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C
      RETURN
C**   RETURNS TO LEVMAR (OR TO RUSSEL, A ROUTINE FOR "TESTS" ONLY).
 4576 CALL FINISH
 5588 CALL FINISI
CEND GAUSS
      END
CEND-FILE SUSFIT.F
      SUBROUTINE TANABE(NGROUP,NOFORM,
C TANAKE CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     TANABE IS CALLED BY SUSC. (SUSC IS CALLED BY SHORTL, WHICH
C     IS CALLED BY PROGRAM CONDOR.) TANABE CALCULATES EIGENVALUES AND
C     EIGENVECTORS OF A MATRIX, WHICH IS BASED ON A FULL BASIS OF MICRO
C     STATES. IT CALLS REDUCT(ANABE), WHICH CALLS SELECS, WHICH CALLS SELECT,
C     WHICH CALLS SUGANR/C/H/K, THE LATTER IN 12(!) DIFFERENT OPTIONS AT ALL! -
C     FOR OUTPUT (OPTION MOROUT AND NUROUT FOR OUTPUT OF RESULTS) RESTBL
C     <=> RES(ULT)T(A)BL(ES) IS AVAILABLE.
C
     1EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,TESINT
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
C**   ... AND FOR SUBROUTINE TANABE, THE PRESENT SUBROUTINE:
     7,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     1,VORFAK,LLSMX,KDIMPL,VORFAL,ISLSMX,MSMLNR
     2,KAESNR,KAESTC,KAESTD,LOCH,KAESNS)
C
C**   SUBROUTINES/FUNCTIONS NEEDED: SCHEMA,SPORCO,ELELWW,CRYSTF,MAGNF,
C     CKCOE FOR CONDON-SHORTLEY COEFFICIENTS (INCL. DREIJ AND FACTLR), AND
C     IN ADDITION A DIAGONALIZATION ROUTINE CALLED VIA A LINK-ROUTINE:
C     SEE PROGRAM CONDOR FOR DETAILS!
C**   INSTEAD OF CALLING THE DIAGONALIZATION ROUTINE DIRECTLY, SUBROUTINE
C     BLOCUT MAY BE CALLED FIRSTLY TO BLOCK-OUT THE MATRIX BEFORE
C     DIAGONALIZING THE BLOCKS ONE AFTER ANOTHER! 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      INTEGER REIHNF,BLOCKD,BLOCKS
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
     1,DBLMAT(ND2002,ND2002),EIVECV(ND2002,ND2002)
      PARAMETER(I6=6,I7=36,J7=6)
      ALLOCATABLE NROFNS(:),NOFROX(:,:),EIVSHU(:,:)
     2,NROFNT(:),NOFROY(:,:),EIVSHV(:,:,:)
     3,NROFN6(:),NOFRO6(:,:),EIVSH6(:,:)
     4,NROFN5(:),NOFRO5(:,:),EIVSH5(:,:)
     5,NROFN4(:),NOFRO4(:,:),EIVSH4(:,:,:)
     6,NROFN3(:),NOFRO3(:,:),EIVSH3(:,:,:)
     7,NROFN2(:),NOFRO2(:,:),EIVSH2(:,:,:)
     8,NROFN1(:),NOFRO1(:,:),EIVSH1(:,:,:)
      LOGICAL LMAT(ND2002,*),SPAERL(ND2002)
      COMMON/IEQUIV/JEQUIV
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=44)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/ABC/MNUR4(2,2),MNUR4C(2,2)
      COMMON/JTSTZZ/JTSTZX
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0
     1,HALF=0.5D0,QUART=0.25D0,FUENF=5.0D0,EINUND=21.0D0
     1,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO,PARWUC=1.0D-8
     2,FOUR=4.0D0,SECHS=6.0D0,VPREZ6=1.0D6/(FOUR*3.1415926D0)
     2,BOLZCM=0.695040D0,TESLCM=0.466864D0,FMONE=-ONE)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110; ND1110=1110
C**   ALL VALUES ARE IN SI UNITS, WITH TWO EXCEPTIONS: ENERGIES ARE ALWAYS
C     IN CM**-1 CORRESP. TO "WAVENUMBER=ENERGY/(PLANCK CONST.*VELOCITY OF
C     LIGHT)", AND MAGNETIC FLUX DENSITY MAY BE IN CM**-1 CORRESP. TO
C     "FLUX DENSITY=ENERGY/BOHR MAGNETON".
C     THE CONST. OF BOLTZMANN IN CM**-1*KELVIN**-1 INSTEAD OF
C     JOULE*KELVIN**-1 IS BOLZCM=0.695040. THE BOHR MAGNETON USED ABOVE
C     IS THAT NAMED AFTER AMPERE, IS IN A*M**2=J/TESLA, AND IS SIMUBA=
C     9.27402*10**-24. THE BOHR MAGNETON NAMED AFTER COULOMB IS IN V*S*M,
C     AND IT IS SIMUBC=SIMUBA*4PI*10**-7=1.165407*10**-29. THE CONVERSION
C     FACTOR, WHICH TAKES MAGNETIC FLUX DENSITY IN TESLAS INTO SUCH IN
C     CM**-1 IS TESLCM=0.466864. AVOGADROS NUMBER IN MOL**-1 IS AVOGAD=
C     6.02214*10**23. THE CALCULATED CHI-MOL VALUE IS IN SI UNITS, BUT IT
C     IS ALSO GIVEN IN GGS UNITS (MULTIPL. WITH 10**6/4PI=VPREZ6=79577.47D0).
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
C
C**   IN THE FOLLOWING: DIMENSIONS CORRESP. TO MAX. L VALUE
C     (L VALUE FOR 6 F EL.!): 2*12+1=25:
C
      DOUBLE PRECISION
     2EIWERT(*),FINTEG(4)
     4,UPML(25),DOWNML(25)
     6,BWWOLD(I16),BSTART(24)
     7,DIRECZ(3),REDFAZ(3)
     8,EIVSHT(ND2002,*)
      INTEGER MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
     1,NROFNR(*),NOFROW(ND2002,*)
      SAVE
      DATA LAUF,KLICK,KLICKB,KLICK2,KLICK3,KLILOC,MOROUU,KLICK4/0,0,0,0
     1,0,0,0,0/
      DATA TESLAK/FMONE/
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,18)
      IF(J2.NE.J20)STOP 'J.NE.J'
C - FIRST RUN ONLY:
      IF(LAUF.NE.0)GOTO 1234
      LAUF=1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8227 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-TANAKE; =0, 1 OR 2!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3885)MOROUU
      GOTO 4885
      ENDIF
 3885 READ(*,'(I1)',ERR=8227,END=4576)MOROUU
      LMN=1
 4885 WRITE(7,2296)MOROUU
 2296 FORMAT(I1,' =MOROUU IN TANAKE')
      WRITE(*,1281)MOROUU
      WRITE(11,1281)MOROUU
 1281 FORMAT(' MOROUT-HERE-IN-TANAKE =',I2,'!!!!!!!!!')
      ENDIF
C
C**   THE FOLLOWING CALCULATION NEEDS TO BE DONE FOR THE VERY FIRST TIME
C     ONLY: THE POSSIBLE MICRO STATES ARE COMPUTED AND STORED!:
C
      KLWRTP=KLWERT+1
      FLWRTH=DBLE(KLWERT)+HALF
      LMAL2=2*KLWERT
      LMAL2P=LMAL2+1
      NRELMX=2*LMAL2P
      IF(NREL14.LT.NRELMX)STOP '.LT.14'
C
      NRELM1=NREL-1
C**   MAX. OF KASSUM (No. OF MICRO STATES) IS =252 =10 UPON 5 FOR D EL.,
C     FOR INSTANCE 10 UPON 3 AMOUNTS TO 120.
C     ALL KASSUM MICRO STATES FOR NREL ELECTRONS ARE COMPUTED AND STORED
C     NOW IN SUBROUTINE SCHEMA AND MSML( , , ) AND MQUER( , ) ARE READY!:
      CALL SCHEMA(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW,KLWER3)
      ALLOCATE (NROFNS(ND2002),NOFROX(ND2002,I6),EIVSHU(ND2002,I6)
     1,NROFNT(ND2002),NOFROY(ND2002,I7),EIVSHV(ND2002,I7,3)
     2,NROFN6(ND2002),NOFRO6(ND2002,J7),EIVSH6(ND2002,J7)
     3,NROFN5(ND2002),NOFRO5(ND2002,J7),EIVSH5(ND2002,J7)
     4,NROFN4(ND2002),NOFRO4(ND2002,J7),EIVSH4(ND2002,J7,2)
     5,NROFN3(ND2002),NOFRO3(ND2002,J7),EIVSH3(ND2002,J7,2)
     6,NROFN2(ND2002),NOFRO2(ND2002,J7),EIVSH2(ND2002,J7,3)
     7,NROFN1(ND2002),NOFRO1(ND2002,J7),EIVSH1(ND2002,J7,3))
      DO 3433 K=1,3
      DO 3432 J=1,I7
      DO 3431 I=1,ND2002
      EIVSHV(I,J,K)=ZERO
 3431 CONTINUE
 3432 CONTINUE
 3433 CONTINUE
      CALL ELELWW(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14,LMAL2
     1,I7,NROFNT,NOFROY,EIVSHV,FLWRTH,MSML,MSMLCO,MSMLCO(NREL14+1,1))
      CALL SPORCO(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,I6,NROFNS,NOFROX,EIVSHU,FLWRTH,MSML,MSMLCO)
      CALL CRYSTF(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14,LMAL2
     1,J7,NROFN1,NOFRO1,EIVSH1,FLWRTH,MSML,MSMLCO,MSMLCO(NREL14+1,1)
     2,NROFN2,NOFRO2,EIVSH2,NROFN3,NOFRO3,EIVSH3,NROFN4,NOFRO4,EIVSH4
     3,NROFN5,NOFRO5,EIVSH5,NROFN6,NOFRO6,EIVSH6)
      CALL MAGNF(
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLCO,ND2002,MSMLNW,KLWER3
     9,NOFROW,NROFNR,EIVSHT)
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL!)
      KASSUL=KASSUM-1
C
C**   FACTORS IN FRONT OF STEP-UP- AND STEP-DOWN-OPERATORS: (KLWERT=1, 2 OR =3)
      UPML(LMAL2P)=ZERO
      DOWNML(1)=ZERO
      KLKLPL=KLWERT*KLWRTP
      DO 1243 I=-KLWERT,KLWERT-1
      IP1=I+1
C**   2*(2+1)=6
      UPML(I+KLWRTP)=DSQRT(DBLE(KLKLPL-I*IP1))
      DOWNML(IP1+KLWRTP)=UPML(I+KLWRTP)
 1243 CONTINUE
      IF(MOROUU.NE.0)THEN
      WRITE(*,563)
      WRITE(11,563)
  563 FORMAT(' FACTORS'
     1,' TO STEP-UP- AND STEP-DOWN-OP., STARTING WITH ML=-KLWERT:')
      WRITE(*,'(5F6.3)')(UPML(I),I=1,LMAL2P)
      WRITE(*,'(5F6.3)')(DOWNML(I),I=1,LMAL2P)
      WRITE(11,'(5F6.3)')(UPML(I),I=1,LMAL2P)
      WRITE(11,'(5F6.3)')(DOWNML(I),I=1,LMAL2P)
C - RESULT FROM FILE 11, PARTLY INCLUDED HERE, IS (FOR D EL.!):
CSTEP-UP- AND STEP-DOWN-OP., STARTING WITH ML=-KLWERT:
C2.000 2.449 2.449 2.000 0.000
C0.000 2.000 2.449 2.449 2.000
C
      ENDIF
C**   ... AND FOR SPIN (ONLY C**):
C     UPMS(2)=ZERO
C     DOWNMS(1)=ZERO
C**   1/2*(1/2+1)=3/4; -1/2*1/2=-1/4; 3/4-(-1/4)=1
C     UPMS(1)=ONE
C**   DOWNMS(2)=ONE
C
C**   FITTING B-VALUES? (A HINT: CONCERNING "JAFAST" ONLY AND
C     ONLY "FIRST RUN", AND ONLY USED FOR A HINT IN OUTPUT!):
CKR      JAFITB=0 - REST: "DELETED"!
C
 1234 CONTINUE
C**   BELONGS TO "IF(LAUF.NE.0)GOTO 1234"
C
C**   FOR THE FOLLOWING CONDITIONS THERE IS NO CRYSTAL FIELD:
      JAMAT0=1
      DO 246 I=1,11
      IF(BWWW(I).NE.ZERO)JAMAT0=0
  246 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2461 I=21,IN24
      IF(BWWW(I).NE.ZERO)JAMAT0=0
 2461 CONTINUE
      DO 1250 I=30,IN25
      IF(BWWW(I).NE.ZERO)JAMAT0=0
 1250 CONTINUE
      ENDIF
C
      FKWERT=BWWW(12)
C
C**   NEW B-VALUES?:
      NEUEBS=0
      DO 115 I=1,11
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
  115 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2462 I=21,IN24
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
 2462 CONTINUE
      IF(IN25.GT.24.AND.NGROUP.EQ.20)THEN
C
      IF((IBWWW(25).EQ.1).OR.(BWWW(25).NE.ZERO))THEN
      IF(BWWW(25).NE.BWWOLD(25))NEUEBS=1
      BWWOLD(25)=BWWW(25)
      ENDIF
      IF((IBWWW(26).EQ.1).OR.(BWWW(26).NE.ZERO))THEN
      IF(JEQUIV.EQ.0)STOP 'JEQUIV'
      IF(BWWW(26).NE.BWWOLD(26))NEUEBS=1
      BWWOLD(26)=BWWW(26)
      FKSI=BWWW(26)
      ENDIF
      IF((IBWWW(27).EQ.1).OR.(BWWW(27).NE.ZERO))THEN
      IF(JEQUIV.EQ.0)STOP 'JEQUIV'
      IF(BWWW(27).NE.BWWOLD(27))NEUEBS=1
      BWWOLD(27)=BWWW(27)
      FINTEG(2)=BWWW(27)
      ENDIF
      IF((IBWWW(28).EQ.1).OR.(BWWW(28).NE.ZERO))THEN
      IF(JEQUIV.EQ.0)STOP 'JEQUIV'
      IF(BWWW(28).NE.BWWOLD(28))NEUEBS=1
      BWWOLD(28)=BWWW(28)
      FINTEG(3)=BWWW(28)
      ENDIF
      IF((IBWWW(29).EQ.1).OR.(BWWW(29).NE.ZERO))THEN
      IF(JEQUIV.EQ.0)STOP 'JEQUIV'
      IF(BWWW(29).NE.BWWOLD(29))NEUEBS=1
      BWWOLD(29)=BWWW(29)
      FINTEG(4)=BWWW(29)
      ENDIF
      DO 1249 I=30,IN25
      IF(BWWW(I).NE.BWWOLD(I))NEUEBS=1
      BWWOLD(I)=BWWW(I)
 1249 CONTINUE
C BBBBBBBBBB BJLTCF%%%% BBBBRZFFFB BBBBBBBBBB B
C
      ENDIF
      ENDIF
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      NEUEBS=1
      TESOLD=TESINT
      ENDIF
      IF(JTSTZX.EQ.1.AND.TESINT.NE.TESOLD)NEUEBS=1
C
      DO 113 I=1,11
      BWWOLD(I)=BWWW(I)
  113 CONTINUE
      IF(IN24.GT.20)THEN
      DO 2463 I=21,IN24
      BWWOLD(I)=BWWW(I)
 2463 CONTINUE
      ENDIF
      TESOLD=TESINT
C
      IF(MOROUU.NE.0.AND.NEUEBS.NE.0)THEN
      WRITE(*,6466)(BWWOLD(I),I=1,11)
      WRITE(11,6466)(BWWOLD(I),I=1,11)
 6466 FORMAT(' BWWOLD(1:11) =',5D12.4,/,6D12.4)
      IF(IN24.GT.20)THEN
      WRITE(*,6465)(BWWOLD(I),I=21,IN24)
      WRITE(11,6465)(BWWOLD(I),I=21,IN24)
 6465 FORMAT(' BWWOLD(21:IN24) =',4D12.4)
      ENDIF
      IF(IN25.GT.24)THEN
      WRITE(*,6467)(BWWOLD(I),I=25,29)
      WRITE(11,6467)(BWWOLD(I),I=25,29)
 6467 FORMAT(' BWWOLD(25:29) =',5D12.4)
      WRITE(*,6469)(BWWOLD(I),I=30,IN25)
      WRITE(11,6469)(BWWOLD(I),I=30,IN25)
 6469 FORMAT(' BWWOLD(30:IN25) =',5D12.4,7D12.4)
      ENDIF
      ENDIF
C
      TESLAC=TESINT*TESLCM
C**   TESLCM NEEDED, IF ONE WISHES TESLAS IN CM**(-1)
C
      IF(MOROUU.NE.0.AND.TESLAK.NE.TESLAS)THEN
      WRITE(*,6468)TESLAS,TESLAC
      WRITE(11,6468)TESLAS,TESLAC
 6468 FORMAT(' TESLAS,TESLAC=',2D14.6)
      TESLAK=TESLAS
      ENDIF
C
      IF(JAFAST.NE.0.OR.NEUEBS.EQ.0)THEN
C**   JAFAST=0 HERE FOR 1TH RUN (LAUF=1) AND NEUEBS=1!
CKR   "JAFAST=0" IN FILE konsho..!!!
C**   FOR THIS CONDITION NOTHING HAS TO BE (NEW) CALCULATED
C     (JEQUIV=1 DOES NOT MATTER!):
      GOTO 9999
      ENDIF
C
C**   FOR THE FOLLOWING CONDITIONS THERE HAVE NO EL.-EL. REPULSION
C     AND NO SPIN-ORBIT COUPLING TO BE (NEW) CALCULATED:
C06      IF(KLICK.NE.0.AND.JEQUIV.EQ.0)GOTO 4567
C**   JEQUIV=1 MEANS: EQUIVALENCE (EIVECV,FMIKR1,(FMIKR2!))!: JEQUIV IS 1!
C06      KLICK=1
C
      DO 2367 J=1,KASSUM
      DO 7140 I=1,KASSUM
      DBLMAT(I,J)=DCMPLX(ZERO,ZERO)
 7140 CONTINUE
 2367 CONTINUE
C
C**   FOR THE FOLLOWING CONDITIONS THERE HAS NO EL.-EL. REPULSION
C     TO BE CALCULATED:
C
      IF(NREL.EQ.1.OR.(FINTEG(2).EQ.ZERO
     1.AND.FINTEG(3).EQ.ZERO.AND.FINTEG(4).EQ.ZERO))THEN
      GOTO 2345
      ENDIF
C
C**   EL.-EL. REPULSION (NOT, IF THERE IS ONLY ONE EL.)!:
C
C**   THE NON-DIAG. ELEMENTS IN DBLMAT!:
      DO 5422 J=1,KASSUM
      DO 5423 I=1,NROFNT(J)
      CKPLUS=EIVSHV(J,I,1)
     1*FINTEG(2)+EIVSHV(J,I,2)*FINTEG(3)+EIVSHV(J,I,3)*FINTEG(4)
      DBLMAT(NOFROY(J,I),J)=DBLMAT(NOFROY(J,I),J)+DCMPLX(CKPLUS,ZERO)
 5423 CONTINUE
 5422 CONTINUE
C
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C
C     FOR THE NON-DIAGONAL ELEMENTS SEE: SUBROUTINE ELELWW!
C
C**   THE DIAGONAL ELEMENS:
C     (THE OPERATOR IS A DOUBLE SUM (DO 14 / DO 13) OF TWO-EL. OPERATORS!)
C     ALL KASSUM MICRO-STATES IN DO 15:
      DO 15 K=1,KASSUM
      DO 14 J=1,NRELM1
      JP1=J+1
      DO 13 I=JP1,NREL
      JAEXCH=0
      IF(MSML(K,2,I).EQ.MSML(K,2,J))JAEXCH=1
C     JAEXCH=1 FOR EL. OF LIKE SPINS!:
C**   THE EXCHANGE INTEGRALS OF EQ.(7) CONDON/SH. P.173,
C     WITH HELP OF EQ.(9) P.175:
      IF(JAEXCH.NE.0)THEN
      DO 19 KKK=2,LMAL2,2
      KF=1+KKK/2
      CKPLUS=-CKCOE(KKK,KLWERT,MSML(K,1,I),KLWERT,MSML(K,1,J))**2
     2*FINTEG(KF)
      DBLMAT(K,K)=DBLMAT(K,K)+DCMPLX(CKPLUS,ZERO)
   19 CONTINUE
      ENDIF
C**   AND THE DIRECT INTEGRALS - SEE ALSO EQ.(13) AND (14) P.176:
      DO 18 KKK=2,LMAL2,2
      KF=1+KKK/2
      CKPLUS=CKCOE(KKK,KLWERT,MSML(K,1,I),KLWERT,MSML(K,1,I))
     2*CKCOE(KKK,KLWERT,MSML(K,1,J),KLWERT,MSML(K,1,J))
     3*FINTEG(KF)
      DBLMAT(K,K)=DBLMAT(K,K)+DCMPLX(CKPLUS,ZERO)
   18 CONTINUE
   13 CONTINUE
   14 CONTINUE
   15 CONTINUE
C** END OF 1/RIJ!!!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2221)
      WRITE(11,2221)
 2221 FORMAT(
     1' MATRIX DBLMAT (1/RIJ-MATRIX); COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUU=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUU.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEM.!')
      ENDIF
      DO 1019 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
 2010 FORMAT(6(1X,D12.4))
 1019 CONTINUE
      ENDIF
C
 2345 CONTINUE
C**   BELONGS TO "NO EL.-EL. REPULSION"
C
C**   FOR THE FOLLOWING CONDITION THERE IS NO SPIN-ORBIT COUPLING:
      IF(FKSI.EQ.ZERO)GOTO 3456

C**   NOW SPIN-ORBIT COUPLING: SUBROUTINE SPORCO IS USED FOR THE NON-
C     DIAGONAL ELEMENTS!
C
C     THE DIAGONAL ELEMENTS (SUM OF(lz.sz)):
      FKSIH=HALF*FKSI
C
      DO 45 I=1,KASSUM
      SUM=ZERO
      DO 445 NR=1,NREL
      ML=MSML(I,1,NR)
      MS=MSML(I,2,NR)
C     (MS IS TWICE ms!)
      PROD=DBLE(ML*MS)
      SUM=SUM+PROD
  445 CONTINUE
C     THE RESULT OF SUCH A SUM OF ONE-EL. OPERATORS
C     (CONDON/SH.,P.59,EQ.(3)OF 7**3) AND/OR P.221,EQ.(1C)) IS:
      SUM=SUM*FKSIH
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(SUM,ZERO)
   45 CONTINUE
C
C**   AND THE NON-DIAGONAL ELEMENTS:
C
      DO 4522 J=1,KASSUM
      DO 4523 I=1,NROFNS(J)
      CKPLUS=EIVSHU(J,I)*FKSIH
      DBLMAT(NOFROX(J,I),J)=DBLMAT(NOFROX(J,I),J)+DCMPLX(CKPLUS,ZERO)
 4523 CONTINUE
 4522 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2223)
      WRITE(11,2223)
 2223 FORMAT(' MATRIX DBLMAT INCL.'
     1,' SPIN-ORB.-COUPL. MATRIX; COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 1003 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
 1003 CONTINUE
      ENDIF
C
 3456 CONTINUE
C**   BELONGS TO "IF(FKSI.EQ.ZERO)GOTO 3456"
C
C06 4567 CONTINUE
C**   BELONGS TO "IF(KLICK.NE.0.AND.JEQUIV.EQ.0)GOTO 4567"
C
C**   FOR THE FOLLOWING CONDITION THERE IS NO CRYSTAL FIELD:
      IF(JAMAT0.NE.0)THEN
      GOTO 5678
      ENDIF
C
C**   NOW FOLLOWING: THE CRYSTAL FIELD (SEE CONDON/SH. PP.169,170,171;
C     AND GRIFFITH P.196,EQ.(8.4))!:
C     SUBROUTINE CRYSTF IS USED FOR THE NON-DIAGONAL ELEMENTS!
C
C**   THE DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(9))!:
C
      DO 34 I=1,KASSUM
      DO 344 NR=1,NREL
      ML=MSML(I,1,NR)
      IF(BWWW(1).NE.ZERO)THEN
      CKPLUS=CKCOE(2,KLWERT,ML,KLWERT,ML)*BWWW(1)
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
      ENDIF
      IF(BWWW(3).NE.ZERO)THEN
      CKPLUS=CKCOE(4,KLWERT,ML,KLWERT,ML)*BWWW(3)
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
      ENDIF
      IF(BWWW(7).NE.ZERO)THEN
      CKPLUS=CKCOE(6,KLWERT,ML,KLWERT,ML)*BWWW(7)
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
      ENDIF
  344 CONTINUE
   34 CONTINUE
C
C**   AND THE NON-DIAGONAL ELEMENTS (SEE CONDON/SH. P.171,EQ.(8))!:
C
      DO 3114 J=1,KASSUL
C
C     NOFRO6 CORRESP. TO (IABS(ML1-ML2).EQ.(NK=6))! - IABS MEANS: STEP UP
C     AND(!) STEP DOWN OPERATOR(S)!
C-B66&B66':
      IF(BWWW(11).NE.ZERO.OR.BWWW(41).NE.ZERO)THEN
      DO 3130 I=1,NROFN6(J)
      FMIKRK=EIVSH6(J,I)
      FMIKRW=FMIKRK*BWWW(11)
      DBLMAT(NOFRO6(J,I),J)=DBLMAT(NOFRO6(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(41)
      DBLMAT(NOFRO6(J,I),J)=DBLMAT(NOFRO6(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3130 CONTINUE
      ENDIF
C-B65&B65':
      IF(BWWW(IN24).NE.ZERO.OR.BWWW(40).NE.ZERO)THEN
      DO 3131 I=1,NROFN5(J)
      FMIKRK=EIVSH5(J,I)
      FMIKRW=FMIKRK*BWWW(IN24)
      DBLMAT(NOFRO5(J,I),J)=DBLMAT(NOFRO5(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(40)
      DBLMAT(NOFRO5(J,I),J)=DBLMAT(NOFRO5(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3131 CONTINUE
      ENDIF
C-B44&B44':
      IF(BWWW(6).NE.ZERO.OR.BWWW(35).NE.ZERO)THEN
      DO 3132 I=1,NROFN4(J)
      FMIKRK=EIVSH4(J,I,1)
      FMIKRW=FMIKRK*BWWW(6)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(FMIKRW,ZERO)
C**   BECAUSE OF (IABS(ML1-ML2).EQ.4) CORRESP. TO KLWERT AND KLWERT-4,
C     CKCOE IS SYMM., I.E. (ML1-ML2) CORRESP. TO (ML2-ML1)!
      FMIKRW=-FMIKRK*BWWW(35)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3132 CONTINUE
      ENDIF
C-B64&B64':
      IF(BWWW(10).NE.ZERO.OR.BWWW(39).NE.ZERO)THEN
      DO 3133 I=1,NROFN4(J)
      FMIKRK=EIVSH4(J,I,2)
      FMIKRW=FMIKRK*BWWW(10)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(39)
      DBLMAT(NOFRO4(J,I),J)=DBLMAT(NOFRO4(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3133 CONTINUE
      ENDIF
C-B43&B43':
      IF(BWWW(5).NE.ZERO.OR.BWWW(34).NE.ZERO)THEN
      DO 3134 I=1,NROFN3(J)
C**   CKCOE(4,L,2,L,-1) = CKCOE(4,L,-2,L,1) = -SQRT(35/441)
C  (BUT:) CKCOE(4,L,-1,L,2) = CKCOE(4,L,1,L,-2) = +SQRT(35/441)
C**   <2/C3/-1> = CKCOE(4,L,2,L,-1) = -<-1/C-3/2>
C     <1/C3/-2> = CKCOE(4,L,1,L,-2) = -CKCOE(4,L,2,L,-1)
C
C**   BECAUSE THE DIFFERENCE OF KLWERT AND KLWERT-3 IS 3, CKCOE IS NOT
C     SYMM., I.E. (ML1-ML2) CORRESP. NOT TO (ML2-ML1) (FACTOR OF MINUS 1)!
C**   THE OPERATOR IS (-C3+C-3); ONLY THE PART -C3 OR THE PART +C-3 OF IT IS
C     OPERATING AT THE SAME TIME (C3 MEANS STEP UP AND C-3 STEP DOWN OP. -
C     BECAUSE MNUR4 <=> J AND MNUR4C <=> I, THE OPERATOR OPERATING HERE
C     CORRESPONDS TO MNUR4(1,2).GT./.LT.MNUR4C(1,2): .GT. MEANS "STEP UP"!
      FMIKRK=EIVSH3(J,I,1)
      FMIKRW=FMIKRK*BWWW(5)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(34)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(ZERO,FMIKRW)
C**   IT HAS BEEN FOUND, THAT ONLY THE STEP UP OPERATOR (WITH MINUS SIGN
C     IN FRONT OF IT!) WORKS HERE!
 3134 CONTINUE
      ENDIF
C-B63&B63':
      IF(BWWW(9).NE.ZERO.OR.BWWW(38).NE.ZERO)THEN
      DO 3135 I=1,NROFN3(J)
      FMIKRK=EIVSH3(J,I,2)
      FMIKRW=FMIKRK*BWWW(9)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(38)
      DBLMAT(NOFRO3(J,I),J)=DBLMAT(NOFRO3(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3135 CONTINUE
      ENDIF
C-B22&B22':
      IF((BWWW(2).NE.ZERO).OR.BWWW(31).NE.ZERO)THEN
      DO 3136 I=1,NROFN2(J)
      FMIKRK=EIVSH2(J,I,1)
      FMIKRW=FMIKRK*BWWW(2)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(31)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3136 CONTINUE
      ENDIF
C-B42&B42':
      IF(BWWW(4).NE.ZERO.OR.BWWW(33).NE.ZERO)THEN
      DO 3137 I=1,NROFN2(J)
      FMIKRK=EIVSH2(J,I,2)
      FMIKRW=FMIKRK*BWWW(4)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(33)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3137 CONTINUE
      ENDIF
C-B62&B62':
      IF(BWWW(8).NE.ZERO.OR.BWWW(37).NE.ZERO)THEN
      DO 3138 I=1,NROFN2(J)
      FMIKRK=EIVSH2(J,I,3)
      FMIKRW=FMIKRK*BWWW(8)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(37)
      DBLMAT(NOFRO2(J,I),J)=DBLMAT(NOFRO2(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3138 CONTINUE
      ENDIF
      IF(IN24.GT.20)THEN
C
C-B21&B21':
      IF(BWWW(IN24-3).NE.ZERO.OR.BWWW(30).NE.ZERO)THEN
      DO 3139 I=1,NROFN1(J)
      FMIKRK=EIVSH1(J,I,1)
      FMIKRW=FMIKRK*BWWW(IN24-3)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(30)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3139 CONTINUE
      ENDIF
C-B41&B41':
      IF(BWWW(IN24-2).NE.ZERO.OR.BWWW(32).NE.ZERO)THEN
      DO 3140 I=1,NROFN1(J)
      FMIKRK=EIVSH1(J,I,2)
      FMIKRW=FMIKRK*BWWW(IN24-2)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(32)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3140 CONTINUE
      ENDIF
C-B61&B61':
      IF(BWWW(IN24-1).NE.ZERO.OR.BWWW(36).NE.ZERO)THEN
      DO 3141 I=1,NROFN1(J)
      FMIKRK=EIVSH1(J,I,3)
      FMIKRW=FMIKRK*BWWW(IN24-1)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(FMIKRW,ZERO)
      FMIKRW=-FMIKRK*BWWW(36)
      DBLMAT(NOFRO1(J,I),J)=DBLMAT(NOFRO1(J,I),J)+DCMPLX(ZERO,FMIKRW)
 3141 CONTINUE
      ENDIF
C
      ENDIF
 3114 CONTINUE
C
 5678 CONTINUE
C**   BELONGS TO "NO (NEW) CRYSTAL FIELD"
C
C  IF(JTSTZX.NE.0)THEN - NOW HERE FOR .EQ.1 ONLY!
      IF(JTSTZX.EQ.1)THEN
C NOW PLUS MAGNETIC FIELD FOR JTSTZX (Z- AND/OR X- AND/OR Y-DIRECTION)!:
      DO 3509 I=1,KASSUM
      CKPLUS=TESLAC*DIRECZ(1)*(DBLE(MQUER(I,1))+DBLE(MQUER(I,2)))
      DBLMAT(I,I)=DBLMAT(I,I)+DCMPLX(CKPLUS,ZERO)
 3509 CONTINUE
C
      TOADD1=TESLAC*DIRECZ(2)
      DO 1446 IE=1,KASSUM
C**   ATTENTION: IE<=>"ALL MICRO STATES" - ONLY STEP-DOWN OP.!:
      DO 2446 IEI=1,NROFNR(IE)
C     IEI<=>NR OF MICRO STATES (MAY BE 0) TO CONNECT WITH!
C     TOADD2=ZERO
C     NROFRW=0
      IF(NOFROW(IE,IEI).LT.0)THEN
C**   .LT.0<=>"SPIN"! /NOFROW/<=>NR OF ROW TO CONNECT WITH!
C     EIVECQ=ONE
      NROFRW=-NOFROW(IE,IEI)
      TOADD2=TOADD1
      ELSE IF(NOFROW(IE,IEI).GT.0)THEN
C**   .GT.0<=>"ORBITAL"!
      EIVECQ=EIVSHT(IE,IEI)*HALF
      NROFRW=NOFROW(IE,IEI)
      TOADD2=TOADD1*EIVECQ
      ENDIF
      DBLMAT(IE,NROFRW)=DBLMAT(IE,NROFRW)+DCMPLX(TOADD2,ZERO)
      DBLMAT(NROFRW,IE)=DBLMAT(NROFRW,IE)+DCMPLX(TOADD2,ZERO)
 2446 CONTINUE
 1446 CONTINUE
C
      TOADD3=TESLAC*DIRECZ(3)
      DO 1886 IE=1,KASSUM
C**   ATTENTION: IE<=>"ALL MICRO STATES" - ONLY STEP-DOWN OP.!:
      DO 2886 IEI=1,NROFNR(IE)
C     IEI<=>NR OF MICRO STATES (MAY BE 0) TO CONNECT WITH!
C     TOADD4=ZERO
C     NROFRW=0
      IF(NOFROW(IE,IEI).LT.0)THEN
C**   .LT.0<=>"SPIN"! /NOFROW/<=>NR OF ROW TO CONNECT WITH!
C     EIVECQ=ONE
      NROFRW=-NOFROW(IE,IEI)
      TOADD4=TOADD3
      ELSE IF(NOFROW(IE,IEI).GT.0)THEN
C**   .GT.0<=>"ORBITAL"!
      EIVECQ=EIVSHT(IE,IEI)*HALF
      NROFRW=NOFROW(IE,IEI)
      TOADD4=TOADD3*EIVECQ
      ENDIF
      DBLMAT(IE,NROFRW)=DBLMAT(IE,NROFRW)-DCMPLX(ZERO,TOADD4)
      DBLMAT(NROFRW,IE)=DBLMAT(NROFRW,IE)+DCMPLX(ZERO,TOADD4)
 2886 CONTINUE
 1886 CONTINUE
C
      ENDIF
C ENDIF BELONGS TO "IF(JTSTZX.NE.0)THEN - NOW HERE FOR .EQ.1 ONLY!"!
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2222)
      WRITE(11,2222)
 2222 FORMAT(' MATRIX'
     1,' DBLMAT (REAL PART OF ..., INCL. LIG.-FLD. MATRIX);',/
     1,' COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 1002 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
 1002 CONTINUE
      ENDIF
C
C**   TO THE END: ADDITION OF THE (HALF-)MATRICES
C     AND DIAGONALISATION OF THE RESULTING MATRIX!:
C
C**   FOR THE FOLLOWING NO ADDITION AND NO NEW DIAGONALISATION,
C     BECAUSE THERE ARE NO NEW MATRICES:
C06      IF(KLICK.NE.0.AND.JEQUIV.EQ.0
C06     1.AND.KLICK2.NE.0.AND.NEUEBS.EQ.0)GOTO 9999
C
      DO 2354 J=1,KASSUM
      IF(CDABS(DBLMAT(J,J)).LT.PARZER)DBLMAT(J,J)=DCMPLX(ZERO,ZERO)
      JP1=J+1
      DO 7144 I=JP1,KASSUM
      IF(CDABS(DBLMAT(I,J)).LT.PARZER)DBLMAT(I,J)=DCMPLX(ZERO,ZERO)
 7144 CONTINUE
 2354 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2001)
      WRITE(11,2001)
 2001 FORMAT(/,1X,'REAL PART OF MATRIX TO BE DIAGONALIZED:',/
     1,' COLUMNS IN THE FORM OF ROWS, STARTING WITH DIAG. ELEM.',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
      ENDIF
      DO 200 J=1,KASI
      WRITE(11,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DBLE(DBLMAT(I,J)),I=J,KASSUM)
  200 CONTINUE
      WRITE(*,2100)
      WRITE(11,2100)
 2100 FORMAT(/,1X,' IMAG. PART OF MATRIX TO BE DIAGONALIZED:',/
     1,' COLUMNS IN THE FORM OF ROWS, STARTING WITH DIAG. ELEM.',/)
      DO 2200 J=1,KASI
      WRITE(11,2010)(DIMAG(DBLMAT(I,J)),I=J,KASSUM)
      WRITE(*,2010)(DIMAG(DBLMAT(I,J)),I=J,KASSUM)
 2200 CONTINUE
      ENDIF
C
C**   CALL THE DIAGONALISATION ROUTINE (DIRECTLY OR BLOCK-OUT AT FIRST):
C
      IF(KLILOC.EQ.0)THEN
      KLILOC=1
      JABLOC=0
      IF(KLWERT.EQ.3)THEN
      JABLOC=1
      IF(MORTEX.GE.0)THEN
      WRITE(*,9992)
      WRITE(11,9992)
 9992 FORMAT(/,' L VALUE=3,'
     1,' THEREFORE BLOC(O)UT WILL ALWAYS BE CALLED (IF NOT TEST)!')
      ENDIF
      ENDIF
      IF(JATEST.NE.0.OR.MOROUT.NE.0)THEN
      WRITE(*,2999)
      WRITE(11,2999)
 2999 FORMAT(' ONE GETS MJ VALUES IN SUBROUTINE BLOCUT: THESE, IN THE',/
     1,' FORM "2*MJ MODULO 2*AXIS-No.", MEAN SYMMETRY QUANTUM NUMBERS!')
      WRITE(*,2899)
      WRITE(11,2899)
 2899 FORMAT(' ALSO OCCUP. OF SPINORBITALS ARE CALC. IN SUBR. BLOCUT!')
      WRITE(11,3000)JABLOC
 8228 WRITE(*,3000)JABLOC
C 3000 FORMAT(' INPUT IN I1 YES/NO(0) "BLOCK-OUT" ("ALWAYS":',I2,')!')
 3000 FORMAT(' INPUT IN I1 YES/NO(0) "BLOCK-OUT" ("STANDARD":',I2,')!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3886)JABLOC
      GOTO 4886
      ENDIF
 3886 READ(*,'(I1)',ERR=8228,END=4576)JABLOC
      LMN=1
C 4886 JABLOC=0
 4886 CONTINUE
      WRITE(7,3001)JABLOC
 3001 FORMAT(I1,' = JABLOC(KING OUT)')
      WRITE(*,3003)JABLOC
      WRITE(11,3003)JABLOC
 3003 FORMAT(' BLOCKING OUT TAKES PLACE YES/NO(0):',I2,'!!!!!!!!!')
      ENDIF
      ENDIF
C
      IF(JABLOC.NE.0)THEN
C**   THE WHOLE(!) MATRIX IS NEEDED FOR SUBROUTINE BLOCUT!:
C
      DO 213 J=2,KASSUM
      JM1=J-1
      DO 7145 I=1,JM1
      DBLMAT(I,J)=DCONJG(DBLMAT(J,I))
 7145 CONTINUE
  213 CONTINUE
C     WRITE(11,'(E16.8)')((DBLMAT(I,J),I=1,KASSUM),J=1,KASSUM)
C
C**   PARR MUST NOT BE PARAMETER!:
      PARR=PARWUQ
      CALL BLOCUT(0,ND2002,KASSUM,NDMAL3,PARR,KLWERT,NRELMX,MSMLNW
     1,DBLMAT,LMAT,EIVECV,DUMMY,EIWERT,MQUER,MQUERR,BLOMAT,NGROUP,MSMLNS
     2,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ,MSML,NREL14,NREL,I10
     3,KLWER3)
C
      ELSE IF(JABLOC.EQ.0)THEN
C
      CALL ZHPEVK(1,DBLMAT,EIWERT,EIVECV,ND2002,KASSUM)
C
      ENDIF
C**   COEFF., WHICH ARE LOWER THAN PARZER IN ABS. VALUE, NOW BECOME ZERO:
      DO 2199 J=1,KASSUM
      DO 2198 I=1,KASSUM
      IF(CDABS(EIVECV(I,J)).LT.PARZER)EIVECV(I,J)=DCMPLX(ZERO,ZERO)
 2198 CONTINUE
 2199 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' MATRIX OF REAL PART OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(MOROUU.GT.1)KASI=KASSUM
      IF(KASI.EQ.1)WRITE(11,1012)
 1012 FORMAT(' BECAUSE MOROUU'
     1,'=1, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      DO 101 J=1,KASI
      WRITE(11,2010)(DBLE(EIVECV(I,J)),I=1,KASSUM)
      WRITE(*,2010)(DBLE(EIVECV(I,J)),I=1,KASSUM)
  101 CONTINUE
      ENDIF
C
C**   ALWAYS SHIFT!:
C
      EIWER0=EIWERT(1)
      DO 4447 I=1,KASSUM
      EIWERT(I)=EIWERT(I)-EIWER0
 4447 CONTINUE
C
      IGR1=KASSUM
      IGRPL=IGR1+1
      DIFLOW=ZERO
      DO 4448 I=2,KASSUM
      EIWER1=DABS(EIWERT(I))
      IF(EIWER1.GT.PARWUC)THEN
      DIFLOW=EIWERT(I)
      IGR1=I-1
C**   IGR=I
      IGRPL=I+1
      GOTO 4449
      ENDIF
 4448 CONTINUE
 4449 CONTINUE
C
      IGR2=KASSUM
      DO 4450 I=IGRPL,KASSUM
      EIWER1=DABS(EIWERT(I)-DIFLOW)
      IF(EIWER1.GT.PARWUC)THEN
      IGR2=I-1
      GOTO 4451
      ENDIF
 4450 CONTINUE
 4451 IGR2=IGR2-IGR1
C
      IF(LESS.NE.0.OR.(KLICK3.NE.0.AND.MOROUU.EQ.0))GOTO 2128
      KLICK3=1
      WRITE(*,2217)EIWER0
 2217 FORMAT(
     1/,' < (ALL+1) EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',D20.12
     1,/,' ... BECOMES:')
      WRITE(11,2217)EIWER0
      KASI=KASSUM
      IF(KASI.GT.99)KASI=99
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
      IF(KASI.NE.KASSUM)THEN
      WRITE(*,2216)EIWERT(KASSUM)
      WRITE(11,2216)EIWERT(KASSUM)
 2216 FORMAT(' ... AND THE LAST EIGENVALUE:',D12.4)
      ENDIF
 2128 CONTINUE
C
CKR      IF(JATEST.NE.0.AND.KLICK4.EQ.0)THEN
CKR      IF(JANORS.NE.0)CALL RUSSEL(NREL,KLWERT,ND2002,DBLMAT,BLOMAT,DUMMY
CKR 8323 FORMAT(' "CONDOR": JANORS ALWAYS => NO(0)!')
C**   NO RETURN FROM RUSSEL! 
CKR      ENDIF
C
 9999 CONTINUE
C**   BELONGS TO "IF(JAFAST.NE.0.OR.NEUEBS.EQ.0)GOTO 9999" - AND/OR:
C     BELONGS TO "NO NEW MATRICES (JEQUIV.EQ.0.AND.NEUEBS.EQ.0)"
      CALL REDUCT(NGROUP,NOFORM,
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT, THE SUBROUTINE CALLED HERE:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV,BSTART
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR)
C
C**   RETURNS TO SUSC!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND TANAKE
      END
      SUBROUTINE BLOCUT(JAWIGN,ND2002,JDIM,NDMAL3,PARR,KLWERT,NRELMX
C**   CALLED BY TANABE OR BY ECKART, IF THE DIAGONALIZATION ROUTINE,
C     WHICH IS CALLED HERE, IS NOT CALLED DIRECTLY!
     1,MSMLNW,DBLMAT,LMAT,EIVECV,DUMMY,WERTZZ,MQUER,MQUERR,BLOMAT,NGROUP
     2,MSMLNS,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ,MSML,NREL14,NREL
     3,I10,KLWER3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
  321 FORMAT(
     1' SUBROUTINE to BLOCk oUT, if possible, a hermitian matrix DBLMAT
     1',/,' with elements abs. greater than PARR and ZERO else.')
C     PARR may be read in, if "JATEST" is set! Firstly a block corresponding
C     to a null-matrix is looked for, and if one has been found, NULSPA.EQV.
C     .TRUE. is set! BLOCKDimension(1) becomes the DIMENSION of a null-matrix
C     found.
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,HALF=0.5D0,PI=3.1415926D0
     1,PIV=PI/4.0D0,HALFM=-0.5D0)
C
      COMPLEX*16
     1DBLMAT(ND2002,ND2002),EIVECV(ND2002,ND2002),BLOMAT(ND2002,*),CTEMP
      DIMENSION DUMMY(NDMAL3),WNRW(*)
     1,WERTZZ(ND2002),BESETZ(NREL14,I10),EIOUT(4)
     2,RBMM55(5,5),TRRL55(5,5)
      INTEGER REIHNF(ND2002),BLOCKD(ND2002),BLOCKS(0:ND2002),IIEI(4)
     1,MQUER(ND2002,3),NFOLGE(4),JJEI(4),MSMLNS(2,-KLWER3:KLWER3)
     2,MSML(ND2002,2,NREL14),MQUERR(200),MSMLNW(ND2002,2,-KLWER3:KLWER3)
     3,NDIGIT(10),MWM(8,2),MWMSML(252,8)
      INTEGER MSMLN1(14)
      COMPLEX*16 RAMM55(5),RGMM55(5),CPLXIJ(5,5),CPXROW(5),CEMPEI,COMSUM
C**   The matrix is mapped onto LOGICAL LMAT, and a element becomes
C     .TRUE., if the element of DBLMAT is abs. greater than PARR.
C     The columns which are done are noticed in SPA(lten)ERL(edigt).
C
C     The sequence of the columns of DBLMAT resulting after blocking
C     out is noticed in REIHNF(LAUFNR), and this is the first result
C     needed later on.
C
C**   BLOCKDimension(1:NBLOCK) contains the dimensions of the NBLOCK
C     different blocks. BLOCKSum(0)=0 and BLOCKSum(1:NBLOCK) is the sum
C     of these dimensions up to the block considered, i.e. BLOCKSum(1)=
C     BLOCKDimension(1) e.g. BLOCKDimension(1) becomes the DIMENSION of
C     the first non-null block, if a null-matrix has not been found.
C
C     The result is the following: BLOckMAT, which will be updated in each
C     DO LOOP 1...NBLOCK with help of REIHNF, contains one of the blocks
C     (excluded the case of a null-matrix) of DBLMAT, and BLOMAT will be
C     diagonalized instead of DBLMAT! There may be one to JDIM blocks:
C     One means "no blocking at all" and JDIM means JDIM 1*1-"blocks"!
C
      LOGICAL LMAT(ND2002,*),NULSPA,SPAERL(ND2002)
C**   EQUIVALENCE (EIVECV,LMAT)
      SAVE
      DATA LAUF0,LAUF1,LAUF2,LAUF3,LAUF4,LAUF5,LAUF50,LAUF51,LAUF49,KLIK
     1/0,0,0,0,0,0,0,0,0,0/
      DATA MOROUZ,MOROUU,MOROUV,MOROUW,MOROUX,MOROUY/0,0,0,0,0,0/
C**   2nd PART OF UNITARY MATRIX R**(J)=R**(2): r**(J)(BETA) PART
C     = RBMM55(5,5) (B<=>BETA) FOR COS(BETA)=DSQRT(3)/3 (BETA MUST BE POS.!)
      DATA RBMM55/
C**   r**(J)(BETA):
     10.622008D0,-0.643951D0,0.408248D0,-0.172546D0,0.044658D0
     2,0.643951D0,0.122008D0,-0.577350D0,0.455342D0,-0.172546D0
     3,0.408248D0,0.577350D0,0.000000D0,-0.577350D0,0.408248D0
     4,0.172546D0,0.455342D0,0.577350D0,0.122008D0,-0.643951D0
     5,0.044658D0,0.172546D0,0.408248D0,0.643951D0,0.622008D0/
C**   COMLEX**16 RAMM55(5) (A<=>ALPHA) AND RGMM55(5) (G<=>GAMMA):
C     2 PARTS OF UNITARY MATRIX R**(J)=R**(2), ALPHA PART
C     (ALPHA=PI/4.), AND GAMMA PART (GAMMA=0.):
C     COMPLEX R**(2)(2,1) = RAMM55(2)*RBMM55(2,1)*RGMM55(1)
C**   TRRL55(5,5): MATRIX TO TRansform a basis of 5 complex basis orbitals to
C     a basis of 5 ReaL or purely imaginary basis orbitals (d orbitals)
C     (to be multiplied by SQRT(2) except TRRL55(3,3)):
      DATA TRRL55/
C**   AN UNITARY AND SYMMETRICAL MATRIX:
C     THE MATRIX AND THE RECIPROCAL MATRIX ARE IDENTICAL!
     1HALF,ZERO,ZERO,ZERO,HALF
     2,ZERO,HALFM,ZERO,HALF,ZERO
     3,ZERO,ZERO,ONE,ZERO,ZERO
     4,ZERO,HALF,ZERO,HALF,ZERO
     5,HALF,ZERO,ZERO,ZERO,HALFM/
      DATA SINB2Q,COSB2Q/0.21132487D0,0.78867513D0/
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,19)
C**   KASSUM=JDIM
      IF(LAUF1.EQ.0)THEN
      LAUF1=1
      IF(MORTEX.GT.0)THEN
      WRITE(*,321)
      WRITE(11,321)
C**   FORMAT SEE ABOVE!
      ENDIF
      WURZ2=DSQRT(TWO)
      DO 8922 J=1,5
      DO 8921 I=1,5
      TRRL55(I,J)=TRRL55(I,J)*WURZ2
      CPLXIJ(I,J)=DCMPLX(TRRL55(I,J),ZERO)
 8921 CONTINUE
 8922 CONTINUE
      TRRL55(3,3)=ONE
      CPLXIJ(3,3)=DCMPLX(ONE,ZERO)
C
      IF(PARR.EQ.ZERO.OR.JATEST.NE.0)THEN
      WRITE(11,1)PARR
 8229 WRITE(*,1)PARR
    1 FORMAT(' PARR=',D10.2
     1,/,' PARR MAY BE CHANGED: INPUT IN D6.1 (.LT.0.: => 0.)')
      IF(LMN.EQ.0)THEN
      READ(77,'(D6.1)',ERR=5588,END=3890)PAR
      GOTO 4890
      ENDIF
 3890 READ(*,'(D6.1)',ERR=8229,END=4576)PAR
      LMN=1
 4890 IF(PAR.NE.ZERO)PARR=PAR
      IF(PARR.LT.ZERO)PARR=ZERO
      WRITE(*,61)PARR
      WRITE(11,61)PARR
      WRITE(7,2250)PARR
 2250 FORMAT(D6.1,' =PARR(in BLOCUT)')
   61 FORMAT(' IN BLOCUT: PARR-NEW=',D6.1,'!!!!!!!!!')
      ENDIF
      ENDIF
C
      NULSPA=.FALSE.
      LAUFNR=0
      DO 20 I=1,ND2002
      BLOCKD(I)=0
   20 CONTINUE
      DO 12 J=1,JDIM
      SPAERL(J)=.TRUE.
      DO 11 I=1,JDIM
      LMAT(I,J)=.FALSE.
      IF(CDABS(DBLMAT(I,J)).GE.PARR)THEN
      LMAT(I,J)=.TRUE.
      SPAERL(J)=.FALSE.
      ENDIF
   11 CONTINUE
      IF(SPAERL(J).EQV..TRUE.)THEN
      LAUFNR=LAUFNR+1
      REIHNF(LAUFNR)=J
      BLOCKD(1)=LAUFNR
      ENDIF
   12 CONTINUE
      IF(BLOCKD(1).GT.0)NULSPA=.TRUE.
C
      IF(MOROUT.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,128)
 8230 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0 OR =1!',/
     2,' ... OR =8 FOR "NO MORE OUTPUT FURTHERMORE HERE IN BLOCUT"!',/,
     3' (=0 FOR OUTPUT AT THE END OF BLOCUT ONLY: OCCUP.OF SPINORB.)',/,
     4' (=8 CANCELS OUTPUT AT THE END OF BLOCUT AND IN FURTHER ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3891)MOROUZ
      GOTO 4891
      ENDIF
 3891 READ(*,'(I1)',ERR=8230,END=4576)MOROUZ
      LMN=1
 4891 WRITE(*,2215)MOROUZ
      WRITE(11,2215)MOROUZ
      WRITE(7,2251)MOROUZ
 2251 FORMAT(I1,' =MOROUZ IN BLOCUT/0')
 2215 FORMAT(I2,' =MOROUZ IN BLOCUT/0!!!!!!!!!')
      ENDIF
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1288)
 8203 WRITE(*,1288)
 1288 FORMAT(
     1' INPUT 0, 1, 2 OR 3: VALID (ONLY) FOR THE FIRST PART OF BLOCUT!',
     2/,' (I.E. LOGICAL LMAT AND "REIHNF"=ORDERING OF COLUMNS OF LMAT)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3892)MOROUU
      GOTO 4892
      ENDIF
 3892 READ(*,'(I1)',ERR=8203,END=4576)MOROUU
      LMN=1
 4892 WRITE(*,2225)MOROUU
      WRITE(11,2225)MOROUU
      WRITE(7,2252)MOROUU
 2252 FORMAT(I1,' =MOROUU IN BLOCUT/1')
 2225 FORMAT(I2,' =MOROUU IN BLOCUT/1!!!!!!!!!')
      ENDIF
      IF(MOROUU.NE.0)THEN
      WRITE(*,129)
      WRITE(11,129)
  129 FORMAT(' OUTPUT OF (LMAT(I,J),J=1,JDIM), I=1 FOR MOROUT=1 OR =2')
      ENDIF
      IF(MOROUU.EQ.1.OR.MOROUU.EQ.2)THEN
      WRITE(*,'(1X,81L1)')(LMAT(1,J),J=1,JDIM)
      WRITE(11,'(1X,81L1)')(LMAT(1,J),J=1,JDIM)
      ELSE IF(MOROUU.GT.2)THEN
      DO 377 I=1,JDIM
      WRITE(*,'(1X,81L1)')(LMAT(I,J),J=1,JDIM)
      WRITE(11,'(1X,81L1)')(LMAT(I,J),J=1,JDIM)
  377 CONTINUE
      ENDIF
C
      DO 1112 I=1,JDIM
      LMAT(I,I)=.TRUE.
C**   The statement before is absolutely necessary!
 1112 CONTINUE
C
C**   Now starting with first or second block, respectively!:
      NBLOCK=0
      IF(NULSPA.EQV..TRUE.)NBLOCK=1
C**   NBLOCK=NBLOCK+1 in the DO-LOOP!
C**   There is a maximum of JDIM blocks, and these would be 1*1-"blocks"!
      DO 123 J=1,JDIM
      IF(SPAERL(J).EQV..TRUE.)GOTO 123
      NBLOCK=NBLOCK+1
      LAUFNR=LAUFNR+1
      SPAERL(J)=.TRUE.
      REIHNF(LAUFNR)=J
      BLOCKD(NBLOCK)=1
C**   Now an infinite loop ("122 CONTINUE"), until ISTRND.GT.JDIM:
      ISTRND=0
      JJ=J
  122 CONTINUE
      JJ=JJ+1
      IF(JJ.GT.JDIM)JJ=JJ-JDIM
      ISTRND=ISTRND+1
      IF(ISTRND.GT.JDIM)GOTO 123
C**   ISTRND.GT.JDIM is now true!
      IF(JJ.EQ.J)GOTO 122
      IF(SPAERL(JJ).EQV..TRUE.)GOTO 122
C**   Now the JJth column is compared with the Jth column:
      DO 121 I=1,JDIM
      IF((LMAT(I,JJ).EQV..TRUE.).AND.(LMAT(I,J).EQV..TRUE.))THEN
C**   Updating now!:
      DO 120 II=1,JDIM
      IF(LMAT(II,JJ).EQV..TRUE.)LMAT(II,J)=.TRUE.
  120 CONTINUE
      SPAERL(JJ)=.TRUE.
      ISTRND=0
      LAUFNR=LAUFNR+1
      REIHNF(LAUFNR)=JJ
      BLOCKD(NBLOCK)=BLOCKD(NBLOCK)+1
      GOTO 122
      ENDIF
  121 CONTINUE
      GOTO 122
  123 CONTINUE
C
      BLOCKS(0)=0
      BLOCKS(1)=BLOCKD(1)
      DO 1982 I=2,NBLOCK
      IM1=I-1
      BLOCKS(I)=BLOCKS(IM1)+BLOCKD(I)
 1982 CONTINUE
C
      IF(MOROUU.GE.1)THEN
      WRITE(*,130)
      WRITE(11,130)
  130 FORMAT(' OUTPUT OF (REIHNF(J),J=1,JDIM):')
      WRITE(*,'(1X,20I4)')(REIHNF(J),J=1,JDIM)
      WRITE(11,'(1X,20I4)')(REIHNF(J),J=1,JDIM)
      ENDIF
C
C**   NOW OUTPUT (ALWAYS, BUT ONLY FIRST RUN):
C
      IF(LAUF0.EQ.0.AND.MORTEX.GE.0)THEN
      LAUF0=1
      WRITE(*,333)NULSPA
      WRITE(11,333)NULSPA
  333 FORMAT(' NULL-ROW/ -COLUMN IS THERE (YES=T/NO=F):',L3)
      WRITE(*,338)NBLOCK
      WRITE(11,338)NBLOCK
  338 FORMAT(' NUMBER OF BLOCKS AND DIMENSIONS OF THESE=',I8)
C
      WRITE(*,'(10I8)')(BLOCKD(N),N=1,NBLOCK)
      WRITE(11,'(10I8)')(BLOCKD(N),N=1,NBLOCK)
      ENDIF
C
C**   NOW FIRSTLY BLOMAT INCL. OUTPUT (OUTPUT ONLY, IF MOROUT.NE.0
C     AND MOROUZ.NE.0.AND.MOROUZ.NE.8!):
C
      IEINZW=1
      IF(NULSPA.EQV..TRUE.)IEINZW=2
C**   LOCKDN=BLOCKD(1)
C
C**   BREAK OF ALL IF'S!
C
      DO 99 J=1,JDIM
      DO 88 I=1,JDIM
      BLOMAT(I,J)=DBLMAT(REIHNF(I),REIHNF(J))
   88 CONTINUE
   99 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      DO 1110 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      IF(N.LE.5)THEN
      WRITE(11,127)N
 8200 WRITE(*,127)N
  127 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0, 1 OR 2!'
     2,/,' VALID FOR THE SECOND PART OF BLOCUT, I.E. BLOMAT IN DO 1110'
     3,' N=',/,' IEINZW,NBLOCK WITH N =',I3,' (OR N>5 TOO, IF N=5)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3893)MOROUV
      GOTO 4893
      ENDIF
 3893 READ(*,'(I1)',ERR=8200,END=4576)MOROUV
      LMN=1
 4893 WRITE(*,2235)MOROUV
      WRITE(11,2235)MOROUV
      WRITE(7,2253)MOROUV
 2253 FORMAT(I1,' =MOROUV IN BLOCUT/2')
 2235 FORMAT(I2,' =MOROUV IN BLOCUT/2!!!!!!!!!')
      ENDIF
      IF(MOROUV.GE.1)THEN
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,6146)N
      WRITE(11,6146)N
 6146 FORMAT(' NOW FOLLOWING: (DBLE(BLOMAT(ISTART,J)),J=ISTART,IENDE): '
     1,'(N=',I5,')')
      WRITE(*,'(6E14.6)')(DBLE(BLOMAT(ISTART,J)),J=ISTART,IENDE)
      WRITE(11,'(6E14.6)')(DBLE(BLOMAT(ISTART,J)),J=ISTART,IENDE)
      IF(MOROUV.GE.2)THEN
      WRITE(*,6145)N
      WRITE(11,6145)N
 6145 FORMAT(' ... AND (DBLE(BLOMAT(ISTART+1:IENDE,J)),J=ISTART,IENDE):'
     1,' (N=',I5,')')
      DO 177 I=ISTART+1,IENDE
      WRITE(*,'(6E14.6)')(DBLE(BLOMAT(I,J)),J=ISTART,IENDE)
      WRITE(11,'(6E14.6)')(DBLE(BLOMAT(I,J)),J=ISTART,IENDE)
  177 CONTINUE
      ENDIF
      ENDIF
 1110 CONTINUE
      ENDIF
C
C**   BREAK OF ALL IF'S!
C**   NO DIAGONALIZATION FOR N=1, IF IEINZW=2!:
C
      IF(IEINZW.EQ.2)THEN
      IENDE=BLOCKD(1)
      DO 1999 J=1,IENDE
      WERTZZ(J)=ZERO
      DO 1998 I=1,IENDE
      BLOMAT(I,J)=DCMPLX(ZERO,ZERO)
 1998 CONTINUE
      BLOMAT(J,J)=DCMPLX(ONE,ZERO)
 1999 CONTINUE
      ENDIF
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1899)
 1888 WRITE(*,1899)
 1899 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-BLOCUT; =0, 1, 2 OR 3!'
     2,/,' VALID FOR THE THIRD PART OF BLOCUT, I.E. DO 1101 N=',/
     3,' IEINZW,NBLOCK WITH RESULTS OF DIAGON. INCL. SPINORB.!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3894)MOROUW
      GOTO 4894
      ENDIF
 3894 READ(*,'(I1)',ERR=1888,END=4576)MOROUW
      LMN=1
 4894 WRITE(*,2245)MOROUW
      WRITE(11,2245)MOROUW
      WRITE(7,2254)MOROUW
 2254 FORMAT(I1,' =MOROUW IN BLOCUT/3')
 2245 FORMAT(I2,' =MOROUW IN BLOCUT/3!!!!!!!!!')
      ENDIF
C
C**   NOW FOR LOWER STORAGE MODE:
      DO 111 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      DO 1201 J=ISTART,IENDE
      JJ=J-ISTART+1
      DO 1200 I=ISTART,IENDE
      II=I-ISTART+1
      DBLMAT(II,JJ)=BLOMAT(I,J)
 1200 CONTINUE
 1201 CONTINUE
      ND20QU=ND2002**2
C
CREAL      CALL DSPEVW(1,DBLMAT,DBLMAT,WNRW,EIVECV,ND2002,LOCKDN,DUMMY
CREAL     1,NDMAL3,ND20QU)
CCOMPL CALL ZHPEVK(1,DBLMAT,EIWERT,EIVECV,ND2002,KASSUM)
      CALL ZHPEVK(1,DBLMAT,WNRW,EIVECV,ND2002,LOCKDN)
C
C**   NOW TRANSFER OF EIVECV TO BLOMAT AND OF WNRW TO WERTZZ!:
      DO 999 J=ISTART,IENDE
      JJ=J-ISTART+1
      WERTZZ(J)=WNRW(JJ)
  999 CONTINUE
      DO 887 J=ISTART,IENDE
      JJ=J-ISTART+1
      DO 888 I=ISTART,IENDE
      II=I-ISTART+1
      BLOMAT(I,J)=EIVECV(II,JJ)
  888 CONTINUE
  887 CONTINUE
C
  111 CONTINUE
C
C**   ORDERING AND TRANSFER OF BLOMAT TO EIVECV!:
      DO 7034 K=1,JDIM
      DO 705 J=1,JDIM
      JJ=REIHNF(J)
      EIVECV(JJ,K)=BLOMAT(J,K)
  705 CONTINUE
 7034 CONTINUE
C
      IF(MOROUW.EQ.0)GOTO 897
      DO 1101 N=IEINZW,NBLOCK
      ISTART=BLOCKS(N-1)
      LOCKDN=BLOCKD(N)
      IENDE=ISTART+LOCKDN
      ISTART=ISTART+1
      WRITE(*,1648)N
      WRITE(11,1648)N
 1648 FORMAT(' THE EIGENVALUES OF BLOCK No.',I5,' ARE:')
      WRITE(*,6148)(WERTZZ(J),J=ISTART,IENDE)
      WRITE(11,6148)(WERTZZ(J),J=ISTART,IENDE)
 6148 FORMAT(/,3D20.12)
      WRITE(*,6147)
      WRITE(11,6147)
 6147 FORMAT(/,' N',
     1'OW FOLLOW THE FIRST EIGENVECTOR(REAL PART) AND REIHNF AND 2*MJ:')
      LIMITI=ISTART
      IF(MOROUW.GT.2)THEN
      LIMITI=IENDE
      WRITE(*,1649)
      WRITE(11,1649)
 1649 FORMAT(' ... AND, BECAUSE MOROUT > 2, ALL OTHER EIGENVECTORS!')
      ENDIF
      I1=ISTART-1
      DO 189 J=ISTART,LIMITI
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,6149)(DBLE(EIVECV(REIHNF(I+I1),J))
     1,REIHNF(I+I1),MQUER(REIHNF(I+I1),3),I=1,LOCKDN)
      WRITE(11,6149)(DBLE(EIVECV(REIHNF(I+I1),J))
     1,REIHNF(I+I1),MQUER(REIHNF(I+I1),3),I=1,LOCKDN)
 6149 FORMAT(4(E12.4,I5,I3))
CKR      ELSE
C**   NEARLY THE SAME, BUT MQUERR INSTEAD OF MQUER!
      ENDIF
  189 CONTINUE
C
      IF(LAUF2.EQ.0)THEN
      LAUF2=1
      LIMIT=10
      GRENZE=0.1D0
      WRITE(11,2193)LIMIT,GRENZE
 8231 WRITE(*,2193)LIMIT,GRENZE
 2193 FORMAT(' INPUT IN I4,F10.4 LIMITS FOR OUTPUT OF EIGENVECTORS;'
     1,/,' < ZERO => 0 AND 0.0; ZERO =>',I5,F4.1,/,' (I.E.: MAX.'
     2,' NUMBER OF EIGENVEC. TO BE TAKEN INTO ACCOUNT AND LOWEST',/
     3,' (ABS.) VALUE OF THESE EIGENVECTORS TO BE TAKEN INTO ACCOUNT)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,F10.4)',ERR=5588,END=3895)LIMITI,GRENZD
      GOTO 4895
      ENDIF
 3895 READ(*,'(I4,F10.4)',ERR=8231,END=4576)LIMITI,GRENZD
      LMN=1
 4895 WRITE(*,2195)LIMITI,GRENZD
      WRITE(11,2195)LIMITI,GRENZD
 2195 FORMAT(I4,F10.4,' =LIMITI,GRENZD!!!!!!!!!')
      WRITE(7,2194)LIMITI,GRENZD
 2194 FORMAT(I4,F10.4,' =LIMITI,GRENZD')
      IF(LIMITI.NE.0)LIMIT=LIMITI
      IF(LIMIT.LT.0)LIMIT=0
      IF(GRENZD.NE.ZERO)GRENZE=GRENZD
      ENDIF
      LIMITI=LIMIT
      IF(LIMITI.GT.LOCKDN)LIMITI=LOCKDN
      WRITE(*,1896)LIMITI,GRENZE
      WRITE(11,1896)LIMITI,GRENZE
 1896 FORMAT(' MAX. No. OF EIGENVEC.(REAL PART) AND LIMIT=',I5,F10.4)
      LIMITI=LIMITI+ISTART-1
C**   I1=ISTART-1
      DO 1898 J=ISTART,LIMITI
      WRITE(*,6174)J
      WRITE(11,6174)J
 6174 FORMAT(
     1' NOW FOLLOW (PART OF) THE',I5,'TH EIGENV. AND REIHNF AND 2*MJ:')
C
      II=0
      DO 1897 IL=1,LOCKDN
C
      IF(CDABS(EIVECV(REIHNF(IL+I1),J)).GE.GRENZE)THEN
      II=II+1
      NFOLGE(II)=IL
      IF(II.EQ.4)THEN
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,4)
      WRITE(11,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,4)
CKR      ELSE
C**   NEARLY THE SAME, BUT MQUERR INSTEAD OF MQUER!
      ENDIF
      II=0
      ENDIF
      ENDIF
C
 1897 CONTINUE
      IF(II.EQ.0)THEN
C**   A REST OF A ROW IS NOT FOLLOWING: THEREFORE AN EMPTY ROW!
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      ENDIF
C**   IF II.NE.0, THERE IS A REST OF A ROW, WHICH FOLLOWS NOW!:
      IF(JAWIGN.EQ.0)THEN
      WRITE(*,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,II)
      WRITE(11,6149)(DBLE(EIVECV(REIHNF(NFOLGE(I)+I1),J))
     1,REIHNF(NFOLGE(I)+I1),MQUER(REIHNF(NFOLGE(I)+I1),3),I=1,II)
CKR      ELSE
C**   NEARLY THE SAME, BUT MQUERR INSTEAD OF MQUER!
      ENDIF
C**   END OF OUTPUT OF (PART OF) EIGENVECTOR J.
C
C**   NOW COMPUT. OF OCC. OF SPINORB.:
      IF(JAWIGN.NE.0)GOTO 786
C
      DO 2189 NR=1,NRELMX
      BESETZ(NR,1)=ZERO
 2189 CONTINUE
C
      DO 2897 IL=1,LOCKDN
      EIVECQ=CDABS(EIVECV(REIHNF(IL+I1),J))**2
      DO 2119 NR=1,NREL
      ML=MSML(REIHNF(IL+I1),1,NR)
      ML=(ML+KLWERT)*2
      MS=MSML(REIHNF(IL+I1),2,NR)
      IF(MS.EQ.1)ML=ML+1
      ML=NRELMX-ML
      BESETZ(ML,1)=BESETZ(ML,1)+EIVECQ
 2119 CONTINUE
 2897 CONTINUE
C
      IF(LAUF4.EQ.0)THEN
      LAUF4=1
      WRITE(*,2281)
      WRITE(11,2281)
 2281 FORMAT(/,' OCCUP. OF SPIN'
     1,'ORB. OF 1ST EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP, 3 DOWN, ...:')
      ENDIF
      WRITE(*,2011)(BESETZ(II,1),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,1),II=1,NRELMX)
C
  786 CONTINUE
C
 1898 CONTINUE
C
 1101 CONTINUE
C**   1101 CONTINUE BEFORE <=> DO 1101 N=IEINZW,NBLOCK ...
C**   ... AND 897 CONTINUE FOLLOWING <=> IF(MOROUW.EQ.0)GOTO 897
C     (BOTH APPROX. 150 LINES ABOVE!)
  897 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(11,1280)
 1279 WRITE(*,1280)
 1280 FORMAT(
     1' MOROUT.NE.0: INPUT IN 2I1 MOROUT-HERE-IN-BLOCUT; =0, 1 OR 2!'
     2,/,' VALID FOR THE 4TH AND 5TH PART OF BLOCUT, I.E. ALL VALUES/'
     3,/,' EIGENVEC.(REAL PART) NOT ORDERED AND ORDERED RESP.!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3896)MOROUX,MOROUY
      GOTO 4896
      ENDIF
 3896 READ(*,'(2I1)',ERR=1279,END=4576)MOROUX,MOROUY
      LMN=1
 4896 WRITE(*,2265)MOROUX,MOROUY
      WRITE(11,2265)MOROUX,MOROUY
      WRITE(7,2256)MOROUX,MOROUY
 2256 FORMAT(2I1,' =MOROUX,MOROUY IN BLOCUT/4/5')
 2265 FORMAT(2I2,' =MOROUX,MOROUY IN BLOCUT/4/5!!!!!!!!!')
      ENDIF
C
      IF(MOROUX.GE.1)THEN
      WRITE(*,613)
      WRITE(11,613)
  613 FORMAT(/,' NOW (WERTZZ(J),J=1,JDIM), I.E. ALL EIGENVALUES:')
      WRITE(*,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      WRITE(11,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      IF(MOROUX.GE.2)THEN
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,1650)
      WRITE(11,1650)
 1650 FORMAT(' ... AND, BECAUSE MOROUT >1, ALL EIGENVECTORS(REAL PART),'
     1,/,' I.E. COLUMNS, GIVEN HERE AS ROWS:')
      DO 188 J=1,JDIM
      WRITE(*,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
      WRITE(11,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
  188 CONTINUE
      ENDIF
      ENDIF
C
C     ORDERING OF ENERGIES AND EIGENVECTORS:
      JDIMM1=JDIM-1
      DO 7022 I=1,JDIMM1
      IP1=I+1
      TEMP=WERTZZ(I)
      JTEMP=I
      DO 7033 J=IP1,JDIM
      IF(WERTZZ(J).GE.TEMP)GOTO 7033
      TEMP=WERTZZ(J)
      JTEMP=J
 7033 CONTINUE
      IF(JTEMP.NE.I)THEN
      WERTZZ(JTEMP)=WERTZZ(I)
      WERTZZ(I)=TEMP
      DO 704 K=1,JDIM
      CTEMP=EIVECV(K,JTEMP)
      EIVECV(K,JTEMP)=EIVECV(K,I)
      EIVECV(K,I)=CTEMP
  704 CONTINUE
      ENDIF
 7022 CONTINUE
C
      IF(MOROUY.GE.1)THEN
      WRITE(*,6133)
      WRITE(11,6133)
 6133 FORMAT(/,' NOW (WERTZZ(J),J=1,JDIM) (CONSECUTIVELY ORDERED):')
      WRITE(*,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      WRITE(11,'(6E14.6)')(WERTZZ(J),J=1,JDIM)
      JDIM12=1
      IF(MOROUY.GE.2)JDIM12=JDIM
      WRITE(*,'(/)')
      WRITE(11,'(/)')
      WRITE(*,1878)
      WRITE(11,1878)
 1878 FORMAT(
     1' EIGENVECTOR(S), I.E. COLUMN(S), GIVEN AS ROW(S), ALSO ORDERED:')
      DO 187 J=1,JDIM12
      WRITE(*,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
      WRITE(11,'(6E14.6)')(DBLE(EIVECV(I,J)),I=1,JDIM)
      WRITE(*,'(/)')
      WRITE(11,'(/)')
  187 CONTINUE
      ENDIF
C
      IF(LAUF3.NE.0.OR.MOROUT.EQ.0.OR.MOROUZ.EQ.8)GOTO 781
      IF(LAUF3.EQ.0)THEN
      LIMIT=10
      GRENZE=0.1D0
      WRITE(11,2193)LIMIT,GRENZE
 8223 WRITE(*,2193)LIMIT,GRENZE
      IF(LMN.EQ.0)THEN
      READ(77,'(I4,F10.4)',ERR=5588,END=3897)LIMITI,GRENZD
      GOTO 4897
      ENDIF
 3897 READ(*,'(I4,F10.4)',ERR=8223,END=4576)LIMITI,GRENZD
      LMN=1
 4897 WRITE(*,2195)LIMITI,GRENZD
      WRITE(11,2195)LIMITI,GRENZD
      WRITE(7,2194)LIMITI,GRENZD
      IF(LIMITI.NE.0)LIMIT=LIMITI
      IF(LIMIT.LT.0)LIMIT=0
      IF(LIMIT.GT.JDIM)LIMIT=JDIM
      IF(GRENZD.NE.ZERO)GRENZE=GRENZD
      ENDIF
      LAUF3=1
C
      IIJJ=0
      IJ=0
      WRITE(*,2120)GRENZE,LIMIT
      WRITE(11,2120)GRENZE,LIMIT
 2120 FORMAT(' I, J, '
     1,'EIVEC(I,J) FOR ABS(EIVEC(I,J)).GE.',D8.1,' UNTIL LIMIT=',I9,/,' 
     2(PART OF) THE FIRST ROW CONTAINS (PART OF) THE FIRST EIGENVECTOR')
C
      DO 2192 J=1,LIMIT
      DO 2191 I=1,JDIM
C
      IF(CDABS(EIVECV(I,J)).GE.GRENZE)THEN
      IIJJ=IIJJ+1
      IJ=IJ+1
      EIOUT(IJ)=EIVECV(I,J)
      IIEI(IJ)=I
      JJEI(IJ)=J
C
      IF(IJ.EQ.4)THEN
      WRITE(11,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
      IF(IIJJ.LE.24)
     1WRITE(*,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
 2122 FORMAT(4(2I4,D12.4))
      IJ=0
      ENDIF
      ENDIF
C
 2191 CONTINUE
 2192 CONTINUE
C
      WRITE(11,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
      IF(IIJJ.LE.24)
     1WRITE(*,2122)(IIEI(II),JJEI(II),EIOUT(II),II=1,IJ)
C
      WRITE(*,2121)IIJJ,IIJJ
      WRITE(11,2121)IIJJ,IIJJ
 2121 FORMAT(
     1' No. OF VALUES=',I9,'; ON FILE11:',I9,'; MAX. 24 ON TERMINAL')
C
C**   NOW COMPUT. OF OCC. OF SPINORB.:
      IF(JAWIGN.NE.0)GOTO 3190
      IJ10=0
      DO 3192 J=1,LIMIT
C**   IJ10=0 STATEMENT BELOW, TOO!
      IJ10=IJ10+1
      DO 2190 NR=1,NRELMX
      BESETZ(NR,IJ10)=ZERO
 2190 CONTINUE
      DO 3191 I=1,JDIM
      EIVECQ=DCONJG(EIVECV(I,J))*EIVECV(I,J)
      DO 2109 NR=1,NREL
      ML=MSML(I,1,NR)
      ML=(ML+KLWERT)*2
      MS=MSML(I,2,NR)
      IF(MS.EQ.1)ML=ML+1
      ML=NRELMX-ML
      BESETZ(ML,IJ10)=BESETZ(ML,IJ10)+EIVECQ
 2109 CONTINUE
 3191 CONTINUE
C
      IF(LAUF5.EQ.0)THEN
      LAUF5=1
      WRITE(*,2218)
      WRITE(11,2218)
 2218 FORMAT(/,' OCCUP. OF SPIN'
     1,'ORB., 1...TH EIGENVEC., E.G. (ML=)3 WITH (SPIN)UP, 3 DOWN, ...')
      ENDIF
      IF(IJ10.EQ.10)THEN
      DO 2219 JJ=1,10
      WRITE(*,2011)(BESETZ(II,JJ),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,JJ),II=1,NRELMX)
 2219 CONTINUE
 2011 FORMAT(10F7.3)
      IJ10=0
      ENDIF
C
 3192 CONTINUE
C
      DO 2220 J=1,IJ10
      WRITE(*,2011)(BESETZ(I,J),I=1,NRELMX)
      WRITE(11,2011)(BESETZ(I,J),I=1,NRELMX)
 2220 CONTINUE
C
      IF(KLWERT.NE.2)GOTO 3920
C
      IF(LAUF5.EQ.1)THEN
      LAUF5=2
      WRITE(*,2182)
      WRITE(11,2182)
 2182 FORMAT(/,' D ORBITALS ONLY:',/,' OCCUP. OF '
     1,'SPINORB., 1...TH EIGENVEC., DX2-Y2-(SPIN)UP, DX2-Y2-DOWN,',/
     2,' DXZ-UP, DXZ-DOWN, DZ**2-UP, DZ**2-DOWN, DYZ-UP, DYZ-DOWN, DXY-'
     3,'UP, DXY-DOWN')
      IF(NGROUP.NE.8.AND.NGROUP.NE.22)THEN
      WRITE(11,3917)
 3916 WRITE(*,3917)
 3917 FORMAT(' D ORBITALS .AND. NGROUP.NE.8.AND.NGROUP.NE.22:',/,
     1' NO TRANSF. CORRESP. TO [111]-AXIS POSS.: INPUT 0 OR 1 IN I1!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3898)JANO
      GOTO 4898
      ENDIF
 3898 READ(*,'(I1)',ERR=3916,END=4576)JANO
      LMN=1
 4898 JANO=1
      WRITE(*,2820)JANO
      WRITE(11,2820)JANO
      WRITE(7,2821)JANO
      ENDIF
      ENDIF
      IF(NGROUP.NE.8.AND.NGROUP.NE.22)GOTO 3919
      IF(LAUF50.EQ.0)THEN
      LAUF50=1
      WRITE(11,3918)
 2822 WRITE(*,3918)
 3918 FORMAT(' D ORBITALS .AND. NGROUP.EQ.8.OR.NGROUP.EQ.22:',/,
     1' ORBITALS ARE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS'
     2,' AS Z-AXIS:',/,' PUT IN YES(0)/NO (IN I1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3899)JANO
      GOTO 4899
      ENDIF
 3899 READ(*,'(I1)',ERR=2822,END=4576)JANO
      LMN=1
 4899 WRITE(*,2820)JANO
      WRITE(11,2820)JANO
 2820 FORMAT(I2,' =JANO "TRANSF." IN BLOCUT!!!!!!!!!')
      WRITE(7,2821)JANO
 2821 FORMAT(I1,' =TRANSF. IN BLOCUT')
C
      IF(JANO.NE.0)GOTO 3919
      II=0
C**   ALL M RESP. M':
      DO 3211 I=2,-2,-1
      II=II+1
C**   e**(-i*PHI) WITH PHI=A(LPHA) OR =G(AMMA):
      RAMM55(II)=DCMPLX(COS(PIV*I),-SIN(PIV*I))
      RGMM55(II)=DCMPLX(ONE,ZERO)
 3211 CONTINUE
      ENDIF
      IF(JANO.NE.0)GOTO 3919
C
C**   CPLXIJ IS COMPLEX, BUT IN PRINCIPLE UP TO NOW THE SAME AS REAL TRRL55! NOW
C     NEW CPLXIJ (CPLXIJ NEEDED FOR "TRANSFORMATION" INTO CUB(II)/D3d):
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7821)
      WRITE(11,7821)
 7821 FORMAT(' ALPHA PART:')
      WRITE(*,5828)(RAMM55(JJ),JJ=1,5)
      WRITE(11,5828)(RAMM55(JJ),JJ=1,5)
      WRITE(*,7822)
      WRITE(11,7822)
 7822 FORMAT(' GAMMA PART:')
      WRITE(*,5828)(RGMM55(JJ),JJ=1,5)
      WRITE(11,5828)(RGMM55(JJ),JJ=1,5)
      WRITE(*,7823)
      WRITE(11,7823)
 7823 FORMAT(' BETA PART MATRIX:')
      DO 5843 K=1,5
      WRITE(*,5882)(RBMM55(K,JJ),JJ=1,5)
      WRITE(11,5882)(RBMM55(K,JJ),JJ=1,5)
 5843 CONTINUE
C5882 FORMAT(10D14.6)
      ENDIF
      DO 8924 J=1,5
      DO 8923 I=1,5
C**   COMPLEX R**(2)(2,1) = RAMM55(2)*RBMM55(2,1)*RGMM55(1):
      CPLXIJ(I,J)=RAMM55(I)*DCMPLX(RBMM55(I,J),ZERO)*RGMM55(J)
 8923 CONTINUE
 8924 CONTINUE
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7824)
      WRITE(11,7824)
 7824 FORMAT(' COMPLEX MATRIX RESULTING FROM ALPHA, BETA AND GAMMA:')
      DO 5824 K=1,5
      WRITE(*,5828)(CPLXIJ(K,JJ),JJ=1,5)
      WRITE(11,5828)(CPLXIJ(K,JJ),JJ=1,5)
 5824 CONTINUE
C5828 FORMAT(10D14.6)
      ENDIF
C
      IF(LAUF49.EQ.0)THEN
      LAUF49=1
      WRITE(11,3981)
 2823 WRITE(*,3981)
 3981 FORMAT(' D ORBITALS .AND. NGROUP.EQ.8.OR.NGROUP.EQ.22:',/,
     1' ORBITALS ARE TRANSFORMED SO AS TO CORRESPOND TO [111]-AXIS'
     2,' AS Z-AXIS,',/,' BUT NOT TO REAL OR PURELY IMAGINARY'
     3,' BASIS ORBITALS: PUT IN YES/NO(0) (IN I1)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3400)JANOO
      GOTO 4900
      ENDIF
 3400 READ(*,'(I1)',ERR=2823,END=4576)JANOO
      LMN=1
 4900 WRITE(*,2820)JANOO
      WRITE(11,2820)JANOO
C2820 FORMAT(I2,' =JANO "TRANSF." IN BLOCUT!!!!!!!!!')
      WRITE(7,2821)JANOO
C2821 FORMAT(I1,' =TRANSF. IN BLOCUT')
      IF(JANOO.NE.0)THEN
      WRITE(*,2812)
      WRITE(11,2812)
 2812 FORMAT(' OUTPUT CORRESP. TO THE FOLLOWING HEADER WAS SELECTED:')
      WRITE(*,2218)
      WRITE(11,2218)
      ENDIF
      ENDIF
C
      IF(JANOO.NE.0)GOTO 3991
C**   NOW THE FINAL CPLXIJ NEEDED FOR "TRANSFORMATION" IN CUB(II)/D3d!
C     (MULTIPL. OF MATRICES TRRL55 AND CPLXIJ (IN THIS ORDER) CORRESP. TO
C     TRANSFORM. AND ROTATION, RESPECTIVELY (BUT TO BE PERFORMED FROM
C     RIGHT TO LEFT!) TO COEFF. OF REAL OR PURELY IMAGINARY BASIS ORBITALS):
C
      DO 2446 K=1,5
      DO 5446 J=1,5
      CPXROW(J)=DCMPLX(ZERO,ZERO)
      DO 5442 I=1,5
      CPXROW(J)=CPXROW(J)+DCMPLX(TRRL55(J,I),ZERO)*CPLXIJ(I,K)
 5442 CONTINUE
 5446 CONTINUE
      DO 1446 JJ=1,5
      CPLXIJ(JJ,K)=CPXROW(JJ)
 1446 CONTINUE
 2446 CONTINUE
C
 3919 CONTINUE
C**   BELONGS TO "IF(NGROUP.NE.8.AND.NGROUP.NE.22)GOTO 3919" .AND. TO
C     "IF(JANO.NE.0)GOTO 3919"
C
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7826)
      WRITE(11,7826)
 7826 FORMAT(' MATRIX'
     1,' NEEDED FOR TRANSF. INTO REAL OR PURELY IMAG. BASIS ORBITALS:')
      DO 5842 K=1,5
      WRITE(*,5882)(TRRL55(K,JJ),JJ=1,5)
      WRITE(11,5882)(TRRL55(K,JJ),JJ=1,5)
 5842 CONTINUE
 5882 FORMAT(10D14.6)
      ENDIF
 3991 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,7827)
      WRITE(11,7827)
 7827 FORMAT(' RESULTING'
     1,' (AT LEAST FORMALLY) COMPLEX MATRIX FOR TRANSFORMATION:')
      DO 5859 K=1,5
      WRITE(*,5828)(CPLXIJ(K,JJ),JJ=1,5)
      WRITE(11,5828)(CPLXIJ(K,JJ),JJ=1,5)
 5859 CONTINUE
 5828 FORMAT(10D12.4)
      ENDIF
C
      IF(LAUF51.EQ.0)THEN
      LAUF51=1
C**   CALCULATION OF MWMSML AND NRCOMB:
      NRELM1=NREL-1
      NRMXDI=2*(2*KLWERT+1)
      DO 33 N=1,NRELM1
      MWM(N,1)=NRMXDI-N
      MWM(N,2)=NRELM1-N
   33 CONTINUE
C
      NRCOMB=1
      IF(NRELM1.NE.0)THEN
      NRCOMB=0
C**   INFINITE LOOP:
  199 CONTINUE
      II=NRELM1
      NRCOMB=NRCOMB+1
      IF(NRCOMB.GT.252)STOP 'NRCOMB'
      DO 21 N=1,NRELM1
      MWMSML(NRCOMB,N)=MWM(N,1)
   21 CONTINUE
      MWM(II,1)=MWM(II,1)-1
   22 CONTINUE
      IF(MWM(II,1).LT.MWM(II,2))THEN
      II=II-1
      IF(II.EQ.0)GOTO 55
      MWM(II,1)=MWM(II,1)-1
      GOTO 22
      ENDIF
      IIP1=II+1
      DO 3 I=IIP1,NRELM1
      IM1=I-1
      MWM(I,1)=MWM(IM1,1)-1
    3 CONTINUE
      GOTO 199
   55 CONTINUE
      ENDIF
C
      ENDIF
C
      IJ10=0
      DO 5830 J=1,LIMIT
C**   IJ10=0 STATEMENT BELOW, TOO!
      IJ10=IJ10+1
      DO 5831 NR=1,NRELMX
      BESETZ(NR,IJ10)=ZERO
 5831 CONTINUE
C
C      WRITE(*,5813)J
C      WRITE(11,5813)J
C 5813 FORMAT(' NEW EIGENVECTOR NOW, NO.=',I6)
CCCCCCCCC
C      ISUM=0
C**   KASSUM=JDIM
C**   THE FOLLOWING DO LOOP FOR SPIN UP AND SPIN DOWN OF 1TH EL.:
      DO 5820 NIPSUP=1,0,-1
C**   THE FOLLOWING DO LOOP FOR EACH COMBINATION OF QUANTUM NUMBERS OF OTHER ELECTRONS:
      DO 5821 NSTEP=1,NRCOMB
CCCCCCCCC
C      WRITE(*,5819)NSTEP
C      WRITE(11,5819)NSTEP
C 5819 FORMAT(' NSTEP=',I8)
C**   FOR EACH ROW OF MATRIX CPLXIJ FOR LINEAR COMBINATION:
      DO 5822 NRROW=1,5
C**   LINEAR COMBINATION - ONE(!) ROW:
      COMSUM=DCMPLX(ZERO,ZERO)
      DO 5823 KOLUMN=1,5
C     ... AND THIS NUMBER IS NOW TRANSLATED INTO THE ROW NUMBER, IF IT EXISTS,
C     OF THE EIGENVECTOR CONCERNED:
      NDIGIT(1)=9-(KOLUMN-1)*2
      IF(NIPSUP.EQ.0)NDIGIT(1)=8-(KOLUMN-1)*2
      DO 2826 JJ=1,NRELM1
      JJP1=JJ+1
      NDIGIT(JJP1)=MWMSML(NSTEP,JJ)
 2826 CONTINUE
CCCCCCCCC
C      WRITE(*,5829)(NDIGIT(JJ),JJ=1,NREL)
C      WRITE(11,5829)(NDIGIT(JJ),JJ=1,NREL)
C 5829 FORMAT(' (NDIGIT(JJ),JJ=1,NREL)=',I6,4I4)
      MP=1
C**   PERMUTATION/ ORDERING OF DIGITS. IF ANY 2 DIGITS ARE THE SAME, MP=0:
      DO 2828 JJ=1,NRELM1
      JP1=JJ+1
      DO 2829 I=JP1,NREL
      IF(NDIGIT(JJ).EQ.NDIGIT(I))THEN
      MP=0
      GOTO 2830
      ENDIF
      IF(NDIGIT(JJ).LT.NDIGIT(I))THEN
      MP=MP*(-1)
      ITEMP=NDIGIT(JJ)
      NDIGIT(JJ)=NDIGIT(I)
      NDIGIT(I)=ITEMP
      ENDIF
 2829 CONTINUE
 2828 CONTINUE
      DO 2824 JJ=-2,2
      DO 2825 I=1,2
      MSMLNS(I,JJ)=0
 2825 CONTINUE
 2824 CONTINUE
      DO 2827 JJ=1,NREL
      IODD=MOD(NDIGIT(JJ),2)
      NR=((NDIGIT(JJ)-IODD)/2)-2
      IF(IODD.EQ.1)THEN
      MSMLNS(1,NR)=1
      ELSE
      MSMLNS(2,NR)=-1
      ENDIF
 2827 CONTINUE
CCCCCCCCC
C      WRITE(*,'(5I3)')((MSMLNS(II,III),III=-2,2),II=1,2)
C      WRITE(11,'(5I3)')((MSMLNS(II,III),III=-2,2),II=1,2)
C      ISUM=ISUM+1
C      WRITE(*,2847)MP,NSTEP,ISUM
C      WRITE(11,2847)MP,NSTEP,ISUM
C 2847 FORMAT(' MP,NSTEP,ISUM=',3I6)
C
 2830 CONTINUE
      NRLIN=0
      CEMPEI=DCMPLX(ZERO,ZERO)
      IF(MP.NE.0)THEN
C**   NRLIN = "NR OF LINE" RETURNS!
CKR      CALL NUMBER(NRLIN,MSMLNW,MSMLNS,ND2002,KLWERT,JDIM,KLWER3)
CKR      SUBROUTINE NUMBER(NRLIN,MSMLNW,MSMLNS,ND2002,KLWERT,JDIM,KLWER3)
CCKR     HERE AS A LINK TO NUMERO! - "NUMBER" COPIED (AND REVISED)!:
      N1=0
      DO 6 N=KLWERT,-KLWERT,-1
      DO 611 IZEILE=1,2
      IF(MSMLNS(IZEILE,N).EQ.0)GOTO 611
      N1=N1+1
      MSMLN1(N1)=(N+KLWERT)*2
      IF(IZEILE.EQ.1)MSMLN1(N1)=MSMLN1(N1)+1
  611 CONTINUE
    6 CONTINUE
C     MSML NOT USED IN NUMERO!
      CALL NUMERO(1,NRLIN,MSML,MSMLN1,ND2002,KLWERT,JDIM,N1,MSMLNW)
C
      CEMPEI=EIVECV(NRLIN,J)*DCMPLX(DBLE(MP),ZERO)
CCCCCCCCC
C      WRITE(*,5827)NRLIN
C      WRITE(11,5827)NRLIN
C 5827 FORMAT(' NRLIN=',I4)
      ENDIF
      COMSUM=COMSUM+CPLXIJ(NRROW,KOLUMN)*CEMPEI
 5823 CONTINUE
C**   CONTINUE BEFORE BELONGS TO DO LOOP "LINEAR COMBINATION - 1 ROW", KOLUMN=1,5
      BESETZ(NRROW*2-NIPSUP,IJ10)=BESETZ(NRROW*2-NIPSUP,IJ10)
     1+DBLE(COMSUM*DCONJG(COMSUM))
 5822 CONTINUE
 5821 CONTINUE
 5820 CONTINUE
C
      IF((NGROUP.EQ.8.OR.NGROUP.EQ.22).AND.JANO.EQ.0)THEN
      IF(KLIK.EQ.0)THEN
      KLIK=1
      WRITE(*,5801)
      WRITE(11,5801)
 5801 FORMAT(' HINT: "SPIN UP" MEANS NOW "SPIN IN [111]-DIRECTION"!')
      ENDIF
      DO 5809 K=1,9,2
      KP1=K+1
      TMPSTO=BESETZ(K,IJ10)*COSB2Q+BESETZ(KP1,IJ10)*SINB2Q
      BESETZ(KP1,IJ10)=BESETZ(K,IJ10)*SINB2Q+BESETZ(KP1,IJ10)*COSB2Q
      BESETZ(K,IJ10)=TMPSTO
 5809 CONTINUE
      ENDIF
C
      IF(IJ10.EQ.10)THEN
      DO 5825 JJ=1,10
      CONTRL=ZERO
      CONTRM=ZERO
      DO 2921 II=1,NRELMX
      CONTRL=CONTRL+BESETZ(II,JJ)
      IF(MOD(II,2).NE.0)CONTRM=CONTRM+BESETZ(II,JJ)
 2921 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,5834)CONTRL,CONTRM
      WRITE(11,5834)CONTRL,CONTRM
 5834 FORMAT(' SUM OF NEXT ROW, AND SUM, BUT SPIN UP ONLY, =',2D16.8)
      ENDIF
C
      WRITE(*,2011)(BESETZ(II,JJ),II=1,NRELMX)
      WRITE(11,2011)(BESETZ(II,JJ),II=1,NRELMX)
 5825 CONTINUE
C2011 FORMAT(10F7.3) - SEE BEFORE!
      IJ10=0
      ENDIF
C
 5830 CONTINUE
C**   BELONGS TO "DO 5830 J=1,LIMIT" <=> "NEW EIGENVECTOR"!
C
      DO 5826 J=1,IJ10
      CONTRL=ZERO
      CONTRM=ZERO
      DO 2920 II=1,NRELMX
      CONTRL=CONTRL+BESETZ(II,J)
      IF(MOD(II,2).NE.0)CONTRM=CONTRM+BESETZ(II,J)
 2920 CONTINUE
      IF(MOROUZ.NE.0.AND.MOROUZ.NE.8)THEN
      WRITE(*,5834)CONTRL,CONTRM
      WRITE(11,5834)CONTRL,CONTRM
      ENDIF
C
      WRITE(*,2011)(BESETZ(I,J),I=1,NRELMX)
      WRITE(11,2011)(BESETZ(I,J),I=1,NRELMX)
 5826 CONTINUE
      WRITE(*,'(/)')
      WRITE(11,'(/)')
C**   END OF "TRANSFORMATION"!
C
 3920 CONTINUE
C**   BELONGS TO "IF(KLWERT.NE.2)GOTO 3920"
C
      WRITE(*,2123)LIMIT
      WRITE(11,2123)LIMIT
 2123 FORMAT(
     1' OCCUP. OF SPINORB. OF EIGENVEC. 1...LIMIT=',I5,' WERE LISTED!')
 3190 CONTINUE
C**   781 CONTINUE FOLLOWING <=> IF(LAUF3.NE.0.OR.MOROUT.EQ.0.OR.MOROUZ.EQ.8)
C     GOTO 781
  781 CONTINUE 
C
C**   RETURNS TO TANABE OR TO ECKART!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND BLOCUT
      END
CEND-FILE TANABE.F
      SUBROUTINE REDUCT(NGROUP,NOFORM,
C REDUKT CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     CALLED BY TANABE ("TANAKE")! - NEEDS NUMERO! - CALLS SELECS!
C**   SUBROUTINE REDUC-T(ANABE) CALCULATES FMAT AND GMAT WITH DIMENSIONS
C     UP TO THE MAXIMUM, WHICH IS POSSIBLE FOR D ELECTRONS, AND WHICH IS
C     (ND252=) 252, BUT A REDUCTION OF THE NUMBER OF EIGENVALUES AND
C     EIGENVECTORS IS POSSIBLE AND NEEDED FOR MANY CASES OF F ELECTRONS. THE
C     BASIS FOR THE PERTURBATION OPERATOR FMAT (WITH THE RESP. G-FACTOR INCL.)
C     IS THAT OF THESE EIGENVECTORS AND NOT THAT OF MICRO STATES. IN ADDITION
C     TO ITS USE FOR PERTURBATION THEORY OF FIRST ORDER, THIS OPERATOR IS ALSO
C     USED TO TAKE INTO ACCOUNT THE ENERGY OF A (E.G. STRONG) MAGNETIC FIELD.
C     (THERE IS NO ORBITAL CONTRIBUTION IN GMAT,
C     AND THE G-FACTOR IS FORMALLY ONE, BECAUSE GMAT IS USED FOR HEISENBERG
C     COUPLING, AND NO MAGNETIC FIELD IS CONCERNED!)
C
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
     6,EIVSHT,NRMIST,ND2002
C**   ... AND FOR SUBROUTINE REDUCT, THE PRESENT SUBROUTINE:
     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV,BSTART
     8,UPML,DOWNML,MSML,MSMLCO,KLWER3,JAFAST
     9,MSMLNW,MSMLNS,NOFROW,NROFNR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
     1,EIVECV(ND2002,ND2002),EIVECQ
     1,EIVECF,EIVECG,EIVEDF,EIVEDG
     1,FMAT(ND252,ND252,5),GMAT(ND252,ND252,3)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=44)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/JTSTZZ/JTSTZX
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACTA(13)
      COMMON/ABC/MNUR4(2,2),MNUR4C(2,2)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/MIRROV/FACZ,FACXY,MIRROW
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6)
C**   FOR SUGANR/C/H/K TO BE CALCULATED ("INTERFACE"):
      DIMENSION EIWERT(*)
     1,GFACT(10),FMATZ(10,10)
C**   FOR SUBROUTINE TANABE IN ADDITION:
     1,MULMUL(13),MULMUD(9)
C**   FOR SUBROUTINE REDUCT, THE PRESENT SUBROUTINE:
     2,REDFAZ(3),MQUER(ND2002,3)
     3,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNS(2,-KLWER3:KLWER3)
     4,NROFNR(ND2002),NOFROW(ND2002,I10)
     5,EIVSHT(ND2002,I10)
      DIMENSION GFAMST(2,2),EIWMST(2),EIVMST(2,2)
      SAVE
C**   (I)10 = MAX. OF POSS. FOR ANY MICRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
C     CORRESP. TO SMALLEST J VALUE: /6,9,10,9,6,1,8,1,6,9,10,9,6/
C     ... AND CORR. TO LARGEST J VALUE: /8,13,16,17,16,13,8,13,16,17,16,13,8/
C**   (SPIN-)MULTIPL.*(ORB.-)MULTIPL.= (MAX=66; DY):
      DATA MULMUL/14,33,52,65,66,49,8,49,66,65,52,33,14/
      DATA MULMUD/10,21,28,25,6,25,28,21,10/
C
C     NEUEBS=1: NEW B-VALUES; IF NEUEBS=0, NO REDUCTION NECESSARAY IN THE
C     2ND ETC. RUN! IF NEUEBS.NE.0 AND JAFAST.NE.0, NO REDUCTION HERE IN THE
C     2ND ETC. RUN, BUT AN OTHER SORT OF REDUCTION, CONCERNING B-VALUES, TAKES
C     PLACE IN TANFEL (EXTENSION TO TANABE ONLY AND ESPECIALLY FOR F EL.)!
C
C**   CALCULATION FOR CRYSTAL FIELD ABOVE IN TANABE ONLY IN THE FIRST RUN,
C     IF JAFAST.NE.0, ALTHOUGH NEUEBS MAY BE .NE.0!: SEE BELOW "9976 CONTINUE"!
      DATA KLICK1,KLICK2,MOROUU,KLICKH,FACZ,FACXY/0,0,0,0,1.0D0,1.0D0/
      DATA KLICK3,KLICKM,MOROUV,KLICK4,KLICK5,KLICK6/0,0,0,0,0,0/
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,20)
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(KLICK1.NE.0.OR.JAFAST.NE.0)GOTO 9976
C     (JAFAST.EQ.2 <=> INTERFACE WAS READ IN FORMAT FREE)
C**   THE VERY FIRST RUN!:
      KLICK1=1
C
      KLWRTP=KLWERT+1
      KLWRTM=KLWERT-1
C
      IF(MOROUT.NE.0)THEN
      WRITE(11,128)
 8232 WRITE(*,128)
  128 FORMAT(
     1' MOROUT.NE.0: INPUT IN I1 MOROUT-HERE-IN-REDUKT; =0, 1, 2 OR 3!')
CKR     2/,' (+5, I.E. 5, 6, 7 OR 8, FOR OUTPUT OF G-FACTORS(S) IN ADD.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3401)MOROUU
      GOTO 4901
      ENDIF
 3401 READ(*,'(I1)',ERR=8232,END=4576)MOROUU
      LMN=1
 4901 WRITE(*,2572)MOROUU
      WRITE(11,2572)MOROUU
 2572 FORMAT(I2,' =MOROUU IN REDUKT!!!!!!!!!')
      WRITE(7,2257)MOROUU
 2257 FORMAT(I1,' =MOROUU IN REDUKT')
      IF(MOROUU.GE.5)THEN
      MOROUU=MOROUU-5
CKR      MOROUV=1
      ENDIF
      ENDIF
C
      NRVAL=KASSUM
      NRVALF=0
      WRITE(*,1145)KASSUM
      WRITE(11,1145)KASSUM
 1145 FORMAT(/,' No. OF MICRO STATES =',I5)
CKR   "JAFAST=0" IN FILE konsho..!!!
C**   NO PROBLEM AT ALL FOR S OR P ELECTRONS:
      IF(KLWERT.LE.1)GOTO 1146
      IF(KLWERT.EQ.3)THEN
      WRITE(11,1147)JMULTI(NREL),MULMUL(NREL)
      WRITE(*,1147)JMULTI(NREL),MULMUL(NREL)
 1147 FORMAT(' MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE FOR F' 
     1,' EL.',/,' AND (SPIN-)MULTIPL.*(ORB.-)MULTIPL. ARE =',2I3)
      IF(NREL.EQ.5.OR.NREL.EQ.6.AND.LESS.EQ.0)THEN
      WRITE(*,1144)
      WRITE(11,1144)
 1144 FORMAT(
     1' INPUT BELOW (A PART OF) THE SUM OF 6+8+10+12+14+16=66(=(2*5/2+1'
     2,')*(2*5+1))',/,' FOR SM RESP. 1+3+5+7+9+11+13=49(=(2*3+1)*(2*3+1'
     3,')) FOR EU,',/,' 66 AND 49 RESP. FOR "JAFAST", IF "JAFAST"!')
      ENDIF
      ENDIF
C
CKR      IF(KLWERT.EQ.3.OR.JATEST.NE.0)THEN
CKR      WRITE(*,1115)JAFITB
CKR 1115 FORMAT(/,' B-WYBOURNE VALUES (I.E 1...11 VALUES) WILL BE FITTED NO
CKR     1W YES/NO(0):',I2,/
CKR 1151 FORMAT(' INPUT IN I1 YES/NO(0) "JAFAST" TO SPEED UP COMPUTATION!'
CKR      READ(77,'(I1)',ERR=5588,END=3402)JAFASS
CKR      JAFAST=JAFASS
CKR      ENDIF
C
      IF(KLWERT.EQ.3)THEN
      IF(IOPT2.EQ.0)THEN
C**   F ELECTRONS, "SINGLE ION":
      NRVAL=MULMUL(NREL)
      IF(LESS.EQ.0)THEN
      WRITE(*,1148)ND252
      WRITE(11,1148)ND252
 1148 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,
     1' (0 => "PRE-OCC." <=> (SEE ABOVE:) (SPIN-)MULTIPL.*(ORB.-)MULTIPL
     2.)',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND252! ND252=
     3',I4)
CKR      IF(JAFAST.NE.0)THEN
CKR 1175 FORMAT(' JAFAST.NE.0: THE MAX. POSS. IS NRVALF =',I4)
CKR      ENDIF
      ENDIF
      ELSE IF(IOPT2.EQ.1)THEN
C**   F ELECTRONS, "DIMER" (BUT NOT COMBINED MODEL!):
      NRVAL=JMULTI(NREL)
      IF(LESS.EQ.0)THEN
      WRITE(*,1149)ND28
      WRITE(11,1149)ND28
 1149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 ='
     1,'> "PRE-OCC." (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VA'
     2,'LUE))',/,' THE MAX. POSS. IS THE No. OF MICRO STATES OR ND28! N'
     3,'D28=',I3)
      WRITE(*,1150)
      WRITE(11,1150)
 1150 FORMAT(' BUT THE No. SHOULD BE LOWER THAN 18 (E.G. 17 FOR HO)'
     1,/,' (SEE ABOVE: MULTIPL. CORRESP. TO GROUND STATE J VALUE!)'
     2,/,' HINT: IN THE CASE OF "NOT a symmetrical dimer",',/
     2,' THE MAX. POSS. IS THE No. OF MICRO STATES OR LESS, e.g. 66!')
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "F EL. - SINGLE ION OR ("ELSE") DIMER"!
      ELSE IF(KLWERT.EQ.2)THEN
      IF(IOPT2.EQ.0)THEN
C**   D ELECTRONS, "SINGLE ION":
      NRVAL=ND252
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
      IF(LESS.EQ.0)THEN
      WRITE(*,2184)ND252
      WRITE(11,2184)ND252
 2184 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/,' (0 '
     1,'=> "PRE-OCC.", WHICH IS =No.OF STATES OR =ND252, =',I5,')')
CKR      IF(JAFAST.NE.0)THEN
CKR     3' BECAUSE JAFAST.NE.0 ("TEST"), THE MAX. POSS. IS NRVALF = ',I4)
CKR      ENDIF
      ENDIF
      ELSE IF(IOPT2.EQ.1)THEN
C**   D ELECTRONS, "DIMER" (IOPT2=2 NOT POSS. AT ALL!):
      NRVAL=MULMUD(NREL)
      WRITE(*,2149)NRVAL,ND28
      WRITE(11,2149)NRVAL,ND28
 2149 FORMAT(' INPUT IN I3 THE No. OF STATES TO BE CONSIDERED',/
     1' (0 => "PRE-OCC." <=> (SPIN-)MULTIPL.*(ORB.-)MULTIPL.;',/,
     2' THE MAX. POSS. IS ND28! THESE ARE =',2I3,')')
      ENDIF
C**   ENDIF BEFORE BELONGS TO "D EL. - SINGLE ION OR ("ELSE") DIMER"!
      ENDIF
C**   ENDIF BEFORE BELONGS TO "KLWERT.EQ.3 OR .EQ.2"!
C** BREAK OF ALL IF's!
C
C**   NOW BOTH, KLWERT=2 AND KLWERT=3:
      IF(IOPT2.NE.2)THEN
      IF(LESS.EQ.0.OR.(IOPT2.EQ.1.AND.KLWERT.EQ.2))THEN
 8235 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=3404)NRVALI
      GOTO 4904
      ENDIF
 3404 READ(*,'(I3)',ERR=8235,END=4576)NRVALI
      LMN=1
 4904 WRITE(*,2137)NRVALI
      WRITE(11,2137)NRVALI
 2137 FORMAT(I4,' =NRVALI(No. OF STATES)!!!!!!!!!')
      WRITE(7,2371)NRVALI
 2371 FORMAT(I3,' =NRVALI(No. OF STATES)')
      IF(NRVALI.GT.0)NRVAL=NRVALI
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
C**   BUT THE ABS. MAXIMUM POSSIBLE IS:
      IF(NRVAL.GT.ND252)NRVAL=ND252
C**   FOR RESTRICTION(S) IN THE CASE OF "JAFAST.NE.0" SEE BELOW!
C**   NEXT LINE FOR "DIMER" - D AND/OR F EL.!:
CKR      IF(IOPT2.NE.0.AND.NRVAL.GT.NDS66)NRVAL=NDS66
      IF(IOPT2.NE.0.AND.NRVAL.GT.ND28)THEN
      WRITE(*,8334)
      WRITE(11,8334)
 8334 FORMAT(' NRVAL.GT.ND28: INPUT IN I1 YES/NO(0) "O.K."!')
 8335 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3405)JAOK
      GOTO 4905
      ENDIF
 3405 READ(*,'(I1)',ERR=8335,END=4576)JAOK
      LMN=1
 4905 WRITE(*,8337)JAOK
      WRITE(11,8337)JAOK
 8337 FORMAT(I2,' <=O.K.!!!!!!!!!')
      WRITE(7,8336)JAOK
 8336 FORMAT(I1,' <=O.K.')
      IF(JAOK.EQ.0)NRVAL=ND28
      ENDIF
      WRITE(*,9213)NRVALI,NRVAL
      WRITE(11,9213)NRVALI,NRVAL
 9213 FORMAT(' No. OF VALUES (INPUT AND CORR.) =',2I5,/)
      ENDIF
      ELSE IF(IOPT2.EQ.2)THEN
C**   "COMBINED MODEL"!
      NRVAL=JMULTI(NREL)
      WRITE(*,9214)NRVAL
      WRITE(11,9214)NRVAL
 9214 FORMAT(' No. OF VALUES FOR "COMBINED MODEL" =',I3)
      ENDIF
C
 1146 CONTINUE
C**   BELONGS TO "IF(KLWERT.LE.1)GOTO 1146"
C** BREAK OF ALL IF's!
      IF(KLWERT.NE.1)GOTO 9964
      WRITE(11,2184)ND252
 2834 WRITE(*,2184)ND252
      IF(LMN.EQ.0)THEN
      READ(77,'(I3)',ERR=5588,END=4403)NRVALI
      GOTO 9403
      ENDIF
 4403 READ(*,'(I3)',ERR=2834,END=4576)NRVALI
      LMN=1
 9403 WRITE(*,2529)NRVALI
      WRITE(11,2529)NRVALI
 2529 FORMAT(I4,' =NRVALI(for P-EL.)!!!!!!!!!')
      WRITE(7,2297)NRVALI
 2297 FORMAT(I3,' =NRVALI(for P-EL.)')
      IF(NRVALI.GT.0)NRVAL=NRVALI
      IF(NRVAL.GT.KASSUM)NRVAL=KASSUM
 9964 CONTINUE
C** BREAK OF ALL IF's!
C
C**   THE "LATER" MATRICES MUST NOT BE GREATER THEN THE "FORMER"!:
      IF(NRVAL.GT.NRVALF.AND.NRVALF.NE.0)THEN
      WRITE(*,1174)NRVAL,NRVALF
      WRITE(11,1174)NRVAL,NRVALF
 1174 FORMAT(' ERROR:',I4,'=NRVAL > NRVALF=',I4,': NRVAL => =NRVALF')
      NRVAL=NRVALF
      ENDIF
      NRVALX=NRVAL
      IF(NRVALF.GT.NRVAL)NRVALX=NRVALF
C
 9976 CONTINUE
C**   BELONGS TO "IF("NOT THE VERY FIRST RUN")GOTO 9976"
C** BREAK OF ALL IF's!
C
CKR      IF(JAFAST.GT.1)GOTO 9977
C     (JAFAST.EQ.2 <=> INTERFACE WAS READ IN FORMAT FREE)
      IF(KLICK2.NE.0.AND.(NEUEBS.EQ.0.OR.JAFAST.NE.0))GOTO 9977
      KLICK2=1
C
      DO 1247 J=1,NRVALX
      DO 7146 I=1,KASSUM
      IF(CDABS(EIVECV(I,J)).LT.PARWUR)EIVECV(I,J)=DCMPLX(ZERO,ZERO)
 7146 CONTINUE
 1247 CONTINUE
C
      DO 1246 K=1,5
      DO 7147 J=1,NRVALX
      DO 7148 I=1,NRVALX
      FMAT(I,J,K)=DCMPLX(ZERO,ZERO)
      IF(K.LE.3)GMAT(I,J,K)=DCMPLX(ZERO,ZERO)
 7148 CONTINUE
 7147 CONTINUE
 1246 CONTINUE
C
C**   FOR THE PERTURBATION-OPERATOR: FMAT (WITH THE RESP. G-FACTOR INCL.)
C     (GMAT RESERVED FOR OTHER PURPOSES - GFACTOR IS ONE THERE (BECAUSE NO
C     MAGN. FIELD CONCERNED!) - NO ORBITAL CONTRIBUTIONS THERE!):
C
C**   FIRSTLY THE Z-DIRECTION (FMAT(,,1)):
      DO 1445 IE=1,NRVALX
      IEND=NRVALX
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IEND=IE
      DO 2445 IEI=IE,IEND
C
      EIVECF=DCMPLX(ZERO,ZERO)
      EIVECG=DCMPLX(ZERO,ZERO)
      DO 5441 I=1,KASSUM
      EIVECQ=DCONJG(EIVECV(I,IE))*EIVECV(I,IEI)
C      EIVECI=DIMAG(DCONJG(EIVECV(I,IE))*EIVECV(I,IEI))
C      IF(EIVECI.NE.ZERO)WRITE(1,'(D16.8)')EIVECI
      EIVECF=EIVECF+EIVECQ*DBLE(MQUER(I,1))
C**   GRIFFITH P.284,EQ.(10.43) FOR ORBITAL REDUCTION ("REDFAZ()")!
      EIVECG=EIVECG+EIVECQ*DBLE(MQUER(I,2))
 5441 CONTINUE
      EIVECG=EIVECG*HALF
C
      FMAT(IE,IEI,1)=EIVECF
C**   FMAT(,,1) AND GMAT(,,1) ARE SYMM.!:
      FMAT(IEI,IE,1)=DCONJG(EIVECF)
      GMAT(IE,IEI,1)=EIVECG
      GMAT(IEI,IE,1)=DCONJG(EIVECG)
C
 2445 CONTINUE
 1445 CONTINUE
C
      IF(KLICKM.EQ.0.AND.(MOROUV.NE.0.OR.JATEST.NE.0))THEN
      KLICKM=1
C
CKR      IF(IN25.GT.24.AND.NGROUP.EQ.20.AND.
CKR     1((IBWWW(25).EQ.1).OR.(BWW(25).NE.ZERO)))THEN
CKR      REDFAZ(1)=BWW(25)
CKR      ENDIF
C-"CONDOR":
C      DO 4148 IE=1,10
C      DO 4248 IEI=1,10
C      FMATZ(IEI,IE)=FMAT(IEI,IE,1)*REDFAZ(1)+TWO*GMAT(IEI,IE,1)
C 4248 CONTINUE
C 4148 CONTINUE
      WRITE(*,2253)EIWERT(1),EIWERT(2)
      WRITE(11,2253)EIWERT(1),EIWERT(2)
 2253 FORMAT(' THE FIRST 5 EIGENVAL.:',2D22.14)
      WRITE(*,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      WRITE(11,'(3D22.14)')EIWERT(3),EIWERT(4),EIWERT(5)
      IF(IGR1.EQ.1)THEN
      WRITE(*,2235)
      WRITE(11,2235)
 2235 FORMAT(' THE FIRST STATE IS NOT DEGENERATED!')
      ENDIF
C-"CONDOR":
C      GOTO 2532
C ...... (ca. 80 lines concerning FMATZ(10,10) and G-FACTOR(S) deleted!)
C 2532 CONTINUE
      ENDIF
C**   ENDIF BEFORE BELONGS TO:
C     "IF(KLICKM.EQ.0.AND.(MOROUV.NE.0.OR.JATEST.NE.0))THEN"!
C** BREAK OF ALL IF's!
      IF(MOROUU.NE.0.AND.KLICK5.EQ.0)THEN
      KLICK5=1
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN
      WRITE(*,2242)
      WRITE(11,2242)
 2242 FORMAT(' COMPLEX MATRIX FMAT(I,I,1):'
     1,' PERT.-OPER. FOR Z-DIR.(ONLY); MATRIX IS DIAGONAL HERE:')
      WRITE(*,8928)
      WRITE(11,8928)
C8928 FORMAT(' UP TO NOW IN REDUKTanabe HERE ONLY THE ORBITAL PART IS IN
C    1CLUDED!')
      WRITE(11,2010)(FMAT(I,I,1),I=1,NRVALX)
      WRITE(*,2010)(FMAT(I,I,1),I=1,NRVALX)
C2010 FORMAT(6(1X,D12.4))
C
      WRITE(*,2282)
      WRITE(11,2282)
 2282 FORMAT(' COMPLEX MATRIX GMAT(,,1):'
     1,' GMAT HERE FOR Z-DIR. (ONLY); MATRIX IS DIAGONAL HERE:')
      WRITE(11,2010)(GMAT(I,I,1),I=1,NRVALX)
      WRITE(*,2010)(GMAT(I,I,1),I=1,NRVALX)
      ELSE
C-ELSE BELONGS TO: IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN
      WRITE(*,2224)
      WRITE(11,2224)
 2224 FORMAT(' COMPLEX MATRIX FMAT(,,1):'
     1,' PERT.-OPER. FOR Z-DIR.(ONLY); COLUMNS (GIVEN AS ROWS):')
      WRITE(*,8928)
      WRITE(11,8928)
 8928 FORMAT(' UP TO NOW IN REDUKTanabe HERE ONLY THE ORBITAL PART IS IN
     1CLUDED!')
      KASI=1
      IF(MOROUU.GT.1)KASI=NRVALX
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE MOROUU=1, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' MOROUU.GT.1, ALL COLUMNS, BUT STARTING WITH DIAG.-ELEM.!')
      ENDIF
      DO 1004 J=1,KASI
      WRITE(11,2010)(FMAT(I,J,1),I=J,NRVALX)
      WRITE(*,2010)(FMAT(I,J,1),I=J,NRVALX)
 2010 FORMAT(6(1X,D12.4))
 1004 CONTINUE
C
      WRITE(*,2228)
      WRITE(11,2228)
C**   ATTENTION: HERE IS SUBROUTINE REDUKT (NOT: "REDUCE")!
 2228 FORMAT(' COMPLEX MATRIX GMAT(,,1):'
     1,' GMAT HERE FOR Z-DIR. (ONLY); COLUMNS (GIVEN AS ROWS):'
     2,/,' (FOR DETAILS SEE FMAT ABOVE!)')
      DO 1056 J=1,KASI
      WRITE(11,2010)(GMAT(I,J,1),I=J,NRVALX)
      WRITE(*,2010)(GMAT(I,J,1),I=J,NRVALX)
 1056 CONTINUE
      ENDIF
C- ENDIF BELONGS TO: IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN - ELSE
      ENDIF
C**   END OF THE Z-DIRECTION (FMAT(,,1))!
C** BREAK OF ALL IF's!
C
C**   NOW STEPUP/STEPDOWN: FMAT(,,2) AND FMAT(,,3) FOR ORBITAL AND(!)
C     SPIN (GFACTOR OF TWO FOR SPIN INCL.!), GMAT(,,2) AND GMAT(,,3)
C     FOR SPIN ONLY (GFACTOR NOT(!) INCL.!):
C
C**   PERTURBATION-OPERATOR FOR X-DIRECTION IS FMAT(,,4), ORB.-PART OF
C     THIS IS HALF*(L- + L+), SPIN-PART IS GFACT*HALF*(S- + S+) (G-FACTOR
C     TIMES HALF RESULTS TO ONE!): 
C     - FIRSTLY PART OF FMAT(,,2), NAMELY L+;
C     - THEN PART OF FMAT(,,2), NAMELY TWO*S+:
C**   (PART OF GMAT(,,2) IS ONE(!)*S+ (WITHOUT ANY ORBITAL-PART!))
C**   (FMAT(,,2) ITSELF IS NOT SYMM., BUT FMAT(,,2) AND FMAT(,,3) ARE
C     SYMM. ONE TO THE OTHER!)
C
C**   ONLY STEP-DOWN OPERATORS HAVE BEEN USED IN SUBROUTINE SCHEMA!
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL!)
C
      DO 1446 IE=1,NRVALX
C**   ATTENTION: IEI=1(!),NRVALX HERE! - ONLY STEP-DOWN OP.!:
      IANF=1
      IEND=NRVALX
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IANF=IE
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IEND=IE 
      DO 2446 IEI=IANF,IEND
      EIVEDF=DCMPLX(ZERO,ZERO)
      EIVEDG=DCMPLX(ZERO,ZERO)
      DO 5442 J=1,KASSUM
      IF(EIVECV(J,IEI).EQ.DCMPLX(ZERO,ZERO))GOTO 5442
      DO 6442 I=1,NROFNR(J)
      IF(NOFROW(J,I).LT.0)THEN
      EIVECQ=DCONJG(EIVECV(-NOFROW(J,I),IE))*EIVECV(J,IEI)
C      EIVECI=DIMAG(DCONJG(EIVECV(-NOFROW(J,I),IE))*EIVECV(J,IEI))
C      IF(EIVECI.NE.ZERO)WRITE(1,'(D16.8)')EIVECI
C**   G-FACTOR FOR SPIN IS =2, BUT FORMALLY =1 FOR EIVEDG!
      EIVEDG=EIVEDG+EIVECQ
      ELSE
      QUOTTT=EIVSHT(J,I)
      EIVECQ=(DCONJG(EIVECV(NOFROW(J,I),IE))*EIVECV(J,IEI))*QUOTTT
C      EIVECI=DIMAG(DCONJG(EIVECV(NOFROW(J,I),IE))*EIVECV(J,IEI))*QUOTTT
C      IF(EIVECI.NE.ZERO)WRITE(1,'(D16.8)')EIVECI
      EIVEDF=EIVEDF+EIVECQ
      ENDIF
 6442 CONTINUE
 5442 CONTINUE
C
C**   EIVE-UP-F=EIVEDF("DOWN"), IF IE=IEI, I.E. E.G. FMAT(1,1,2)=FMAT(1,1,3)!
C     - AND THERE IS SOME MORE SYMM. CONCERN. UP AND DOWN (FMAT(,,3): "DOWN"):
      FMAT(IE,IEI,3)=EIVEDF
      FMAT(IEI,IE,2)=DCONJG(EIVEDF)
C**   FMAT NOT YET READY (ONLY ORBITAL PART)!
      GMAT(IE,IEI,3)=EIVEDG
      GMAT(IEI,IE,2)=DCONJG(EIVEDG)
C
 2446 CONTINUE
 1446 CONTINUE
C
      DO 1447 IE=1,NRVALX
      IANF=1
      IEND=NRVALX
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IANF=IE
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IEND=IE
      DO 2447 IEI=IANF,IEND
      FMAT(IEI,IE,4)=HALF*(FMAT(IEI,IE,2)+FMAT(IEI,IE,3))
      FMAT(IEI,IE,5)=HALF*(-FMAT(IEI,IE,2)+FMAT(IEI,IE,3))
C**   FMAT(,,5) CORRESP. TO JY-OPERATOR! -
C     ONE SHOULD THINK OF FMAT(,,5) AS BEING MULTIPL. BY I(MAG)!
C     (IF THE MATRIX OF THE JY-OPERATOR IS REQUIRED, FMAT(,,5)*I
C     WILL BE APPLIED!) Sy=(-S+ + S-)i/2
 2447 CONTINUE
 1447 CONTINUE
C
      IF(MOROUU.GT.1.AND.KLICK6.EQ.0)THEN
      KLICK6=1
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN
      WRITE(*,2229)
      WRITE(11,2229)
 2229 FORMAT(' COMPLEX MATRIX FMAT(I,I,2..5)'
     1,' (STEP- (2..3) AND PERT.-OPER. FOR X- AND',
     2/,' Y-DIR. (4..5)); (HERE!:) ONLY DIAGONAL WAS COMPUTED:')
      DO 1559 K=2,5
      WRITE(*,1558)K
      WRITE(11,1558)K
 1558 FORMAT(' NUMBER OF OPERATOR FMAT (2..5) =',I2)
      WRITE(11,2010)(FMAT(J,J,K),J=1,NRVALX)
      WRITE(*,2010)(FMAT(J,J,K),J=1,NRVALX)
 1559 CONTINUE
C
      WRITE(*,1557)
      WRITE(11,1557)
 1557 FORMAT(' COMPLEX MATRIX GMAT(I,I,2..3); (HERE!:) DIAGONAL:')
      DO 1556 K=2,3
      WRITE(*,1565)K
      WRITE(11,1565)K
 1565 FORMAT(' NUMBER OF OPERATOR GMAT (2..3) =',I2)
      WRITE(11,2010)(GMAT(J,J,K),J=1,NRVALX)
      WRITE(*,2010)(GMAT(J,J,K),J=1,NRVALX)
 1556 CONTINUE
      ELSE
C- ELSE BELONGS TO: IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' COMPLEX MATRIX FMAT(,,2..5)'
     1,' (STEP- (2..3) AND PERT.-OPER. FOR X- AND',
     2/,' Y-DIR. (4..5)); (HERE!:) ROWS:'
     3,/,' (BECAUSE OF SYMMETRY FMAT(1,2,2) = FMAT(2,1,3))')
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVALX
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
 1022 FORMAT(' BECAUSE MOROUU=2, ONLY ONE ROW!')
      ELSE
      WRITE(11,1008)
 1008 FORMAT(' BECAUSE MOROUU.GT.2, ALL ROWS!')
      ENDIF
      DO 1055 K=2,5
      WRITE(*,1050)K
      WRITE(11,1050)K
 1050 FORMAT(' NUMBER OF OPERATOR FMAT (2..5) =',I2)
      DO 1005 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVALX)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVALX)
 1005 CONTINUE
 1055 CONTINUE
C
C**   ATTENTION: HERE IS SUBROUTINE REDUKT (NOT: "REDUCE")!
      WRITE(*,1553)
      WRITE(11,1553)
 1553 FORMAT(' COMPLEX MATRIX GMAT(,,2..3); (HERE!:) ROWS:')
      DO 1551 K=2,3
      WRITE(*,1550)K
      WRITE(11,1550)K
 1550 FORMAT(' NUMBER OF OPERATOR GMAT (2..3) =',I2)
      DO 1552 I=1,KASI
      WRITE(11,2010)(GMAT(I,J,K),J=1,NRVALX)
      WRITE(*,2010)(GMAT(I,J,K),J=1,NRVALX)
 1552 CONTINUE
 1551 CONTINUE
C
      ENDIF
C- ENDIF BELONGS TO: IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN - ELSE
      ENDIF
C** BREAK OF ALL IF's!
C
      IF(JATEST.NE.0.AND.IOPT2.NE.0)THEN
      IF(KLICKH.EQ.0)THEN
      KLICKH=1
      WRITE(11,1581)
 1582 WRITE(*,1581)
 1581 FORMAT(' INSTEAD OF HEISENBERG COUPLING, THE ISING MODEL, THE XY M
     1ODEL',/,' OR ANY MODEL "BETWEEN" THESE TWO MAY BE APPLIED:',/,' IN
     2PUT IN 2F5.1 1.0.(ISING), 1.b., 1.1.(HEISENBERG), a.1., 0.1.(XY)')
      WRITE(11,1587)
      WRITE(*,1587)
 1587 FORMAT('   0.0  0.0 => HEISENBERG MODEL!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2F5.1)',ERR=5588,END=3406)FACZ,FACXY
      GOTO 4906
      ENDIF
 3406 READ(*,'(2F5.1)',ERR=1582,END=4576)FACZ,FACXY
      LMN=1
 4906 IF(FACZ.GT.ONE)FACZ=ONE
      IF(FACXY.GT.ONE)FACXY=ONE
      IF(FACZ.LT.ZERO)FACZ=ZERO
      IF(FACXY.LT.ZERO)FACXY=ZERO
      IF(FACZ.EQ.ZERO.AND.FACXY.EQ.ZERO)THEN
      FACZ=ONE
      FACXY=ONE
      ENDIF
      IF(FACXY.LT.ONE)FACZ=ONE
      IF(FACZ.LT.ONE)FACXY=ONE
      WRITE(7,1583)FACZ,FACXY
 1583 FORMAT(2F5.1,' =FACZ,FACXY')
      WRITE(*,1586)FACZ,FACXY
      WRITE(11,1586)FACZ,FACXY
 1586 FORMAT(' FACZ, FACXY =',2F6.1)
      FACZ=FACZ**2
      FACXY=FACXY**2
      ENDIF
C      DO 1584 IE=1,NRVALX !ERROR!!!
C      DO 1585 IEI=1,NRVALX
C      GMAT(IEI,IE,1)=FACZ*GMAT(IEI,IE,1)
C      GMAT(IEI,IE,2)=FACXY*GMAT(IEI,IE,2)
C      GMAT(IEI,IE,3)=FACXY*GMAT(IEI,IE,3)
C 1585 CONTINUE
C 1584 CONTINUE
      ENDIF
C** BREAK OF ALL IF's!
C
 9977 CONTINUE
C**   BELONGS TO "NO NEW MATRICES!"
C
CKR      IF(JAFAST.NE.0)THEN
C
CK      CALL TANFEL(NGROUP,
C       ...
CK     7,CRZMAT)
C
CKR      ELSE IF(JAFAST.EQ.0)THEN
C
      IF(KLICK2.NE.1.AND.NEUEBS.EQ.0)GOTO 9978
      KLICK2=2
C
      IF(IN25.GT.24.AND.NGROUP.EQ.20.AND.
     1((IBWWW(25).EQ.1).OR.(BWW(25).NE.ZERO)))THEN
      REDFAZ(1)=BWW(25)
      REDFAZ(2)=BWW(25)
      REDFAZ(3)=BWW(25)
      ENDIF
C
      DO 2268 IE=1,NRVALX
      IANF=1
      IEND=NRVALX
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IANF=IE
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IEND=IE
      DO 2267 IEI=IANF,IEND
      FMAT(IEI,IE,1)=FMAT(IEI,IE,1)*REDFAZ(1)+TWO*GMAT(IEI,IE,1)
 2267 CONTINUE
 2268 CONTINUE
C
      DO 1448 IE=1,NRVALX
      IANF=1
      IEND=NRVALX
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IANF=IE
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)IEND=IE
      DO 2448 IEI=IANF,IEND
      FMAT(IEI,IE,4)=FMAT(IEI,IE,4)*REDFAZ(2)
     1+GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
      FMAT(IEI,IE,5)=FMAT(IEI,IE,5)*REDFAZ(3)
     1-GMAT(IEI,IE,2)+GMAT(IEI,IE,3)
C**   FMAT(,,5) CORRESP. TO JY-OPERATOR! -
C     ONE SHOULD THINK OF FMAT(,,5) AS BEING MULTIPL. BY I(MAG)!
C     (IF THE MATRIX OF THE JY-OPERATOR IS REQUIRED, FMAT(,,5)*I
C     WILL BE APPLIED!) Sy=(-S+ + S-)i/2
 2448 CONTINUE
 1448 CONTINUE
 9978 CONTINUE
C
      IF(MOROUU.GT.1.AND.KLICK4.EQ.0)THEN
      KLICK4=1
      WRITE(*,2205)
      WRITE(11,2205)
 2205 FORMAT(
     1' COMPLEX MATRIX FMAT(,,1&4&5), NOW WITH SPIN PART INCLUDED')
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN
      WRITE(11,2209)
      WRITE(*,2209)
 2209 FORMAT(' (FMAT(I,I,1&4&5) - HERE DIAGONAL, REST NOT COMPUTED!)')
      ELSE
      KASI=1
      IF(MOROUU.GT.2)KASI=NRVALX
      IF(KASI.EQ.1)THEN
      WRITE(11,1022)
      ELSE
      WRITE(11,1008)
      ENDIF
      ENDIF
      DO 2201 K=1,5
      IF(K.EQ.2.OR.K.EQ.3)GOTO 2201
      WRITE(*,2202)K
      WRITE(11,2202)K
 2202 FORMAT(' NUMBER OF OPERATOR FMAT (,,No) =',I2)
      IF(JTSTZX.NE.0.AND.IOPT2.EQ.0)THEN
      WRITE(11,2010)(FMAT(J,J,K),J=1,NRVALX)
      WRITE(*,2010)(FMAT(J,J,K),J=1,NRVALX)
      DO 1704 J=2,NRVALX
      IF((CDABS(FMAT(J,J,K)+FMAT(J-1,J-1,K)).LT.PARWUR).
     1AND.(DABS(EIWERT(J)-EIWERT(J-1)).LT.PARWUR).
     1AND.(CDABS(FMAT(J,J,K)).GT.PARWUR)
     1)THEN
      WRITE(*,1703)PARWUR,J,J-1
      WRITE(11,1703)PARWUR,J,J-1
 1703 FORMAT(D10.2,2I7,' =PARWUR,J,J-1: "DEGENERATED"!')
      ENDIF
 1704 CONTINUE
      ELSE
      DO 2203 I=1,KASI
      WRITE(11,2010)(FMAT(I,J,K),J=1,NRVALX)
      WRITE(*,2010)(FMAT(I,J,K),J=1,NRVALX)
 2203 CONTINUE
      ENDIF
 2201 CONTINUE
      ENDIF
C ENDIF BELONGS TO "IF(MOROUU.GT.1.AND.KLICK4.EQ.0)THEN"!
C
      CALL SELECS(NGROUP,
     1EIWERT,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,FACZ,FACXY)
CKR      ENDIF
C
C**   RETURNS TO TANABE ("TANAKE")!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND REDUKT
      END
      BLOCKDATA KUPFER
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/CUPRUM/CHI111,FMATCU,GMATCU,WERTCU,JACUGD
     1,MOROUU,MOROUV,KLICKE,NOLAM
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,HALFMN=-0.5D0)
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      SAVE
      DATA JACUGD,MOROUU,MOROUV,KLICKE,NOLAM/0,0,0,0,0/
      DATA GMATCU/
C     THE BASIS IS -MS ... +MS, AND -1/2, +1/2 (NOT 1/2,-1/2) FOR CU(2+)!
     1-0.35D+01,8*ZERO,-0.25D+01,8*ZERO,-0.15D+01,8*ZERO,HALFMN,8*ZERO,
     1HALF,8*ZERO,0.15D+01,8*ZERO,0.25D+01,8*ZERO,0.35D+01,
     2ZERO,0.26457513D+01,8*ZERO,0.34641016D+01,8*ZERO,0.38729833D+01,
     28*ZERO,0.4D+01,8*ZERO,0.38729833D+01,8*ZERO,0.34641016D+01,8*ZERO,
     20.26457513D+01,8*ZERO,
     38*ZERO,0.26457513D+01,8*ZERO,0.34641016D+01,8*ZERO,0.38729833D+01,
     38*ZERO,0.4D+01,8*ZERO,0.38729833D+01,8*ZERO,0.34641016D+01,8*ZERO,
     30.26457513D+01,ZERO/
      DATA WERTCU/8*ZERO/
CEND BLOCKDATA KUPFER
      END
      SUBROUTINE SELECS(NGROUP,
     1WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,FACZ,FACXY)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=44)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/TWOJP1/JMULTI(13),NRVALJ,CFOSJ,CFOS
      COMMON/ABG/ALPHAJ(13),BETAJ(13),GAMMAJ(13),F4F(13),F6F(13)
     1,GFACT(13)
      COMMON/CUPRUM/CHI111,FMATCU,GMATCU,WERTCU,JACUGD
     1,MOROUU,MOROUV,KLICKE,NOLAM
      COMMON/MOWDAT/NOWDAT
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,DRITTL=ONE/DREI,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO
     1,HALFMN=-0.5D0,ONEMIN=-1.0D0,ONH=1.5D0,ONHMIN=-1.5D0)
      PARAMETER(SECHSS=6.0D0/7.0D0,VIERDR=4.0D0/3.0D0
     1,SIEBSE=7.0D0/6.0D0,ACHTSI=8.0D0/7.0D0
     1,ACHELF=8.0D0/11.0D0,ZWEISI=2.0D0/7.0D0)
      PARAMETER(VPREZ6=79577.47D0,AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC,BOLTZM=1.380658D-23,BOLZCM=0.695040D0
     2,SIMUBA=9.27402D-24,FNAMAC=AVOGAD*SIMUBA*SIMUBC/(BOLTZM/BOLZCM))
C     FNAMAC=AVOGAD*SIMUBA*SIMUBC*BOLTZM(IN SI UNIT J/K)/BOLZCM=
C     =AVOGAD*SIMUBA*SIMUBC/(1.380658D-23/0.695040D0)=
C     =AVOGAD*SIMUBA*SIMUBC*0.503412E23=3.27658E-6
      PARAMETER(REZSQ3=ONE/1.7320507D0,WURZ2=1.4142135D0,REZSQ2=
     1REZSQ3*WURZ2,WURZ3=1.7320507D0)
      DIMENSION DIRECZ(3),WERTIN(*),FMAT(*),GMAT(*),DIRCOS(3,6)
C
      DIMENSION FMATCH(ND1110,*),EIVEC(ND1110,*),PERTUR(ND1110,*)
     1,FMATY(ND1110,*),DUMMY(*),DUMMYD(*)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*),CPERTU(ND2828,*)
     1,CFMATY(ND2828,*)
      DIMENSION EIVAL0(ND28,3),EIVAL1(ND28,3),EIVAL2(ND1110,3)
      DIMENSION ZEEMN0(ND28,3),ZEEMN1(ND28,3),ZEEMN2(ND1110,3)
      DIMENSION ZEMN20(ND28,3),ZEMN21(ND28,3),ZEMN22(ND1110,3)
      DIMENSION CHI2(3)
      DIMENSION CHCGS2(3)
      DIMENSION CHFLD2(3)
      DIMENSION FMAGN2(3)
      DIMENSION FMUE2(3)
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      SAVE
      DATA KLICOC,JASPHE/0,0/
      DATA KLICK1,KLINEG/0,0/
      DATA KLICKW,MTRANS,KLICKX,NTRANS/0,0,0,0/
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
      DATA KLICCU,ACUGD,XCUGD,YCUGD/0,ONE,ONE,ONE/
      DATA TESLAO/ZERO/
      DATA DIRCOS/ONE,ZERO,ZERO,REZSQ3,REZSQ2,ZERO,REZSQ3,REZSQ3,REZSQ3
     1,ONE,ZERO,ZERO,ZERO,ONE,ZERO,ZERO,ZERO,ONE/
      DATA OLDDIZ,OLDDIX,OLDDIY/REZSQ3,REZSQ3,REZSQ3/
CKR      DATA NOLAM0/0/
CKR      IF(NOLAM0.EQ.0.AND.JATEST.NE.0.AND.NGROUP.EQ.20)THEN
CKR 2729 FORMAT(' PUT IN 0 IN I1 FOR "NO LAMBDA-TEST"!',/
CKR     1,' ("LAMBDA-TEST": 3 recipr. CHIs, calc. for TEMP of 2nd line',/
CKR     1,' of CHIINP.DAT, serve as 3 LAMBDAs instead of the one',/
CKR     1,' (standard-)LAMBDA else! (IOPT1=1 here!',/
CKR     1,' - This is really only a test!))')
CKR 2338 FORMAT(I2,' =NOLAM(bda)!!!!!!!!!')
CKR      ENDIF
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,21)
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(KLICCU.EQ.0.AND.IOPT2.EQ.1)THEN
      KLICCU=1
      WRITE(11,2827)
 2873 WRITE(*,2827)
 2827 FORMAT(' NOT a symmetrical dimer, but one with a special spin part
     1,',/,' e.g. a Ln - Cu - dimer! INPUT in F6.4,I1:',/,' gS(pin-Hamil
     1tonian)-factor for z-direction and >1 for YES;',/,' 0.0000 => 2.00
     100; gS=g/(g-1); g=gS/(gS-1). The spin part is',/,
     1' a spin-one-half part for 2, a spin=one part for 3,',/,' a spin-t
     1hree-half part for 4, and a sp',
     1'in-seven-half part for 8,',/,' respectively (gS.NE.0.:<2=>2)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(F6.4,I1)',ERR=5588,END=3407)ACUGD,JACUGD
      GOTO 4907
      ENDIF
 3407 READ(*,'(F6.4,I1)',ERR=2873,END=4576)ACUGD,JACUGD
      LMN=1
 4907 IF(JACUGD.LE.1)JACUGD=0
      IF(JACUGD.GT.4)JACUGD=8
      IF(ACUGD.NE.ZERO.AND.JACUGD.EQ.0)JACUGD=2
      IF(ACUGD.EQ.ZERO.AND.JACUGD.NE.0)ACUGD=TWO
      WRITE(7,2872)ACUGD,JACUGD
 2872 FORMAT(F6.4,I1,' =(Z)/JACUGD(dimer)')
      WRITE(*,2874)JACUGD
      WRITE(11,2874)JACUGD
 2874 FORMAT(' "NOT A SYMMETRICAL DIMER" WAS CHOSEN, YES/NO(0):',I2,'!!!
     1!!!!!!')
      IF(JACUGD.NE.0)THEN
      WRITE(*,2880)ACUGD
      WRITE(11,2880)ACUGD
 2880 FORMAT(' gS(pin-Hamiltonian)-factor z-direction =',F7.4,'!!!!!!!!!
     1')
C**   Attention: KASSMN=IGRUND*JACUGD IN SUGANH AND IN SUGANK (=IGRUND**2 ELSE)!
      IF(NRDIRE.EQ.1.AND.IOPT1.LE.1)GOTO 1599
      WRITE(11,1591)
 1593 WRITE(*,1591)
 1591 FORMAT(' gS for x-direction (zero =>gS for z-direction) in F6.4:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F6.4)',ERR=5588,END=3408)XCUGD
      GOTO 4908
      ENDIF
 3408 READ(*,'(F6.4)',ERR=1593,END=4576)XCUGD
      LMN=1
 4908 WRITE(7,1595)XCUGD
 1595 FORMAT(F6.4,' =XCUGD(dimer)')
      IF(XCUGD.EQ.ZERO)XCUGD=ACUGD
      WRITE(11,1597)XCUGD
      WRITE(*,1597)XCUGD
 1597 FORMAT(' gS(pin-Hamiltonian)-factor x-direction =',F7.4)
      XCUGD=XCUGD*HALF
      YCUGD=XCUGD
      IF(NRDIRE.LE.2.AND.IOPT1.NE.2)GOTO 1599
      WRITE(11,1592)
 1594 WRITE(*,1592)
 1592 FORMAT(' gS for y-direction (zero =>gS for z-direction) in F6.4:')
      IF(LMN.EQ.0)THEN
      READ(77,'(F6.4)',ERR=5588,END=3409)YCUGD
      GOTO 4909
      ENDIF
 3409 READ(*,'(F6.4)',ERR=1594,END=4576)YCUGD
      LMN=1
 4909 WRITE(7,1596)YCUGD
 1596 FORMAT(F6.4,' =YCUGD(dimer)')
      IF(YCUGD.EQ.ZERO)YCUGD=ACUGD
      WRITE(11,1590)YCUGD
      WRITE(*,1590)YCUGD
 1590 FORMAT(' gS(pin-Hamiltonian)-factor y-direction =',F7.4)
      YCUGD=YCUGD*HALF
 1599 CONTINUE
      ACUGD=ACUGD*HALF
C
      IF(JACUGD.LT.8)THEN
      DO 2881 K=1,3
      DO 2882 J=1,8
      DO 2883 I=1,8
      GMATCU(I,J,K)=ZERO
 2883 CONTINUE
 2882 CONTINUE
 2881 CONTINUE
      IF(JACUGD.EQ.2)THEN
      GMATCU(1,1,1)=HALFMN
      GMATCU(2,2,1)=HALF
      GMATCU(2,1,2)=ONE
      GMATCU(1,2,3)=ONE
      ENDIF
      IF(JACUGD.EQ.3)THEN
      GMATCU(1,1,1)=ONEMIN
      GMATCU(3,3,1)=ONE
      GMATCU(2,1,2)=WURZ2
      GMATCU(3,2,2)=WURZ2
      GMATCU(1,2,3)=WURZ2
      GMATCU(2,3,3)=WURZ2
      ENDIF
      IF(JACUGD.EQ.4)THEN
      GMATCU(1,1,1)=ONHMIN
      GMATCU(4,4,1)=ONH
      GMATCU(2,2,1)=HALFMN
      GMATCU(3,3,1)=HALF
      GMATCU(2,1,2)=WURZ3
      GMATCU(3,2,2)=2.0D0
      GMATCU(4,3,2)=WURZ3
      GMATCU(1,2,3)=WURZ3
      GMATCU(2,3,3)=2.0D0
      GMATCU(3,4,3)=WURZ3
      ENDIF
      ENDIF
C
      DO 2884 J=1,JACUGD
      DO 2885 I=1,JACUGD
      FMATCU(I,J,1)=GMATCU(I,J,1)*TWO
      FMATCU(I,J,2)=GMATCU(I,J,2)+GMATCU(I,J,3)
      FMATCU(I,J,3)=-GMATCU(I,J,2)+GMATCU(I,J,3)
 2885 CONTINUE
 2884 CONTINUE
C
      DO 1588 IE=1,JACUGD
      DO 1589 IEI=1,JACUGD
      FMATCU(IEI,IE,1)=FMATCU(IEI,IE,1)*ACUGD
      FMATCU(IEI,IE,2)=FMATCU(IEI,IE,2)*XCUGD
      FMATCU(IEI,IE,3)=FMATCU(IEI,IE,3)*YCUGD
 1589 CONTINUE
 1588 CONTINUE
C      DO 1584 IE=1,JACUGD !ERROR!!!
C      DO 1585 IEI=1,JACUGD
C      GMATCU(IEI,IE,1)=FACZ*GMATCU(IEI,IE,1)
C      GMATCU(IEI,IE,2)=FACXY*GMATCU(IEI,IE,2)
C      GMATCU(IEI,IE,3)=FACXY*GMATCU(IEI,IE,3)
C 1585 CONTINUE
C 1584 CONTINUE
      IF(MOROUT.NE.0)THEN
      WRITE(*,2225)
      WRITE(11,2225)
 2225 FORMAT(' MATRIX FMATCU(,,1..3; (HERE!:) ROWS:)')
      DO 1055 K=1,3
      WRITE(*,1050)K
      WRITE(11,1050)K
 1050 FORMAT(' NUMBER OF OPERATOR FMATCU (1..3) =',I2)
      DO 1005 I=1,JACUGD
      WRITE(11,2010)(FMATCU(I,J,K),J=1,JACUGD)
      WRITE(*,2010)(FMATCU(I,J,K),J=1,JACUGD)
 1005 CONTINUE
 1055 CONTINUE
 2010 FORMAT(6(1X,D12.4))
      WRITE(*,1553)
      WRITE(11,1553)
 1553 FORMAT(' MATRIX GMATCU(,,1..3); (HERE!:) ROWS:')
      DO 1551 K=1,3
      WRITE(*,1550)K
      WRITE(11,1550)K
 1550 FORMAT(' NUMBER OF OPERATOR GMATCU (1..3) =',I2)
      DO 1552 I=1,JACUGD
      WRITE(11,2010)(GMATCU(I,J,K),J=1,JACUGD)
      WRITE(*,2010)(GMATCU(I,J,K),J=1,JACUGD)
 1552 CONTINUE
 1551 CONTINUE
      ENDIF
C**   FOLLOWING ENDIF BELONGS TO "IF(JACUGD.NE.0)THEN"
      ENDIF
C**   FOLLOWING ENDIF BELONGS TO "IF(KLICCU.EQ.0.AND.IOPT2.EQ.1)THEN"
      ENDIF
C
      NEWFLD=0
      IF(JAVANV.EQ.0.AND.(TESLAC.NE.TESLAO))NEWFLD=1
      TESLAO=TESLAC
      IF(NOWDAT.NE.0)THEN
      DO 3312 I=1,3
      DIRECZ(I)=DIRCOS(I,LOWDAT(NRTEMP)/2+3)
CKR   EITHER 1.:1.:1. FOR DIRCOS(I,3), IF LOWDAT=0 OR =1, OR
C     "SIMULTANEOUSLY", IF LOWDAT IN CHIINP.DAT =2, 4, OR 6 (<=>0),
C     OR =3, 5, OR 7 (<=>1: "NOT TO BE FITTED")
      IF(LOWDAT(NRTEMP).GE.8)STOP 'NOWDAT'
CKR   (8&9<=>SCHOTTky heat capacity instead of "SIMULTANEOUSLY": NOT INCLUDED!)
 3312 CONTINUE
      ENDIF
      IF(IOPT1.GT.1.AND.(DIRECZ(1).NE.OLDDIZ.OR.DIRECZ(2).NE.OLDDIX
     1.OR.DIRECZ(3).NE.OLDDIY))NEWFLD=1
      OLDDIZ=DIRECZ(1)
      OLDDIX=DIRECZ(2)
      OLDDIY=DIRECZ(3)
      NURTMP=0
      IF(NEUEBS.EQ.0.AND.NEWFLD.EQ.0)NURTMP=1
C**   NEUEBS=1 FOR FIRST RUN!
C
      IF(IOPT2.EQ.2)THEN
      IF(KLICK1.EQ.0)THEN
      KLICK1=1
C**   COMBINED MODEL!: (NEXT LINE CANNOT REALLY BE ACTIVE!)
      IF(KLWERT.NE.3)STOP 'KLWERT'
      WRITE(*,1213)NRVAL
 1213 FORMAT(' THE DIMENSION OF THE BASIS IS (2J+1), I.E. =',I3)
      WRITE(11,1214)
 8236 WRITE(*,1214)
 1214 FORMAT(' THE COMBINED MODEL WILL RUN (POSS. ONLY FOR F EL.)!'
     1,/,' INPUT IN I2 THE LOWER DIMENSION NEEDED FOR THIS (< 2J+1)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I2)',ERR=5588,END=3410)N1728I
      GOTO 4910
      ENDIF
 3410 READ(*,'(I2)',ERR=8236,END=4576)N1728I
      LMN=1
 4910 WRITE(*,'(I3)')N1728I
      IF(N1728I.EQ.0.OR.N1728I.GT.JMULTI(NREL))N1728I=JMULTI(NREL)
      WRITE(7,2372)N1728I
 2372 FORMAT(I2,' =N1728I(Comb.Model)')
      WRITE(*,2237)N1728I
      WRITE(11,2237)N1728I
 2237 FORMAT(I3,' =N1728I(Comb.Model)!!!!!!!!!')
      IF(N1728I.EQ.JMULTI(NREL))THEN
      WRITE(*,1729)
      WRITE(11,1729)
 1729 FORMAT(' THE COMBINED WILL NOT REALLY RUN (ONLY FORMALLY: "TWICE 
     1THE SAME DIMENSION!")'
     2,/,' TO CHANGE THIS LATTER INPUT: INPUT IN I1 "1"!')
 8237 CONTINUE
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3411)NEWVAL
      GOTO 4911
      ENDIF
 3411 READ(*,'(I1)',ERR=8237,END=4576)NEWVAL
      LMN=1
 4911 WRITE(7,2373)NEWVAL
 2373 FORMAT(I1,' =NEWVAL(ue)')
      WRITE(*,2337)NEWVAL
      WRITE(11,2337)NEWVAL
 2337 FORMAT(I2,' =NEWVAL(ue)!!!!!!!!!')
      IF(NEWVAL.NE.0)GOTO 8236
      ENDIF
      IF(GFACT(NREL).NE.ZERO)THEN
      FLAM=TWO*(GFACT(NREL)-ONE)**2/(FNAMAC*GFACT(NREL)**2)
      ELSE IF(GFACT(NREL).EQ.ZERO)THEN
      FLAM=ONE
      WRITE(*,1215)NRVAL
 1215 FORMAT(' BECAUSE THE G-FACTOR NEEDED FOR THE COMBINED MODEL IS NOT
     1 AVAILABLE,',/,' THIS WILL RUN WITH TWICE THE SAME DIMENSION OF'
     2,I4,', I.E. IT WILL NOT REALLY RUN ("EU")')
      N1728I=NRVAL
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(KLICK1.EQ.0)THEN"
      IGRUND=N1728I
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(IOPT2.EQ.2)THEN ("COMB.MODEL")"
C
CKR      IF(KLICOC.EQ.0)THEN
CKR 2829 FORMAT(' CALL SUBROUTINE SPHERE ON FILE SPHNAG.f, YES/NO(0)!')
CKR 8323 FORMAT(' "CONDOR": JASPHE(re) ALWAYS => NO(0)!')
CKR      ENDIF
CKR      IF(JASPHE.NE.0.AND.TEMPIK(NRTEMP).GT.ZERO)THEN
CKR      CALL SPHERE(NGROUP,
CKR      ELSE
      CALL SELECT(NGROUP,
     1WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,FLAM
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,NURTMP,DIRCOS)
      CHI(1,1,1)=CHI111
CKR      ENDIF
C
C**   TESTS AND WARNINGS, IF ENERGIES ARE FITTED:
      IF(KLINEG.EQ.0)THEN
      KLINEG=1
      NEGMAX=0
      DO 3322 I=1,NDATAP
      IF(TEMPIK(I).LT.ZERO)THEN
      ITEMP=INT(DABS(TEMPIK(I))+0.0000000001D0)
      IF(ITEMP.GT.NEGMAX.AND.ITEMP.LE.979)NEGMAX=ITEMP
      ENDIF
 3322 CONTINUE
      IF(NEGMAX.NE.0)THEN
      IGRUNX=KASSUM
      IF(NRVALF.NE.0.AND.KASSUM.GT.NRVALF)IGRUNX=NRVALF
      IF(NEGMAX.GT.IGRUNX)THEN
      WRITE(*,3323)NEGMAX,IGRUNX
      WRITE(11,3323)NEGMAX,IGRUNX
 3323 FORMAT(' AT LEAST ONE OF THE ENERGY LEVELS TO BE FITTED'
     1,/,' DOES NOT EXIST:',I4,'.GT.',I4)
      STOP 'N.GT.I'
      ELSE IF(IOPT2.GT.0)THEN
      WRITE(*,3324)IGRUNX
      WRITE(11,3324)IGRUNX
 3324 FORMAT(' WARNING: ENERGY LEVELS TO BE FITTED ARE WITHOUT EXCHANGE 
     1COUPLING!',/,' THERE ARE ',I4,' LEVELS!')
      ENDIF
      ENDIF
      ENDIF
C**   END OF TESTS AND WARNINGS, IF ENERGIES ARE FITTED!
C**   HERE IN CONDOR ("ALWAYS", NOT ONLY BECAUSE STOP NKK IN MAGMOM & MOLLAM!):
CKR: Jan.2007:
CKR      IF(JAVANV.EQ.0.AND.NURTMP.EQ.0.AND.(KLICKX.EQ.0.OR.NTRANS.NE.0))
CKR     1THEN - DELETED!!!
CKR      ENDIF
C
      IF(MOROUT.NE.0.AND.KLICKE.EQ.0)THEN
C**   KLICKE=1 SEE BELOW!
      WRITE(11,7776)
 7766 WRITE(*,7776)
 7776 FORMAT(
     1' MORE OUTPUT IN SUBROUTINE SELECS FOR CHI (AND FOR ITS COMPONENTS
     1, IF MORE',/,' THEN ONE COMPONENT): FOR FIRST...NNTH TEMP. AND/OR 
     1FOR FIRST...NRTH',/,' VALUES OF CHI! INPUT IN 2I2 NN AND NR (0000 
     1=> 0101)!')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I2)',ERR=5588,END=3412)MOROUU,MOROUV
      GOTO 4912
      ENDIF
 3412 READ(*,'(2I2)',ERR=7766,END=4576)MOROUU,MOROUV
      LMN=1
 4912 WRITE(7,2374)MOROUU,MOROUV
 2374 FORMAT(2I2,' =MOROUU,MOROUV IN SELECS')
      WRITE(*,2437)MOROUU,MOROUV
      WRITE(11,2437)MOROUU,MOROUV
 2437 FORMAT(I3,I2,' =MOROUU,MOROUV IN SELECS!!!!!!!!!')
      ENDIF
      IF(MOROUU.EQ.0)MOROUU=1
      IF(MOROUV.EQ.0)MOROUV=1
C
CKR      IF(MTRANS.NE.2)THEN
C**   TO BE ABLE TO AVOID UNNECESSARY CALCULATIONS OF CHI FOR OUTPUT:
      CHISTA(NRTEMP)=CHI(1,1,1)
CKR      ELSE
C**   SUBROUTINE MOLLAM RETURNS WITH MTRANS=2:
C      IF(TEMPIK(NRTEMP).LE.ZERO)THEN
C      CHISTA(NRTEMP)=CHI(1,1,1)
C      ELSE
C      CHI(1,1,1)=CHISTA(NRTEMP)
C      ENDIF
CKR      ENDIF
C
      IF(NRTEMP.LE.MOROUU.AND.KLICKE.LE.MOROUV)THEN
C**   THE FOLLOWING OUTPUT AT LEAST ONCE!:
      WRITE(*,335)NRTEMP,CHISTA(NRTEMP)
      WRITE(11,335)NRTEMP,CHISTA(NRTEMP)
  335 FORMAT(' No. OF TEMP., CHI-START CALCULATED =',I4,D16.8)
      KLICKE=KLICKE+1
      ENDIF
C
C**   CHI(1,,) <=> CALCULATED VALUES - CHI(2,,) <=> MEASURED VALUES
C
C**   CHIMEA-SURED(LINE OF INPUT TABLE) => CHI(2,4,1) (,1:3,: DERIVED CHI'S):
      CHI(2,4,1)=CHIMEA(NRTEMP)
C**   BWWW(12:16)<=>FKWERT/SILAMB/THETA/CHIDIA/GEWFAC
C     (IBWWW(12:16).NE.0: WILL BE FITTED; IBWWW(12).NE.0: FK WILL BE FITTED
C     <=> IFITK=1)
      SILAMB=BWWW(13)
C**   I.E. THE MOLECULAR FIELD PARAMETER LAMBDA IN SI UNITS!
      CHI(1,2,1)=CHI(1,1,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(1,1,1).NE.ZERO)DENOM=-SILAMB+ONE/CHI(1,1,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(1,2,1)=ONE/DENOM
      ENDIF
      CHIDIA=BWWW(15)
C**   CHIDIA <=> CHI-0 <=> ADDITIVE CONSTANT TO CHI IN SI UNITS -
C     SHOULD NOT REALLY BE THE DIAMAGNETIC CONTRIBUTION TO CHI, BUT MAY BE!
      CHI(1,3,1)=CHI(1,2,1)+CHIDIA
      GEWFAC=BWWW(16)
C**   GEWFAC <=> FACTOR TO CHI MEASURED(!), AS A POSSIBILITY TO CORRECT
C     A POSSIBLY WRONG WEIGHT OF THE SAMPLE!
      CHI(1,4,1)=CHI(1,3,1)
      IF(GEWFAC.NE.ONE)CHI(1,4,1)=CHI(1,3,1)/GEWFAC
C
C     (CHI(1,1:4,1) <=> CHI CALCULATED, IN SI UNIT M**3/MOL, MEAN VALUES)
C     CHI(1,1:4,2) <=> ONE/CHI,
C     CHI(1,1:4,5) <=> MAGNETISATION IN SI UNIT TESLA*M**3/MOL (IN SUGANO:
C     CHIFLD),
C     CHI(1,1:4,3) <=> MAGNETIC MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G.
C     SATURATION MOMENT) (IN SUGANO: FMAGNB)
C     (PREVOR=-AVOGAD*SIMUBC=-7.01824E-6),
C     CHI(1,1:4,4) <=> EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS
C     (IN SUGANO: FMUE) (=SQRT(CHI*T*3.0*BOLTZM/(AVOGAD*SIMUBA*SIMUBC))),
C     CHI(1,1:4,6) <=> CHI IN CGS UNIT CM**3/MOL,
C     CHI(1,1:4,7) <=> PSEUDO EFFECTIVE MAGNETIC MOMENT
C     (WITH SQRT(CHI*(T-THETA))!):
      DO 3121 I=1,4
      CHI(1,I,2)=ZERO
      IF(CHI(1,I,1).NE.ZERO)CHI(1,I,2)=ONE/CHI(1,I,1)
      CHI(1,I,5)=CHI(1,I,1)*TESLAS
      CHI(1,I,3)=-CHI(1,I,5)/PREVOR
      CHI(1,I,4)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPIK(NRTEMP).GT.ZERO)CHI(1,I,4)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPIK(NRTEMP))
      CHI(1,I,7)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(1,I,7)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPTH)
      CHI(1,I,6)=CHI(1,I,1)*VPREZ6
 3121 CONTINUE
C
C**   NOW CORRECTIONS IN PRINCIPLE AS ABOVE, BUT REVERSED:
      CHI(2,3,1)=CHI(2,4,1)
      IF(GEWFAC.NE.ONE)CHI(2,3,1)=CHI(2,4,1)*GEWFAC
      CHI(2,2,1)=CHI(2,3,1)-CHIDIA
      CHI(2,1,1)=CHI(2,2,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(2,2,1).NE.ZERO)DENOM=+SILAMB+ONE/CHI(2,2,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(2,1,1)=ONE/DENOM
      ENDIF
C
      DO 3122 I=1,4
      CHI(2,I,2)=ZERO
      IF(CHI(2,I,1).NE.ZERO)CHI(2,I,2)=ONE/CHI(2,I,1)
      CHI(2,I,5)=CHI(2,I,1)*TESLAS
      CHI(2,I,3)=-CHI(2,I,5)/PREVOR
      CHI(2,I,4)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPIK(NRTEMP).GT.ZERO)CHI(2,I,4)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPIK(NRTEMP))
      CHI(2,I,7)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(2,I,7)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPTH)
      CHI(2,I,6)=CHI(2,I,1)*VPREZ6
 3122 CONTINUE
C
      CFOS=WERTIN(NRVAL)
      CFOSJ=WERTIN(NRVALJ)
      IF(MOROUT.NE.0)THEN
      LAUFNR=0
      NUROUT=0
      JASTOP=0
      NOCONV=1
      JASUCC=0
C     NUROUT.EQ.0 <=> "MORE OUTPUT", BUT NO TABLES!
      CALL RESTBL(DIFLOW,CFOS,IGR1,IGR2,NRVALF,IGRUND,NOCONV,JASUCC
     1,NRVAL,JASTOP,LAUFNR,JAFAST,CFOSJ,NRVALJ,NREL,KLWERT,KASSUM)
      ENDIF
C
C**   RETURNS TO REDUCT(ANABE) OR TO REDUCE(CKART) OR TO TANFEL!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SELECS
      END
      SUBROUTINE SELECT(NGROUP,
C**   CALLED BY REDUCT(ANABE)! -
C     CALLS: "SEE BELOW", BUT ALSO RESTBL FOR THE CASE OF "MORE OUTPUT"!
     1WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,NRVALF,IGRUND,PERTUR,FMATY
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NDMAL3,NREL14,NREL,KLWERT,NDS66,I10
     1,NDMAL4,ABST,GMAT,ND28
     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD,FLAM
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,JAABLT,TESLAS,JAFAST,KASSUM,NURTMP,DIRCOS)
C**   CALLS OF SUGANR(EAL), SUGANC(OMPLEX), SUGANH(EISENBERG) AND
C     SUGANK(OMPLEX HEISENBEREG): THERE ARE 12(!) DIFF. OPTIONS IOPT12,
C     WHICH RESULT FROM 4*3=12 INPUT-OPTIONS, AND THE LATTER ARE:
C     (IOPT1=:) ONE (MEAN) DIRECTION (=0), MEAN VALUE OF CHI (=1),
C     DIRECTION AT WILL (WITH Y: =2; WITHOUT Y: =3) (CKR: IOPT1=0 OR =3: %%)
C     (IOPT2=:) SINGLE ION (=0), SYMM.DIMER (=1), DIMER COMB.MOD. (=2)
C     IOPT12=3*IOPT1+IOPT2+1=1...12 - NRDIRE=1...3 - IOPT2=2 <=> COMB.MOD.
C**   THESE 4 ROUTINES WILL CALCULATE CHI WITH HELP OF CHIMAG!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(J20=44)
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
      COMMON/CUPRUM/CHI111,FMATCU,GMATCU,WERTCU,JACUGD
     1,MOROUU,MOROUV,KLICKE,NOLAM
      COMMON/CHINR/CHINR1
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,DRITTL=ONE/DREI,PARWUR=1.0D-6,PARWUQ=PARWUR**2,PARZER=ZERO
     1,HALFMN=-0.5D0,ONEMIN=-1.0D0)
      PARAMETER(SECHSS=6.0D0/7.0D0,VIERDR=4.0D0/3.0D0
     1,SIEBSE=7.0D0/6.0D0,ACHTSI=8.0D0/7.0D0
     1,ACHELF=8.0D0/11.0D0,ZWEISI=2.0D0/7.0D0)
      PARAMETER(VPREZ6=79577.47D0,AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC,BOLTZM=1.380658D-23,BOLZCM=0.695040D0
     2,SIMUBA=9.27402D-24,FNAMAC=AVOGAD*SIMUBA*SIMUBC/(BOLTZM/BOLZCM))
C     FNAMAC=AVOGAD*SIMUBA*SIMUBC*BOLTZM(IN SI UNIT J/K)/BOLZCM=
C     =AVOGAD*SIMUBA*SIMUBC/(1.380658D-23/0.695040D0)=
C     =AVOGAD*SIMUBA*SIMUBC*0.503412E23=3.27658E-6
      PARAMETER(REZSQ3=ONE/1.7320507D0,WURZ2=1.4142135D0,REZSQ2=
     1REZSQ3*WURZ2)
      DIMENSION DIRECZ(3),WERTIN(*),FMAT(ND252,ND252,*)
     1,GMAT(ND252,ND252,*)
C
      DIMENSION FMATCH(ND1110,*),EIVEC(ND1110,*),PERTUR(ND1110,*)
     1,FMATY(ND1110,*),DUMMY(*),DUMMYD(*)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*),CPERTU(ND2828,*)
     1,CFMATY(ND2828,*)
      DIMENSION EIVAL0(ND28,3),EIVAL1(ND28,3),EIVAL2(ND1110,3)
      DIMENSION ZEEMN0(ND28,3),ZEEMN1(ND28,3),ZEEMN2(ND1110,3)
      DIMENSION ZEMN20(ND28,3),ZEMN21(ND28,3),ZEMN22(ND1110,3)
      DIMENSION CHIMOL(3),CHI0(3),CHI1(3),CHI2(3),CHINR1(3)
      DIMENSION CHCGS0(3),CHCGS1(3),CHCGS2(3)
      DIMENSION CHFLD0(3),CHFLD1(3),CHFLD2(3)
      DIMENSION FMAGN0(3),FMAGN1(3),FMAGN2(3)
      DIMENSION FMUE0(3),FMUE1(3),FMUE2(3),DIRCOS(3,6)
      INTEGER IOPT(12,3,3)
C**   PRE-OCC. OF DIRECZ IS /ONE,ONE,ONE/ OR /ONE,TWO,ZERO/,
C     BUT NORMALIZED, IN PROGRAM CONDOR!
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      SAVE
      DATA KLICK9/0/
CKR      DATA TESLAO/ZERO/
      DATA CHIMOL/ZERO,ZERO,ZERO/
C**   MULTIPLICITY CORRESPONDING TO GROUND STATE J VALUE OF CE3+...YB3+
C     (MAX=17; HO) =
C     DATA JMULTI/6,9,10,9,6,1,8,13,16,17,16,13,8/
CKR      DATA OLDDIZ,OLDDIX,OLDDIY/REZSQ3,REZSQ3,REZSQ3/
C**   "DIRECTION AT WILL" IS ALWAYS STORED AS Y ("WITH Y") AND AS X ("WITHOUT
C     Y") RESP.!:
      DATA IOPT/7,3,1,7,3,1,0,0,0,0,0,0
     2,7,3,1,7,3,1,0,0,0,7,3,1
     3,8,6,4,8,6,4,8,6,4,0,0,0
C**   THE FOLLOWING LINES OF IOPT ARE ONLY(!) FOR COMBINED MODEL,
C     THE PRECEDING LINES PARTLY: THE 3RD, 6TH, 9TH, 12TH DIGIT OF EACH LINE!
     4,0,0,2,0,0,2,0,0,0,0,0,0
     5,0,0,2,0,0,2,0,0,0,0,0,2
     6,0,0,5,0,0,5,0,0,5,0,0,0
     7,0,0,3,0,0,3,0,0,0,0,0,0
     8,0,0,3,0,0,3,0,0,0,0,0,3
     9,0,0,6,0,0,6,0,0,6,0,0,0/
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,22)
CKR      NEWFLD=0
CKR      IF(JAVANV.EQ.0.AND.(TESLAC.NE.TESLAO))NEWFLD=1
CKR      TESLAO=TESLAC
CKR      IF(IOPT1.GT.1.AND.(DIRECZ(1).NE.OLDDIZ.OR.DIRECZ(2).NE.OLDDIX
CKR     1.OR.DIRECZ(3).NE.OLDDIY))NEWFLD=1
CKR      OLDDIZ=DIRECZ(1)
CKR      OLDDIX=DIRECZ(2)
CKR      OLDDIY=DIRECZ(3)
CKR      NURTMP=0
CKR      IF(NEUEBS.EQ.0.AND.NEWFLD.EQ.0)NURTMP=1
CKR   NEUEBS=1 FOR FIRST RUN!
      IGRUND=NRVAL
C
      JACO21=1
      IF(IOPT2.EQ.2)JACO21=3
      DIFMAX=WERTIN(NRVAL)
      IOPT12=3*IOPT1+IOPT2+1
C
      NRLOOP=1
      IF(IOPT1.EQ.1)NRLOOP=NRDIRE
C
      MIXTUS=0
C**   WEIGHTING FACTOR OF SINGLE ION IN A MIXTURE OF DIMER AND SINGLE ION
C     MAY BE NOT ZERO!:
CKR      IF(MIXTUR.NE.0.AND.BWWW(18).NE.ZERO)MIXTUS=1
C
      IOPT13=IOPT12
      IEINS=1
CKR      IF(JACO21.NE.3.AND.MIXTUS.NE.0)THEN
C      IOPT13=IOPT12+1
C      IEINS=2
CKR      ENDIF
      JACOMX=JACO21
CKR      IF(MIXTUS.NE.0)JACOMX=3
      DO 222 KOMBIN=IEINS,JACOMX
      DO 221 IDIR=1,NRLOOP
C**   DIRECTION COSINUS:
C     (IOPT1=:) ONE (MEAN) DIRECTION (=0), MEAN VALUE OF CHI (=1),
C     DIRECTION AT WILL: WITH Y (=2), WITHOUT Y (=3). (CKR: IOPT=0 OR =3: %%)
      IF(IOPT1.LE.1)THEN
      IF(IOPT1.EQ.0)NRCOSI=NRDIRE
      IF(IOPT1.EQ.1)NRCOSI=IDIR+3
      DO 1312 I=1,3
      DIRECZ(I)=DIRCOS(I,NRCOSI)
 1312 CONTINUE
      ENDIF
C**   NRSTOR=1,2(,3) <=> z,x(,y)-DIRECTION!:
      NRSTOR=NRDIRE
      IF(IOPT1.EQ.1)NRSTOR=IDIR
      IF(IOPT1.EQ.2)NRSTOR=3
CKR      IF(IOPT1.EQ.3)NRSTOR=2
      IOPT99=IOPT(IOPT13,NRSTOR,KOMBIN)
      IF(IOPT99.EQ.0)STOP 'IOPT=0'
      IF(MOROUT.NE.0.AND.KLICK9.LE.9)THEN
      KLICK9=KLICK9+1
      WRITE(*,1278)IOPT99,IOPT13,NRSTOR,KOMBIN
      WRITE(11,1278)IOPT99,IOPT13,NRSTOR,KOMBIN
 1278 FORMAT(' (IOPT99=)IOPT(IOPT13,NRSTOR,KOMBIN) =',I2,'(',3I2,')')
      ENDIF
      GOTO (1,2,3,4,5,6,7,8)IOPT99
    1 NRSORT=NRSTOR
C**   NRSORT FOR SUBROUTINE SUGANO, I.E. FOR (MORE) OUTPUT, AND
C     FOR "JAVANV" FOR LESS COEFF. OF 2ND ORDER!
      NRROUT=2
C      CALL SUGANR(NRROUT,IGRUND
C     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
C     2,EIVAL0(1,NRSTOR),ZEEMN0(1,NRSTOR),ZEMN20(1,NRSTOR),DIFLOW,DIFMAX
C     3,PERTUR,FMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C     4,ND252,ND1110,ND28,ND2828,NDMAL3
C     5,CHI0(NRSTOR),CHCGS0(NRSTOR),CHFLD0(NRSTOR),TEMPTH,JAABLT,TESLAS
C     6,FMAGN0(NRSTOR),FMUE0(NRSTOR),NRTEMP,CPXMAT,EIVECC,JACUGD,FMATCU)
C**   CHI0(1) <=> FIRST (Z-) DIRECTION (MAY BE ONLY THIS ONE DIRECTION!))
C - CONDOR: "4"SUGANC:
      CALL SUGANC(NRROUT,IGRUND
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL0(1,NRSTOR),ZEEMN0(1,NRSTOR),ZEMN20(1,NRSTOR),DIFLOW,DIFMAX
     3,CPERTU,CFMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI0(NRSTOR)
     5,CHCGS0(NRSTOR),CHFLD0(NRSTOR),TEMPTH,JAABLT,TESLAS,FMAGN0(NRSTOR)
     6,FMUE0(NRSTOR),NRTEMP,FMATCH,EIVEC,JACUGD,FMATCU)
      GOTO 221
    2 NRSORT=NRSTOR+3
      NRROUT=2
C      CALL SUGANR(NRROUT,IGRUND
C     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
C     2,EIVAL1(1,NRSTOR),ZEEMN1(1,NRSTOR),ZEMN21(1,NRSTOR),DIFLOW,DIFMAX
C     3,PERTUR,FMATY,NRVAL,JAVANV,MOROUT,NRSORT,NURTMP
C     4,ND252,ND1110,ND28,ND2828,NDMAL3
C     5,CHI1(NRSTOR),CHCGS1(NRSTOR),CHFLD1(NRSTOR),TEMPTH,JAABLT,TESLAS
C     6,FMAGN1(NRSTOR),FMUE1(NRSTOR),NRTEMP,CPXMAT,EIVECC,JACUGD,FMATCU)
C - CONDOR: "5"SUGANC:
      CALL SUGANC(NRROUT,IGRUND
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL1(1,NRSTOR),ZEEMN1(1,NRSTOR),ZEMN21(1,NTSTOR),DIFLOW,DIFMAX
     3,CPERTU,CFMATY,NRVAL,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI1(NRSTOR)
     5,CHCGS1(NRSTOR),CHFLD1(NRSTOR),TEMPTH,JAABLT,TESLAS,FMAGN1(NRSTOR)
     6,FMUE1(NRSTOR),NRTEMP,FMATCH,EIVEC,JACUGD,FMATCU)
      GOTO 221
    3 NRSORT=NRSTOR
      NRRUFX=0
      IF(IOPT1.EQ.1)NRRUFX=NRSTOR
C      CALL SUGANH(FKWERT,ABST,GMAT,IGR1
C     1,WERTIN,FMAT,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
C     2,EIVAL2(1,NRSTOR),ZEEMN2(1,NRSTOR),ZEMN22(1,NRSTOR),DIFLOW,DIFMAX
C     3,PERTUR,FMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP,NRRUFX
C     4,ND252,ND1110,ND28,ND2828,NDMAL3
C     5,CHI2(NRSTOR),CHCGS2(NRSTOR),CHFLD2(NRSTOR),TEMPTH,JAABLT,TESLAS
C     6,FMAGN2(NRSTOR),FMUE2(NRSTOR),NRTEMP,CPXMAT,EIVECC
C     7,JACUGD,FMATCU,GMATCU,WERTCU) - CONDOR:
      CALL SUGANK(FKWERT,ABST,GMAT
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL2(1,NRSTOR),ZEEMN2(1,NRSTOR),ZEMN22(1,NRSTOR),DIFLOW,DIFMAX
     3,CPERTU,CFMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP,NRRUFX
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI2(NRSTOR)
     5,CHCGS2(NRSTOR),CHFLD2(NRSTOR),TEMPTH,JAABLT,TESLAS,FMAGN2(NRSTOR)
     6,FMUE2(NRSTOR),NRTEMP,FMATCH,EIVEC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
      GOTO 221
    4 NRSORT=NRSTOR
      NRROUT=2
      CALL SUGANC(NRROUT,IGRUND
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL0(1,3),ZEEMN0(1,3),ZEMN20(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI0(3)
     5,CHCGS0(3),CHFLD0(3),TEMPTH,JAABLT,TESLAS,FMAGN0(3),FMUE0(3)
     6,NRTEMP,FMATCH,EIVEC,JACUGD,FMATCU)
      GOTO 221
    5 NRSORT=NRSTOR+3
      NRROUT=2
      CALL SUGANC(NRROUT,IGRUND
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL1(1,3),ZEEMN1(1,3),ZEMN21(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,NRVAL,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI1(3)
     5,CHCGS1(3),CHFLD1(3),TEMPTH,JAABLT,TESLAS,FMAGN1(3),FMUE1(3)
     6,NRTEMP,FMATCH,EIVEC,JACUGD,FMATCU)
      GOTO 221
    6 NRSORT=NRSTOR
      NRRUFX=0
      IF(IOPT1.EQ.1)NRRUFX=NRSTOR
      CALL SUGANK(FKWERT,ABST,GMAT
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL2(1,3),ZEEMN2(1,3),ZEMN22(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP,NRRUFX
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI2(3)
     5,CHCGS2(3),CHFLD2(3),TEMPTH,JAABLT,TESLAS,FMAGN2(3),FMUE2(3)
     6,NRTEMP,FMATCH,EIVEC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
      GOTO 221
C**   AND NOW FOR IOPT2=0, I.E. FOR (SINGLE) ION!:
    7 NRSORT=NRSTOR
      NRROUT=2
C      CALL SUGANR(NRROUT,IGRUND
C     1,WERTIN,FMAT,GMAT,IGR1,FMATCH,TESLAC,DIRECZ,EIVEC,DUMMY
C     2,EIVAL2(1,NRSTOR),ZEEMN2(1,NRSTOR),ZEMN22(1,NRSTOR),DIFLOW,DIFMAX
C     3,PERTUR,FMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C     4,ND252,ND1110,ND28,ND2828,NDMAL3
C     5,CHI2(NRSTOR),CHCGS2(NRSTOR),CHFLD2(NRSTOR),TEMPTH,JAABLT,TESLAS
C     6,FMAGN2(NRSTOR),FMUE2(NRSTOR),NRTEMP,CPXMAT,EIVECC,JACUGD,FMATCU)
C - CONDOR: "8"SUGANC:
      CALL SUGANC(NRROUT,IGRUND
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL2(1,NRSTOR),ZEEMN2(1,NRSTOR),ZEMN22(1,NRSTOR),DIFLOW,DIFMAX
     3,CPERTU,CFMATY,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI2(NRSTOR)
     5,CHCGS2(NRSTOR),CHFLD2(NRSTOR),TEMPTH,JAABLT,TESLAS,FMAGN2(NRSTOR)
     6,FMUE2(NRSTOR),NRTEMP,FMATCH,EIVEC,JACUGD,FMATCU)
      GOTO 221
    8 NRSORT=NRSTOR
      NRROUT=2
      CALL SUGANC(NRROUT,IGRUND
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIVAL2(1,3),ZEEMN2(1,3),ZEMN22(1,3),DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3,CHI2(3)
     5,CHCGS2(3),CHFLD2(3),TEMPTH,JAABLT,TESLAS,FMAGN2(3),FMUE2(3)
     6,NRTEMP,FMATCH,EIVEC,JACUGD,FMATCU)
  221 CONTINUE
  222 CONTINUE
C
      DO 333 IDIR=1,NRLOOP
      NRSTOR=NRDIRE
      IF(IOPT1.EQ.1)NRSTOR=IDIR
      IF(IOPT1.EQ.2)NRSTOR=3
CKR      IF(IOPT1.EQ.3)NRSTOR=2
      CHIMOL(NRSTOR)=CHI2(NRSTOR)
      IF(JACO21.EQ.3)THEN
C**   "COMBINED MODEL"! - CHIMOL(NRSTOR)=...:
C     (CHI0 <=> THE LOWER DIMENSION, CHI1 THE GREATER ONE FOR THE SINGLE ION!)
      IF(CHI2(NRSTOR).EQ.ZERO)THEN
      IF(CHI0(NRSTOR).EQ.ZERO)THEN
      CHQUOT=ONE
      ELSE
      STOP 'ERROR'
      ENDIF
      ELSE
      CHQUOT=CHI0(NRSTOR)/CHI2(NRSTOR)
      ENDIF
      CHDIFF=CHI1(NRSTOR)-CHI0(NRSTOR)
      FLAMBD=FLAM*FKWERT
C**   ... IF GFACT.NE.ZERO - OTHERWISE: IOPT2=2 <=> COMB.MOD. IS NOT
C     POSSIBLE, BECAUSE FLAM IS NOT DEFINED! IT WILL RUN WITH TWICE
C     THE SAME DIMENSION AND FLAM=ONE, I.E. IT WILL NOT REALLY RUN!
C**   "TWICE THE SAME DIMENSION" MEANS: CHI1-CHI0=CHDIFF=ZERO,
C     CHQUOT=CHI1/CHI2, AND CHIMOL=CHI2 ("FULL" DIMENSION OR NOT)!
C     (CHIMOL=CHI1 FOR FLAMBD=ZERO <=> "NO COUPLING", BECAUSE THEN
C     CHI2=CHI0 AND CHQUOT=ONE!)
C
      CHIMOL(NRSTOR)=CHI1(NRSTOR)/(CHQUOT-FLAMBD*CHDIFF)
      ENDIF
C
CKR      IF(MIXTUS.NE.0)
CKR     1CHIMOL(NRSTOR)=CHIMOL(NRSTOR)*(ONE-BWWW(18))+BWWW(18)*CHI1(NRSTOR)
  333 CONTINUE
C
      IF(NRLOOP.EQ.1)THEN
C**   CHI(1,1:4,1) <=> CHI CALCULATED, IN SI UNIT M**3/MOL, MEAN VALUES:
C     CHI(1,1,1)=CHIMOL(NRSTOR)
C**   (NRLOOP.EQ.1) MAY BE <=> INTEGRATION! CHI111 IN COMMON!:
      CHI111=CHIMOL(NRSTOR)
      ELSE IF(NRLOOP.EQ.2)THEN
      CHI111=(CHIMOL(1)+TWO*CHIMOL(2))*DRITTL
      ELSE IF(NRLOOP.EQ.3)THEN
CKR      IF(NRTEMP.EQ.1)THEN
C      CHINR1(1)=ONE/CHIMOL(1)
C      CHINR1(2)=ONE/CHIMOL(2)
C      CHINR1(3)=ONE/CHIMOL(3)
C      ENDIF
C      IF(NOLAM.NE.0)THEN
C      DO 1114 I=1,3
C      CHIMOL(I)=ONE/(ONE/CHIMOL(I)+CHINR1(I))
C 1114 CONTINUE
CKR      ENDIF
      CHI111=(CHIMOL(1)+CHIMOL(2)+CHIMOL(3))*DRITTL
      ENDIF
C
C**   IF A MEAN VALUE OF TWO OR THREE DIRECTIONS WAS CALCULATED OR NOT:
C     (INTEGRATION <=> IOPT1=2!)
      IF(IOPT1.EQ.1)THEN
      DO 1141 I=1,3
      CHIZXY(I,NRTEMP)=CHIMOL(I)
 1141 CONTINUE
      IF(NRTEMP.LE.MOROUU.AND.KLICKE.LE.MOROUV)THEN
      WRITE(*,334)NRTEMP,(CHIMOL(I),I=1,3)
      WRITE(11,334)NRTEMP,(CHIMOL(I),I=1,3)
  334 FORMAT(' No.OF TEMP., COMPON.OF CHI =',I4,3D16.8)
      ENDIF
      ENDIF
C
C**   RETURNS TO SELECS!:
      RETURN
CEND SELECT
      END
      SUBROUTINE RESTBL(DIFLOW,CFOSIN,IGR1IN,IGR2IN,NRVALF,IGRUND,NOCONV
     1,JASUCC,NRVAL,JASTOP,LAUFNR,JAFAST,CFOSJN,NRVALJ,NREL,KLWERT,KASSU
     2M)
C**   RESTBL <=> RES(ALT)T(A)BL(ES)! - BUT ALSO FOR "MORE OUTPUT", IF
C     NUROUT.EQ.0! - WILL BE CALLED MAINLY BY SUSFIT TO PUT OUT THE
C     RESULTS OF COMPUTATION IN THE FORM OF TABLES, BUT ALSO CALLED BY
C     SELECT TO GIVE "MORE OUTPUT"!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      CHARACTER*16 QKK(7),QJJ(4),QII(2),QSS(2)
      CHARACTER*16 QLIST(44),QQLIST(44)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   NEXT COMMON FROM INPUT FILE(S):
      PARAMETER(I20=44,J20=44)
      CHARACTER*5 QB(J20),QV(J20),QQ(J20)
      COMMON/QBQVQQ/QB,QV,QQ
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),BWWWIN(J20)
     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
     2,IN24,IN25
      COMMON/CROVER/MIXTUR,JAOVER,LOWHIG,LISTNG,VLSTNG(44)
C
      COMMON/FIX/SQXFIX,CFMSFX,CFOSFX,IGR1FX,IGR2FX,BWNULL(I20),CHIFIX
     1,CFOSXJ,NOTONE,JAFIX,BWWTMP(J20),BWWWMN(J20),BWWWMX(J20),MINMAX
      DIMENSION CHIFIX(601,4),WLSTNG(44)
C
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,PARWUQ=PARWUR**2
     1,FOUR=4.0D0,VPREZ6=1.0D6/(FOUR*3.1415926D0))
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,PREVOR=-AVOGAD*SIMUBC)
C
      DIMENSION IDATA(3,6,36),IIN(3,6),II(3,6),KEND(36)
C**   II(1,)=1 <=> CALCUL. CHI! - II(1,)=2 <=> MEASURED CHI!
C**   II(2,)=1 <=> CHI-START! - II(2,)=2 <=> CHI-CALC.*F-CHI0!
C     - II(2,)=3 <=> CHI-CALC.*F! - II(2,)=4 <=> CHI-CALC.,
C     I.E. CHI INCL. LAM., CHI0 AND /F; BUT ATTENTION: MEASURED CHI
C     ITSELF, I.E. WITHOUT ANY CORRECTIONS, IS TO BE COMPARED WITH CHI-CALC.!
C**   II(3,)=1 <=> CHI IN SI UNITS - II(3,)=4 <=> MU-EFF.! - II(3,)=6 <=> "CGS"!
      SAVE
      DATA QKK
     1/'CHI IN SI UNITS ','     1/CHI      ','   MAGN.MOMENT  '
     1,'  MU EFFECTIVE  ','    CHI*FIELD   ','   CHI IN CGS   '
     2,' MU EFF.(THETA) '/
      DATA QJJ
     1/'   CHI-START    ','CHI-CALC.*F-CHI0','  CHI-CALC.*F   '
     1,'   CHI-CALC.    '/
      DATA QII/'   CALCULATED   ','    MEASURED    '/
      DATA QSS/'  CALCUL. CHI   ','  MEASURED CHI  '/
      DATA NOMORE,KLICK1,KLICK2/0,0,0/
C
      DATA QLIST
     1/' =DIR. FIELD(Z),',' =DIR. FIELD(X),',' =DIR. FIELD(Y),'
     2,' =DIST. (DIMER),',' =NEW FIELD,    ',' =RACAH-B,      '
     3,' =RACAH-C,      ',' =F-INTEGRAL(2),',' =F-INTEGRAL(3),'
     4,' =F-INTEGRAL(4),',' =ZETA (1 EL.), ',' =ORB.RED.F.(Z),'
     5,' =ORB.RED.F.(X),',' =ORB.RED.F.(Y),','                '
     6,' =B20(WYBOURNE),',' =B22(WYBOURNE),',' =B40(WYBOURNE),'
     7,' =B42(WYBOURNE),',' =B43(WYBOURNE),',' =B44(WYBOURNE),'
     8,' =B60(WYBOURNE),',' =B62(WYBOURNE),',' =B63(WYBOURNE),'
     9,' =B64(WYBOURNE),',' =B66(WYBOURNE),',' =J(HEISENBERG),'
     1,' =MOL.FLD.PARAM,',' =THETA/C/WEISS,',' =CHI-0 (DIAM.),'
     1,' =CORR.(WEIGHT),',' %,             ',' %,             '
     2,' %,             ',' %,             ',' =B21(WYBOURNE),'
     3,' =B41(WYBOURNE),',' =B61(WYBOURNE),',' =B65(WYBOURNE),'
     4,' =ORBRED.F(ZXY),',' =ZETA (1 EL.), ',' =RACAHB / F**2,'
     5,' =RACAHC / F**4,',' = F(4)<=>F**6, '/
C
      DATA IDATA 
     1/1,4,1,1,4,2,1,4,3,1,4,5,1,4,6,1,4,4
     2,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     3,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     4,1,4,1,1,1,1,1,1,2,1,4,2,1,1,3,1,1,4
     5,1,4,1,1,1,1,1,1,2,1,4,2,1,4,3,1,4,4
     6,1,4,1,1,1,1,1,1,2,1,4,2,1,2,3,1,2,4
     7,1,4,1,1,1,1,1,1,2,1,4,2,1,3,3,1,3,4
     8,1,4,1,1,1,1,1,1,2,1,4,2,1,3,3,1,3,4
     9,1,4,1,1,4,2,1,4,3,1,4,6,1,4,7,1,4,4
     1,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
     1,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
     2,1,4,1,1,1,1,1,1,2,1,4,2,1,4,7,1,4,4
C
     1,2,4,1,1,4,1,2,4,2,1,4,2,2,4,4,1,4,4
     1,2,4,3,1,4,3,2,4,5,1,4,5,2,4,6,1,4,6
     2,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     2,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     3,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     3,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     4,2,4,1,1,4,1,2,1,1,1,1,1,2,1,4,1,1,4
     4,2,1,2,1,1,2,2,4,2,1,4,2,2,1,3,1,1,3
     5,2,4,1,1,4,1,2,1,1,1,1,1,2,1,4,1,1,4
     5,2,1,2,1,1,2,2,4,2,1,4,2,2,4,3,1,4,3
     6,2,4,1,1,4,1,2,1,1,1,1,1,2,2,4,1,2,4
     6,2,1,2,1,1,2,2,4,2,1,4,2,2,2,3,1,2,3
     7,2,4,1,1,4,1,2,1,1,1,1,1,2,3,4,1,3,4
     7,2,1,2,1,1,2,2,4,2,1,4,2,2,3,3,1,3,3
     8,2,4,1,1,4,1,2,1,1,1,1,1,2,3,4,1,3,4
     8,2,1,2,1,1,2,2,4,2,1,4,2,2,3,3,1,3,3
     9,2,4,1,1,4,1,2,4,2,1,4,2,2,4,4,1,4,4
     9,2,4,3,1,4,3,2,4,6,1,4,6,2,4,7,1,4,7
     1,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     1,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7
     1,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     1,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7
     2,2,4,1,1,4,1,2,1,1,1,1,1,2,4,4,1,4,4
     2,2,1,2,1,1,2,2,4,2,1,4,2,2,4,7,1,4,7/
C
      DATA KEND
     1/1,2,3,4,5,6,7,8,9,10,11,12,14,0,16,0,18,0,20,0,22,0,24,0,26,0,28,
     10,30,0,32,0,34,0,36,0/
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,23)
      IF(J2.NE.J20)STOP 'J.NE.J'
      IF(J2.NE.I20)STOP 'J.NE.I'
      DO 1511 I=1,J20
      QQ(I)=QB(I)
      IF(INBWWW(I).GE.8)QQ(I)=QV(I)
 1511 CONTINUE
C
      IF(NUROUT.EQ.0)THEN
C**   NUROUT=1, IF, AT THE END OF COMPUTATION, (A) TABLE(S) OF RESULT
C     IS/ARE RQUIRED!
C**   RETURNS TO SELECT HERE!:
      IF(NOMORE.NE.0)RETURN
      WRITE(11,3290)
 3289 WRITE(*,3290)
 3290 FORMAT(' ATTENTION PLEASE HERE IN SUBROUTINE RESTBL:',/,
     1' MOROUT.NE.0! INPUT IN I1 YES(0)/NO: NO MORE OUTPUT HERE')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3413)NOMORE
      GOTO 4913
      ENDIF
 3413 READ(*,'(I1)',ERR=3289,END=4576)NOMORE
      LMN=1
 4913 WRITE(*,2537)NOMORE
      WRITE(11,2537)NOMORE
 2537 FORMAT(I2,' =NOMORE OUTPUT HERE!!!!!!!!!')
      WRITE(7,2375)NOMORE
 2375 FORMAT(I1,' =NOMORE OUTPUT HERE')
      IF(NOMORE.EQ.0)THEN
      NOMORE=1
      RETURN
C**   RETURNS TO SELECT HERE!
      ENDIF
      NOMORE=0
      ENDIF
C
      SQX=ZERO
      CFMS=DIFLOW
      CFOS=CFOSIN
      CFOSJ=CFOSJN
      IGR1=IGR1IN
      IGR2=IGR2IN
      IF(NUROUT.NE.0)THEN
      SQX=SQXFIX
      CFMS=CFMSFX
      CFOS=CFOSFX
      CFOSJ=CFOSXJ
      IGR1=IGR1FX
      IGR2=IGR2FX
      ENDIF
C
      NDAT=1
      IF(NUROUT.NE.0)NDAT=NDATAP
      THETA=STBWWW(14)
      SILAMB=STBWWW(13)
      CHIDIA=STBWWW(15)
      GEWFAC=STBWWW(16)
      IF(NUROUT.NE.0)THEN
      THETA=BWNULL(14)
      SILAMB=BWNULL(13)
      CHIDIA=BWNULL(15)
      GEWFAC=BWNULL(16)
      ENDIF
      JTHETA=0
      IF(THETA.NE.ZERO.OR.IBWWW(14).NE.0)JTHETA=1
      JALAMB=0
      IF(SILAMB.NE.ZERO.OR.IBWWW(13).NE.0)JALAMB=1
      JACHI0=0
      IF(CHIDIA.NE.ZERO.OR.IBWWW(15).NE.0)JACHI0=1
      JAFFAC=0
      IF(GEWFAC.NE.ONE.OR.IBWWW(16).NE.0)JAFFAC=1
C**   JAFFAK(!) IN COMMON, <=> 13 OR 15 OR 16.
C
      MFITTT=MFIT
      KURZTB=6
      IF(NUROUT.NE.0)THEN
      KURZTB=2
      IF(MFIT.EQ.0.AND.LESS.EQ.0)KURZTB=1
      IF(MFIT.EQ.0.AND.LESS.NE.0)MFITTT=1
      IF(JASTOP.GE.3)KURZTB=JASTOP
      IF(KURZTB.EQ.3)MFITTT=0
      IF(LESS.EQ.0.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN
      IF(MFIT.EQ.0)THEN
      WRITE(*,829)
      WRITE(11,829)
  829 FORMAT(/,' HINT: OUTPUT CORRESPONDS TO "NO FITTING TAKES PLACE"')
      WRITE(11,831)
  832 WRITE(*,831)
  831 FORMAT(' INPUT 1, IF FORM OF OUTPUT => "<=> FITTING TAKES PLACE", 
     1',/,' BUT 3 (6) FOR "NO FITTING (FITTING), BUT 6 COLUMNS" (0 ELSE)
     2')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3414)MFITIN
      GOTO 4914
      ENDIF
 3414 READ(*,'(I1)',ERR=832,END=4576)MFITIN
      LMN=1
 4914 CONTINUE
      ELSE
      WRITE(*,830)
      WRITE(11,830)
  830 FORMAT(/,' HINT: OUTPUT CORRESPONDS TO "FITTING TAKES PLACE"')
      WRITE(11,828)
  827 WRITE(*,828)
  828 FORMAT(' INPUT 1, IF FORM OF OUTPUT => "<=> NO FITTING TAKES PLACE
     1"',/,' BUT 6 (3) FOR "FITTING (NO FITTING), BUT 6 COLUMNS" (0 ELSE
     2)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3415)MFITIN
      GOTO 4915
      ENDIF
 3415 READ(*,'(I1)',ERR=827,END=4576)MFITIN
      LMN=1
 4915 CONTINUE
      ENDIF
C
      WRITE(*,2377)MFITIN
      WRITE(11,2377)MFITIN
 2377 FORMAT(I2,' =MFITIN(FORM OF OUTPUT)!!!!!!!!!')
      WRITE(7,2376)MFITIN
 2376 FORMAT(I1,' =MFITIN(FORM OF OUTPUT)')
      MFITTT=MFITIN
      IF(MFIT.NE.0.AND.MFITIN.EQ.0)MFITTT=1
      IF(MFIT.NE.0.AND.MFITIN.EQ.1)MFITTT=0
      KURZTB=2
      IF(MFITTT.EQ.0)KURZTB=1
      IF(MFITTT.GE.3)KURZTB=6
      IF(MFITTT.EQ.3)MFITTT=0
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(LESS.EQ.0.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN"
      IF(MFITTT.EQ.0)THEN
      WRITE(*,829)
      WRITE(11,829)
      ELSE
      WRITE(*,830)
      WRITE(11,830)
      ENDIF
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(NUROUT.NE.0)THEN"!
      IF(MFITTT.EQ.0)THEN
C**   IF(JAFFAK.EQ.0.AND.JTHETA.EQ.0):
      KSTART=1
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=2
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=3
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=4
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=5
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=6
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=7
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=8
C
      IF(JAFFAK.EQ.0.AND.JTHETA.NE.0)KSTART=9
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.NE.0)
     1KSTART=10
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=11
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=12
      ELSE IF(MFITTT.NE.0)THEN
C**   IF(JAFFAK.EQ.0.AND.JTHETA.EQ.0):
      KSTART=13
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=15
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=17
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=19
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.EQ.0)
     1KSTART=21
      IF(JALAMB.NE.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=23
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=25
      IF(JALAMB.NE.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.EQ.0)
     1KSTART=27
C
      IF(JAFFAK.EQ.0.AND.JTHETA.NE.0)KSTART=29
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.EQ.0.AND.JTHETA.NE.0)
     1KSTART=31
      IF(JALAMB.EQ.0.AND.JACHI0.EQ.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=33
      IF(JALAMB.EQ.0.AND.JACHI0.NE.0.AND.JAFFAC.NE.0.AND.JTHETA.NE.0)
     1KSTART=35
      ENDIF
      KKK=KSTART
C
      IF(MORTEX.GT.0.AND.LESS.EQ.0.AND.KLICK1.EQ.0)THEN
      KLICK1=1
      WRITE(*,567)
      WRITE(11,567)
  567 FORMAT(' CHI((1)...(2),1:4,1:7):'
     1,' (1) CALCULATED VALUES, (2) VALUES BASED ON MEASURED ONES')
      WRITE(*,678)
      WRITE(11,678)
  678 FORMAT(' CHI(1,(1)...(4),1:7):'
     1,' (1) CALCULATED VALUES, E.G. FROM FORMULA OF VANVLECK,'
     2,/,' (2) ... INCLUDING MOLECULAR FIELD PARAMETER,'
     3,/,' (3) INCLUDING IN ADDITION CHI-0,',/,' (4) INCLUDING'
     4,' FURTHERMORE A CORRECTION OF WEIGHT OF SAMPLE.')
      WRITE(*,789)
      WRITE(11,789)
  789 FORMAT(' CHI(2,(1)...(4),1:7):',/
     1,' MEASURED VALUES WITH (1) THREE, (2) TWO, (3) ONE, (4) WITHOUT'
     2,' (I.E. AS READ IN)',/,' CORRECTIONS (CORRECTIONS IN PRINCIPLE'
     3,' AS ABOVE, BUT REVERSED)')
      WRITE(*,890)
      WRITE(11,890)
  890 FORMAT(' CHI(1:2,1:4.(1)...(7)):'
     1,' (1) CHI IN SI UNIT M**3/MOL, (2) RECIPROCAL CHI,',/
     2,' (5) MAGNETISATION IN SI UNIT TESLA*M**3/MOL, (3) MAGNETIC'
     3,/,' MOMENT OF 1 ATOM IN BOHR MAGNETONS (E.G. SATURATION MOMENT),'
     4,/,' (4) EFFECTIVE MAGNETIC MOMENT IN BOHR MAGNETONS, (6) CHI IN',
     5' CGS UNIT CM**3/MOL,',/,' (7) PSEUDO EFFECTIVE MAGNETIC MOMENT'
     6,' (WITH SQRT(CHI*(T-THETA))!).')
C** 1) CHI IN CGS UNIT CM**3/MOL = CHI IN SI UNIT M**3/MOL TIMES (VPREZ6=79577.47)
C   2) TESLA*M**3 = VOLT*SECOND*M WITH VOLT = KG*M**2/(AMPERE*SECOND**3)
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IF(MORTEX.GT.0.AND.LESS.EQ.0.AND.KLICK1.EQ.0)THEN"!
C
      LOOPNR=-1
C**   FROM BELOW (NEAR END):
  999 CONTINUE
C**   FOR EXTRA OUTPUT BELOW, IF "MORE DIRECTIONS" (DO 196), AND FOR "MORE TABLES":
      LOOPNR=LOOPNR+1
      KKK=KKK+LOOPNR
      DO 1234 J=1,6
      DO 7149 I=1,3
      II(I,J)=IDATA(I,J,KKK)
 7149 CONTINUE
 1234 CONTINUE
      IF(KURZTB.GT.2.AND.LOOPNR.EQ.0.AND.LESS.EQ.0)THEN
      WRITE(*,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(*,891)
      WRITE(11,891)
  891 FORMAT(
     1' ... THESE DIGITS MEAN THE FOLLOWING (DIMENSION CHI(2,4,7)):')
      WRITE(*,344)((II(I,J),I=1,3),J=1,6)
      WRITE(11,344)((II(I,J),I=1,3),J=1,6)
  344 FORMAT(
     1' CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,'), '
     1,'CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,'), '
     1,'CHI(',I1,',',I1,',',I1,'), CHI(',I1,',',I1,',',I1,')')
      WRITE(*,567)
      WRITE(11,567)
C 567 FORMAT: SEE ABOVE!
      WRITE(11,3453)(QKK(I),I=1,7)
      WRITE(11,3454)(QJJ(I),I=1,4)
 3453 FORMAT(' CHI(,,1:7) MEANS: ',7A16)
 3454 FORMAT(' THE FORMER (TO COMPARE WITH THAT) BASED ON CHI(1,1:4, ):
     1',4A16) 
      WRITE(*,3457)(QKK(I),I=1,7)
      WRITE(*,3458)(QJJ(I),I=1,4)
 3457 FORMAT(' CHI( , ,1:7) MEANS:       ',1A16,/,3A16,/,3A16)
 3458 FORMAT(' THE FORMER (TO COMPARE WITH THAT) BASED ON CHI(1,1:4, ):
     1',/,4A16) 
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(KURZTB.GT.2.AND.LOOPNR.EQ.0.AND.LESS.EQ.0)THEN!
C**   IF ERROR WHEN READING BELOW:
 8237 CONTINUE
      IF(KURZTB.GT.2.AND.LESS.EQ.0.AND.(JASTOP.EQ.0.OR.MOROUT.NE.0))THEN
      WRITE(11,892)
      WRITE(*,892)
  892 FORMAT(' INPUT IN 18I1 18 DIGITS, WHICH MAY BE DIFFERENT'
     1,' (0 <=> AS BEFORE)',/,
     1' (THE 1TH DIGIT =3,4,>4 <=> =1,2,0, BUT 2 COLUMNS => TERMINAL)')
      IF(LOOPNR.NE.0)WRITE(*,893)((IDATA(I,J,KKK),I=1,3),J=1,6)
      IF(LOOPNR.NE.0)WRITE(11,893)((IDATA(I,J,KKK),I=1,3),J=1,6)
  893 FORMAT(' E.G. THE FOLLOWING:',18I1)
      IF(LMN.EQ.0)THEN
      READ(77,'(18I1)',ERR=5588,END=3416)((IIN(I,J),I=1,3),J=1,6)
      GOTO 4916
      ENDIF
 3416 READ(*,'(18I1)',ERR=8237,END=4576)((IIN(I,J),I=1,3),J=1,6)
      LMN=1
 4916 WRITE(7,'(18I1)')((IIN(I,J),I=1,3),J=1,6)
      WRITE(*,'(I2,17I1)')((IIN(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((IIN(I,J),I=1,3),J=1,6)
      KURZZL=0
      IF(IIN(1,1).GT.2)THEN
      KURZZL=1
      IIN(1,1)=IIN(1,1)-2
      ENDIF
      DO 2243 J=1,6
      DO 234 I=1,3
      IF(IIN(I,J).NE.0)THEN
      IF(I.EQ.1.AND.IIN(I,J).LE.2)II(I,J)=IIN(I,J)
      IF(I.EQ.2.AND.IIN(I,J).LE.4)II(I,J)=IIN(I,J)
      IF(I.EQ.3.AND.IIN(I,J).LE.7)II(I,J)=IIN(I,J)
      ENDIF
  234 CONTINUE
 2243 CONTINUE
      WRITE(*,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      WRITE(11,'(I2,17I1)')((II(I,J),I=1,3),J=1,6)
      ENDIF
C
      IF(NUROUT.EQ.0)THEN
      WRITE(*,3291)
      WRITE(11,3291)
 3291 FORMAT(' SQX, NOT CALCULATED HERE, WAS SET TO ZERO!')
      ELSE IF(NUROUT.NE.0.AND.LOOPNR.EQ.0)THEN
      IF(NDATAM.EQ.0)THEN
      WRITE(*,3292)
      WRITE(11,3292)
 3292 FORMAT(' NDATAM.EQ.0: SQX REMAINS ZERO!')
      ELSE IF(NDATAM.NE.0)THEN
      IF(MORTEX.GE.0)THEN
      WRITE(*,3181)IOPT4
      WRITE(11,3181)IOPT4
 3181 FORMAT(
     1' CHI ITSELF MAY BE FITTED (1) OR ONE/CHI (2) OR MAGNETIC MOMENT O
     2F 1 ATOM (3)',/,' OR EFFECTIVE MAGNETIC MOMENT (4) (BOTH IN BOHR M
     3AGNETONS):',I2)
      IF(IOPT3.NE.0)THEN
      WRITE(*,3182)
      WRITE(11,3182)
 3182 FORMAT(
     1' CHI-0, AN ADDITIVE CONSTANT TO CHI IN SI UNITS, IS NOT ZERO',/
     2,' AND/OR WAS FITTED: CHI-0 WAS NOT ADDED TO THE CALC. CHI-START'
     3,/,' IN COMPARING CALCULATED AND MEASURED CHI TO GET SQX!')
      ENDIF
      IF(NOPROZ.EQ.0)THEN
      WRITE(*,3119)
      WRITE(11,3119)
 3119 FORMAT(/,
     1' A (SUM OF) LEAST SQUARE(S) FIT WAS DONE (SQUARED WAS CHI-CALC./C
     2HI-MEAS.-ONE),',/,' BUT SQRT((THIS SUM)/(No.OF VAL. FITTED)) IS GI
     3VEN HERE AS SQX (*100<=>"%")!:')
      ELSE IF(NOPROZ.NE.0)THEN
      WRITE(*,3118)
      WRITE(11,3118)
 3118 FORMAT(
     1' A (SUM OF) LEAST SQUARE(S) FIT WAS DONE (SQUARED WAS CHI-CALC.-C
     2HI-MEAS.),',/,' BUT "CORR."*SQRT((THIS SUM)/(No.OF VAL. FITTED)) I
     3S GIVEN HERE AS SQX!',/,' (NOT "%", BUT "CORR." IS USED TO GET A R
     4ESULT SIMILAR TO "%"!)')
      ENDIF
      ENDIF
      ENDIF
      ENDIF
C
      IF(MORTEX.GT.0.AND.KLICK2.EQ.0)THEN
      KLICK2=1
      WRITE(*,3117)
      WRITE(11,3117)
 3117 FORMAT(
     1' SQX, CRYSTAL FIELD MINIMAL SPLITTING (CFMS) AND THE TWO DEGENERA
     2CIES',/,' BELONGING TO THESE TWO LEVELS, AND THE EIGENVALUE OF THE
     3 LEVEL "No. OF VAL.',/,' (NRVAL)", WHICH MAY BE THE CRYSTAL FIELD 
     4OVER ALL SPLITTING (CFOS), IF NRVAL',/,' HAS BEEN CHOSEN IN THE RI
     5GHT WAY! AND: CFOSJ(NRVALJ) <=> NRVALJ=2*J+1,',/,' IF F EL. AND <=
     6> NRVALJ=SPIN-MULTIPL.*ORB.-MULTIPL., ELSE.')
      ENDIF
      IF(LOOPNR.EQ.0)THEN
      WRITE(*,3120)SQX,CFMS,IGR1,IGR2,CFOS,NRVAL,CFOSJ,NRVALJ
      WRITE(11,3120)SQX,CFMS,IGR1,IGR2,CFOS,NRVAL,CFOSJ,NRVALJ
 3120 FORMAT(
     1' SQX, CFMS, DEGEN.1, DEGEN.2, CFOS, No. OF VAL., CFOSJ, NRVALJ ='
     1,/,2D12.4,2I3,D12.4,I6,D12.4,I6)
      WRITE(*,354)
      WRITE(11,354)
  354 FORMAT(/,' "00" MEANS: FITTED, "10": NOT (FROM INPUT), "01": NOT (
     1FROM CALC.)')
      IF(NOTONE.NE.0)THEN
      WRITE(*,3544)
      WRITE(11,3544)
 3544 FORMAT(' SUM OF 1/SIGMA**2 = No. OF VALUES!')
      ENDIF
      ENDIF
      IF(NUROUT.NE.0.AND.LOOPNR.EQ.0)THEN
      IF(JTHETA.NE.0)THEN
      WRITE(*,1944)THETA
      WRITE(11,1944)THETA
 1944 FORMAT(' THETA MAY BE NOT ZERO: THETA=',F12.6,'(LAMBDA=0 THEN!)')
      ENDIF
C
      IF(KURZTB.GT.2)THEN
      WRITE(11,567)
      WRITE(*,567)
      WRITE(11,1945)
      WRITE(*,1945)
 1945 FORMAT(' "CHI-START" MEANS: CHI CALCULATED FROM ENERGIES AND MAGN.
     1 MOMENTS WITHOUT',/,' ANY FURTHER CORRECTIONS, "CHI-CALC." INCLUDE
     2S ALL THESE CORRECTIONS.',/,' FOR "MEASURED CHI" ALL CORRECTIONS ' 
     2,'(LAMBDA, CHI-0, WEIGHT) ARE APPLIED',/,' IN REVERSED ORDER, AND 
     3CHI-MEAS.=CHI(2,4,1) AND CHI(1,4,1) HAVE TO BE COMPARED!')
      ENDIF
      ENDIF
      IF(KURZTB.GT.2.AND.NUROUT.NE.0)THEN
      WRITE(11,3450)(QII(II(1,I)),I=1,6)
      WRITE(11,3451)(QKK(II(3,I)),I=1,6)
      WRITE(11,3452)(QJJ(II(2,I)),I=1,6)
 3450 FORMAT(/,'            CHI(*, , ) MEANS:       ',6A16)
 3451 FORMAT('            CHI( , ,*) MEANS:       ',6A16)
 3452 FORMAT('  (TO COMPARE WITH THAT) BASED ON: ',6A16)
      WRITE(*,3462)(QII(II(1,I)),I=1,6)
      WRITE(*,3455)(QKK(II(3,I)),I=1,6)
      WRITE(*,3456)(QJJ(II(2,I)),I=1,6)
 3462 FORMAT('            CHI(*, , ) MEANS:       ',2A16,/,4A14)
 3455 FORMAT('            CHI( , ,*) MEANS:       ',2A16,/,4A16)
 3456 FORMAT('  (TO COMPARE WITH THAT) BASED ON: ',2A16,/,4A16)
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(11,345)((II(I,J),I=1,3),J=1,6)
  345 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA    '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')')
      WRITE(*,346)((II(I,J),I=1,3),J=1,6)
  346 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA    '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      ',
     1/,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')      '
     1,'CHI(',I1,',',I1,',',I1,')      CHI(',I1,',',I1,',',I1,')')
      ELSE
      WRITE(11,347)(QSS(I),I=KURZTB,1,-1)
      WRITE(*,347)(QSS(I),I=KURZTB,1,-1)
  347 FORMAT('  No. 00  TEMP/K    SIGMA    B/TESLA',2A16)
      ENDIF
C
C**   SEE ABOVE: NDAT =1 OR =NDATAP!:
      DO 195 N=1,NDAT
      NR=NRTEMP
      IF(NUROUT.NE.0)NR=N
C
      IF(TEMPIK(NR).LT.ZERO)THEN
      DO 4122 J=1,7
      DO 4121 I=1,4
      CHI(1,I,J)=CHISTA(NR)
      CHI(2,I,J)=CHIMEA(NR)
 4121 CONTINUE
 4122 CONTINUE
      GOTO 194
      ENDIF
C
      TEMPTH=TEMPIK(NR)-THETA
      IF(NUROUT.EQ.0)GOTO 194
C
C**   THE FOLLOWING 50 LINES ARE COPIED FROM ABOVE (NRTEMP<=>NR, CHI(1,1,1)
C     <=>CHISTA(NR), BWWW=>STBWWW (=>"ABOVE")), BUT WITHOUT COMMENT!:
      CHI(2,4,1)=CHIMEA(NR)
CKR      CHI(1,1,1)=CHISTA(NR)
CKR      IF(NUROUT.NE.0)CHI(1,1,1)=CHIFIX(NR)
      CHI(1,1,1)=CHIFIX(NR,4)
      CHI(1,2,1)=CHI(1,1,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(1,1,1).NE.ZERO)DENOM=-SILAMB+ONE/CHI(1,1,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(1,2,1)=ONE/DENOM
      ENDIF
      CHI(1,3,1)=CHI(1,2,1)+CHIDIA
      CHI(1,4,1)=CHI(1,3,1)
      IF(GEWFAC.NE.ONE)CHI(1,4,1)=CHI(1,3,1)/GEWFAC
      TESLAS=TESDAT(NR)
      DO 3121 I=1,4
      CHI(1,I,2)=ZERO
      IF(CHI(1,I,1).NE.ZERO)CHI(1,I,2)=ONE/CHI(1,I,1)
      CHI(1,I,5)=CHI(1,I,1)*TESLAS
      CHI(1,I,3)=-CHI(1,I,5)/PREVOR
      CHI(1,I,4)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPIK(NR).GT.ZERO)CHI(1,I,4)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPIK(NR))
      CHI(1,I,7)=ZERO
      IF(CHI(1,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(1,I,7)
     1=797.730D0*DSQRT(CHI(1,I,1)*TEMPTH)
      CHI(1,I,6)=CHI(1,I,1)*VPREZ6
 3121 CONTINUE
C
      CHI(2,3,1)=CHI(2,4,1)
      IF(GEWFAC.NE.ONE)CHI(2,3,1)=CHI(2,4,1)*GEWFAC
      CHI(2,2,1)=CHI(2,3,1)-CHIDIA
      CHI(2,1,1)=CHI(2,2,1)
      IF(SILAMB.NE.ZERO)THEN
      DENOM=ZERO
      IF(CHI(2,2,1).NE.ZERO)DENOM=+SILAMB+ONE/CHI(2,2,1)
      IF(DABS(DENOM).LT.PARWUQ)THEN
      IF(DENOM.GE.ZERO)DENOM=PARWUQ
      IF(DENOM.LT.ZERO)DENOM=-PARWUQ
      ENDIF
      CHI(2,1,1)=ONE/DENOM
      ENDIF
C
      DO 3122 I=1,4
      CHI(2,I,2)=ZERO
      IF(CHI(2,I,1).NE.ZERO)CHI(2,I,2)=ONE/CHI(2,I,1)
      CHI(2,I,5)=CHI(2,I,1)*TESLAS
      CHI(2,I,3)=-CHI(2,I,5)/PREVOR
      CHI(2,I,4)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPIK(NR).GT.ZERO)CHI(2,I,4)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPIK(NR))
      CHI(2,I,7)=ZERO
      IF(CHI(2,I,1).GT.ZERO.AND.TEMPTH.GT.ZERO)CHI(2,I,7)
     1=797.730D0*DSQRT(CHI(2,I,1)*TEMPTH)
      CHI(2,I,6)=CHI(2,I,1)*VPREZ6
 3122 CONTINUE
C
  194 CONTINUE
C
      IF(KURZTB.GT.2)THEN
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
      IF(KURZZL.EQ.0)THEN
      WRITE(*,457)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
      ELSE
      WRITE(*,475)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
  457 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,2D16.8,/,4D16.8)
  475 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,2D16.8)
      ELSE IF(KURZTB.EQ.1)THEN
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      WRITE(*,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      ELSE
      WRITE(11,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      WRITE(*,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
      IF(NUROUT.NE.0)THEN
      IF(N.EQ.NDAT)THEN
      WRITE(*,5678)
      WRITE(11,5678)
 5678 FORMAT(
     1' THE TABLE PUT OUT HERE ALSO PUT OUT TO FILE fort.1!')
      ENDIF
      IF(KURZTB.GT.2)THEN
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
     1,CHI(II(1,3),II(2,3),II(3,3)),CHI(II(1,4),II(2,4),II(3,4))
     1,CHI(II(1,5),II(2,5),II(3,5)),CHI(II(1,6),II(2,6),II(3,6))
  456 FORMAT(I4,I3,I1,F7.2,F12.6,F8.3,6(E16.8))
      ELSE IF(KURZTB.EQ.1)THEN
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1))
      ELSE
      WRITE(1,456)NR,LOWDAT(NR),MINDAT(NR),TEMPIK(NR),SIGMA(NR)
     1,TESDAT(NR)
     1,CHI(II(1,1),II(2,1),II(3,1)),CHI(II(1,2),II(2,2),II(3,2))
      ENDIF
      ENDIF
C
  195 CONTINUE
C
CKR      IF(LAUFNR.NE.0.AND.JAFAST.NE.0.AND.LOOPNR.EQ.0)THEN
CKR     1' ATTENTION: RESULT OF FITTING HAS TO BE VERIFIED ("JAFAST"!)!')
CKR      ENDIF
C
      IF(LOOPNR.EQ.0)THEN
C**   DO 1971 I=27(!),35->44
C     IMIN=I-15
C     VLSTNG(I)=BWNULL(IMIN)
C1971 CONTINUE
      DO 1970 I=1,44
      WLSTNG(I)=VLSTNG(I)
      IF(I.LE.44)QQLIST(I)=QLIST(I)
C     IF(I.GT.44)QQLIST(I)='                '
 1970 CONTINUE
C**   GEWFAC:
      IF(WLSTNG(31).EQ.ONE)WLSTNG(31)=ZERO
      LISTNG=0
      DO 1972 I=1,44
      LSTNG1=LISTNG+1
      IF(WLSTNG(LSTNG1).NE.ZERO)THEN
      LISTNG=LISTNG+1
      ELSE
      LSTNG2=LISTNG+2
      DO 1973 IM=LSTNG2,44
      IMIN=IM-1
      WLSTNG(IMIN)=WLSTNG(IM)
      QQLIST(IMIN)=QQLIST(IM)
 1973 CONTINUE
      ENDIF
 1972 CONTINUE
      WRITE(*,1971)NREL,KLWERT,KASSUM,NRVAL
      WRITE(11,1971)NREL,KLWERT,KASSUM,NRVAL
 1971 FORMAT(I5,' ELECTRON(S), ',I5,' =l VALUE, '
     1,I5,' BASIS STATES, ',I5,' VALUES USED LATER ON, ')
CKR      IF(JAFAST.NE.0.AND.IOPT2.EQ.2)THEN
CKR     1(' (',I3,' STATES INTERMEDIATELY, ',I3,' STATES "COMB.MODEL")')
CKR      ELSE IF(JAFAST.NE.0)THEN
CKR 1975 FORMAT(' (',I3,' STATES INTERMEDIATELY)')
CKR      ELSE IF(IOPT2.EQ.2)THEN
      IF(IOPT2.EQ.2)THEN
      WRITE(*,1976)IGRUND
      WRITE(11,1976)IGRUND
 1976 FORMAT(' (',I3,' STATES "COMB.MODEL")')
      ENDIF
      IF(LISTNG.NE.0)THEN
      WRITE(*,1980)(WLSTNG(I),QQLIST(I),I=1,LISTNG)
      WRITE(11,1980)(WLSTNG(I),QQLIST(I),I=1,LISTNG)
 1980 FORMAT(3(D16.8,A16))
      ENDIF
      WRITE(*,1989)SQX
      WRITE(11,1989)SQX
 1989 FORMAT(' SQX, REPEATED FROM ABOVE, =',D12.4)
      ENDIF
C
      IF(LOOPNR.EQ.0.AND.IOPT1.EQ.1)THEN
      WRITE(11,197)
      WRITE(*,197)
  197 FORMAT(
     1' ... AND THE 1, 2 OR 3 DIRECTION(S) (Z-, X-, Y-) OF CHI(1,1,1) AN
     1D',/,' CHI(1,1,1) ITSELF, I.E. THE MEAN VALUE.')
      IF(NUROUT.NE.0)THEN
      WRITE(11,1917)
      WRITE(*,1917)
 1917 FORMAT(' THE MEAN VALUE HERE IS THE SAME AS "CHI-START" OR'
     1,' THE CORRESPONDING',/,' VALUE ABOVE!')
      DO 1961 NR=1,NDAT
      TEMPTH=TEMPIK(NR)-THETA
      WRITE(11,458)NR,TEMPIK(NR),TEMPTH,(CHIFIX(NR,I),I=1,4)
      WRITE(*,458)NR,TEMPIK(NR),TEMPTH,(CHIFIX(NR,I),I=1,4)
  458 FORMAT(I4,F7.2,F12.6,3D16.8,9X,D16.8)
 1961 CONTINUE
      ELSE IF(NUROUT.EQ.0)THEN
      WRITE(11,1918)
      WRITE(*,1918)
 1918 FORMAT(
     1' HERE ARE THE ACTUAL VALUES (MAY COME FROM "TRIAL")!')
CKR      DO 196 N=1,NDAT - NDAT=1
      NR=NRTEMP
      TEMPTH=TEMPIK(NR)-THETA
      WRITE(11,458)NR,TEMPIK(NR),TEMPTH,(CHIZXY(I,NR),I=1,3),CHISTA(NR)
      WRITE(*,458)NR,TEMPIK(NR),TEMPTH,(CHIZXY(I,NR),I=1,3),CHISTA(NR)
C 458 FORMAT(I4,F7.2,F12.6,3D16.8,9X,D16.8)
CKR  196 CONTINUE
CKR      ELSE
CKR      WRITE(11,1919)
CKR      WRITE(*,1919)
CKR 1919 FORMAT(' THE MEAN VALUE HERE IS NEARLY THE SAME AS THE CORRESPONDI
CKR     1NG VALUE ABOVE:',/,' CONVERGENCE, BUT A FORMER ITER. WAS BETTER!')
      ENDIF
      ENDIF
C
C**   LESS.NE.0 => JASTOP=0! $ MOROUT.NE.0 => JASTOP=0!
      IF(LESS.NE.0.OR.JASTOP.NE.0)THEN
      WRITE(*,1304)
      WRITE(11,1304)
 1304 FORMAT(' "LESS OUTPUT" OR "JASTOP" WAS CHOSEN: STOP')
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2178)LAUFNR,SQX
      WRITE(9,2178)LAUFNR,SQX
 2178 FORMAT(' JASTOP (LESS.NE.0.OR.JASTOP.NE.0),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2178)LAUFNR,SQX
      STOP 'JASTOP'
      ENDIF
C**   STOP FOR THE CONDITIONS ABOVE!
C
C**   IF(JASTOP.EQ.0)THEN
      IF(LESS.EQ.0)THEN
      IF(KURZTB.GT.2)THEN
      WRITE(11,1302)
 1301 WRITE(*,1302)
 1302 FORMAT(/,
     1' INPUT 0 FOR ANOTHER SORT OF (FURTHER) OUTPUT, 1 TO RETURN (TO'
     1,/,' CALLING ROUTINE), >1 TO STOP!')
      IF(KKK.LT.KEND(KSTART))THEN
      WRITE(11,1308)
      WRITE(*,1308)
 1308 FORMAT(' HINT: POSSIBLY CHOOSE FURTHER OUTPUT!')
      ELSE IF(KKK.EQ.KEND(KSTART))THEN
      WRITE(11,1309)
      WRITE(*,1309)
 1309 FORMAT(' HINT: POSSIBLY CHOOSE NO FURTHER OUTPUT!')
      ENDIF
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3417)JASTOR
      GOTO 4917
      ENDIF
 3417 READ(*,'(I1)',ERR=1301,END=4576)JASTOR
      LMN=1
 4917 WRITE(7,2378)JASTOR
      ELSE IF(KURZTB.LE.2)THEN
      WRITE(11,1320)
 1321 WRITE(*,1320)
 1320 FORMAT(/,
     1' INPUT 1 TO RETURN (TO CALLING ROUTINE), 0 OR >1 TO STOP!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3418)JASTOR
      GOTO 4918
      ENDIF
 3418 READ(*,'(I1)',ERR=1321,END=4576)JASTOR
      LMN=1
 4918 IF(JASTOR.EQ.0)JASTOR=2
      WRITE(7,2378)JASTOR
      ENDIF
C**   GOTO 1306
      ELSE IF(LESS.NE.0)THEN
      JASTOR=2
      ENDIF
C**   ENDIF TO C** "IF(JASTOP.EQ.0)THEN" - JASTOP ALWAYS =0 ABOVE!
C
C1306 CONTINUE
 2378 FORMAT(I1,' =JASTOR(2=STOP)')
      WRITE(11,2783)JASTOR
      WRITE(*,2783)JASTOR
 2783 FORMAT(I2,' =JASTOR(2=STOP)!!!!!!!!!')
      IF(JASTOR.GT.1)THEN
      OPEN(8)
      REWIND(8)
      OPEN(9)
      REWIND(9)
      WRITE(8,2179)LAUFNR,SQX
      WRITE(9,2179)LAUFNR,SQX
 2179 FORMAT(' JASTOR = 2 (=STOP),',I6,'=IT/SQX=',D12.4)
      WRITE(8,'(I2,D16.8,2X,A5)')(INBWWW(I),BWNULL(I),QQ(I),I=1,IN25)
      WRITE(9,'(I2,D16.8,2X,A5)')(INBWWW(I),BWWTMP(I),QB(I),I=1,IN25)
      WRITE(7,2179)LAUFNR,SQX
      STOP 'JASTOR'
      ENDIF
      IF(JASTOR.EQ.0)GOTO 999
C**   RETURNS MOSTLY TO SUSFIT (ELSE TO SELECT)!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND RESTBL
      END
CEND-FILE REDUCT.F
CEND-FILE ECKART.F
      SUBROUTINE SUGANO(NRCALL,NRROUT,NRSORT,JAVANV
C**   SUGANO (ONLY(!) FOR OUTPUT) IS CALLED BY SUGANR(EAL) OR SUGANC(OMPLEX)
C     OR SUGANH(EISENBERG) OR SUGANK(OMPLEX HEISENBEREG), AND ALL THESE CALL,
C     DIRECTLY OR INDIRECTLY, SUBROUTINE CHIMAG (<=> CHI & MAGNETISATION).
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
C**   SUBROUTINE SUGANO is only for more O(!)utput for the 4 subroutines
C     SUGANR, SUGANH ("HEISENBERG"), SUGANC and SUGANK (the complex
C     versions of the former two). These 4 ROUTines are numbered:
C     NRROUT=1...4! SUGANH and SUGANK will call SUGANR and SUGANC again,
C     but with NRROUT=3 and =4, respectively.
C     Subroutine SUGANR may be called, for the same temperature and with
C     NRROUT=1, max. 4 times: NRSORT=1...4 <=> z- and x-direction with IGRUND
C     "small" and z- and x-direction with IGRUND "big" ("small"/"big" occuring,
C     if "Combined Model"). NRSORT is smaller for the other subroutines!
C
      DIMENSION KLICK0(4,6),KLICK1(4,6),KLICK2(4,6),KLICK3(4,6)
     1,KLICK4(4,6),WERTIN(*),FMATCH(ND1110,*),EIVEC(ND1110,*),EIWERT(*)
     2,ZEEMAN(*),ZEEMA2(*),DIRECZ(3)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
      SAVE
C**   MOROUT.NE.0 HERE!
      DATA KLICK0/24*0/
      DATA KLICK1/24*0/
      DATA KLICK2/24*0/
      DATA KLICK3/24*0/
      DATA KLICK4/24*0/
      DATA KLICKS/0/
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,24)
      IF(KLICKS.EQ.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-SUGANO IN I1: 0 => (ALWAYS) RETURN')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3437)MOROUU
      GOTO 4937
      ENDIF
 3437 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4937 WRITE(*,2239)MOROUU
      WRITE(11,2239)MOROUU
 2239 FORMAT(I2,' =MOROUU IN SUGANO!!!!!!!!!')
      WRITE(7,2392)MOROUU
 2392 FORMAT(I1,' =MOROUU IN SUGANO')
      ENDIF
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      IF(MOROUU.EQ.0)RETURN
      GO TO (33,66,99) NRCALL
   33 CONTINUE
      IF(KLICK0(NRROUT,NRSORT).EQ.0)THEN
      KLICK0(NRROUT,NRSORT)=1
      WRITE(*,669)NRROUT,NRSORT
      WRITE(11,669)NRROUT,NRSORT
  669 FORMAT(' HERE IS SUBROUTINE SUGANO (FOR OUTPUT ONLY), CALLED BY',
     1' (1...4 <=> ',/,' SUGANR, SUGANC, SUGANH, SUGANK):',I2,', NUMBER'
     2,' OF SORT =',I2,', 1ST CALL')
      WRITE(11,9023)
 8252 WRITE(*,9023)
 9023 FORMAT(' INPUT YES(0)/NO ONLY MINIMUM OUTPUT, YES(0)/NO "OUTPUT ON
     1LY ONCE"',/,' AND YES/NO(0) "FULL MATRICES"!')
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3438)JANO1,JANO2,JANO3
      GOTO 4938
      ENDIF
 3438 READ(*,'(3I1)',ERR=8252,END=4576)JANO1,JANO2,JANO3
      LMN=1
 4938 WRITE(7,2393)JANO1,JANO2,JANO3
 2393 FORMAT(3I1,' =JANO1,JANO2,JANO3')
      WRITE(*,2339)JANO1,JANO2,JANO3
      WRITE(11,2339)JANO1,JANO2,JANO3
 2339 FORMAT(3I2,' =JANO1,JANO2,JANO3!!!!!!!!!')
      ENDIF
C
      IF(JANO2.NE.0.OR.(JANO2.EQ.0.AND.KLICK1(NRROUT,NRSORT).EQ.0))THEN
      KLICK1(NRROUT,NRSORT)=1
C**   IGRUND <=> USED No. OF VALUES (NRVAL) OF THE INTERFACE
      WRITE(*,2217)IGRUND
      WRITE(11,2217)IGRUND
 2217 FORMAT(' ALL',I4,' USED'
     1,' EIGENVALUES OF THE INTERFACE, IN ASCENDING ORDER (IN ROWS):')
      WRITE(*,2010)(WERTIN(I),I=1,IGRUND)
      WRITE(11,2010)(WERTIN(I),I=1,IGRUND)
 2010 FORMAT(6(1X,D12.4))
C
      WRITE(*,2218)
      WRITE(11,2218)
 2218 FORMAT(' FIELD IN CM**(-1), DIRECTIONS (Z-, X-, Y-) OF THE FIELD,'
     1,/,' AND MINIMAL AND MAXIMAL DIFFERENCE OF FORMER EIGENVALUES:')
      WRITE(*,2010)TESLAC,(DIRECZ(I),I=1,3),DIFLOW,DIFMAX
      WRITE(11,2010)TESLAC,(DIRECZ(I),I=1,3),DIFLOW,DIFMAX
      ENDIF
C
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      RETURN
   66 CONTINUE
C
      IF(JANO1.NE.0.AND.(JANO2.NE.0.OR.(JANO2.EQ.0.AND
     1.KLICK2(NRROUT,NRSORT).EQ.0)))THEN
      KLICK2(NRROUT,NRSORT)=1
      WRITE(*,2221)
      WRITE(11,2221)
 2221 FORMAT(' 2ND CALL:',
     1' MATRIX TO BE DIAGONALIZED; COLUMNS (IN THE FORM OF ROWS):')
      KASI=1
      IF(JANO3.NE.0)KASI=KASSMN
      IF(KASI.EQ.1)THEN
      WRITE(*,1011)
      WRITE(11,1011)
 1011 FORMAT(
     1' BECAUSE "FULL"=0, ONLY ONE COLUMN (IN THE FORM OF ONE ROW)!')
      ELSE
      WRITE(*,1009)
      WRITE(11,1009)
 1009 FORMAT(' BECAUSE'
     1,' "FULL"=1, ALL COLUMNS, BUT STARTING WITH DIAG. ELEMENT!')
      ENDIF
      IF(NRROUT.EQ.1.OR.NRROUT.EQ.3)THEN
      DO 1019 J=1,KASI
      WRITE(*,2010)(FMATCH(I,J),I=J,KASSMN)
      WRITE(11,2010)(FMATCH(I,J),I=J,KASSMN)
 1019 CONTINUE
      ELSE
      WRITE(*,2025)
      WRITE(11,2025)
 2025 FORMAT(' THE MATRIX IS COMPLEX HERE!')
      DO 2026 J=1,KASI
      WRITE(11,2010)(CPXMAT(I,J),I=J,KASSMN)
      WRITE(*,2010)(CPXMAT(I,J),I=J,KASSMN)
 2026 CONTINUE
      IF(KASI.GT.1)THEN
      WRITE(11,2063)
 2063 FORMAT(' AND THE SAME MATRIX IN LOWER STORAGE MODE:')
      DO 2062 I=1,KASSMN
      WRITE(11,'(/)')
      WRITE(11,2010)(CPXMAT(I,J),J=1,I)
 2062 CONTINUE
      ENDIF
      ENDIF
      ENDIF
C
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      RETURN
   99 CONTINUE
C
      IF(JANO1.NE.0.AND.(JANO2.NE.0.OR.(JANO2.EQ.0
     1.AND.KLICK3(NRROUT,NRSORT).EQ.0)))THEN
      KLICK3(NRROUT,NRSORT)=1
      WRITE(*,2030)
      WRITE(11,2030)
 2030 FORMAT(/,' 3RD CALL: MATRIX OF ORTHONORMALIZED EIGENVECTORS;',/
     1,' COLUMNS = EIGENVECTORS, OUTPUT IN THE FORM OF ROWS:',/)
      KASI=1
      IF(JANO3.NE.0)KASI=KASSMN
      IF(KASI.EQ.1)THEN
      WRITE(*,1012)
      WRITE(11,1012)
      ENDIF
 1012 FORMAT(' BECAUSE "FULL"'
     1,'=0, ONLY ONE COLUMN = ONE EIGENV. (IN THE FORM OF ONE ROW)!')
      IF(NRROUT.EQ.1.OR.NRROUT.EQ.3)THEN
      DO 101 J=1,KASI
      WRITE(*,2010)(EIVEC(I,J),I=1,KASSMN)
      WRITE(11,2010)(EIVEC(I,J),I=1,KASSMN)
  101 CONTINUE
      ELSE
      WRITE(*,2025)
      WRITE(11,2025)
      DO 1010 J=1,KASI
      WRITE(*,2010)(EIVECC(I,J),I=1,KASSMN)
      WRITE(11,2010)(EIVECC(I,J),I=1,KASSMN)
 1010 CONTINUE
      ENDIF
      ENDIF
C
      IF(JANO2.NE.0.OR.(JANO2.EQ.0.AND.KLICK4(NRROUT,NRSORT).EQ.0))THEN
      KLICK4(NRROUT,NRSORT)=1
      WRITE(*,2219)KASSMN
      WRITE(11,2219)KASSMN
 2219 FORMAT(' ALL',I5,' EIGENVALUES, IN ASCENDING ORDER (IN ROWS):')
      WRITE(*,2010)(EIWERT(I),I=1,KASSMN)
      WRITE(11,2010)(EIWERT(I),I=1,KASSMN)
C
      IF(JAVANV.EQ.0)THEN
      WRITE(*,2033)
      WRITE(11,2033)
 2033 FORMAT(' (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      ELSE
      WRITE(*,2032)
      WRITE(11,2032)
 2032 FORMAT(
     1' ZEEMAN-COEFF. OF FIRST ORDER, INCL. G-FACTOR, ALREADY SQUARED')
      ENDIF
      WRITE(*,2010)(ZEEMAN(I),I=1,KASSMN)
      WRITE(11,2010)(ZEEMAN(I),I=1,KASSMN)
C
      IF(JAVANV.NE.0)THEN
      WRITE(*,2031)
      WRITE(11,2031)
 2031 FORMAT(' ZEEMAN-'
     1,'COEFF. OF SECOND ORDER (INCL. POSS. MANY NON CALC. ("ZERO")')
      WRITE(*,2010)(ZEEMA2(I),I=1,KASSMN)
      WRITE(11,2010)(ZEEMA2(I),I=1,KASSMN)
      ENDIF
      ENDIF
C
C**   RETURNS TO SUGANR, SUGANC, SUGANH OR SUGANK!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANO
      END
      SUBROUTINE SUGANC(NRROUT,IGRUNY
CCCCCCCCCC SUGANCK - C for Complex - K added because FMATs are Komplex. CCCCCCCCCC
C**   CALLed by SELECT or by SUGANK, by the latter, if Heisenberg coupling is
C     involved! - CALLs (SUGANO for more OUTPUT and) ZHPEVK, a link to a routine
C     to diagonalize a matrix, and CHIMAG, which calculates CHI!
C**   If only temperature has changed (NURTMP.NE.0), SUGANC does effectively not
C     work!
C     More OUTPUT may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C     For more OUTPUT of TEXT SUBROUTINE TEXT2R may be CALLed, if MORTEX.GT.1!
C
C**   SUBROUTINE SUGANC calculates eigenvalues EIWERT and (neg.) magn. moments
C     ZEEMAN resp. EIWERT and Zeeman coefficients of first and second order
C     ZEEMAN and ZEEMA2 for VanVleck-option JAVANV. There are KASSMN
C     eigenvalues corresponding to the KASSMN lowest energy niveaus. The lowest
C     value has always been set to zero. KASSMN may be (much) lower than
C     KASSUM, the number of micro states. SUGANC is for z-, x-, and y-direction
C     of magnetic field here in CONDOR!
C**   The (neg.) magn. moments calculated here are always components in the same
C     direction as the magnetic field, but the components of the magnetic
C     moments in two mutual perpendicular directions may be calculated, too,
C     by calling SUBROUTINE SUGANY!
C**   INPUT to SUGANC are the eigenvalues WERTIN and DIRECZ(1:3):
C**   DIRECZ(1)=ZERO means "no field in z-direction", =ONE means  "field is
C     (only) in z-direction". The sum of the squares of DIRECZ(1:3) is always
C     =ONE. TESLAC is the field in cm**(-1), but is not needed for "JAVANV".
C**   INPUT are furtheron the (non-diagonal) magnetic moments of the (new)
C     basic functions:
C     FMAT( , ,1)=MATRIX OF OPERATOR FOR Z-DIRECTION,
C**   (FMAT( , ,2) AND FMAT( , ,3): ONLY ORBITAL PART (NOT COMPLETED)!)
C     FMAT( , ,4) (IN GENERAL=HALF*(FMAT( , ,2)+FMAT( , ,3)))
C     =MATRIX OF OPERATOR FOR X-DIRECTION,
C     FMAT( , ,5) (IN GENERAL=HALF*(-FMAT( , ,2)+FMAT( , ,3)))=MATRIX OF OPERA-
C     TOR FOR Y-DIRECTION DIVIDED BY SQRT(-1); THIS MATRIX IS ANTISYMMETRICAL!
C
C     SUGANC AND SUGANK are numbered: NRROUT=2 and =4, resp.!
C**   Subroutine SUGANC may be called, for the same temperature and with
C     NRROUT.LE.2 (NRROUT=2 then), max. 6 times: 3 directions times
C     KASSMN <=> IGRUND "small" and IGRUND "big"
C     ("small"/"big" occuring, if "Combined Model").
C**   Subroutine SUGANC is called by Subroutine SUGANK with NRROUT=4
C     (NRROUT=4 remaining)! In this case it starts with "9990 CONTINUE"
C     and CALLing the link ZHPEVK to the diagonalizing routine ZHPEVD.
C
C**   Firstly part 1 preceding "9990 CONTINUE":
C
C**   EIWERT becomes equal to WERTIN for "JAVANV", and no new diagonalization
C     is needed for "JAVANV", the matrix of complex eigenvectors EIVECC
C     becoming the unit matrix, but this is of course not valid, if SUGANC is
C     called by SUGANK. SUGANC steps to 9998 CONTINUE in this case, which is
C     after CALL ZHPEVK!
C     However in any case a complex matrix CPERTU is calculated before
C     with help of DIRECZ and matrices FMAT. This is the PERTURbation
C     operator for "JAVANV" working on the unit matrix, but there is no
C     perturbation, if the strenght of the magnetic field is included,
C     and in this case CPXMAT=CPERTU*TESLAC is calculated here, WERTIN
C     is added to the diagonal, and CPXMAT is diagonalized in part 2.
C     DIMENSION for KASSMN is up to ND252=252 (= the maximum number of
C     micro states occuring for d electrons).
C     
C     Now part 2:
C
C     DIMENSIONs are ND2828=28**2 (<=> 4*7 <=> quartet-F state - d electrons)
C     for KASSMN and COMPLEX*16 CPERTU, CPXMAT and EIVECC.
C     Before 9998 CONTINUE the diagonalizing routine is called, and the
C     results are EIWERT and EIVECC.
C
C     After 9998 CONTINUE a CALL SUGANY is enabled. Then CPERTU works on
C     EIVECC, and the result is ZEEMAN, the magnetic moments of the states,
C     if not "JAVANV"! In the case of JAVANV Zeeman coefficients of first
C     and second order are calculated, called ZEEMAN and ZEEMA2.
C
C     To the end and in any case SUBROUTINE CHIMAG is CALLed!
C     SUGANC RETURNs to SELECT or to SUGANK.
C
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,FMATCH,EIVEC,JACUGD,FMATCU)
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION WERTIN(*)
     1,TESLAC,DIRECZ(3),DUMMYD(NDMAL4),DUMMY(NDMAL3)
     2,EIWERT(*),ZEEMAN(*),ZEEMA2(*),DIFLOW,DIFMAX
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     3,CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     3,FMATCH(*),EIVEC(*)
C**   ABOVE: "FROM CALL", BELOW: "ALL OTHER"
     4,ZERO,ONE,PARWUR,PARWUQ,PARZER
     5,FMIN,WERTIK,EDIFF,SUMMAQ,ZEWERT
      DOUBLE PRECISION CHIZXY,TEMPIK,CHIMEA,SIGMA,TESDAT,FMIST
     1,FMATCU(8,8,3)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
     1,CPERTU(ND2828,*),CFMATY(ND2828,*),COMZEE,CEEWER
     1,FMAT(ND252,ND252,5),TEMPPR,TEMPPI
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,JATEST,MIST,LESS,MIS8(8),IOPT2,MIS4(4)
     1,NDATAP
      COMMON/ALLGEN/CHIZXY(3,601),
     1TEMPIK(601),CHIMEA(601),SIGMA(601),TESDAT(601),FMIST(1481),MIST1
      COMMON/JTSTZZ/JTSTZX
C**    ,BWWWIN(J20) ((J20=44))
C     2,INBWWW(J20),STBWWW(J20),BWW(J20),BWWW(J20),IBWWW(J20),LOWDAT(601)
C**   ... AND FOR RESULTS OUT OF RESULTS OF SUBROUTINE CHIMAG:
C     1,NDATAM,CHISTA(601),CHI(2,4,7),MINDAT(601),NOPROZ,JAFFAK,NOANAL,J2
C**   2,IN24,IN25
C     INTEGER IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C    1,ND252,ND1110,ND2828,NDMAL4
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
C    2,NRTEMP
C**   ABOVE: INTEGER "FROM CALL", BELOW: "OTHER", BUT NOT "ALL"
C    2,NRROUT,KASSMN,KASSIN,JTRANS
      INTEGER KLICK(4,6),KASSMM(4,6)
      SAVE
      DATA KLICK/24*0/
      DATA KASSMM/24*0/
      DATA KLICK2,KLICK3,JTRANS,ITRANZ,ITRANX,ITRANY/0,0,0,0,0,0/
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,25)
      KASSMN=IGRUND
      IF(NURTMP.NE.0)GOTO 9999
      IF(NRROUT.GT.2)GOTO 9990
      NRROUT=2
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
      DO 6121 J=1,KASSMN
      DO 7715 I=J,KASSMN
C**   P=PERTUR(BING); R=REAL; I=IMAGINARY:
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
C     FMAT( , ,5) IS ANTISYMMETRICAL; THE WHOLE MATRIX IS NEEDED BELOW.
      TEMPPI=DIRECZ(3)*FMAT(I,J,5)
C-CONDOQ:      CPERTU(I,J)=DCMPLX(TEMPPR,TEMPPI)
C-CONDOR:
      CPERTU(I,J)=TEMPPR+DCMPLX(ZERO,ONE)*TEMPPI
 7715 CONTINUE
 6121 CONTINUE
C
      DO 2123 J=2,KASSMN
      JM1=J-1
      DO 6715 I=1,JM1
      CPERTU(I,J)=DCONJG(CPERTU(J,I))
 6715 CONTINUE
 2123 CONTINUE
C
      IF(JAVANV.NE.0.OR.JTSTZX.NE.0)THEN
      DO 9997 J=1,KASSMN
      DO 5715 I=1,KASSMN
      EIVECC(I,J)=DCMPLX(ZERO,ZERO)
 5715 CONTINUE
 9997 CONTINUE
      DO 9996 I=1,KASSMN
      EIWERT(I)=WERTIN(I)
      EIVECC(I,I)=DCMPLX(ONE,ZERO)
 9996 CONTINUE
      GO TO 9998
      ENDIF
C
      DO 111 J=1,IGRUND
      DO 110 I=J,IGRUND
      CPXMAT(I,J)=DCMPLX(ZERO,ZERO)
      IF(I.EQ.J)CPXMAT(I,J)=DCMPLX(WERTIN(I),ZERO)
C**   THE MAGNETIC FIELD WILL NOW BE TAKEN INTO ACCOUNT EXPLICITLY FOR
C     JAVANV.EQ.0 (TESLAC=FIELD IN CM**(-1)), IN ADDITION TO PERTURBATION
C     THEORY OF FIRST ORDER, WHICH WILL BE APPLIED BELOW WITH HELP OF
C     COMPLEX MATRIX CPERTU.
      CPXMAT(I,J)=CPXMAT(I,J)+TESLAC*CPERTU(I,J)
  110 CONTINUE
  111 CONTINUE
C
 9990 CONTINUE
C**   2=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(2,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
C**   AND NOW FOR LOWER STORAGE MODE:
C
C      ND28QU=ND2828**2
C
C      CALL ZHPEVW(1,CPXMAT,CPXMAT,EIWERT,EIVECC,ND2828,KASSMN,DUMMYD
C     1,NDMAL4,DUMMY,ND28QU)
      CALL ZHPEVK(1,CPXMAT,EIWERT,EIVECC,ND2828,KASSMN)
C
      FMIN=EIWERT(1)
      DO 7615 I=1,KASSMN
      EIWERT(I)=EIWERT(I)-FMIN
 7615 CONTINUE
C
      IF(LESS.NE.0)GOTO 2128
      IF(NRROUT.LE.2.AND.KLICK2.NE.0)GOTO 2128
      IF(NRROUT.GT.2.AND.KLICK3.NE.0)GOTO 2128
      IF(NRROUT.LE.2)KLICK2=1
      IF(NRROUT.GT.2)KLICK3=1
      WRITE(*,2217)FMIN,NRROUT
 2217 FORMAT(
     1/,' < (ALL+1) Z,X,Y- EIGENVALUES, IN ASCENDING ORDER (IN ROWS):',
     1D20.12,/,' ... BECOMES: (OUTPUT ONLY ONCE FOR NRROUT =',I2,')')
      WRITE(11,2217)FMIN,NRROUT
      KASI=KASSMN
      IF(KASI.GT.66)KASI=66
      WRITE(*,2010)(EIWERT(I),I=1,KASI)
      WRITE(11,2010)(EIWERT(I),I=1,KASI)
 2010 FORMAT(6(1X,D12.4))
      IF(KASI.NE.KASSMN)THEN
      WRITE(*,2216)EIWERT(KASSMN)
      WRITE(11,2216)EIWERT(KASSMN)
 2216 FORMAT(' ... AND THE LAST EIGENVALUE:',D12.4)
      ENDIF
 2128 CONTINUE
C
C**  SPECIAL TEST FOR DIMERS (ONLY), IF JTSTZX>1:
C    MAGN.F. ADDED NOT WITH, BUT AFTER J IN FLDTST.
CKR: Jan.2007 - "JTSTZX=0 OR =1"!
CKR      IF(JTSTZX.GT.1)THEN
C      CALL FLDTST(
C     1CPERTU,CPXMAT,EIWERT,EIVECC,ND2828,KASSMN,DUMMYD
C     1,NDMAL4,DUMMY,ND28QU,TESLAC
C     1)
CKR      ENDIF
 9998 CONTINUE
C
      IF(((ITRANZ.EQ.0.AND.NRSORT.EQ.1).OR.(ITRANX.EQ.0.AND.NRSORT.EQ.2)
     1.OR.(ITRANY.EQ.0.AND.NRSORT.EQ.3)
     1).AND.JAVANV.EQ.0.AND.IOPT2.NE.2.AND.MOROUT.NE.0)THEN
      WRITE(11,9734)DIRECZ(1),DIRECZ(2),DIRECZ(3),TESLAS,NRTEMP
 9795 WRITE(*,9734)DIRECZ(1),DIRECZ(2),DIRECZ(3),TESLAS,NRTEMP
 9734 FORMAT(' PUT IN IN I1 YES/NO(0): COMPUT. OF TRANSVERSE COMPON.',
     1' OF MAGN. MOMENT FIRSTLY,',/,
     2' THE DIRECTIONCOS. (Z,X,Y) ARE:',3D12.4,/,
     3' (THE MAGNETIC FIELD, IN TESLA, IS ',D14.6,', CORRESP. TO NR = '
     4,I4,',',/,' AND ONLY THIS WILL BE TAKEN INTO ACCOUNT!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=9754)JTRANS
      GOTO 9774
      ENDIF
 9754 READ(*,'(I1)',ERR=9795,END=4576)JTRANS
      LMN=1
 9774 WRITE(7,9784)JTRANS
 9784 FORMAT(I1,' =JTRANS(VERSE COMP.)')
      WRITE(*,9794)JTRANS
      WRITE(11,9794)JTRANS
 9794 FORMAT(I2,' =JTRANS(VERSE COMP.)!!!!!!!!!')
      IF(JTRANS.NE.0)CALL SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
     1,KASSMN,CFMATY,ND2828,EIVECC,ZEEMAN,EIWERT,TEMPTH,NRTEMP,NDATAP
     2,IOPT2,IGRUNY,JACUGD,FMATCU,NRROUT)
      IF(NRSORT.EQ.1)ITRANZ=1
      IF(NRSORT.EQ.2)ITRANX=1
      IF(NRSORT.EQ.3)ITRANY=1
      ENDIF
C
      IF(JTSTZX.EQ.1.AND.IOPT2.EQ.0)THEN
      DO 6115 K=1,KASSMN
C**   R=REAL; I=IMAGINARY:
      TEMPPR=DIRECZ(1)*FMAT(K,K,1)+DIRECZ(2)*FMAT(K,K,4)
      TEMPPI=DIRECZ(3)*FMAT(K,K,5)
C-CONDOQ:      CPERTU(I,J)=DCMPLX(TEMPPR,TEMPPI)
C-CONDOR:      CPERTU(I,J)=TEMPPR+DCMPLX(ZERO,ONE)*TEMPPI
      COMZEE=TEMPPR+DCMPLX(ZERO,ONE)*TEMPPI
      ZEWERT=DBLE(COMZEE)
      ZEEMAN(K)=ZERO
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
 6115 CONTINUE
      ELSE
C  ...IF(JTSTZX.NE.1.OR.IOPT2.NE.0)THEN
      DO 98 K=1,KASSMN
      COMZEE=DCMPLX(ZERO,ZERO)
      DO 97 I=1,KASSMN
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 99 J=1,KASSMN
      CEEWER=CEEWER+CPERTU(I,J)*EIVECC(J,K)
   99 CONTINUE
      CFMATY(I,K)=CEEWER
      COMZEE=COMZEE+DCONJG(EIVECC(I,K))*CEEWER
   97 CONTINUE
      ZEEMAN(K)=ZERO
      ZEEMA2(K)=ZERO
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERT=DBLE(COMZEE)
      DUMMYD(K)=DIMAG(COMZEE)
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
   98 CONTINUE
      ENDIF
C ENDIF BELONGS TO "IF(JTSTZX.EQ.1.AND.IOPT2.EQ.0)THEN" - ELSE!
C
      IF(LESS.NE.0.OR.MOROUT.EQ.0)GOTO 2129
      IF(NRROUT.LE.2.AND.KLICK2.NE.1)GOTO 2129
      IF(NRROUT.GT.2.AND.KLICK3.NE.1)GOTO 2129
      IF(NRROUT.LE.2)KLICK2=2
      IF(NRROUT.GT.2)KLICK3=2
      WRITE(11,2130)
      WRITE(*,2130)
 2130 FORMAT(' CONTROL: ZEEMAN= AND DIMAG(COMZEE)=')
      WRITE(11,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(*,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(11,2131)(DUMMYD(K),K=1,KASSMN)
      WRITE(*,2131)(DUMMYD(K),K=1,KASSMN)
 2131 FORMAT(6D12.4)
 2129 CONTINUE
C
      IF(JAVANV.NE.0)THEN
C**   THE SECOND ORDER (ZEEMA2) AND POSSIBLY CORRECTIONS OF ZEEMAN:
C
      DO 988 K=1,KASSMN
      DUMMYD(K)=ZERO
  988 CONTINUE
C
      KASSIN=0
      N28=ND28
      IF(NRROUT.GT.2)N28=2*ND28
      IF(KLICK(NRROUT,NRSORT).EQ.0.AND.(KASSMN.GT.N28.OR.JATEST.NE.0))
     1THEN
      KLICK(NRROUT,NRSORT)=1
      WRITE(11,9023)KASSMN
 8253 WRITE(*,9023)KASSMN
 9023 FORMAT(' EVALUATION'
     1,' OF ALL ZEEMAN COEFF. OF 2ND ORDER MAY BE TIME CONSUMING,',
     2/,' BUT THEY MAY BE PARTLY NEGLECTED! INPUT IN I4 0 OR THE NUMBER'
     3,' REMAINING, < ',I4,/,' (USEFUL ALSO FOR PARTICULAR TESTS!: -1 =>
     4 0 ZEEMAN COEFF. OF 2ND ORDER)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3444)KASSIN
      GOTO 4944
      ENDIF
 3444 READ(*,'(I4)',ERR=8253,END=4576)KASSIN
      LMN=1
 4944 WRITE(7,2394)KASSIN
 2394 FORMAT(I4,' =KASSIN("2ND ORDER")')
      WRITE(*,2439)KASSIN
      WRITE(11,2439)KASSIN
 2439 FORMAT(I5,' =KASSIN("2ND ORDER")!!!!!!!!!')
      KASSMM(NRROUT,NRSORT)=KASSMN
      IF(KASSIN.NE.0.AND.KASSIN.LT.KASSMN)KASSMM(NRROUT,NRSORT)=KASSIN
C**   IF(KASSMM(NRROUT,NRSORT).LT.0)KASSMM(NRROUT,NRSORT)=0
      ENDIF
      IF(KLICK(NRROUT,NRSORT).EQ.0.AND.(KASSMN.LE.N28.AND.JATEST.EQ.0))
     1THEN
      KLICK(NRROUT,NRSORT)=1
      WRITE(11,9022)
 8254 WRITE(*,9022)
 9022 FORMAT(' ALL'
     1,' ZEEMAN COEFF. OF 2ND ORDER ARE EVALUATED, BUT PUT IN 0 IN I4!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3445)KASSIN
      GOTO 4945
      ENDIF
 3445 READ(*,'(I4)',ERR=8254,END=4576)KASSIN
      LMN=1
 4945 KASSIN=0
      WRITE(7,2394)KASSIN
      WRITE(*,2439)KASSIN
      WRITE(11,2439)KASSIN
      ENDIF
      IF(KASSMM(NRROUT,NRSORT).EQ.0)KASSMM(NRROUT,NRSORT)=KASSMN
C
C**   IF KASSMM < KASSMN, LESS COEFF. OF SECOND ORDER ARE CALC. NOW:
      DO 9024 K=1,KASSMM(NRROUT,NRSORT)
      WERTIK=ZERO
      DO 9025 KA=1,KASSMN
      IF(KA.EQ.K)GOTO 9025
      EDIFF=EIWERT(K)-EIWERT(KA)
      IF(NRROUT.GT.2)THEN
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 9026 LIN=1,KASSMN
      CEEWER=CEEWER+DCONJG(EIVECC(LIN,K))*CFMATY(LIN,KA)
 9026 CONTINUE
      ELSE
      CEEWER=CFMATY(K,KA)
      ENDIF
      SUMMAQ=DBLE(DCONJG(CEEWER)*CEEWER)
      IF(DABS(EDIFF).GE.PARWUR)THEN
      WERTIK=WERTIK+SUMMAQ/EDIFF
      ELSE IF(DABS(SUMMAQ).GE.PARWUR)THEN
C**   NOW, BECAUSE DABS(EDIFF).LT.PARWUR - THE METHOD OF GERLOCH WILL BE 
C     APPLIED, AND THE SQUARED COEFF. ARE: (DUMMYD(K)=ZERO "ABOVE")
      DUMMYD(K)=DUMMYD(K)+SUMMAQ
      ENDIF
 9025 CONTINUE
C     ZEEMA2(K)=ZERO ("ABOVE")
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      IF(DABS(WERTIK).GE.PARWUR)ZEEMA2(K)=WERTIK
 9024 CONTINUE
C
      DO 6667 I=1,KASSMN
      ZEEMAN(I)=ZEEMAN(I)**2+DUMMYD(I)
 6667 CONTINUE
C
      ENDIF
C
C**   3=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(3,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
 9999 CONTINUE
      CALL CHIMAG(JATEST,
     1NRSORT,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE
     1,EIWERT,ZEEMAN,ZEEMA2,JAVANV,KASSMN,NRROUT,MOROUT,NRTEMP,JACUGD)
C**   RETURNS TO SELECT OR TO SUGANK!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANCK
      END
      SUBROUTINE SUGANY(TESLAS,DIRECZ,TEMPIK,TESDAT,FMAT,ND252
C SUGANYK CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
     1,KASSMN,CFMATY,ND2828,EIVECC,ZEEMAN,EIWERT,TEMPTH,NRTEMP,NDATAP
     2,IOPT2,IGRUND,JACUGD,FMATCU,NRROUT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/JTSTZZ/JTSTZX
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRMIST
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOMIST,JAFITB,NRDIRE,LTS,NDATA,NDMIST
      DOUBLE PRECISION DIRECZ(3),TEMPIK(601),TESDAT(601)
     1,DIRB(3),DIRC(3),ZEEMAN(*),EIWERT(*)
     2,TEMPUT(3),CHIOUT(3),FMATCU(8,8,3)
      COMPLEX*16 EIVECC(ND2828,*),CFMATY(ND2828,*),COMZEE,CEEWER
     1,FMAT(ND252,ND252,5),TEMPPR,TEMPPI
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,PARWUR=1.0D-6,HALF=0.5D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29
     1,BOLZCM=0.695040D0,PREVOR=-AVOGAD*SIMUBC)
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,26)
      WRITE(*,9743)(DIRECZ(I),I=1,3)
      WRITE(11,9743)(DIRECZ(I),I=1,3)
      WRITE(14,9743)(DIRECZ(I),I=1,3)
 9743 FORMAT(' 3 DIRECTIONCOS., FOR COMPON. IN FIELD DIRECTION,',/
     1,' AS STARTING VALUES:',3D12.4)
      DIRB(3)=ZERO
      DIRB(2)=ZERO
      DIRB(1)=ZERO
      IF(DIRECZ(3).EQ.ONE)THEN
      DIRB(1)=ONE
      ELSE IF(DIRECZ(2).EQ.ONE)THEN
      DIRB(3)=ONE
      ELSE IF(DIRECZ(1).EQ.ONE)THEN
      DIRB(2)=ONE
      ELSE
      DIRB(2)=DIRECZ(1)/DSQRT(ONE-DIRECZ(3)**2)
      DIRB(1)=DSQRT(ONE-DIRB(2)**2)
      IF(DABS(DIRB(1)*DIRECZ(1)+DIRB(2)*DIRECZ(2)+DIRB(3)*DIRECZ(3)).GT.
     1PARWUR)DIRB(2)=-DIRB(2)
      ENDIF
      WRITE(*,9744)(DIRB(I),I=1,3)
      WRITE(11,9744)(DIRB(I),I=1,3)
      WRITE(14,9744)(DIRB(I),I=1,3)
 9744 FORMAT(' 3 DIRECTIONCOS., NOW FOR THE TRANSVERSE COMP.:',3D12.4)
      JTRANS=2
 9742 IF(JTRANS.EQ.3)THEN
      DIRC(1)=DIRECZ(2)*DIRB(3)-DIRECZ(3)*DIRB(2)
      DIRC(2)=DIRECZ(3)*DIRB(1)-DIRECZ(1)*DIRB(3)
      DIRC(3)=DIRECZ(1)*DIRB(2)-DIRECZ(2)*DIRB(1)
      WRITE(*,9744)(DIRC(I),I=1,3)
      WRITE(11,9744)(DIRC(I),I=1,3)
      WRITE(14,9744)(DIRC(I),I=1,3)
      DO 9726 I=1,3
      DIRB(I)=DIRC(I)
 9726 CONTINUE
      ENDIF
      IF(IOPT2.EQ.0)THEN
      IF(JTSTZX.NE.0)THEN
      DO 6115 K=1,KASSMN
C**   R=REAL; I=IMAGINARY:
      TEMPPR=DIRB(1)*FMAT(K,K,1)+DIRB(2)*FMAT(K,K,4)
      TEMPPI=DIRB(3)*FMAT(K,K,5)
C-CONDOQ:      CPERTU(I,J)=DCMPLX(TEMPPR,TEMPPI)
C-CONDOR:      CPERTU(I,J)=TEMPPR+DCMPLX(ZERO,ONE)*TEMPPI
      COMZEE=TEMPPR+DCMPLX(ZERO,ONE)*TEMPPI
      ZEWERT=DBLE(COMZEE)
      ZEEMAN(K)=ZERO
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
 6115 CONTINUE
      GOTO 1561
      ELSE
      DO 9925 J=1,KASSMN
      DO 9724 I=J,KASSMN
C**   P=PERTUR(BING); R=REAL; I=IMAGINARY:
      TEMPPR=DIRB(1)*FMAT(I,J,1)+DIRB(2)*FMAT(I,J,4)
C     FMAT( , ,5) IS ANTISYMMETRICAL; THE WHOLE MATRIX IS NEEDED BELOW.
      TEMPPI=DIRB(3)*FMAT(I,J,5)
C-CONDOQ:      CFMATY(I,J)=DCMPLX(TEMPPR,TEMPPI)
C-CONDOR:
      CFMATY(I,J)=TEMPPR+DCMPLX(ZERO,ONE)*TEMPPI
 9724 CONTINUE
 9925 CONTINUE
      ENDIF
      ELSE IF(IOPT2.NE.0)THEN
C
      IF(JACUGD.EQ.0)THEN
      LINROW=0
      DO 1215 JJ=1,IGRUND
      DO 1214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 1213 II=1,IGRUND
      DO 1212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 1212
C      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CFMATY(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRB(1)*FMAT(I,J,1)+DIRB(2)*FMAT(I,J,4)
      TEMPPI=DIRB(3)*DCMPLX(ZERO,ONE)*FMAT(I,J,5)
C      CPXMAT(LINCOL,LINROW)=DCMPLX(TEMPMR,TEMPMI)
C-CONDOR:      CFMATY(LINCOL,LINROW)=DCMPLX(TEMPPR,TEMPPI)
      CFMATY(LINCOL,LINROW)=TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRB(1)*FMAT(II,JJ,1)+DIRB(2)*FMAT(II,JJ,4)
      TEMPPI=DIRB(3)*DCMPLX(ZERO,ONE)*FMAT(II,JJ,5)
C      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(TEMPMR,TEMPMI)
C_CONDOR:      CFMATY(LINCOL,LINROW)=CFMATY(LINCOL,LINROW)+DCMPLX(TEMPPR,TEMPPI)
      CFMATY(LINCOL,LINROW)=CFMATY(LINCOL,LINROW)+TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
 1212 CONTINUE
 1213 CONTINUE
 1214 CONTINUE
 1215 CONTINUE
      ELSE IF(JACUGD.NE.0)THEN
CKR: Jan.2007 - "JTSTZX=0 OR =1"!
      IF(JTSTZX.NE.0)STOP 'JTSTZX'
      LINROW=0
      DO 2215 JJ=1,JACUGD
      DO 2214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 2213 II=1,JACUGD
      DO 2212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 2212
C      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CFMATY(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRB(1)*FMAT(I,J,1)+DIRB(2)*FMAT(I,J,4)
      TEMPPI=DIRB(3)*DCMPLX(ZERO,ONE)*FMAT(I,J,5)
C      CPXMAT(LINCOL,LINROW)=DCMPLX(TEMPMR,TEMPMI)
C-CONDOR:      CFMATY(LINCOL,LINROW)=DCMPLX(TEMPPR,TEMPPI)
      CFMATY(LINCOL,LINROW)=TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPR=DIRB(1)*FMATCU(II,JJ,1)+DIRB(2)*FMATCU(II,JJ,2)
      TEMPI=DIRB(3)*FMATCU(II,JJ,3)
C      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(TEMPMR,TEMPMI)
      CFMATY(LINCOL,LINROW)=CFMATY(LINCOL,LINROW)+DCMPLX(TEMPR,TEMPI)
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
 2212 CONTINUE
 2213 CONTINUE
 2214 CONTINUE
 2215 CONTINUE
      ENDIF
C
      ENDIF
C**   ENDIF BEFORE BELONGS TO "IOPT2"!
      DO 2124 J=2,KASSMN
      JM1=J-1
      DO 6716 I=1,JM1
      CFMATY(I,J)=DCONJG(CFMATY(J,I))
 6716 CONTINUE
 2124 CONTINUE
C
      DO 98 K=1,KASSMN
      COMZEE=DCMPLX(ZERO,ZERO)
      DO 97 I=1,KASSMN
      CEEWER=DCMPLX(ZERO,ZERO)
      DO 99 J=1,KASSMN
      CEEWER=CEEWER+CFMATY(I,J)*EIVECC(J,K)
   99 CONTINUE
      COMZEE=COMZEE+DCONJG(EIVECC(I,K))*CEEWER
   97 CONTINUE
      ZEEMAN(K)=ZERO
C**   (THE G-FACTOR FOR SPIN IS CONTAINED IN FMAT
C     - AND POSSIBLY ORBITAL REDUCTION FACTORS ARE CONTAINED, TOO!)
      ZEWERT=DBLE(COMZEE)
      IF(DABS(ZEWERT).GE.PARWUR)ZEEMAN(K)=ZEWERT
   98 CONTINUE
C
 1561 CONTINUE
      WRITE(11,2033)
      WRITE(*,2033)
 2033 FORMAT(' (NEG.) MAGNETIC MOMENTS IN BOHR MAGNETONS:')
      WRITE(11,2131)(ZEEMAN(K),K=1,KASSMN)
      WRITE(*,2131)(ZEEMAN(K),K=1,KASSMN)
 2131 FORMAT(6D12.4)
      DO 1704 J=2,KASSMN
      IF((DABS(ZEEMAN(J)+ZEEMAN(J-1)).LT.PARWUR).
     1AND.(DABS(EIWERT(J)-EIWERT(J-1)).LT.PARWUR).
     1AND.(DABS(ZEEMAN(J)).GT.PARWUR)
     1)THEN
      WRITE(*,1703)PARWUR,J,J-1
      WRITE(11,1703)PARWUR,J,J-1
 1703 FORMAT(D10.2,2I7,' =PARWUR,J,J-1: "DEGENERATED"!')
      ENDIF
 1704 CONTINUE
C
      IF(TEMPTH.NE.TEMPIK(NRTEMP))THEN
      WRITE(*,778)NRTEMP,TEMPTH,TEMPIK(NRTEMP)
      WRITE(11,778)NRTEMP,TEMPTH,TEMPIK(NRTEMP)
  778 FORMAT(' WARNING: TEMPTH.NE.TEMPIK(NRTEMP):',
     1' THETA (OF CURIE-WEISS LAW).NE.ZERO! (TEMPTH IGNORED!)',/
     2,' NRTEMP,TEMPTH,TEMPIK(NRTEMP)=',I4,2D10.2)
      ENDIF
      WRITE(*,776)
      WRITE(11,776)
      WRITE(14,776)
      TEMPPJ=ZEEMAN(1)*PREVOR/TESLAS
      WRITE(*,774)ZERO,TEMPPJ
      WRITE(11,774)ZERO,TEMPPJ
      WRITE(14,774)ZERO,TEMPPJ
  774 FORMAT(F7.2,D16.8,' (=MAGN.MOM.*(7.018244E-6)/TESLAS)')
      J123=0
      DO 777 J=1,NDATAP
      IF(TEMPIK(J).LE.ZERO)GOTO 777
      IF(TESDAT(J).NE.TESLAS)GOTO 777
      J123=J123+1
      TEMPPJ=TEMPIK(J)
      FKT=BOLZCM*TEMPPJ
      SUM=ZERO
      ZCHI=ZERO
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
      SUM=SUM+ZEEMAN(I)*EXPWKT
  700 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
C**   THIS RESULT IS NEG. MAGN. MOMENT IN BOHR MAGNETONS:
      FMAGNB=-CHIQUO
      CHIFLD=PREVOR*CHIQUO
      CHISI=CHIFLD/TESLAS
      TEMPUT(J123)=TEMPPJ
      CHIOUT(J123)=CHISI
      IF(J123.EQ.3)THEN
      J123=0
      WRITE(*,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      WRITE(11,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      WRITE(14,775)(TEMPUT(I),CHIOUT(I),I=1,3)
      ENDIF
  777 CONTINUE
  776 FORMAT(' TEMP',
     1'/K  CHI.TRANSVERS  TEMP/K  CHI.TRANSVERS  TEMP/K  CHI.TRANSVERS')
  775 FORMAT(3(F7.2,D16.8))
      WRITE(*,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
      WRITE(11,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
      WRITE(14,775)(TEMPUT(I),CHIOUT(I),I=1,J123)
C
      IF(JTRANS.EQ.3)THEN
      WRITE(*,773)
      WRITE(11,773)
      WRITE(14,773)
  773 FORMAT(' SUGANYK(JTRANS) RETURNS TO SUGANCK.')
      RETURN
      ENDIF
      JTRANS=3
      GOTO 9742
CEND SUGANYK
      END
      SUBROUTINE SUGANK(FKWERT,ABST,GMAT
CCCCCCCCCC SUGANKK - K for Complex - K added because FMATs are Komplex. CCCCCCCCCC
C**   CALLED BY SELECT! - CALLS (SUGANO for more OUTPUT and) SUGANC
C     to diagonalize a matrix set up here and to calculate ZEEMAN!
C**   FAKGQK=-TWO*FKWERT for Heisenberg coupling is not ZERO here.
C     If only temperature has changed (CALLed with NURTMP.NE.0), and if FKWERT
C     has not changed (NURTMQ.NE.0), SUGANK does effectively not work, and
C     SUGANC is CALLed with NURTMQ and gets NURTMP=NURTMQ!
C**   More OUTPUT may be produced (only) in SUBROUTINE SUGANO, if MOROUT.NE.0!
C
C     SUGANK is for z-, x-, and y-direction of magnetic field here!
C     SUGANK will call SUGANC with NRROUT=4. Heisenberg coupling is
C     taken into account here with FKWERT for symmetrical and some
C     non-symmetrical dimers (K <=> KOMPL. Heisenberg, "NRROUT.GT.2").
C     Subroutine SUGANK may be called, for the same temperature, max.
C     3 times: NRSORT=1...3 <=> z-, x-, and y-direction with IGRUND
C     "small", if "Combined Model", and KASSMN=IGRUND**2.
C
C     The g-factor for spin is contained in FMAT. GMAT(ND252,ND252,1:3),
C     also belonging to the general interface, containes only spin, but
C     without g-factor, and will be used for Heisenberg coupling.
C     The number of values of WERTIN used here in SUBROUTINE SUGANK is
C     IGRUND, and KASSMN becomes IGRUND**2 (IGRUND*JACUGD if JACUGD.NE.0).
C**   COMPLEX*16 CPERTU and CPXMAT are calculated to go to SUGANC,
C     and TESLAC, the strenght of the magn. field, enters, if not "JAVANV".
C     See SUBROUTINE SUGANC for more information!
C     SUGANK RETURNs to SELECT.
C
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,CPERTU,CFMATY
     3,IGRUND,JAVANV,MOROUT,NRSORT,NURTMP,NRRUFX
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,FMATCH,EIVEC
     7,JACUGD,FMATCU,GMATCU,WERTCU)
C
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      DOUBLE PRECISION WERTIN(*)
     1,TESLAC,DIRECZ(3),DUMMYD(NDMAL4),DUMMY(NDMAL3)
     2,EIWERT(*),ZEEMAN(*),ZEEMA2(*),DIFLOW,DIFMAX
     3,ABST,ABSTFF,FAKGQK,FKWERT,TEMPR,TEMPI,TEMPRR,TEMPII
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     3,CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     3,FMATCH(*),EIVEC(*),FACZ,FACXY,FACXYH
C**   ABOVE: "FROM CALL", BELOW: "ALL OTHER"
     4,ZERO,HALF,ONE,TWO,PARWUR,PARWUQ,PARZER
     5,FISOTR,FANISO,FKOLD,FKOLDX,FKOLDY
      DOUBLE PRECISION FMATCU(8,8,3),GMATCU(8,8,3),WERTCU(8)
      COMPLEX*16 CPXMAT(ND2828,*),EIVECC(ND2828,*)
     1,CPERTU(ND2828,*),CFMATY(ND2828,*),FMAT(ND252,ND252,5)
     1,GMAT(ND252,ND252,3),TEMPPR,TEMPPI,TEMPMR,TEMPMI,FAKMAT
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0,PARWUR=1.0D-6
     1,PARWUQ=PARWUR**2,PARZER=ZERO)
      COMMON/ALLGEM/MORMST,MORTEX,JATEST,MIST,LESS,MIST14(14)
      COMMON/KLIXYZ/ISTZXY
      COMMON/JTSTZZ/JTSTZX
      COMMON/MIRROV/FACZ,FACXY,MIRROW
      PARAMETER(ABSTFF=0.43297D+06)
C     INTEGER IGRUND,JAVANV,MOROUT,NRSORT,NURTMP
C    1,ND252,ND1110,ND2828,NDMAL4
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
C    2,NRTEMP,NURTMQ
C**   ABOVE: INTEGER "FROM CALL", BELOW: "OTHER", BUT NOT "ALL"
C    2,NRROUT,KASSMN
      SAVE
      DATA FKOLD/ZERO/,KLICKF/0/,KLIZXY/0/
     1,KLICKG/0/,KLICKH/0/,FKOLDX/ZERO/,FKOLDY/ZERO/
      FACXYH=FACXY*HALF
C NOW MINUS/WITHOUT MAGNETIC FIELD FOR JTSTZX!:
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,27)
      IF(KLIZXY.EQ.0.AND.ISTZXY.NE.0.AND.ABST.GT.ZERO)THEN
      KLIZXY=1
      WRITE(11,77)
 8255 WRITE(*,77)
   77 FORMAT(
     1' ANISOTROPIC PART OF MAGNETIC DIPOL DIPOL INTERACTION MAY BE CALC
     2ULATED',/,' IN Z-, IN X- OR IN Y-DIRECTION: Z,X,Y <=> 1,2,3')
C05     3>2, RESPECTIVELY!')
C      IF(LMN.EQ.0)THEN
C      READ(77,'(I1)',ERR=5588,END=3446)ISTZXY
C      GOTO 4946
C      ENDIF
C 3446 READ(*,'(I1)',ERR=8255,END=4576)ISTZXY
C      LMN=1
C 4946 WRITE(7,2396)ISTZXY
C05 2396 FORMAT(I1,' =ISTZXY IN SUGANK') COK
      WRITE(*,2639)ISTZXY
      WRITE(11,2639)ISTZXY
 2639 FORMAT(I2,' =ISTZXY IN SUGANK')
      ENDIF
      NURTMQ=0
      IF(NRRUFX.LE.1)THEN
      IF(KLICKF.NE.0.AND.NURTMP.NE.0.AND.FKOLD.EQ.FKWERT)NURTMQ=1
      KLICKF=1
      FKOLD=FKWERT
      ELSE IF(NRRUFX.EQ.2)THEN
      IF(KLICKG.NE.0.AND.NURTMP.NE.0.AND.FKOLDX.EQ.FKWERT)NURTMQ=1
      KLICKG=1
      FKOLDX=FKWERT
      ELSE
      IF(KLICKH.NE.0.AND.NURTMP.NE.0.AND.FKOLDY.EQ.FKWERT)NURTMQ=1
      KLICKH=1
      FKOLDY=FKWERT
      ENDIF
      IF(NURTMQ.NE.0)GOTO 9999
      NRROUT=4
      KASSMN=IGRUND**2
      IF(JACUGD.NE.0)KASSMN=IGRUND*JACUGD
      IF(KASSMN.GT.ND2828)STOP 'ND2828'
C**   1=NRCALL
      IF(MOROUT.NE.0)CALL SUGANO(1,NRROUT,NRSORT,JAVANV
     1,IGRUND,KASSMN,TESLAC,DIRECZ,DIFLOW,DIFMAX
     2,WERTIN,FMATCH,ND1110,CPXMAT,ND2828,EIVEC,EIVECC,EIWERT
     3,ZEEMAN,ZEEMA2)
C
      FISOTR=ZERO
C05      IF(ABST.NE.ZERO)FISOTR=ABSTFF/DABS(ABST)**3
      IF(ISTZXY.NE.0)FISOTR=ABSTFF/DABS(ABST)**3
      FANISO=ZERO
      IF(ISTZXY.NE.0.AND.ABST.GT.ZERO)FANISO=FISOTR*(-3.0D0)
      IF(ABST.GT.ZERO)FANISO=FISOTR*(-3.0D0)
C**   FISOTR AND FANISO MUST NOT CONTAIN ANY G-FACTOR (FMAT CONTAINS THE
C     G-FACTOR FOR SPIN - IN GMAT THE G-FACTOR IS =ONE)!
      FAKGQK=-TWO*FKWERT
C
      IF(JACUGD.EQ.0)THEN
      LINROW=0
      DO 1215 JJ=1,IGRUND
      DO 1214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 1213 II=1,IGRUND
      DO 1212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 1212
      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CPERTU(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      TEMPPI=DIRECZ(3)*FMAT(I,J,5)*DCMPLX(ZERO,ONE)
      TEMPMR=DCMPLX(ZERO,ZERO)
      TEMPMI=DCMPLX(ZERO,ZERO)
      IF(JAVANV.EQ.0.AND.JTSTZX.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(I.EQ.J)TEMPMR=TEMPMR+DCMPLX(WERTIN(I),ZERO)
      CPXMAT(LINCOL,LINROW)=TEMPMR+TEMPMI
      CPERTU(LINCOL,LINROW)=TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPPR=DIRECZ(1)*FMAT(II,JJ,1)+DIRECZ(2)*FMAT(II,JJ,4)
      TEMPPI=DIRECZ(3)*FMAT(II,JJ,5)*DCMPLX(ZERO,ONE)
      TEMPMR=DCMPLX(ZERO,ZERO)
      TEMPMI=DCMPLX(ZERO,ZERO)
      IF(JAVANV.EQ.0.AND.JTSTZX.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(II.EQ.JJ)TEMPMR=TEMPMR+DCMPLX(WERTIN(II),ZERO)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+TEMPMR+TEMPMI
      CPERTU(LINCOL,LINROW)=CPERTU(LINCOL,LINROW)+TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      FAKMAT=GMAT(II,JJ,1)*GMAT(I,J,1)*FACZ
     1+FACXYH*(GMAT(II,JJ,2)*GMAT(I,J,3)
     2+GMAT(II,JJ,3)*GMAT(I,J,2))
      FAKMAT=FAKMAT*FAKGQK
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+FAKMAT
      IF(FISOTR.NE.ZERO)CPXMAT(LINCOL,LINROW)
     1=CPXMAT(LINCOL,LINROW)+FISOTR*(FMAT(II,JJ,1)*FMAT(I,J,1)
     1+FMAT(II,JJ,4)*FMAT(I,J,4)
     2-FMAT(II,JJ,5)*FMAT(I,J,5))
C**   Z-AXIS IS ION-ION AXIS
      IF(FANISO.NE.ZERO)THEN
      IF(ISTZXY.EQ.1)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+FANISO*FMAT(II,JJ,1)*FMAT(I,J,1)
      ELSE IF(ISTZXY.EQ.2)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+FANISO*FMAT(II,JJ,4)*FMAT(I,J,4)
      ELSE IF(ISTZXY.EQ.3)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1-FANISO*FMAT(II,JJ,5)*FMAT(I,J,5)
      ENDIF
      ENDIF
 1212 CONTINUE
 1213 CONTINUE
 1214 CONTINUE
 1215 CONTINUE
      ELSE IF(JACUGD.NE.0)THEN
CKR: Jan.2007 - "JTSTZX=0 OR =1"!
      IF(JTSTZX.NE.0)STOP 'JTSTZX'
      LINROW=0
      DO 2215 JJ=1,JACUGD
      DO 2214 J=1,IGRUND
      LINROW=LINROW+1
      LINCOL=0
      DO 2213 II=1,JACUGD
      DO 2212 I=1,IGRUND
      LINCOL=LINCOL+1
      IF(LINCOL.LT.LINROW)GOTO 2212
      CPXMAT(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      CPERTU(LINCOL,LINROW)=DCMPLX(ZERO,ZERO)
      IF(II.EQ.JJ)THEN
      TEMPPR=DIRECZ(1)*FMAT(I,J,1)+DIRECZ(2)*FMAT(I,J,4)
      TEMPPI=DIRECZ(3)*FMAT(I,J,5)*DCMPLX(ZERO,ONE)
      TEMPMR=DCMPLX(ZERO,ZERO)
      TEMPMI=DCMPLX(ZERO,ZERO)
      IF(JAVANV.EQ.0)THEN
      TEMPMR=TEMPPR*TESLAC
      TEMPMI=TEMPPI*TESLAC
      ENDIF
      IF(I.EQ.J)TEMPMR=TEMPMR+DCMPLX(WERTIN(I),ZERO)
      CPXMAT(LINCOL,LINROW)=TEMPMR+TEMPMI
      CPERTU(LINCOL,LINROW)=TEMPPR+TEMPPI
      ENDIF
C**   ENDIF BELONGS TO "IF(II.EQ.JJ)THEN"!
      IF(I.EQ.J)THEN
      TEMPR=DIRECZ(1)*FMATCU(II,JJ,1)+DIRECZ(2)*FMATCU(II,JJ,2)
      TEMPI=DIRECZ(3)*FMATCU(II,JJ,3)
      TEMPRR=ZERO
      TEMPII=ZERO
      IF(JAVANV.EQ.0)THEN
      TEMPRR=TEMPR*TESLAC
      TEMPII=TEMPI*TESLAC
      ENDIF
      IF(II.EQ.JJ)TEMPRR=TEMPRR+WERTCU(II)
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+DCMPLX(TEMPRR,TEMPII)
      CPERTU(LINCOL,LINROW)=CPERTU(LINCOL,LINROW)+DCMPLX(TEMPR,TEMPI)
      ENDIF
C**   ENDIF BELONGS TO "IF(I.EQ.J)THEN"!
      FAKMAT=GMATCU(II,JJ,1)*GMAT(I,J,1)*FACZ
     1+FACXYH*(GMATCU(II,JJ,2)*GMAT(I,J,3)
     2+GMATCU(II,JJ,3)*GMAT(I,J,2))
      FAKMAT=FAKMAT*FAKGQK
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)+FAKMAT
      IF(FISOTR.NE.ZERO)CPXMAT(LINCOL,LINROW)
     1=CPXMAT(LINCOL,LINROW)+FISOTR*(FMATCU(II,JJ,1)*FMAT(I,J,1)
     1+FMATCU(II,JJ,2)*FMAT(I,J,4)
     2-FMATCU(II,JJ,3)*FMAT(I,J,5))
C**   Z-AXIS IS ION-ION AXIS
      IF(FANISO.NE.ZERO)THEN
      IF(ISTZXY.EQ.1)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+FANISO*FMATCU(II,JJ,1)*FMAT(I,J,1)
      ELSE IF(ISTZXY.EQ.2)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1+FANISO*FMATCU(II,JJ,2)*FMAT(I,J,4)
      ELSE IF(ISTZXY.EQ.3)THEN
      CPXMAT(LINCOL,LINROW)=CPXMAT(LINCOL,LINROW)
     1-FANISO*FMATCU(II,JJ,3)*FMAT(I,J,5)
      ENDIF
      ENDIF
 2212 CONTINUE
 2213 CONTINUE
 2214 CONTINUE
 2215 CONTINUE
      ENDIF
C
C**   CPERTU HAS TO BE THE WHOLE(!) MATRIX!:
      DO 2122 J=2,KASSMN
      JM1=J-1
      DO 3715 I=1,JM1
      CPERTU(I,J)=DCONJG(CPERTU(J,I))
 3715 CONTINUE
 2122 CONTINUE
C
 9999 CONTINUE
C
      CALL SUGANC(NRROUT,IGRUND
C**   HERE KASSMN INSTEAD OF IGRUND:
     1,WERTIN,FMAT,CPXMAT,TESLAC,DIRECZ,EIVECC,DUMMYD,DUMMY
     2,EIWERT,ZEEMAN,ZEEMA2,DIFLOW,DIFMAX,CPERTU,CFMATY
     3,KASSMN,JAVANV,MOROUT,NRSORT,NURTMQ
     4,ND252,ND1110,ND28,ND2828,NDMAL4,NDMAL3
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE,NRTEMP
     6,FMATCH,EIVEC,JACUGD,FMATCU)
C**   RETURNS TO SELECT!:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND SUGANKK
      END
      SUBROUTINE CHIMAG(JATEST,
C**   CALLED BY SUGANR OR BY SUGANC!
     1NRSORT,CHISI,CHICGS,CHIFLD,TEMPTH,JAABLT,TESLAS,FMAGNB,FMUE
     1,EIWERT,ZEEMAN,ZEEMA2,JAVANV,KASSMN,NRROUT,MOROUT,NRTEMP,JACUGD)
C     <=> CHI-MAGnetisation
      IMPLICIT LOGICAL (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOMIST,MORTEX,JAMIST,MIST,LESS,MFIT,NUROUT,NRMIST
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      DOUBLE PRECISION CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     1,EIWERT(*),ZEEMAN(*),ZEEMA2(*),EIWFKT,CHISII,SUMMIN,CHIQUP,CHISIJ
      DOUBLE PRECISION ZERO,HALF,ONE,TWO,AVOGAD,SIMUBC,SIMUBA,PREVOR
     1,VPREZ6,FKT,FKT2,BOLZCM,BOLTZM,FCHIS,FCHISI,SUM,ZCHI,EXPWKT,CHIQUO
     1,FKWERT
      INTEGER KLICCH(4,6)
      PARAMETER(ZERO=0.0D0,HALF=0.5D0,ONE=1.0D0,TWO=2.0D0)
      PARAMETER(AVOGAD=6.02214D23,SIMUBC=1.165407D-29,SIMUBA=9.27402D-24
     1,BOLZCM=0.695040D0,VPREZ6=1.0D6/(4.D0*3.1415926D0),PREVOR=-AVOGAD
     2*SIMUBC,BOLTZM=1.380622D-23,FCHIS=AVOGAD*SIMUBA*SIMUBC/BOLTZM)
      SAVE
C**   Calculates Chi(molecular) in SI and in CGS units (CHISI, CHICGS)
C     and magnetisation Chi*field=CHISI*TESLAS=CHIFLD, for given temperature
C     (possibly minus THETA) TEMPTH (in Kelvin) and magnetic "field" TESLAS
C     (in Tesla) (CHIFLD not in the case of JAVANV <=> yes"VanVleck", if the
C     magnetic "field" is not given). FMAGNB, the magnetic moment, and FMUE,
C     the effective magnetic moment, both in Bohr magnetons, are also
C     calculated. As input needed: The energy eigenvalues EIWERT and the (neg.)
C     magnetic moments ZEEMAN resp. Zeeman-coefficients of first and second
C     order (ZEEMAN and ZEEMA2; for "JAVANV") for the lowest energy eigenvalues
C     ("niveaus") taken in account, their number being KASSMN. The lowest
C     EIWERT has always been set to zero. Half of Chi etc. calculated is taken,
C     if the calculation concerns a symmetric dimer ("NRROUT.GT.2"), for which
C     Heisenberg coupling and/or magnetic dipol-dipol interaction is taken
C     into account.
C     (THE G-FACTOR FOR SPIN IS CONTAINED IN THE ZEEMAN-COEFF.):
      DATA KLICK,JANO,KLICKT,NRNIV/0,0,0,0/
      DATA KLICCH/24*0/
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,28)
      FKT=BOLZCM*TEMPTH
      SUM=ZERO
      ZCHI=ZERO
      IF(JAVANV.EQ.0)THEN
C**   FORMULA TO CALCULATE MAGN. MOMENT:
      DO 700 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
      SUM=SUM+ZEEMAN(I)*EXPWKT
  700 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
C**   THIS RESULT IS NEG. MAGN. MOMENT IN BOHR MAGNETONS:
      FMAGNB=-CHIQUO
      CHIFLD=PREVOR*CHIQUO
      CHISI=CHIFLD/TESLAS
      ELSE IF(JAVANV.NE.0)THEN
C**   FORMULA OF VANVLECK:
      FCHISI=FCHIS/TEMPTH
      FKT2=TWO*FKT
      DO 701 I=1,KASSMN
      EIWFKT=-EIWERT(I)/FKT
      EXPWKT=DEXP(EIWFKT)
      ZCHI=ZCHI+EXPWKT
C**   IF KASSMM < KASSMN, MANY COEFF. OF SECOND ORDER ARE ZERO NOW
C     (BUT NONE BELONGING TO LOW ENERGY EIGENVALUES EIWERT):
      SUM=SUM+(ZEEMAN(I)-FKT2*ZEEMA2(I))*EXPWKT
  701 CONTINUE
      IF(NRROUT.GT.2.AND.JACUGD.EQ.0)SUM=SUM*HALF
      CHIQUO=ZERO
      IF(ZCHI.NE.ZERO)CHIQUO=SUM/ZCHI
      CHISI=FCHISI*CHIQUO
      CHIFLD=CHISI*TESLAS
C**   THE MAGN. MOMENT IN BOHR MAGNETONS IS (ONLY DEFINED, IF TESLAS.NE.0.):
      FMAGNB=-CHIFLD/PREVOR
      ENDIF
C**   SPECIAL TEST (JATEST.NE.0.AND.MOROUT.NE.0):
CKR      IF(JATEST.EQ.0.OR.MOROUT.EQ.0)GOTO 7771
CKR 7772 FORMAT(' TEST: PUT IN in 3I4,I1 (All 0: NO TEST) NRNIV, MAGNNR, NI
CKR     1VOUT, NOCANC!',/' NRNIV: CHI results from 1th, (1th+2nd), ... (1th
CKR     2+...NRNIVth) eigenvalue only',/,' (intermediate result), MAGNNR: o
CKR     3nly MAGNNR of these are magnetic (0=>all),',/,' NIVOUT: only NIVOU
CKR     4T of these are put out (0=>21, but OUTPUT only once, -1=>0),',/
CKR     5,' NOCANC: =1 for not to cancel the results of this test!')
CKR 7771 CONTINUE
C**   END OF SPECIAL TEST!
C**   CHIFLT=CHIFLD*VPREZ6
      CHICGS=CHISI*VPREZ6
      FMUE=ZERO
C**   FMUE=SQRT(3.0*BOLTZM/(AVOGAD*SIMUBA*SIMUBC))
      IF(CHISI.GT.ZERO.AND.TEMPTH.GT.ZERO)FMUE
     1=797.730D0*DSQRT(CHISI*TEMPTH)
C     IF(CHICGS.GE.ZERO)FMUE=DSQRT(8.0D0*CHICGS*TEMPTH)
C**   FOOTNOTE: TEMPTH=TEMPERATURE IN KELVIN MINUS THETA FOR PSEUDO-FMUE!
      IF(MOROUT.NE.0)THEN
      IF(KLICK.EQ.0)THEN
      KLICK=1
      WRITE(11,77)
 8255 WRITE(*,77)
   77 FORMAT(
     1' MORE OUTPUT IN SUBROUTINE CHIMAG (FOR CHI/MAGN./MAGN.MOMENT)!',/
     2,' FIRST TEMP.: INPUT IN I1: MORE OUTPUT ONLY FOR THIS TEMP. YES(0
     3)/NO',/,' (2 => FIRST TEMP. OF EACH ITER.!)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3446)JANO
      GOTO 4946
      ENDIF
 3446 READ(*,'(I1)',ERR=8255,END=4576)JANO
      LMN=1
 4946 WRITE(7,2396)JANO
 2396 FORMAT(I1,' =JANO OUTPUT IN CHIMAG')
      WRITE(*,2639)JANO
      WRITE(11,2639)JANO
 2639 FORMAT(I2,' =JANO OUTPUT IN CHIMAG!!!!!!!!!')
      ENDIF
      IF((JANO.EQ.0.AND.KLICCH(NRROUT,NRSORT).GT.0).OR
     1.(JANO.GE.2.AND.NRTEMP.GT.1))GOTO 777
      KLICCH(NRROUT,NRSORT)=1
      WRITE(*,70)CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     1,JAVANV,KASSMN,NRROUT,NRTEMP
      WRITE(11,70)CHISI,CHICGS,CHIFLD,TEMPTH,TESLAS,FMAGNB,FMUE
     1,JAVANV,KASSMN,NRROUT,NRTEMP
   70 FORMAT(' CHI '
     1,'IN SI AND IN CGS, CHI*FIELD, TEMP.-THETA, FIELD, MAGN.MOMENT,',/
     2,' PSEUDO EFF.MAGN.MOM., "VANVLECK", No.OF MICRO ST. CONS.,'
     3/,' No. (1...4) OF ROUTINE, No.OF NEW TEMP.=',7D12.4,4I4)
  777 CONTINUE
      ENDIF
C**   NOW RETURN TO SUGAN...:
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND CHIMAG
      END
      SUBROUTINE SCHEMA(
C**   CALLED BY TANABE OR BY CHANGE!
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLNO,ND2002,MSMLNW,KLWER3)
C**   Subroutine SCHEMA - running only once - has been written to give
C     all KASSUM micro states of NREL electrons (max. 13 el., if f el.), and
C     the maximum of KASSUM according to DIMENSION is ND2002. KASSUM=0,
C     if NREL=0. KLWERT = 0/1/2/3 is the l value corr. to s, p , d 
C     and f electrons and is given, KLWER3=3 always. The result of SCHEMA, the
C     consecutively and not arbitrarily (see below) numbered micro
C     states, is given in MSML and in a different form in MSMLNW. See below for
C     the manner they are stored! Some special sums of elements of MSML are
C     given in MQUER (see below).
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      CHARACTER*27 VORMAT,VORMAU,TAMROF(1:13),TAMROG(0:3)
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      DIMENSION MSML(ND2002,2,NREL14),MQUER(ND2002,3)
     1,MSMLNW(ND2002,NREL14),MSMLNO(*)
      DATA TAMROF /
     1'(I5,5X,3I5,12X,1I2,22X,1I2)','(I5,5X,3I5,11X,2I2,20X,2I2)'
     1,'(I5,5X,3I5,10X,3I2,18X,3I2)','(I5,5X,3I5,9X,4I2,16X,4I2)'
     2,'(I5,5X,3I5,8X,5I2,14X,5I2)','(I5,5X,3I5,7X,6I2,12X,6I2)'
     3,'(I5,5X,3I5,6X,7I2,10X,7I2)','(I5,5X,3I5,5X,8I2,8X,8I2)'
     4,'(I5,5X,3I5,5X,9I2,6X,9I2)','(I5,5X,3I5,5X,10I2,5X,10I2)'
     5,'(I5,5X,3I5,5X,11I2,5X,11I2)','(I5,5X,3I5,5X,12I2,5X,12I2)'
     6,'(I5,5X,3I5,5X,13I2,5X,13I2)'/
      DATA TAMROG /'(I5,3X,3I5,I14,I25)','(I5,3X,3I5,I12,2I2,I21,2I2)',
     1'(I5,3X,3I5,I10,4I2,I17,4I2)','(I5,3X,3I5,I8,6I2,I13,6I2)'/
      DATA KLICKS,MOROUU/0,0/
C(NO) SAVE
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,29)
      IF(MORTEX.GT.0)THEN
      WRITE(*,9141)
      WRITE(11,9141)
 9141 FORMAT(' HERE IS SUBROUTINE SCHEMA TO PREPARE ALL MICRO STATES')
      ENDIF
      IF(NREL.EQ.0)THEN
      KASSUM=0
      RETURN
      ENDIF
      IF(KLICKS.EQ.0.AND.MOROUT.NE.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-SCHEMA IN I1!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3447)MOROUU
      GOTO 4947
      ENDIF
 3447 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4947 WRITE(*,2739)MOROUU
      WRITE(11,2739)MOROUU
 2739 FORMAT(I2,' =MOROUU IN SCHEMA!!!!!!!!!')
      WRITE(7,2397)MOROUU
 2397 FORMAT(I1,' =MOROUU IN SCHEMA')
      ENDIF
      VORMAT=TAMROF(NREL)
      VORMAU=TAMROG(KLWERT)
      NRMXDI=2*(2*KLWERT+1)
      DO 33 N=1,NREL
      MQUER(N,1)=NRMXDI-N
      MQUER(N,2)=NREL-N
   33 CONTINUE
C
      KASSUM=0
C**   INFINITE LOOP:
   99 CONTINUE
      II=NREL
      KASSUM=KASSUM+1
      IF(KASSUM.GT.ND2002)STOP 'KASSUM'
      DO 21 N=1,NREL
      MSML(KASSUM,1,N)=MQUER(N,1)
      MSMLNW(KASSUM,N)=MQUER(N,1)
   21 CONTINUE
      MQUER(II,1)=MQUER(II,1)-1
   22 CONTINUE
      IF(MQUER(II,1).LT.MQUER(II,2))THEN
      II=II-1
      IF(II.EQ.0)GOTO 55
      MQUER(II,1)=MQUER(II,1)-1
      GOTO 22
      ENDIF
      IIP1=II+1
      DO 3 I=IIP1,NREL
      IM1=I-1
      MQUER(I,1)=MQUER(IM1,1)-1
    3 CONTINUE
      GOTO 99
C
   55 CONTINUE
      DO 56 I=1,KASSUM
      DO 54 II=1,NREL
      MSML(I,2,II)=-1
      IF(((MSML(I,1,II)/2)*2-MSML(I,1,II)).NE.0)THEN
      MSML(I,2,II)=1
      MSML(I,1,II)=MSML(I,1,II)-1
      ENDIF
      MSML(I,1,II)=MSML(I,1,II)/2-KLWERT
   54 CONTINUE
   56 CONTINUE
C
      DO 112 I=1,KASSUM
      MQUER(I,1)=0
      MQUER(I,2)=0
      DO 111 N=1,NREL
      MQUER(I,1)=MQUER(I,1)+MSML(I,1,N)
      MQUER(I,2)=MQUER(I,2)+MSML(I,2,N)
  111 CONTINUE
      MQUER(I,3)=2*MQUER(I,1)+MQUER(I,2)
  112 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(11,9940)KASSUM
 8255 WRITE(*,9940)KASSUM
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3448)KASSUL
      GOTO 4948
      ENDIF
 3448 READ(*,'(I4)',ERR=8255,END=4576)KASSUL
      LMN=1
 4948 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
 2398 FORMAT(I4,' =KASSUL("No.OF ROWS")')
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
 2399 FORMAT(I5,' =KASSUL("No.OF ROWS")!!!!!!!!!')
      WRITE(*,9911)
      WRITE(11,9911)
      DO 9999 II=1,KASSUL
      WRITE(*,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I=1,NREL)
      WRITE(11,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I=1,NREL)
 9999 CONTINUE
 9911 FORMAT(
C - RESULT FROM FILE 11, FOR 3 (D)EL. HERE PARTLY INCLUDED, IS:
     1' No.OF STATE  SUM SUM SUM (MSML(II,1,I),I=1,NREL),(MSML(II,2,I),I
     1=1,NREL)')
C    1         5    1   11           2 2 1                   1-1 1
C    2         5   -1    9           2 2 1                   1-1-1
C    3         4    1    9           2 2 0                   1-1 1
C    4         4   -1    7           2 2 0                   1-1-1
C    5         3    1    7           2 2-1                   1-1 1
C    6         3   -1    5           2 2-1                   1-1-1
C    7         2    1    5           2 2-2                   1-1 1
C    8         2   -1    3           2 2-2                   1-1-1
C    9         4    1    9           2 1 1                   1 1-1
C   10         3    3    9           2 1 0                   1 1 1
C   .........
C CONCERNING (MSML(II,1,I),I=1,NREL): THE NUMBERS PRINTED ABOVE ARE SUCH
C THAT EACH NUMBER (E.G. 1) IS EQUAL TO OR SMALLER THAN THE PRECEDING ONE!
C (MSML(II,2,I),I=1,NREL): THE FIRST NUMBER IS 1 OR -1; IF THERE ARE TWO
C NUMBERS EQUAL TO EACH OTHER IN (MSML(II,1,I),I=1,NREL), THE PAIR 1 -1
C BELONGS TO THESE!
C IF KLWERT IS ADDED TO EACH ML NUMBER, E.G.
C    8         2   -1    3      4 4 0      1-1-1
C    9         4    1    9      4 3 3      1 1-1
C   10         3    3    9      4 3 2      1 1 1
C EACH NUMBER BECOMES A DIGIT, AND IF E.G. 4 4 0 IS TAKEN AS THE NUMBER 440,
C EACH OF THESE NEW NUMBERS OF A GIVEN ROW IS SMALLER THAN OR EQUAL TO THE
C NUMBER OF A PRECEDING ROW!
C**   (ADDED IN 2006:) IN DO's 56/54:
C    7                  1-1 1 & 9 8 1 -> 8 8 0 -> 4 4 0 -> 2 2-2
C    8                  1-1-1 & 9 8 0 -> 8 8 0 -> 4 4 0 -> 2 2-2
C    9                  1 1-1 & 9 7 6 -> 8 6 6 -> 4 3 3 -> 2 1 1
C   10                  1 1 1 & 9 7 5 -> 8 6 4 -> 4 3 2 -> 2 1 0
C**  THE FIRST 12 ARE: (1-11)987;(1-1-1)986;(1-11)985;(1-1-1)984;(1-11)983;
C    (1-1-1)982;(1-11)981;(1-1-1)980;(11-1)976;(111)975;(11-1)974;(111)973.
      ENDIF
C
C**   "CHANGE OF STORE" TO MSMLNW(ND2002,2,-KLWER3:KLWER3), KLWER3=KLWERT!:
CK      DO 1 I=1,ND2002
C      DO 12 J=1,2
C      DO 123 K=-KLWER3,KLWER3
C      MSMLNW(I,J,K)=0
C  123 CONTINUE
C   12 CONTINUE
C      DO 2 K=1,NREL
C      IF(MSML(I,2,K).EQ.1)THEN
C      MSMLNW(I,1,MSML(I,1,K))=1
C      ELSE
C      MSMLNW(I,2,MSML(I,1,K))=-1
C      ENDIF
C    2 CONTINUE
CK    1 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(*,9941)
      WRITE(11,9941)
      WRITE(11,9940)KASSUM
 8256 WRITE(*,9940)KASSUM
 9940 FORMAT(
     1' THERE ARE',I5,' MICRO STATES! OUTPUT OF ALL OR OF .. (IN I4)?')
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3449)KASSUL
      GOTO 4949
      ENDIF
 3449 READ(*,'(I4)',ERR=8256,END=4576)KASSUL
      LMN=1
 4949 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
      DO 9991 II=1,KASSUL
CK      WRITE(*,VORMAU)II,(MQUER(II,I),I=1,3)
      WRITE(*,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSMLNW(II,I),I=1,NREL)
CK     1,(MSMLNW(II,I),I=-KLWERT,KLWERT)
CK     2,(MSMLNW(II,2,I),I=-KLWERT,KLWERT)
CK      WRITE(11,VORMAU)II,(MQUER(II,I),I=1,3)
      WRITE(11,VORMAT)II,(MQUER(II,I),I=1,3)
     1,(MSMLNW(II,I),I=1,NREL)
CK     1,(MSMLNW(II,1,I),I=-KLWERT,KLWERT)
CK     2,(MSMLNW(II,2,I),I=-KLWERT,KLWERT)
 9991 CONTINUE
      ENDIF
C
 9941 FORMAT(
     1' No.OF STATE  SUM SUM SUM (MSMLNW(II,I),I=1,NREL)')
CK 9941 FORMAT(' No.OF ST.  SUM',
C - RESULT FROM FILE 11, FOR 3 (D)EL. HERE PARTLY INCLUDED, IS:
CK     1' SUM SUM  MSMLNW(II,1,-KLWERT:+KL..) MSMLNW(II,2,-KL..:+KL..)')
C    1       5    1   11         1 1 0 0 0               -1 0 0 0 0
C    2       5   -1    9         1 0 0 0 0               -1-1 0 0 0
C   .........
C
C
C**   RETURNS TO TANABE OR TO CHANGE!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND SCHEMA
      END
      SUBROUTINE NUMERO(JJJ,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL
     1,MSMLNW)
C**   CALLED BY ELELWW, SPORCO, CRYSTF, MAGNF!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      INTEGER MSML(ND2002,2,*),MSMLNO(*),MSMLNW(ND2002,*)
C
C**   EVALUATION OF NR IN MSML(NR, , ) FOR GIVEN MSMLNO( )!:
C     KLWERT = 0/1/2/3 is the l value corr. to s, p, d 
C     and f electrons and is given, KLWER3=3 always.
C**   Subroutine NUMERO has been written to evaluate the number NR of one
C     of a maximum of ND2002 micro states of NREL electons (actually the
C     number of states is KASSUM and in most cases lower than ND2002), which
C     are numbered consecutively and stored in MSML. The micro state looked
C     for is given in MSMLNO.
      SAVE
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,30)
C**   BECAUSE ONLY STEP-DOWN OPERATORS:
      IHIGH=KASSUM
      ILOW=JJJ
      NR=JJJ+(1+IHIGH-ILOW)/2
      ISUM=0
    3 CONTINUE
      ISUM=ISUM+1
      IF(ISUM.GT.20)STOP 'ISUM.GT.'
      JAOBEN=0
      DO 2 I=1,NREL
      IF(MSMLNW(NR,I).EQ.MSMLNO(I))GOTO 2
      IF(MSMLNW(NR,I).GT.MSMLNO(I))THEN
      JAOBEN=1
      GOTO 4
      ELSE
      JAOBEN=-1
      GOTO 4
      ENDIF
    2 CONTINUE
      RETURN
    4 CONTINUE
      IF(JAOBEN.GT.0)THEN
      ILOW=NR
      NR=ILOW+(1+IHIGH-ILOW)/2
      ELSE
      IHIGH=NR
      NR=IHIGH-(1+IHIGH-ILOW)/2
      ENDIF
      GOTO 3
C**   RETURNS TO ELELWW, SPORCO, CRYSTF, MAGNF!
CEND NUMERO
      END
CEND-FILE SUGANO.F
CEND-FILE TANFEL.F
      FUNCTION DREIJ(FL1,FL2,FL3,FML1,FML2,FML3)
C**   HSCI VERSION, 3J-SYMBOLS;
C     BY MEANS OF THE COUPL. COEFFICIENTS OF WIGNER.
C**   CORRESP. TO THE FORMULA P.75 CONDON/SHORTLEY.
C**   A FUNCTION USED BY CKCOE AND BY ECKART; USES ITSELF FACTLR.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      DIMENSION INTABC(4),LL1L2A(5),LL1L2B(5)
      SAVE
      ZERO=0.0D0
      ONE=1.0D0
      TWO=2.0D0
      TWOM7=2.0D-7
      PAR=0.1D0
C**   THE J RESP. L VALUES CANNOT BE NEGATIV!:
      IF(FL1.LT.ZERO)STOP 'NEG.L1'
      IF(FL2.LT.ZERO)STOP 'NEG.L2'
      IF(FL3.LT.ZERO)STOP 'NEG.L3'
C**   AT FIRST DOUBLE AND MAKE INTEGER
C     (BECAUSE INTEGER AND HALF-INTEGER J VALUES ARE POSSIBLE!)
      L1=INT(TWO*FL1+PAR)
      L2=INT(TWO*FL2+PAR)
      L3=INT(TWO*FL3+PAR)
      M1=INT(TWO*DABS(FML1)+PAR)
      M2=INT(TWO*DABS(FML2)+PAR)
      M3=INT(TWO*DABS(FML3)+PAR)
      IF(FML1.LT.ZERO)M1=-M1
      IF(FML2.LT.ZERO)M2=-M2
      IF(FML3.LT.ZERO)M3=-M3
C**   IT MUST NECESSARELY BE:
      IF((M1+M2+M3).NE.0)STOP 'MSUM'
C**   TEST, IF DOUBLE-J VALUES ARE INTEGER:
      IF(DABS(DBLE(L1)-TWO*FL1).GT.PAR)STOP 'WRONL1'
      IF(DABS(DBLE(L2)-TWO*FL2).GT.PAR)STOP 'WRONL2'
      IF(DABS(DBLE(L3)-TWO*FL3).GT.PAR)STOP 'WRONL3'
      IF(DABS(DBLE(M1)-TWO*FML1).GT.PAR)STOP 'WRONM1'
      IF(DABS(DBLE(M2)-TWO*FML2).GT.PAR)STOP 'WRONM2'
      IF(DABS(DBLE(M3)-TWO*FML3).GT.PAR)STOP 'WRONM3'
C**   FIRST THE COUPL. COEFF. `COPPLC':
      K=L3
CKR       IF (K) 99,100,100
       IF(K.LT.0)GOTO 99
CKR  100  IF (L1) 99,101,101
  100  IF(L1.LT.0)GOTO 99
CKR  101  IF (L2) 99,102,102
  101  IF(L2.LT.0)GOTO 99
CKR  102  IF (L1-IABS(M1)) 29,103,103
  102  IF((L1-IABS(M1)).LT.0)GOTO 29
CKR  103  IF (L2-IABS(M2)) 29,104,104
  103  IF((L2-IABS(M2)).LT.0)GOTO 29
  104  M=M1+M2
CKR       IF (K-IABS(M)) 29,105,105
       IF((K-IABS(M)).LT.0)GOTO 29
C**   NOW THE TRIANGLE-INEQUALITY!:
CKR  105  IF (K-IABS(L1-L2)) 29,106,106
  105  IF((K-IABS(L1-L2)).LT.0)GOTO 29
CKR  106  IF (K-L1-L2) 107,107,29
  106  IF((K-L1-L2).GT.0)GOTO 29
  107 CONTINUE
      L=K
      ISTART=0
      SUM=ZERO
      IT=-1
C**   DIVIDE BY 2 (INTEGER DIVISION) AND STORE IN INT...:
      INTAA=(L+L2+M1)/2
      INTAB=(L-L1+L2)/2
      INTBA=(L1-M1)/2
      INTBB=(L+M)/2
      INTDB=(L1-L2-M)/2
      INTE=(L2+M2)/2
C**   NOW AN INFINITE LOOP:
    1 CONTINUE
      IT=IT+1
      IF(ISTART.EQ.0.AND.IT.GT.300)GOTO 300
      IF(IT.GT.1000)STOP 'INFINT'
CKR      IF (INTAA-IT) 200,2,2
      IF((INTAA-IT).LT.0)GOTO 200
CKR    2 IF (INTAB-IT) 200,3,3
    2 IF((INTAB-IT).LT.0)GOTO 200
CKR    3 IF (INTBB-IT) 200,4,4
    3 IF((INTBB-IT).LT.0)GOTO 200
CKR    4 IF (IT+INTDB) 200,5,5
    4 IF((IT+INTDB).LT.0)GOTO 200
    5 CONTINUE
C**   ORDERING OF INTAAM=(L+L2+M1)/2-IT AND INTBAP=(L1-M1)/2+IT:
      INTAAM=INTAA-IT
      INTBAP=INTBA+IT
      IF(INTAAM.LT.INTBAP)THEN
      IDUMMY=INTBAP
      INTBAP=INTAAM
      INTAAM=IDUMMY
      ENDIF
C**   ORDERING OF INTABC(1)=(L-L1+L2)/2-IT, INTABC(2)=(L+M)/2-IT,
C     IINTABC(3)=IT AND INTABC(4)=IT+(L1-L2-M)/2:
      INTABC(1)=INTAB-IT
      INTABC(2)=INTBB-IT
      INTABC(3)=IT
      INTABC(4)=IT+INTDB
      DO 44 I=1,3
      IP1=I+1
      DO 444 J=IP1,4
      IF(INTABC(J).GE.INTABC(I))GOTO 444
      IDUMMY=INTABC(J)
      INTABC(J)=INTABC(I)
      INTABC(I)=IDUMMY
  444 CONTINUE
   44 CONTINUE
      A=FACTLR(INTAAM,INTABC(1))
      B=FACTLR(INTBAP,INTABC(2))
      C=FACTLR(1,INTABC(3))
      D=FACTLR(1,INTABC(4))
      E=(-ONE)**((IT+INTE)-(((IT+INTE)/2)*2))
      F=A*B*C*D*E
      SUM=SUM+F
      ISTART=ISTART+1
      GOTO 1
  200 IF(ISTART.EQ.0)GOTO 1
  300 CONTINUE
C**   AND NOW ORDERING ONCE MORE:
      LL1L2A(1)=(L+L1-L2)/2
      LL1L2A(2)=(L-L1+L2)/2
      LL1L2A(3)=(L1+L2-L)/2
      LL1L2A(4)=(L+M)/2
      LL1L2A(5)=(L-M)/2
      DO 55 I=1,4
      IP1=I+1
      DO 555 J=IP1,5
      IF(LL1L2A(J).GE.LL1L2A(I))GOTO 555
      IDUMMY=LL1L2A(J)
      LL1L2A(J)=LL1L2A(I)
      LL1L2A(I)=IDUMMY
  555 CONTINUE
   55 CONTINUE
C**
      LL1L2B(1)=(L+L1+L2)/2+1
      LL1L2B(2)=(L1-M1)/2
      LL1L2B(3)=(L1+M1)/2
      LL1L2B(4)=(L2-M2)/2
      LL1L2B(5)=(L2+M2)/2
      DO 66 I=1,4
      IP1=I+1
      DO 666 J=IP1,5
      IF(LL1L2B(J).GE.LL1L2B(I))GOTO 666
      IDUMMY=LL1L2B(J)
      LL1L2B(J)=LL1L2B(I)
      LL1L2B(I)=IDUMMY
  666 CONTINUE
   66 CONTINUE
C**
      G=FACTLR(LL1L2A(1),LL1L2B(1))
      H=FACTLR(LL1L2A(2),LL1L2B(2))
      O=FACTLR(LL1L2A(3),LL1L2B(3))
      P=FACTLR(LL1L2A(4),LL1L2B(4))
      Q=FACTLR(LL1L2A(5),LL1L2B(5))
      R=DSQRT(G*H*O*P*Q*DBLE(L+1))
      COPPLC=SUM*R
      IF((DABS(COPPLC-ONE)-TWOM7).LT.ZERO)COPPLC=ONE
      IF((DABS(COPPLC)-TWOM7).LT.ZERO)COPPLC=ZERO
      GOTO 30
   99 STOP 'NEGATV'
   29 COPPLC=ZERO
   30 CONTINUE
C**   NOW THE 3J-SYMBOL WITH M=M3(FROM ABOVE)=-M1-M2:
C-ERR:      L1L2M3=(L1-L2+M3)/2
      L1L2M3=(L1-L2-M3)/2
      MPONE=(-1)**((L1L2M3)-((L1L2M3)/2)*2)
      DREIJ=DBLE(MPONE)*COPPLC/DSQRT(DBLE(K+1))
C**   RETURNS TO CKCOE OR TO ECKART!:
      RETURN
CEND DREIJ
      END
      FUNCTION FACTLR(L,M)
C**   A FUNCTION USED BY FUNCTION DREIJ
C**   RATIO OF L FACTORIAL TO M FACTORIAL,
C     L AND M ARE INTEGERS GREATER THAN OR EQUAL TO ZERO.
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      SAVE
      IF(L.LT.0)STOP 'L-NEG'
      IF(M.LT.0)STOP 'M-NEG'
      FACTLR=1.0D0
      IF(L.EQ.M)RETURN
      LISLTM=0
      IF(L.GT.M)GOTO 40
      IMIN=L+1
      IMAX=M
      LISLTM=1
      GO TO 9
   40 IMIN=M+1
      IMAX=L
    9 DO 10 I=IMIN,IMAX
      FACTLR=FACTLR*DBLE(I)
   10 CONTINUE
      IF(LISLTM.NE.0)FACTLR=1.0D0/FACTLR
C**   RETURNS TO DREIJ!:
      RETURN
CEND FACTLR
      END
      FUNCTION CKCOE(K,L1,M1,L2,M2)
C**   FUNCTION NEEDED: DREIJ
C**   CKCOE IS USED BY TANABE, ECKART, MATRIW AND MATRIV!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      SAVE
      ZERO=0.0D0
      CKCOE=ZERO
      M=M1-M2
C**   THE FORMULA (3.26) P.43 SILVER (WITHOUT ANY COMPLEX-CONJ.!):
C     (LIT.: B.L.SILVER: IRREDUCIBLE TENSOR METHODS, ACADEMIC PRESS
C     NEW YORK ... 1976)
      DREIJ0=DREIJ(DBLE(K),DBLE(L1),DBLE(L2),ZERO,ZERO,ZERO)
      IF(DREIJ0.EQ.ZERO)RETURN
      DREIJM=DREIJ(DBLE(K),DBLE(L1),DBLE(L2),DBLE(M),DBLE(-M1),DBLE(M2))
      IF(DREIJM.EQ.ZERO)RETURN
      SQL1L2=DSQRT(DBLE((2*L1+1)*(2*L2+1)))
C**   A FACTOR OF (2K+1)/2 AND A FACTOR INCLUDING PHI CANCEL!
C**   A PHASE-FACTOR ARISES, BECAUSE THETA(M)=(-1)**M*THETA(-M)
C     AND BECAUSE THERE IS COMPLEX-CONJ. (IN PHI) IN THE CK-COEFF.:
      FACTOR=DBLE((-1)**(M1-((M1/2)*2)))
      CKCOE=FACTOR*SQL1L2*DREIJ0*DREIJM
C**   RETURNS TO TANABE, ECKART, MATRIW OR MATRIV!:
      RETURN
CEND CKCOE
CEND-FILE WIGNES.F
      END
      SUBROUTINE ELELWW(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,LMAL2,I7,NROFNT,NOFROY,EIVSHV,FLWRTH,MSML,MSMLNO,NRELDF)
C**   ... for interelectronic repulsion for the non-diagonal elements!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      DIMENSION NROFNT(ND2002),NOFROY(ND2002,*),EIVSHV(ND2002,I7,3)
     1,MSMLNW(ND2002,NREL14),MSML(ND2002,2,NREL14),MSMLNO(*),NRELDF(*)
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,31)
C**   This routine does not run for one electron or one hole in a (sub)shell!:
      IF(NREL.EQ.1.OR.NREL.EQ.(NRELMX-1))RETURN
C
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C     THE OPERATOR IS A TWO-EL. OPERATOR!:
C     See the formula for (ab/g_ij/cd) in Condon/Shortley!
C     ONLY CONCERNED: EQ.(4) CONDON/SH. P.173 - THERE MUST BE EXACTLY TWO
C     DIFFERING SETS, OR ELEMENTS ARE ZERO! - FOR FURTHER CONDITIONS FOR
C     NON-ZERO ELEMENTS SEE BELOW!
C
C     One individual set of a micro-state is given as a number!:
C     This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for ms=+1/2.
C     (The numer a is one(!) digit, if A, B, C, D are digits for f-el.!)
C
C**   For EACH MICRO-STATE (in its conventional order, i.e. "step down", e.g. 
C     953, i.e. MSMLNW(I,1)=9, MSMLNW(I,2)=5, MSMLNW(I,3)=3):
C     (The two individual sets a and b belong to this micro-state, i.e.
C     the micro-state is ...a...b..., with a>b.) (a and b are numbers, e.g.
C     for the micro-state before (3 electrons): 9(a=5)(b=3).)
C
C     ALL KASSUM MICRO-STATES:
      DO 1 I=1,KASSUM
      NROFNT(I)=0
C
C**   Non-diagonal non-zero matrix elements can exist only for all those states
C     (e.g. ...c...d... with c not equal to a or b and d not equal to a or b),
C     which differ in exactly two individual sets corresponding to (ab/r_12/cd),
C     but msa must be equal to msc, msb equal to msd, and (mla+mlb) must be 
C     equal to (mlc+mld).
C     c and d (either c>d or c<d) are therefore sets not belonging to the state 
C     ...a...b...!
C
C**   In the following DO 22 the NROFDE numbers possible for c and/or d are 
C     evaluated!:
C     (NRELMX=10 for d-el., =14 for f-el.!)
C     (DO 22 N=9,0,-1 for d-el.)
      NROFDE=0
      DO 22 N=NRELMX-1,0,-1
      DO 21 M=1,NREL
      IF(N.EQ.MSMLNW(I,M))GOTO 22
   21 CONTINUE
C**   MSMLNW(I,...)=N is missing, therefore!:
      NROFDE=NROFDE+1
C     This N is stored!:
      NRELDF(NROFDE)=N
   22 CONTINUE
C
C**   If two spaces ("holes") are taken for a and b, there is one possibility 
C     to do this for two electrons, there are three possibilities for three
C     electrons, six possibilities for four electrons, etc. (i.e. NREL!/2
C     possibilities for NREL electrons).
C**   HOLE No.1:
      DO 12 M=1,NREL-1
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED BY THE SECOND
C     (Spin of the el., that was in hole No.1:)
      LOCHS1=MOD(MSMLNW(I,M),2)
C     (Number of the hole No.1:)
      LOCH1=MSMLNW(I,M)
C**   HOLE No.2:
      DO 11 N=M+1,NREL
C     (Spin of the el., that was in hole No.2:)
      LOCHS2=MOD(MSMLNW(I,N),2)
C     (Number of the hole No.2:)
      LOCH2=MSMLNW(I,N)
C**   Into the first hole NROFDE values which are possible for c are inserted,
C     firstly the first value, then the second, ... (e.g. secondly 7): 
C     (For e.g. three d-electrons there are (10-3)=7 possibilities to do this.)
      DO 32 K=1,NROFDE
C     (Spin of the el. now in hole No.1:)
      INLOS1=MOD(NRELDF(K),2)
C     (Number of the el. now in hole No.1:)
      INLO1=NRELDF(K)
C**   The spins for a and c must be equal (e.g. 9<->7 "same spin"):
      IF(INLOS1.NE.LOCHS1)GOTO 32
C**   Into the second hole NROFDE values which are possible for d are inserted
C     (e.g. fistly 8):
      DO 31 L=1,NROFDE
C**   ... but c must not equal d (e.g. 7.NE.8):
      IF(L.EQ.K)GOTO 31
C     (Spin of the el. now in hole No.2:)
      INLOS2=MOD(NRELDF(L),2)
C     (Number of the el. now in hole No.2:)
      INLO2=NRELDF(L)
C**   The spins for b and d must be equal (e.g. 5<->8 "not the same spin"):
      IF(INLOS2.NE.LOCHS2)GOTO 31
C**   (mla+mlb) must be equal to (mlc+mld) (spins are already equal!):
C     For the 2nd and 3rd hole e.g. 5+3=7+1 or 5+3=1+7:
      IF((INLO1+INLO2).NE.(LOCH1+LOCH2))GOTO 31
C**   To get the right sign for these elements, the states ...c...d... are 
C     ordered to get the conventional order of the individual sets, and the
C     parity of the permutation to get this order (even or odd) determines
C     this sign (e.g. 1 7 => 7 1 <=> "odd"!)!
C**   JAODD:
      JAODD=0
      DO 40 J=1,NREL
      MSMLNO(J)=MSMLNW(I,J)
   40 CONTINUE
      MSMLNO(M)=INLO1
      MSMLNO(N)=INLO2
      DO 4 J=1,NREL-1
      DO 44 JJ=J,NREL
      IF(MSMLNO(JJ).GT.MSMLNO(J))THEN
C     JAODD=0 =>=1; JAODD=1 =>=0!:
      JAODD=IABS(JAODD-1)
      ITEMP=MSMLNO(J)
      MSMLNO(J)=MSMLNO(JJ)
      MSMLNO(JJ)=ITEMP
      ENDIF
   44 CONTINUE
    4 CONTINUE
C**   MSMLNO() became now 971 instead of 917 (compare both with 953),
C     but INLO1 and INLO2 still differ (and JAODD became different)!
      IF(JAODD.EQ.1)JAODD=-1
      IF(JAODD.EQ.0)JAODD=1
      FJAODD=DBLE(JAODD)
C**   MSMLNO, i.e. the micro-state, goes to SUBROUTINE NUMERO.
C     NR, i.e. the consecutive number
C     of this micro-state, RETURNs and is stored!:
      CALL NUMERO(1,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C**   BECAUSE FOR LOWER STORAGE MODE USED:
      IF(NR.LE.I)GOTO 31
C**   One more non-diagonal element has to be calculated:
      NROFNT(I)=NROFNT(I)+1
      IF(NROFNT(I).GT.I7)STOP '.GT.I7'
      NOFROY(I,NROFNT(I))=NR
C**   Now the ml's itself, to be used in FUNCTION CKCOE!:
      LOCHM1=LOCH1/2-KLWERT
      LOCHM2=LOCH2/2-KLWERT
      INLOM1=INLO1/2-KLWERT
      INLOM2=INLO2/2-KLWERT
C**   The element is now calculated, but really all its parts, the F's not yet 
C     included!:
C**   K in Condon/Shortley is KK here, KK=MDIF,LMAL2,2:
      MDIF=IABS(INLOM1-LOCHM1)
      DO 5 KK=2,LMAL2,2
      IF(KK.LT.MDIF)GOTO 5
      KKH=KK/2
C**   DATA EIVSHV/IVSHV*ZERO/; IVSHV=3432*I7*3; I7=36
      EIVSHV(I,NROFNT(I),KKH)=CKCOE(KK,KLWERT,LOCHM1,KLWERT,INLOM1)*
     1CKCOE(KK,KLWERT,INLOM2,KLWERT,LOCHM2)*FJAODD
C**   HINT: EQ.(7) CONDON/SH. P.175 IS IMPORTENT, BECAUSE,
C     SEE EQ.(9), (AB/Q/CD)=...CK(A,C)*CK(D(!),B(!))...!
    5 CONTINUE
C
   31 CONTINUE
   32 CONTINUE
   11 CONTINUE
   12 CONTINUE
C
    1 CONTINUE
      RETURN
CEND ELELWW
      END
      SUBROUTINE SPORCO(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,I6,NROFNS,NOFROX,EIVSHU,FLWRTH,MSML,MSMLNO)
C     CALLED BY TANABE/(TANAKE)!
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      INTEGER MSML(ND2002,2,NREL14),MSMLNW(ND2002,NREL14)
     1,MSMLNO(*),NROFNS(*),NOFROX(ND2002,*)
      DIMENSION EIVSHU(ND2002,*)
C**   SPORCO CALCULATES THE NON-DIAGONAL ELEMENTS FOR SPIN-ORBIT COUPLING:
C     (THE OPERATOR IS A SUM OF ONE-EL. OPERATORS, AND THESE ARE
C     = HALF*((l+.s-)+(l-.s+)), FOR EACH EL.!)
C     THE RESULT OF SUCH A ONE-EL. OPERATOR (CONDON/SH.,P.59,EQ.(3)OF 7**3)
C     AND/OR P.221,EQ.(1C)) IS:
C     (ONE-EL. OPERATOR FOR THE DIAGONAL ELEMENTS IS (lz.sz)!)
C     KRONECKERDELTA(ml+ms,ml'+ms')HALF*KRONECKERDELTA(ms,ms'+-ONE)*
C      SQRT((l+HALF-(ml+ms))(l+HALF+(ml+ms)))
C     ("HERE" FIRSTLY: ONE* INSTEAD OF HALF*; ONE=>HALF AFTER "RETURN"!
C     l+HALF=>FLWRTH)
C**   LIT.: E.U.CONDON, G.H. SHORTLEY: THE THEORY OF ELECTRONIC SPECTRA,
C**         CAMBRIDGE AT THE UNIVERSITY PRESS 1970.
C     SEE pp.169-171 FOR MATRIX COMPONENTS OF ONE-EL. OPERATORS!
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,32)
C     ALL KASSUM MICRO-STATES:
      DO 1 I=1,KASSUM
      NROFNS(I)=0
C     ALL NREL ELECTRONS:
      DO 2 J=1,NREL
      MSMLNN=MSMLNW(I,J)
      FMLMS=DBLE(2*MSML(I,1,J)+MSML(I,2,J))*0.5D0
      IF((MSMLNN/2)*2.EQ.MSMLNN)THEN
C     EVEN NUMBERS; STEP-DOWN OPERATOR = HALF*(l-.s+):
C     (NO PROBLEMS WITH "CONVENTIONAL ORDER" HERE!)
      MSMLNN=MSMLNN-1
C     NO NEGATIVE NUMBERS POSSIBLE!:
      IF(MSMLNN.LT.0)GOTO 2
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
      IF((J.LT.NREL).AND.(MSMLNN.EQ.MSMLNW(I,J+1)))GOTO 2
      DO 3 K=1,NREL
      MSMLNO(K)=MSMLNW(I,K)
    3 CONTINUE
      MSMLNO(J)=MSMLNN
      CALL NUMERO(I,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C     ONE MORE MATRIX ELEMENT WAS FOUND (ITS NUMBER NR FROM NUMERO)!:
      NROFNS(I)=NROFNS(I)+1
      IF(NROFNS(I).GT.I6)STOP '.GT.I6'
      NOFROX(I,NROFNS(I))=NR
      PROD=DSQRT((FLWRTH-FMLMS)*(FLWRTH+FMLMS))
C     AND THE VALUE OF THE MATRIX ELEMENT!:
      EIVSHU(I,NROFNS(I))=PROD
C**   BECAUSE FOR LOWER STORAGE MODE USED:
C      ELSE
C     ODD NUMBERS; STEP-UP OPERATOR = HALF*(l+.s-):
C      "THESE MATRIX ELEMENTS NOT NEEDED"!
      ENDIF
    2 CONTINUE
    1 CONTINUE
      RETURN
CEND SPORCO
      END
      SUBROUTINE CRYSTF(KASSUM,NREL,KLWERT,NRELMX,MSMLNW,ND2002,NREL14
     1,LMAL2,J7,NROFN1,NOFRO1,EIVSH1,FLWRTH,MSML,MSMLNO,NRELDF
     2,NROFN2,NOFRO2,EIVSH2,NROFN3,NOFRO3,EIVSH3,NROFN4,NOFRO4,EIVSH4
     3,NROFN5,NOFRO5,EIVSH5,NROFN6,NOFRO6,EIVSH6)
C     CALLED BY TANABE/(TANAKE)!
C**   CRYSTF CALCULATES THE NON-DIAGONAL ELEMENTS (resp. FACTORS for these)
C     of the MATRIX of the CRYSTAL-FIELD/Ligand-field OPERATOR!
C     (THE OPERATOR IS A SUM OF ONE-EL. OPERATORS, 
C     SPIN AND ANYTHING ELSE MUST BE THE SAME, EXCEPT ONE
C     ML VALUE, WHICH IS NOT EQUAL TO ML-DASH (CONDON/SH.P.171 EQ.(8))!
C     This EQ.(8) in Condon/Shortley is the formula for +-(a/f/b)!)
C**   (FOR THE THE DIAGONAL ELEMENTS SEE CONDON/SH. P.171,EQ.(9)!)
C     (SEE ALSO GRIFFITH P.196,EQ.(8.4)!)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      DIMENSION NROFN6(ND2002),NOFRO6(ND2002,J7),EIVSH6(ND2002,J7)
      DIMENSION NROFN5(ND2002),NOFRO5(ND2002,J7),EIVSH5(ND2002,J7)
      DIMENSION NROFN4(ND2002),NOFRO4(ND2002,J7),EIVSH4(ND2002,J7,2)
      DIMENSION NROFN3(ND2002),NOFRO3(ND2002,J7),EIVSH3(ND2002,J7,2)
      DIMENSION NROFN2(ND2002),NOFRO2(ND2002,J7),EIVSH2(ND2002,J7,3)
      DIMENSION NROFN1(ND2002),NOFRO1(ND2002,J7),EIVSH1(ND2002,J7,3)
     1,MSMLNW(ND2002,NREL14),MSML(ND2002,2,NREL14),MSMLNO(*),NRELDF(*)
C     One individual set of a micro-state is given as a number!:
C     This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for ms=+1/2.
C
C**   For EACH MICRO-STATE (in its conventional order, i.e. "step down", e.g. 
C     976):
C     (The individual set a belongs to this micro-state, i.e.
C     the micro-state is ...a...) (a is a number, e.g.
C     for three electrons for the micro-state 531: 5(a=3)1.)
C
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,33)
C     ALL KASSUM MICRO-STATES:
      DO 1 I=1,KASSUM
      NROFN6(I)=0
      NROFN5(I)=0
      NROFN4(I)=0
      NROFN3(I)=0
      NROFN2(I)=0
      NROFN1(I)=0
C
C**   Non-diagonal non-zero matrix elements exist for all those states (e.g. 
C     ...b...),
C     which differ in exactly one individual set corresponding to (a/f/b),
C     but msa must be equal to msb, i.e. the spin must be the same.
C     b is therefore a set not belonging to the state ...a...!
C     In the following DO 22 the NROFDE numbers possible for b are evaluated!:
      NROFDE=0
C     NRELMX=10 for d-el., =14 for f-el.!:
C     (DO 22 N=9,0,-1 for d-el.)
      DO 22 N=NRELMX-1,0,-1
      DO 21 M=1,NREL
      IF(N.EQ.MSMLNW(I,M))GOTO 22
   21 CONTINUE
C**   MSMLNW(I,...)=N is missing, therefore!:
      NROFDE=NROFDE+1
C     This N is stored!:
      NRELDF(NROFDE)=N
   22 CONTINUE
C
C**   If a space ("hole") is taken for a, there is one possibility to do this
C     for one electron, there are two possibilities for two electrons,
C     etc. (i.e. NREL possibilities for NREL electrons).
C**   M<=>HOLE:
      DO 12 M=1,NREL
C**   MOD RETURNS THE REMAINDER WHEN THE FIRST ARGUMENT IS DIVIDED BY THE SECOND
C     (Spin of the hole:)
      LOCHS1=MOD(MSMLNW(I,M),2)
C     (Number of the hole:)
      LOCH1=MSMLNW(I,M)
      DO 32 K=1,NROFDE
C**   Into this hole b will be inserted.
C     For e.g. three p-electrons there are 3 possibilities to do this,
C     and altogether the number of possibilities is in this case 3*(6-3)=9.
C**   OCCUPATION OF HOLE:
C     (Spin:)
      INLOS1=MOD(NRELDF(K),2)
C     (Number:)
      INLO1=NRELDF(K)
C**   The spins for a and b must be equal:
      IF(INLOS1.NE.LOCHS1)GOTO 32
C**   One more non-diagonal element has to be calculated:
C     NROFN.(I)=NROFN.(I)+1: SEE BELOW!
C**   To get the right sign for these elements, the state ...b... is ordered 
C     to get the conventional order of the individual sets, and the parity of 
C     the permutation to get this order (even or odd) determines this sign!
C**   JAODD:
      JAODD=0
      DO 40 J=1,NREL
      MSMLNO(J)=MSMLNW(I,J)
   40 CONTINUE
      MSMLNO(M)=INLO1
      DO 4 J=1,NREL-1
      DO 44 JJ=J,NREL
      IF(MSMLNO(JJ).GT.MSMLNO(J))THEN
C     JAODD=0 =>=1; JAODD=1 =>=0!:
      JAODD=IABS(JAODD-1)
      ITEMP=MSMLNO(J)
      MSMLNO(J)=MSMLNO(JJ)
      MSMLNO(JJ)=ITEMP
      ENDIF
   44 CONTINUE
    4 CONTINUE
      IF(JAODD.EQ.1)JAODD=-1
      IF(JAODD.EQ.0)JAODD=1
      FJAODD=DBLE(JAODD)
C**   MSMLNO(1..NREL), i.e. the micro-state, goes to SUBROUTINE NUMERO.
C     NR, i.e. the consecutive number
C     of this micro-state, RETURNs and is stored!:
      CALL NUMERO(1,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C**   CALL NUMERO(1,..., BECAUSE FOR LOWER STORAGE MODE USED! THEREFORE:
      IF(NR.LE.I)GOTO 32
C**   Now the ml's itself, to be used in FUNCTION CKCOE!:
      LOCHM1=LOCH1/2-KLWERT
      INLOM1=INLO1/2-KLWERT
      NK=IABS(INLOM1-LOCHM1)
C**   The elements are now calculated!:
      IF(NK.EQ.6)THEN
      NROFN6(I)=NROFN6(I)+1
      IF(NROFN6(I).GT.J7)STOP '.GT.J7'
      NOFRO6(I,NROFN6(I))=NR
      EIVSH6(I,NROFN6(I))=CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.5)THEN
      NROFN5(I)=NROFN5(I)+1
      IF(NROFN5(I).GT.J7)STOP '.GT.J7'
      NOFRO5(I,NROFN5(I))=NR
      EIVSH5(I,NROFN5(I))=-CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.4)THEN
      NROFN4(I)=NROFN4(I)+1
      IF(NROFN4(I).GT.J7)STOP '.GT.J7'
      NOFRO4(I,NROFN4(I))=NR
      IF(KLWERT.EQ.3)
     1EIVSH4(I,NROFN4(I),2)=CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      EIVSH4(I,NROFN4(I),1)=CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.3)THEN
      NROFN3(I)=NROFN3(I)+1
      IF(NROFN3(I).GT.J7)STOP '.GT.J7'
      NOFRO3(I,NROFN3(I))=NR
      IF(KLWERT.EQ.3)
     1EIVSH3(I,NROFN3(I),2)=-CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      EIVSH3(I,NROFN3(I),1)=-CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.2)THEN
C     B.2:
      NROFN2(I)=NROFN2(I)+1
      IF(NROFN2(I).GT.J7)STOP '.GT.J7'
      NOFRO2(I,NROFN2(I))=NR
      IF(KLWERT.EQ.3)
C     B62:
     1EIVSH2(I,NROFN2(I),3)=CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      IF(KLWERT.NE.1)
C     B42:
     1EIVSH2(I,NROFN2(I),2)=CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
C     B22:
      EIVSH2(I,NROFN2(I),1)=CKCOE(2,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE IF(NK.EQ.1)THEN
C     B.1:
      NROFN1(I)=NROFN1(I)+1
      IF(NROFN1(I).GT.J7)STOP '.GT.J7'
      NOFRO1(I,NROFN1(I))=NR
      IF(KLWERT.EQ.3)
C     B61:
     1EIVSH1(I,NROFN1(I),3)=-CKCOE(6,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      IF(KLWERT.NE.1)
C     B41:
     1EIVSH1(I,NROFN1(I),2)=-CKCOE(4,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
C     B21:
      EIVSH1(I,NROFN1(I),1)=-CKCOE(2,KLWERT,LOCHM1,KLWERT,INLOM1)*FJAODD
      ELSE
      STOP 'ERR.NK'
      ENDIF
C
   32 CONTINUE
   12 CONTINUE
C
    1 CONTINUE
C**   RETURNS TO TANABE!:
      RETURN
CEND CRYSTF
      END
      SUBROUTINE MAGNF(
C**   CALLED BY TANABE/(TANAKE)!
     1NREL,KASSUM,KLWERT,MSML,NREL14,MQUER,MSMLNO,ND2002,MSMLNW,KLWER3
     9,NOFROW,NROFNR,EIVSHT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      PARAMETER(ZERO=0.0D0)
      COMMON/FLAG/LMN
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LTS,NDATA,NDATAP
      DIMENSION MSML(ND2002,2,NREL14),MQUER(ND2002,3)
     1,MSMLNW(ND2002,NREL14),MSMLNO(*)
     9,NOFROW(ND2002,*),NROFNR(*),EIVSHT(ND2002,*)
      DATA KLICKS,MOROUU/0,0/
C(NO) SAVE
      IF(MORTEX.GT.1)CALL TEXT2R(LMN,1,34)
      IF(KLICKS.EQ.0.AND.MOROUT.NE.0)THEN
      KLICKS=1
      WRITE(11,3366)
 3399 WRITE(*,3366)
 3366 FORMAT(' INPUT MOROUT-HERE-IN-MAGNF IN I1!:')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3447)MOROUU
      GOTO 4947
      ENDIF
 3447 READ(*,'(I1)',ERR=3399,END=4576)MOROUU
      LMN=1
 4947 WRITE(*,2739)MOROUU
      WRITE(11,2739)MOROUU
 2739 FORMAT(I2,' =MOROUU IN MAGNF!!!!!!!!!')
      WRITE(7,2397)MOROUU
 2397 FORMAT(I1,' =MOROUU IN MAGNF')
      ENDIF
C
C**   FOR X- AND Y-DIRECTION OF MAGNETIC FIELD:
C     (TO BE USED IN REDUCT TO CALCULATE FMAT AND GMAT)
C
C**   ONLY ONE-EL. STEP-DOWN OPERATORS WILL BE USED HERE NOW, FIRSTLY SPIN,
C     THEN ORBITAL! - SUBR. NUMERO IS IMPORTANT HERE!
C
C**   (NROFNR, NOFROW, EIVSHT TO STORE SOME RESULTS ONCE AND FOR ALL!)
      KLWRTP=KLWERT+1
C     ALL KASSUM MICRO-STATES:
      DO 642 J=1,KASSUM
      NROFNR(J)=0
C
C**   NOW FIRSTLY S-OPERATORS ON MSMLNO!:
C     ... COEFF. ARE ONLY =1 AND =0, 1 FOR ms=1/2, 0 FOR ms=-1/2,
C     SO THAT THIS OPERATION GIVES JUST THE SUM OF THE
C     STATES RESULTING WHEN SUCCESSIVE ml+ ARE CHANGED TO ml- (FROM:
C     CONDON/SHORTLEY P.227).
C
C     ALL NREL ELECTRONS:
      DO 66 N=1,NREL
C     IF "EVEN NUMBER":
      IF(((MSMLNW(J,N)/2)*2).EQ.MSMLNW(J,N))GOTO 66
C     (THEREFORE HERE "ODD NUMBERS" ONLY!)
C     THE MOST RIGHT EL., IF(!) THIS IS "SPIN-UP"!:
      IF(N.EQ.NREL)THEN
      NR=J+1
C     (NUMERO NOT NEEDED TO GET NR!)
      ELSE
      DO 5567 I=1,NREL
      MSMLNO(I)=MSMLNW(J,I)
 5567 CONTINUE
C     ms=1/2 => ms=-1/2:
      MSMLNO(N)=MSMLNO(N)-1
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
C     ("N=NREL" CANNOT ARRIVE HERE!)
      IF(MSMLNO(N).EQ.MSMLNO(N+1))GOTO 66
      CALL NUMERO(J,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
      ENDIF
C     ONE MORE MATRIX ELEMENT WAS FOUND (ITS NUMBER IS NR)!:
C
      NROFNR(J)=NROFNR(J)+1
      IF(NROFNR(J).GT.10)STOP '.GT.10'
C     (NOT USED ELSEWHERE!:)
      EIVSHT(J,NROFNR(J))=ZERO
C**   LABEL FOR SPIN IS "MINUS"!:
      NOFROW(J,NROFNR(J))=-NR
C
   66 CONTINUE
C
C**   ORBITAL OP. WORKS NOT SO SIMPLY AS SPIN OP.! - ONLY STEP-DOWN
C     OPERATORS HERE ONCE MORE!:
C     (FROM: CONDON/SHORTLEY P.227 - EQ.(3))
C
      DO 6 N=1,NREL
      DO 567 I=1,NREL
      MSMLNO(I)=MSMLNW(J,I)
  567 CONTINUE
C     ml => ml-1:
      MSMLNO(N)=MSMLNO(N)-2
C     NO NEGATIVE NUMBERS POSSIBLE!:
      IF(MSMLNO(N).LT.0)GOTO 6
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
      IF((N.LT.NREL).AND.(MSMLNO(N).EQ.MSMLNO(N+1)))GOTO 6
C     A DETERMINANT OF ZERO VALUE IS NOT A RESULT!:
      IF((N+1.LT.NREL).AND.(MSMLNO(N).EQ.MSMLNO(N+2)))GOTO 6
      NOML=MSML(J,1,N)
      QUOTTT=DSQRT(DBLE((KLWERT+NOML)*(KLWRTP-NOML)))
      IF((N.LT.NREL).AND.(MSMLNO(N).LT.MSMLNO(N+1)))THEN
C     CHANGE TO THE CONVENTIONAL ORDER (AND A FACTOR OF MINUS ONE)!:
      ITEMP=MSMLNO(N)
      MSMLNO(N)=MSMLNO(N+1)
      MSMLNO(N+1)=ITEMP
      QUOTTT=-QUOTTT
      ENDIF
C
C     ONE MORE MATRIX ELEMENT WAS FOUND (ITS NUMBER BECOMES NR)!:
      CALL NUMERO(J,NR,MSML,MSMLNO,ND2002,KLWERT,KASSUM,NREL,MSMLNW)
C
      NROFNR(J)=NROFNR(J)+1
      IF(NROFNR(J).GT.10)STOP '.GT.10'
      EIVSHT(J,NROFNR(J))=QUOTTT
      NOFROW(J,NROFNR(J))=NR
C
    6 CONTINUE
  642 CONTINUE
C
      IF(MOROUU.NE.0)THEN
      WRITE(11,9940)KASSUM
 8255 WRITE(*,9940)KASSUM
      IF(LMN.EQ.0)THEN
      READ(77,'(I4)',ERR=5588,END=3448)KASSUL
      GOTO 4948
      ENDIF
 3448 READ(*,'(I4)',ERR=8255,END=4576)KASSUL
      LMN=1
 4948 IF(KASSUL.EQ.0.OR.KASSUL.GT.KASSUM)KASSUL=KASSUM
      WRITE(7,2398)KASSUL
 2398 FORMAT(I4,' =KASSUL("No.OF ROWS")')
      WRITE(*,2399)KASSUL
      WRITE(11,2399)KASSUL
 2399 FORMAT(I5,' =KASSUL("No.OF ROWS")!!!!!!!!!')
 9940 FORMAT(
     1' THERE ARE',I5,' MICRO STATES! OUTPUT OF ALL OR OF .. (IN I4)?')
      WRITE(*,6421)
      WRITE(11,6421)
 6421 FORMAT(
     1' J,NROFNR(J),(NOFROW(J,I),EIVSHT(J,I),I=1,NROFNR(J)),J=1,KASSUL')
      DO 6422 J=1,KASSUL
      WRITE(*,6423)J,NROFNR(J),(NOFROW(J,I),EIVSHT(J,I),I=1,NROFNR(J))
      WRITE(11,6423)J,NROFNR(J),(NOFROW(J,I),EIVSHT(J,I),I=1,NROFNR(J))
 6423 FORMAT(I6,I3,10(I5,D10.2))
 6422 CONTINUE
      ENDIF
C
C**   RETURNS TO TANABE!:
      RETURN
C
 4576 CALL FINISH
 5588 CALL FINISI
CEND MAGNF
      END
      SUBROUTINE SHORTL(JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP
C**   ONE OF THE DIFFERENT SUBROUTINES NAMED SHORTL ON DIFFERENT
C     FILES short..f! DIFFERENCES ARE/ MAY BE ND2002=1110 OR
C     =3432, NDS66=66 OR =252, EQUIVALENCE(EIVECV,FMIKR1) OR NOT!
C**   THIS SUBROUTINE HERE CALLS CONSHO ON FILE CONSHO.c, WHICH
C     ALLOCATES DYNAMIC MEMOR AT RUN TIME WITH HELP OF VARIABLES,
C     WHICH ARE COMPUTED HERE. - THESE TWO ROUTINES SUBSTITUTE
C     ANY OF THE FORTRAN SUBROUTINES NAMED SHORTL.
     1,BWWOLD,FKSI,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0
     1,QTEXT0)
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/IEQUIV/JEQUIV
      COMMON/ALLGEM/MOROUT,MORTEX,JATEST,MIST,LESS,MFIT,NUROUT,NRTEMP
     1,FKWERT,IOPT3,IOPT4,IOPT1,IOPT2,JAFITB,NRDIRE,LNE,NDATA,NDATAP
C01      PARAMETER(ND2002=1110,NDMAL3=ND2002*3)
      PARAMETER(ND1110=1110,ND252=252
     1,ND2828=28*28,NDMAL4=ND2828*4,ND28=28,I10=10
     2,NREL14=14,KLWER3=3,ZERO=0.0D0)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110
C - (E.G.:) EITHER: ND2002=1110
C - OR: ND2002=3432!
C**   IT IS: 28*28*2*28*28 = 1229312; 1110*1110 = 1232100
C**   (I)10 = MAX. OF POSS. FOR ANY MIKRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C - EITHER:
C02      PARAMETER(NDS66=66)
C - OR:      PARAMETER(NDS66=252)
C - EITHER:
C - %
C - OR:      EQUIVALENCE (EIVECV,FMIKR1)
      COMMON/NT/NT2002,NTMAL3,NTS66
C
      CHARACTER*13 QTEXT0
      SAVE
C06      JEQUIV=0
      JEQUIV=1
CCC-STARTING
C06      IF(QTEXT0(1:1).EQ.'P'.OR.QTEXT0(1:1).EQ.'Q')JEQUIV=1
      NPOIN1=0
C06      IF(QTEXT0(1:1).EQ.'O'.OR.QTEXT0(1:1).EQ.'Q')NPOIN1=1
      NPOIN3=0
      IF(KLWERT.EQ.3.AND.JAWIGN.EQ.0)THEN
      IF(NREL.EQ.7)NPOIN3=3
      IF(NREL.EQ.6.OR.NREL.EQ.8)NPOIN3=2
      IF(NREL.EQ.5.OR.NREL.EQ.9)NPOIN3=1
      ENDIF
      ND2002=1110
      IF(NPOIN3.EQ.1)ND2002=2002
      IF(NPOIN3.EQ.2)ND2002=3003
      IF(NPOIN3.EQ.3)ND2002=3432
      NDMAL3=ND2002*3
C06      NDS66=66 (not used; set to 1)
      NDS66=1
C06      IF(NPOIN1.EQ.1)NDS66=252
CCC
      NT2002=ND2002
      NTMAL3=NDMAL3
      NTS66=NDS66
CCC
CKR      WRITE(*,6621)ND2002,NDS66,JEQUIV,QTEXT0(1:1)
CKR      WRITE(11,6621)ND2002,NDS66,JEQUIV,QTEXT0(1:1)
CKR 6621 FORMAT(' CONTROL OF SOME DIMENSIONS/ EQUIVALENCES:',/
CKR     1,' ND2002, NDS66 =',2I5,', JEQUIV=',I2,1X,A1)
C**   OUTPUT => TERMINAL AND => FILE fort.11
CKR
      WRITE(*,6622)
      WRITE(11,6622)
 6622 FORMAT(' shortR.f and konsho.c are linked!')
CKR     1' shortK.c is linked: The letter following JEQUIV=0/1, if any,'
CKR     2,' means:',/
C06     3,' (L or "blanc":) shortL.f with NDS66=66 and no equivalence,',/
C06     4,' (O:) shortO.f with NDS66=252 and no equiv.,',/
C06     5,' (P:) shortP.f with NDS66=66 and equiv.,',/
C06     6,' (Q:) shortQ.f with NDS66=(252 instead of 66) and equiv.!')
CKR     3,' "nothing" (NDS66 and EQUIVALENCE not used here in CONDOR)!')
      IF(MORTEX.GT.0)THEN
      WRITE(*,6623)
      WRITE(11,6623)
 6623 FORMAT(' EL.-EL.'
     1,' REPULSION',/,' AND SPIN-ORBIT COUPLING ARE ALWAYS (NEW)'
     2,' CALCULATED!',/
     3,' EQUIVALENCE is used for matrices, which are NOT used!')
      ENDIF
C
      CALL CONSHO(
     1JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP,BWWOLD
     1,FKSI,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0)
C
      RETURN
CEND SHORTL on shortR.f
      END
      SUBROUTINE CONSHO(JASTRU,KLWERT,NREL,KMASKE,I16,JAWIGN,NGROUP
C**   CALLED BY SHORTL ON FILE shortK.f, f2c consho.f => consho.c, AND
C #include <stdio.h>
C #include <stdlib.h>
C /*#include "f2c.h"*/
C void *malloc(size_t size);
C**   (with help of ed:) ,s/integer/int/g and ,s/doublereal/double/g
     1,BWWOLD,FKSI,JAVANV,ABST,FINTEG,REDFAZ,MOLFLD,DIRECZ,SIGMA0)
      IMPLICIT DOUBLE PRECISION(A-H,O,P,R-Z)
      IMPLICIT INTEGER(I-N)
      COMMON/IEQUIV/JEQUIV
      COMMON/NT/NT2002,NTMAL3,NTS66
C01      PARAMETER(ND2002=1110,NDMAL3=ND2002*3)
      PARAMETER(ND1110=1110,ND252=252
     1,ND2828=28*28,NDMAL4=ND2828*4,ND28=28,I10=10
     2,NREL14=14,KLWER3=3,ZERO=0.0D0)
C**   ND2002: 14,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,
C     BUT MINIMUM = 1110
C - (E.G.:) EITHER: ND2002=1110
C - OR: ND2002=3432!
C**   IT IS: 28*28*2*28*28 = 1229312; 1110*1110 = 1232100
C**   (I)10 = MAX. OF POSS. FOR ANY MIKRO STATE OF F EL. TO BE SHIFTED
C     DOWN: ONE WITH 7 F EL. OF ALTERNATING SPINS IS AN EXAMPLE!
C - EITHER:
C02      PARAMETER(NDS66=66)
C2006 - OR:  %%% (NDS66 not used; set to 1)
C - EITHER:
C - %
C2006 - OR:      EQUIVALENCE (EIVECV,FMIKR1) (FMIKR1 not used)
C**   ALWAYS (SEE BELOW, TOO):
C2006      EQUIVALENCE (EIVECV,FMIKR2) (FMIKR2 not used)
C**   ... (ND2002,2002):
C**   d-el. and shortL.f =>
C     COMMON//IY(10286305)
CCC90      COMMON//IY(10286305)
C**   seven f-el. and shortO.f =>
C     COMMON//IY(98935273) <=> MAX.!
C=>   integer *iy;
      COMMON//IY
C03      COMMON//FMIKR1
C     1,EIWERT,DUMMY
C     6,FMIKR3,EIVSHT,TAFMAT,TAGMAT,TAWERT
C     6,CRYMAT,CRZMAT,BLOMAT,EIVECV,WNRW,WERMAT
C     7,DBLMAT
C     8,MQUER,MSML,MSMLNW,NOFROW,NROFNR
C     9,REIHNF,BLOCKD,BLOCKS
C     1,SPAERL
      COMMON/UVW/
     1FMAT,TEMIST,DUMMYD
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,PERTUR,FMATY,GMAT
     5,TEMPTH,TESLAS
     7,BSTART
     8,UPML,DOWNML,BESETZ
     8,KASSUM,IGR1,IGR2,NRSORT,NRVAL,NEUEBS,NRMIST
     8,MQUERR,MSMLCO
     9,MSMLNS
     1,NRVALF,IGRUND,JAFAST
C
C05      DIMENSION FMIKR1(ND2002,ND2002),FMIKR2(ND2002,ND2002)
C     1,DBLMAT(ND2002,ND2002),EIVECV(ND2002,ND2002)
C     2,BLOMAT(ND2002,ND2002)
C**   ... (ND2002,...):
C06      DIMENSION DUMMY(NDMAL3),DUMMYD(NDMAL4),EIVSHT(ND2002,I10)
C     1,EIWERT(ND2002),FMIKR3(ND2002,NDS66),UPML(25),DOWNML(25)
C     1,WNRW(ND2002)
      DIMENSION DUMMYD(NDMAL4)
     1,UPML(25),DOWNML(25)
C07      INTEGER NOFROW(ND2002,I10),NROFNR(ND2002)
C     1,MSML(ND2002,2,NREL14),MQUER(ND2002,3),MSMLCO(2,NREL14)
C     2,MSMLNW(ND2002,2,-KLWER3:KLWER3),MSMLNS(2,-KLWER3:KLWER3)
C     3,MQUERR(200)
      INTEGER
     1MSMLCO(2,NREL14)
     2,MSMLNS(2,-KLWER3:KLWER3)
     3,MQUERR(200)
C08      INTEGER REIHNF(ND2002),BLOCKD(ND2002),BLOCKS(0:ND2002)
C**   ... (ND1110,1110):
      DIMENSION PERTUR(ND1110,ND1110),FMATY(ND1110,ND1110)
C09     1,FMATCH(ND1110,ND1110),EIVEC(ND1110,ND1110)
     2,BESETZ(NREL14,I10)
      DIMENSION EIVAL0(ND28,3),EIVAL1(ND28,3),EIVAL2(ND1110,3)
      DIMENSION ZEEMN0(ND28,3),ZEEMN1(ND28,3),ZEEMN2(ND1110,3)
      DIMENSION ZEMN20(ND28,3),ZEMN21(ND28,3),ZEMN22(ND1110,3)
C**
      DIMENSION FMAT(ND252,ND252,10),GMAT(ND252,ND252,6)
C10      DIMENSION TAFMAT(NDS66,NDS66,3),TAGMAT(NDS66,NDS66,2)
C11      DIMENSION CRYMAT(NDS66,NDS66,11),WERMAT(NDS66,NDS66)
C     1,TAWERT(NDS66),TEMPTH(601),BSTART(24),CRZMAT(NDS66,NDS66,4)
      DIMENSION
     1TEMPTH(601),BSTART(24)
C**   COMPLEX:
CU1      COMPLEX*16 CPERTU(ND2828,ND2828),CFMATY(ND2828,ND2828)
C12     1,CPXMAT(ND2828,ND2828),EIVECC(ND2828,ND2828)
C**   LOGICAL:
C13      LOGICAL LMAT(ND2002,ND2002),SPAERL(ND2002)
C**   EQUIVALENCE (SEE ABOVE, TOO):
C14      EQUIVALENCE (EIVECV,LMAT)
C     1,(DBLMAT,FMATCH),(EIVECV,EIVEC)
C15      EQUIVALENCE (CPXMAT,FMATCH),(EIVECC,EIVEC),(CPERTU,PERTUR)
CU2      EQUIVALENCE (CPERTU,PERTUR)
CU3     1,(CFMATY,FMATY)
      POINTER IY(:)
      SAVE
      JAFAST=0
CCC - STARTING
C**   IJ1=1
C2006      (IJ1<=>FMIKR1) NEXT LINE: FMIKR1 ("DIMENSION")
      IJ2=1
C2006      IF(JEQUIV.EQ.0)IJ2=2*(NT2002**2)+1
C2006      BECAUSE (JEQUIV.EQ.1), EQUIVALENCE(EIVECV,FMIKR1)!
      IJ3=2*NT2002+IJ2
      IJ4=2*NTMAL3+IJ3
      IJ5=2*NT2002*NTS66+IJ4
      IJ6=2*NT2002*10+IJ5
      IJ7=2*(NTS66**2)*3+IJ6
      IJ8=2*(NTS66**2)*2+IJ7
      IJ9=2*NTS66+IJ8
      IJ10=2*(NTS66**2)*11+IJ9
      IJ101=2*(NTS66**2)*4+IJ10
C* 2006-Oct  AFTER EIVSHT 5 OCCURENCES OF nts66:
C*     6,(FMIKR3,EIVSHT,)TAFMAT,TAGMAT,TAWERT
C*     6,CRYMAT,CRZMAT(,BLOMAT,EIVECV,WNRW,WERMAT
C*     7,DBLMAT)
C* 2006-Oct  IJ11=2*(NT2002**2)+IJ101 (IJ101: START OF BLOMAT) (=>COMPLEX)
      IJ11=4*(NT2002**2)+IJ101
C2006 (IJ11<=>EIVECV) NEXT LINES: EIVECV ("DIMENSION"=>COMPLEX)
C2006      IJ12=2*(NT2002**2)+IJ11
      IJ12=4*(NT2002**2)+IJ11
      IJ13=2*NT2002+IJ12
      IJ14=2*(NTS66**2)+IJ13
C2006 (IJ14<=>DBLMAT) NEXT LINES: DBLMAT ("DIMENSION"=>COMPLEX)
C2006      IJ15=2*(NT2002**2)+IJ14
      IJ15=4*(NT2002**2)+IJ14
      IJ16=NT2002*3+IJ15
      IJ17=NT2002*28+IJ16
      IJ18=NT2002*14+IJ17
      IJ19=NT2002*10+IJ18
      IJ20=NT2002+IJ19
      IJ21=NT2002+IJ20
      IJ22=NT2002+IJ21
      IJ23=NT2002+1+IJ22
      IJIJ=IJ11
C2006      IF(JEQUIV.EQ.0)IJIJ=1
C2006      BECAUSE (JEQUIV.EQ.1), EQUIVALENCE(EIVECV,FMIKR1)!
C**   AND THE SUM:
      IJ24M1=NT2002+IJ23-1
CCC-END
C    _BLNK__1.iy = (integer*)malloc(ij24m1*sizeof(integer));
C    if (_BLNK__1.iy == 0) {printf(" storage not sufficient: stop\n");
C    exit(1);}
C
      ALLOCATE(IY(IJ24M1))
      CALL SUSFIT(JASTRU,MOLFLD,JAWIGN,NGROUP,SIGMA0
C16     1,EIWERT,FMAT,FMATCH,TEMIST,DIRECZ,EIVEC,DUMMY
     1,IY(IJ2),FMAT,IY(IJ14),TEMIST,DIRECZ,IY(IJ11),IY(IJ3)
     2,EIVAL0,EIVAL1,EIVAL2,ZEEMN0,ZEEMN1,ZEEMN2,ZEMN20,ZEMN21,ZEMN22
     2,DIFLOW,IGR1,IGR2,PERTUR,FMATY
C17     3,JAVANV,NRSORT,NRVAL,NEUEBS
     3,JAVANV,NRSORT,NRVAL,NEUEBS
     4,ND252,ND1110,ND2828,NTMAL3,NREL14,NREL,KLWERT,ND252,I10
     1,NDMAL4,ABST,GMAT,ND28
C18     2,CPXMAT,EIVECC,CPERTU,CFMATY,DUMMYD
     2,IY(IJ14),IY(IJ11),PERTUR,FMATY,DUMMYD
C**   ... AND FOR SUBROUTINE CHIMAG IN ADDITION:
     5,TEMPTH,TESLAS
C**   ... AND FOR SUBROUTINE TANFEL IN ADDITION:
C19     6,FMIKR2,FMIKR3,EIVSHT,NRMIST,ND2002,TAFMAT,TAGMAT,TAWERT
     6,IY(IJ11),IY(IJ4),IY(IJ5),NRMIST,NT2002,IY(IJ6),IY(IJ7),IY(IJ8)
C20     6,CRYMAT,WERMAT,KMASKE
     6,IY(IJ9),IY(IJ13),KMASKE
C**   ... AND FOR SUBROUTINE REDUCT IN ADDITION:
C21     7,MQUER,MQUERR,REDFAZ,KASSUM,EIVECV
     7,IY(IJ15),MQUERR,REDFAZ,KASSUM,IY(IJ11)
C22     8,UPML,DOWNML,MSML,MSMLCO,KLWER3
     8,UPML,DOWNML,IY(IJ16),MSMLCO,KLWER3
C23     9,MSMLNW,MSMLNS,NOFROW,NROFNR
     9,IY(IJ17),MSMLNS,IY(IJ18),IY(IJ19)
C**   ... AND FOR SUBROUTINE BLOCUT IN ADDITION:
C24     1,LMAT,BLOMAT,REIHNF,BLOCKD,BLOCKS,WNRW,SPAERL,BESETZ
     1,IY(IJ11),IY(IJ101),IY(IJ20),IY(IJ21),IY(IJ22),IY(IJ12),IY(IJ23)
     1,BESETZ
C**   ... AND FOR SUBROUTINE TANABE IN ADDITION:
C25     7,FMIKR1,DBLMAT,I16,FINTEG,FKSI,BSTART,BWWOLD
     7,IY(IJIJ),IY(IJ14),I16,FINTEG,FKSI,BSTART,BWWOLD
C26     8,NRVALF,IGRUND,JAFAST,CRZMAT)
     8,NRVALF,IGRUND,JAFAST,IY(IJ10))
C
      RETURN
CEND CONSHO on konsho.f
      END
      SUBROUTINE ZHPEVK(IONE,DBLMAT,EIWERT,EIVECV,ND2002,KASSUM)
C**   FILE NAME <=> dszhK.f(fix) (per m.f => m.c) => dszhK.c; for CONDOK.f
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      CHARACTER*1 JOBZ,UPLO
      COMPLEX*16 DBLMAT,EIVECV
      DIMENSION DBLMAT(ND2002,ND2002),EIVECV(ND2002,*)
      PARAMETER (ND3432=3432,NZMAL4=ND3432*4,NDMAL6=ND3432*6)
C**   PARAMETER (K7=12,LRWORK=3*NDZH28**2+(4+2*K7)*NDZH28+1)
C**      K7=K=12 BECAUSE 2**12>3432 AND 2**11<3432
CCC90      DIMENSION RWORK(1)
C**      DUMMYD=RWORK(LRWORK)=RWORK(2*N)
C**      IDUMMY=IWORK(LIWORK)=IWORK(5*N+2) ((OR? +3))
      DOUBLE PRECISION DUMMYC(NZMAL4)
      DIMENSION IDUMMY(NDMAL6)
CCC90      DIMENSION RWORK(LWORK)
      ALLOCATABLE RWORK (:)
      SAVE KLICK,RWORKO,LRWORK
      DATA KLICK /0/
      JOBZ='V'
      UPLO='L'
      NDZH28=KASSUM
      LRWORK=3*NDZH28**2+(4+2*12)*NDZH28+1
      K=0
      DO 4321 J=1,KASSUM
      DO 4323 I=J,KASSUM
      K=K+1
      DBLMAT(K,1)=DBLMAT(I,J)
 4323 CONTINUE
 4321 CONTINUE
      ALLOCATE (RWORK(LRWORK))
      CALL ZHPEVD(JOBZ,UPLO,KASSUM,DBLMAT,EIWERT,EIVECV,ND2002
     1,DUMMYC,NZMAL4,RWORK,LRWORK,IDUMMY,NDMAL6,INFO)
      IF(KLICK.EQ.0.OR.(KLICK.NE.0.AND.RWORK(1).GT.RWORKO))THEN
      RWORKO=RWORK(1)
      WRITE(*,168)RWORKO
      WRITE(11,168)RWORKO
  168 FORMAT(' FROM ZHPEVD: RWORK(1)=',D16.8)
      IF(INT(RWORKO).GT.LRWORK)STOP 'RWORKO'
      KLICK=KLICK+1
      ENDIF
      IF(INFO.NE.0)THEN
      WRITE(*,1119)INFO
      WRITE(11,1119)INFO
 1119 FORMAT(I9,' WARNING: STOP INFOCX IGNORED!')
      ENDIF
      DEALLOCATE (RWORK)
      RETURN
CEND ZHPEVK on dszhKf90.f
      END
      SUBROUTINE TEXT2R(LMN,NEU,MARKE)
      INTEGER MEHR(50),MEHR2(50)
      CHARACTER*6 QNAME(50)
      SAVE
      DATA INOUT7/2/
      DATA MEHR/50*0/
      DATA MEHR2/50*0/
      DATA QNAME/
     110*'      ',
     1'CONDOR','SUSC  ','SUSFIT','LEVMAR','LEVSQX',
     1'LEVDER','GAUSS ','TANABE','BLOCUT','REDUCT',
     1'SELECS','SELECT','RESTBL','SUGANO','SUGANC',
     1'SUGANY','SUGANK','CHIMAG','SCHEMA','NUMERO',
     1'ELELWW','SPORCO','CRYSTF','MAGNF ',
     116*'      '
     1/
C
      IF(MARKE.LE.0)THEN
      WRITE(*,1111)
      WRITE(11,1111)
 1111 FORMAT(
     1' HINT: MORTEX>1 => CALL subroutine TEXT2R. Its text =>TERMINAL'
     1,' (only)!')
      IF(MARKE.EQ.-1)THEN
      WRITE(11,1112)
 8282 WRITE(*,1112)
 1112 FORMAT(' MORTEX=2: FILE fort.7/OLDf7.DAT IS NOT INVOLVED HERE,',/
     1,' IF 0 IS PUT IN NOW (ELSE: fort.7 IS INVOLVED: ->fort.7 for 1,',
     2/,' ->fort.7 .AND. <-OLDf7.DAT for INPUT of 2)!')
      READ(*,'(I1)',ERR=8282,END=8576)JANO
      WRITE(*,8932)JANO
      WRITE(11,8932)JANO
 8932 FORMAT(I2,' =JANO->fort.7!!!!!!!!!')
      IF(JANO.EQ.1)INOUT7=4
      IF(JANO.GE.2)INOUT7=5
      ELSE IF(MARKE.EQ.0)THEN
      WRITE(*,1113)
      WRITE(11,1113)
 1113 FORMAT(' MORTEX.GT.2: FILEs fort.7, OLDf7.DAT ARE INVOLVED HERE!')
      INOUT7=3
      ENDIF
      RETURN
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(MARKE.LE.0)THEN!
C
      IF(NEU.EQ.1.AND.MEHR(MARKE).GE.0)THEN
C**   "NEU" <=> (E.G.) NEW SUBROUTINE (SHOULD HAVE A NUMBER WITH 2 DIGITS)!
 8248 WRITE(*,8128)MARKE,MARKE,QNAME(MARKE),INOUT7
 8128 FORMAT(
     1' MORTEX.GT.1: Put in 1 for YES, more text for this part No.',I6
     1,/,I6,' <=> (PROGRAM)/SUBROUTINE ',A6,' (MORTEX=',I2,')'
     1,/,' (0 for NO, 2 or 9 for YES or NO and not to put out this'
     2,' sentence',/
     1,' for this No. once more. HINT: OUTPUT for 2 for "NEU=1" only!)')
      IF(INOUT7.GT.2)THEN
      IF(INOUT7.EQ.3.OR.INOUT7.EQ.5)THEN
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=9588,END=8431)MEHR1
      GOTO 8931
      ENDIF
 8431 READ(*,'(I1)',ERR=8248,END=8576)MEHR1
      LMN=1
      ELSE IF(INOUT7.EQ.4)THEN
      READ(*,'(I1)',ERR=8248,END=8576)MEHR1
      ENDIF
 8931 WRITE(*,8838)MEHR1,MARKE
      WRITE(11,8838)MEHR1,MARKE
 8838 FORMAT(I2,' =MEHR1 IN PART No.',I6,'!!!!!!!!!')
      WRITE(7,8388)MEHR1,MARKE
 8388 FORMAT(I1,' =MEHR1 IN PART No.',I6)
      ELSE IF(INOUT7.LE.2)THEN
      READ(*,'(I1)',ERR=8248,END=8576)MEHR1
      WRITE(*,8838)MEHR1,MARKE
      WRITE(11,8838)MEHR1,MARKE
      ENDIF
      MEHR2(MARKE)=MEHR1
      IF(MEHR1.EQ.9)MEHR1=-1
      MEHR(MARKE)=MEHR1
      ENDIF
C**   ENDIF BEFORE BELONGS TO: IF(NEU.EQ.1.AND.MEHR(MARKE).GE.0)THEN!
CCC
 2323 FORMAT(/,' NOW TEXT FROM SUBROUTINE TEXT2R (NOT(!) => fort.11)!:')
 2324 FORMAT(' END OF TEXT FROM SUBROUTINE TEXT2R!',/)
CCC
      IF(MEHR(MARKE).LE.0)RETURN
      MARKE2=MARKE-10
      GOTO (11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,
     131,32,33,34)MARKE2
CCC
   11 CONTINUE
      WRITE(*,2323)
      WRITE(*,711)
  711 FORMAT(/,
     1' Here is PROGRAM CONDOR (".MAIN.")!',/
     1,' CONDOR is a Reduced/Revised ("R") version of CONDON,',/
     1,' but "imaginary" B''s are now included, and most matrices',/
     1,' are therefore complex now!',/
     1,' Many options were discarded, some run with "JATEST" only!',/
     1,' IOPT1=1 is the standard now and is not asked for, if not'
     2,' "JATEST",',/
     1,' and IOPT1=0 becomes IOPT1=1! However the magnetic field may',/
     2,' be included in TANABE now (for JTSTZX=1), and then IOPT1=0 is'
     3,'allowed!',/
     1,' Only one direction of the magnetic field can be applied for',/
     2,' JTSTZX=1, just as with IOPT1=2! To choose IOPT1=0 for JTSTZX',/
     4,' is not always good choice for real calculations! The main',/
     5,' reason to introduce option JTSTZX is, that the description',/
     6,' of the theory is very much simplified, not to use JTSTZX',/
     7,' for real calculations!',/
     1,' The action of IOPT1=2 was extended for the case, that 0./0./0.'
     2,/,' is put in for the direction of the magnetic field and LOWDAT'
     3,/,' in the first column of CHIINP.DAT is greater than 1.',/
     4,' In CONDOR MOD(LOWDAT(N),2).EQ.0 means "to be fitted", ....NE.0'
     5,/,' means "not to be fitted". LOWDAT=2 or =3 mean "z-direction",'
     6,/,' =4 or =5 mean "x-direction", and =6 or =7 mean "y-direction"'
     /,/,' (meaning of =0 and =1 not altered, =8 or =9 -> STOP).',/
     1,' There is no more any INPUT of options from the first line',/
     1,' of OLDf7.DAT, because EQUIVALENCE and NDS66 are not used',/
     1,' anymore (COMPLEX*16 DBLMAT instead of FMIKR1 and FMIKR2)!',/
     1,' CONDOR calls SHORTL, which is on a different file.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   12 CONTINUE
      WRITE(*,2323)
      WRITE(*,712)
  712 FORMAT(/,
     1' Here is SUBROUTINE SUSC'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   13 CONTINUE
      WRITE(*,2323)
      WRITE(*,713)
  713 FORMAT(/,
     1' Here is SUBROUTINE SUSFIT'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   14 CONTINUE
      WRITE(*,2323)
      WRITE(*,714)
  714 FORMAT(/,
     1' Here is SUBROUTINE LEVMAR'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   15 CONTINUE
      WRITE(*,2323)
      WRITE(*,715)
  715 FORMAT(/,
     1' Here is SUBROUTINE LEVSQX'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   16 CONTINUE
      WRITE(*,2323)
      WRITE(*,716)
  716 FORMAT(/,
     1' Here is SUBROUTINE LEVDER'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   17 CONTINUE
      WRITE(*,2323)
      WRITE(*,717)
  717 FORMAT(/,
     1' HERE IS SUBROUTINE GAUSS'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   18 CONTINUE
      WRITE(*,2323)
      WRITE(*,718)
  718 FORMAT(/,
     1' Here is SUBROUTINE TANABE, called by SUBROUTINE SUSC.',/
     1,' In TANABE starts the calculation of molar susceptibility',/
     1,' in fact, after SUSC has prepared all parameters!',/
     1,' A full basis of micro states is set up in SCHEMA, and then',/
     1,' the subroutines ELELWW, SPORCO, CRYSTF and MAGNF run once',/
     1,' and return a set of parameters needed for the step operators',/
     1,' to be applied here in TANABE: Interelectronic repulsion,',/
     1,' spin-orbit coupling, crystal/ligand field, and magnetic field',
     1/,' (Magnetic field may be included here in TANABE in PROGRAM',/
     1,' CONDOR for JTSTZX=1, if JATEST=1.). So called "imaginary" B''s'
     1,/,' may be applied in PROGRAM CONDOR, but not in CONDOP, and',/
     1,' therefore a complex matrix is set up in CONDOR!',/
     1,' After all diagonal and non-diagonal matrix elements were',/
     1,' calculated, the matrix will be diagonalized! Either blocking',/
     1,' of the matrix is attempted by calling SUBROUTINE BLOCKUT,',/
     1,' or it will be diagonalized directly, however a link routine',/
     1,' to the diagonalization routine is called firstly!',/
     1,' If the magnetic field is included, the full Hamiltonian',/
     1,' (if no "Heisenberg") has been applied here, and no further',/
     1,' diagonalization will be needed in this case of an isolated',/
     1,' center. However only one direction of the magnetic field can',/
     2,' in this case be applied, just as with IOPT1=2! Therefore',/
     3,' IOPT1=0 may be chosen here for JTSTZX=1, but this is not',/
     4,' always a good choice for real calculations! The main reason',/
     5,' to introduce option JTSTZX is, that the description of the',/
     6,' theory is very much simplified, not to use JTSTZX for real',/
     7,' calculations!',/
     1,' In PROGRAM CONDOP and in CONDON there is a special option for',
     1/,' calling a SUBROUTINE RUSSEL (no RETURN!), which with help of',
     1/,' SUBROUTINE SAUNDE analyses the eigenfunctions with respect to'
     1,/,' a basis of Russell-Saunders states!',/
     1,' Lastly SUBROUTINE REDUCT is called, where the basis is'
     2,' changed.'
     1/,/
     1,' Step operators work on each micro state in subroutines ELELWW,'
     2,/,' SPORCO, CRYSTF and MAGNF and help to determine all those micr
     3o',/,' states, which give non-diagonal matrix elements for the',/
     4,' corresponding operators. If for these elements fixed factors',/
     5,' occur, these are determined and stored once and for all.',/
     1,/,
     1'    Micro states and the conventional order:',/,
     1' A state function is often given as a linear combination of micro
     2',/,' states. A micro state is an antisymmetrical function: It',
     1' changes',/,' sign,'
     3,' if two electron indices are exchanged. Mostly a micro state',/
     4,' is given as a determinant of a matrix, and the main diagonal',/
     1,' of the matrix serves to define the micro state.',/
     1,' The rows of the matrix are numbered 1,2,3,..., and these number
     3s',/,' mean 1th,2nd,3rd,... electron.',/
     1,' The columns of the matrix are numbered, too, the numbering is',
     2/,' downwards, the numbers are 2*(l+ml)+ms+1/2, and they stand for
     3',/,' the ocupied individual sets, e.g. 9,8,7,...,0 for the ten d-
     4',/,' electrons or 9,8 for two d-electrons with antiparallel spins
     5',/,' with ml=2. More than 10 digits are used for f-electrons, and
     6',/,' these are A,B,C,D for 10,11,12,13, respectively.',/
     1,' If the two kinds of numbering are 1,2,3,... and "downwards",',/
     2,' the individual sets are said to be in conventional order!',/
     1,' If only the occupied individual sets are given, as is mostly',/
     2,' the case, the numbering of the electrons 1,2,3,... is tacitly',
     3/,' assumed.',/
     1,' E.g. are 9(1)*8(2) and 8(2)*9(1) as abbreviations for the',/
     2,' determinant 9(1)8(2)-8(2)*9(1) of course abbreviations for the'
     3,/,' same determinant, but only the first is in conventional order
     4',/,' and may be written |98>.',/
     1,/
     1,'    Step operators:',/
     1,' One-electron operators:',/
     1,' If a step-down operator on ml-values of d-electrons of 4 steps'
     2,/,' works on the first electron of 9(1)*8(2)=|98>, the result may
     3',/,' be Factor*1(1)*8(2)=Factor*|18> (=Factor*8(2)*1(1)), but',/
     1,' |18> is not in conventional order.',/
     1' A matrix element is <81|Operator|98> = <81|Factor|18>. One, i.e.
     2',/,' an odd number of interchanges gives |18> = -|81>, and',
     1' therefore',/
     2,' the matrix element is -<81|Factor|81> = -Factor. The position',
     3/,' of the matrix element is in the lower triangle of the matrix,'
     4,/,' in the first column ("|98>") and in the 16nd row ("<81|").',/
     1,/
     1,' For two-electron operators see SUBROUTINE ELELWW!'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   19 CONTINUE
      WRITE(*,2323)
      WRITE(*,719)
  719 FORMAT(/,
     1' Here is SUBROUTINE BLOCUT'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   20 CONTINUE
      WRITE(*,2323)
      WRITE(*,720)
  720 FORMAT(/,
     1' Here is SUBROUTINE REDUCT, called by TANABE.',/
     1,' INPUT are the eigenfunctions calculated in TANABE',/
     1,' and the results from MAGNF.',/
     1,' Calculated are in priciple magnetic moments. Firstly their',/
     1,' z-components for the z-component of the magnetic field are',/
     1,' calculated, although the magnetic field is not yet included.',/
     1,' Really a matrix FMAT(,,1) is calculated, 1 for z-direction,',/
     1,' with help of MQUER(,1) and MQUER(,2), which contain the sum',/
     1,' of ml- and twice the sum of ms-values, respectively, for each',
     1/,' micro state. Mostly FMAT(,,1) is diagonal, but eigenfunctions'
     1,/,' may be degenerated, and this may lead to non-diagonal',/
     1,' matrixelements. Later on, when magnetic field is included,',/
     1,' any degeneration is resolved. If there are no non-diagonal',/
     1,' elements, the diagonal elements are the z-components of the',/
     1,' magnetic moments of the eigenfunctions for the z-component',/
     1,' of the magnetic field!',/
     2,' The matrices FMAT(,,4) and FMAT(,,5) for x-and y-direction,',/
     2,' respectively, are not so easily calculated!',/ 
     2,' From MAGNF comes the information, how the micro states are',/
     2,' connected by step operators. With help of step operators',/
     2,' FMAT(,,2) and FMAT(,,3) are calculated. FMAT(,,4) and FMAT(,,5)
     2',/,' are linear combinations of the former!',/
     3,' For complex eigenfunctions all matrices FMAT are complex.',/
     3,' For real eigenfunctions all matrices FMAT are real, if an i',/
     3,' of FMAT(,,5) is kept in mind!',/
     3,' Matrices GMAT(,,1..3), corresponding to FMAT(,,1..3) and',/
     3,' needed for e.g. Heisenberg coupling, are calculated in this',/
     3,' manner, too. They deal with spin only, not with magnetic',/
     3,' moments!',/
     4,' Effectively a new basis is introduced in REDUCT, namely that',/
     4,' of the eigenfunctions! This basis may be truncated in many',/
     4,' cases, and FMAT and GMAT are calculated then only with the',/
     4,' remaining eigenfunctions, those which belong to the lowest',/
     4,' energies!',/
     5,' g-factors, which are however never used, may be calculated',/
     5,' for OUTPUT!',/
     1,' If the magnetic field was included in TANABE (for JTSTZX=1),',/
     2,' the calculations in REDUCT are very much simpler! All matrices'
     3,/,' FMAT become diagonal, and these diagonal elements are the',/
     4,' magnetic moments to be used to calculate CHI in the case of',/
     5,' an isolated center!',/
     6,' REDUCT calls SUBROUTINE SELECS.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   21 CONTINUE
      WRITE(*,2323)
      WRITE(*,721)
  721 FORMAT(/,
     1' Here is SUBROUTINE SELECS, called by REDUCT.',/
     1,' Formerly SUBROUTINE SELECS was part of SUBROUTINE SELECT.',/
     1,' Now a reduced SELECT is embedded in SELECS! The reason to',/
     1,' split off SELECS was to insert some and to be able to insert',/
     1,' further special options not to be discussed here. After RETURN'
     1,/,' from SELECT one single molar susceptibility CHI'
     2,' ("CHI-START")',/
     1,' calculated there is used to calculate a lot of further results'
     1,/,' as e.g. CHI-CALCulated, reciprocal CHI shifted, magnetic',/
     1,' moments, effective magnetic moments, etc., and the'
     2,' corresponding',/
     1,' calculations are done on the basis of the corrsponding'
     2,' measured',/
     1,' molar susceptibility "CHI-MEAS" (CHI-MEAS corresp. to'
     2,' CHI-CALC etc.).',/
     1,' The total number of results is then 2*4*7=56, including'
     2,' CHI-MEAS.',/
     1,' SELECS returns to REDUCT.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   22 CONTINUE
      WRITE(*,2323)
      WRITE(*,722)
  722 FORMAT(/,
     1' Here is SUBROUTINE SELECT, called by SELECS.',/
     1,' In SUBROUTINE SELECT the different subroutines SUGAN. are',/
     1,' selected, and/or the same subroutine SUGAN. is selected with',/
     1,' different parameters. E.g. the resulting CHI''s of three calls'
     1,/,' for three different directions of the magnetic field are',/
     1,' combined to one mean value of CHI. Amongst other Heisenberg',/
     1,' coupling and/or the "combined model" for f-electrons may be',/
     2,' chosen. One single CHI is the result in any case!',/
     1,' SELECT returns to SELECS.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   23 CONTINUE
      WRITE(*,2323)
      WRITE(*,723)
  723 FORMAT(/,
     1' Here is SUBROUTINE RESTBL'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   24 CONTINUE
      WRITE(*,2323)
      WRITE(*,724)
  724 FORMAT(/,
     1' Here is SUBROUTINE SUGANO'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   25 CONTINUE
      WRITE(*,2323)
      WRITE(*,725)
  725 FORMAT(/,
     1' Here is SUBROUTINE SUGANC, C for Complex,',/
     1,' called by SELECT or SUGANK, by the latter, if Heisenberg',/
     1,' coupling is involved. If it is called by SELECT, eigenvalues',/
     1,' and functions are corrected for the operator of the magnetic',/
     1,' field (not for the option JAVANVleck, which is however not',/
     1,' discussed here!). The latter operator involves the magnetic',/
     1,' field with its direction and the magnetic moments as stored',/
     1,' in FMAT(,,1), FMAT(,,4) and FMAT(,,5) (FMAT(,,5) must be',/
     1,' multiplied by i=SQRT(-1)), and complex values occur now!',/
     1,' If it is called by SUGANK, the matrix to be diagonalized is',/
     1,' transferred from that routine, and also a matrix CPERTU!',/
     1,' This matrix CPERTU, if it is set up here, involves the',/
     1,' direction of the magnetic field and the magnetic moments as',/
     1,' above. For the calculation as described here, i.e. not',/
     1,' "VanVleck" (important: For "VanVleck" the method of Gerloch',/
     1,' must be applied!), there is no PERTUrbation, but the magnetic',
     1/,' moments resp. their components are calculated with help of',/
     1,' the eigenfunctions and of CPERTU, which latter represents',/
     1,' the magnetic moments of the basic functions!',/
     1,' If the magnetic field was included in TANABE (for JTSTZX=1),',/
     2,' and if there is the case of an isolated center, there is no',/
     3,' diagonalization at all, and the diagonal elements of FMAT are',
     4/,' the magnetic moments and need only be restored!',/
     2,' The components calculated here are always in the same',/
     2,' direction as the magnetic field, but the components of the',/
     1,' magnetic moments in two mutual perpendicular directions may',/
     1,' be calculated before, too, by calling SUGANY!',/
     1,' SUGANC calls CHIMAG, where CHI and MAGnetisation are calculat',
     2'ed',/
     1,' for the selected temperature and direction of the field,',/
     1,' and returns to SELECT or to SUGANK. If only temperature has',/
     1,' changed, SUGANC does effectively not work!'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   26 CONTINUE
      WRITE(*,2323)
      WRITE(*,726)
  726 FORMAT(/,
     1' Here is SUBROUTINE SUGANY, called by SUGANC.',/
     1,' The head of subroutine SUGANY is very similar to the second',/
     1,' part of SUGANC, but CPERTU is named CFMATY. CFMATY is calcula',
     2'ted',
     1/,' always, whereas CPERTU may be transferred to SUGANC from',
     2' SUGANK!',
     1/,' The desired two conponents of the magnetic moments, mutual',/
     1,' perpendicular also to the component in SUGANC, are calculated',
     1/,' with help of the eigenfunctions calculated in SUGANC and of',/
     1,' CFMATY, which latter represents the magnetic moments of the',/
     1,' basic functions, but now in different directions!',/
     2,' The results here are not used to calculate susceptibilities',/
     2,' used in fitting procedures, but they may be used to compute',/
     2,' susceptibility tensors! Therefore transverse susceptibilities',
     2/,' are calculated here in just the same way as susceptibilities',
     2/,' in subroutine CHIMAG, i.e. Boltzmann statistics is applied!',/
     2,' SUGANY returns to SUGANC.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   27 CONTINUE
      WRITE(*,2323)
      WRITE(*,727)
  727 FORMAT(/,
     1' Here is SUBROUTINE SUGANK',/
     1,' for Heisenberg coupling within a symmetrical dimer, and',/
     1,' eigenvalues and functions are corrected for the Zeeman operato'
     1,'r',/
     1,' (not for the option JAVANVleck, which is however not',/
     1,' discussed here!). The Zeeman operator involves the magnetic',/
     1,' field with its direction and the magnetic moments as stored',/
     1,' in FMAT(,,1), FMAT(,,4) and FMAT(,,5) (FMAT(,,5) must be',/
     1,' multiplied by i=SQRT(-1)), and complex values occur now!'/
     1,' One single matrix corresponds to the Zeeman operator so far,'/
     1,' i.e. for the monomer.'/
     1,' The Kronecker product of the row matrix of the eigenvectors'/
     1,' with itself is used as a basis of product states now.'/
     1,' The matrix of the Zeeman operator becomes now the sum of two m'
     1,'atrices:'/
     1,' The Kronecker product of the single matrix with the unit matri'
     1,'x'/
     1,' and the Kronecker product of the unit matrix with the single m'
     1,'atrix.'/
     1,' The eigenvalues are added as the sum of the Kronecker product'/
     1,' of the corresponding diagonal matrix with the unit matrix and'/
     1,' the Kronecker product of the unit matrix with the diagonal mat'
     1,'rix!'/,/
     1,' Matrices GMAT(,,1..3), corresponding to FMAT(,,1..3), are',/
     1,' used for Heisenberg coupling, and they deal with spin only.'/
     1,' The matrix of the Heisenberg operator is a sum of three Kronec'
     1,'ker'/
     1,' products, and it is multiplied with a coupling parameter. The'/
     1,' sum is the sum of the Kronecker product of GMAT(,,1) with itse'
     1,'lf,'/
     1,' and of two Kronecker products of linear combinations of GMAT(,'
     1,',2)'/
     1,' and GMAT(,,3) with itself, respectively.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   28 CONTINUE
      WRITE(*,2323)
      WRITE(*,728)
  728 FORMAT(/,
     1' Here is SUBROUTINE CHIMAG,',/
     1,' called by SUGANC (and by SUGANR, but not in CONDOR),',/
     1,' and using eigenvalues and magnetic moments calculated there.',/
     1,' CHIMAG, for CHI and MAGnetisation, runs always not only',/
     1,' formally, if it is arrived at, e.g. for each temperature!',/
     1,' Firstly and mainly the component of the negativ magnetic',/
     1,' moment in Bohr magnetons in direction of the magnetic field',/
     1,' is calculated.',/
     1,' Boltzmann statistics is applied using the chosen number of',/
     1,' lowest energy eigenvalues ("niveaus"). The (components of)',/
     1,' the magnetic moments are called ZEEMAN. The sum of ZEEMAN',/
     1,' times e**(-energy/(const.of Boltzmann*temp.)) is divided by',/
     1,' the partition function, i.e. the sum of e**(-energy/(const.of',
     1/,' Boltzmann*temp.)), to get the above mentioned number of Bohr',
     1/,' magnetons! The option JAVANVleck is not discussed here, but',/
     1,' ZEEMAN means then Zeeman coefficients of first order!',/
     1,' Molar magnetisation is calculated then, and for a symmetric',/
     1,' dimer it is divided by two to get the value for one center!',/
     1,' Division by the magnetic field leads to CHI, the molar',/
     2,' susceptibility! Only CHI enters further calculations!',/
     2,' CHIMAG returns to SUGANC.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   29 CONTINUE
      WRITE(*,2323)
      WRITE(*,729)
  729 FORMAT(/,
     1' Here is SUBROUTINE SCHEMA, called by TANABE.',/
     1,' Subroutine SCHEMA - running only once - has been written to'
     2,' give',/
     1,' all KASSUM micro states of NREL electrons (max. 13 el., if'
     2,' f el.),',/
     1,' and the maximum of KASSUM according to DIMENSION is ND2002,',/
     1,' with a maximum of 3432 (KASSUM=0, if NREL=0).',/
     1,' KLWERT = 0/1/2/3 is the l value corr. to s, p, d, and f',/ 
     1,' electrons and is given. The result of SCHEMA, the',/
     1,' consecutively and not arbitrarily (see below) numbered micro',/
     1,' states, is given in MSML and in a different form in MSMLNW:',/
     1,' There one individual set of a micro-state is given as a num'
     2,'ber!:',/
     1,' This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for'
     2,' ms=+1/2.',/
     1,' (This number is one(!) digit, if A, B, C, D are digits for'
     2,' f-el.!)',/
     1,' Each micro-state is in its conventional order, and this is',/
     2,' "step down", e.g. 975 for MSMLNW(10,1..3) for 3 (d)el.!',/ 
     1,' MSMLNW serves to calculate MSML, and some special sums of',/
     1,' elements of MSML are given in MQUER(II,1..3):',/
     1,' The first 10 of 120 micro states for 3 (d)el. are:',/
     1,' No.OF STATE  MQUER(II,1..3) (MSML(II,1,I),I=1,NREL),'
     2,'(MSML(II,2,I),',/
     1,' I=1,NREL)',/
     1,'  1         5    1   11           2 2 1                 1-1 1',/
     1,'  2         5   -1    9           2 2 1                 1-1-1',/
     1,'  3         4    1    9           2 2 0                 1-1 1',/
     1,'  4         4   -1    7           2 2 0                 1-1-1',/
     1,'  5         3    1    7           2 2-1                 1-1 1',/
     1,'  6         3   -1    5           2 2-1                 1-1-1',/
     1,'  7         2    1    5           2 2-2                 1-1 1',/
     1,'  8         2   -1    3           2 2-2                 1-1-1',/
     1,'  9         4    1    9           2 1 1                 1 1-1',/
     1,' 10         3    3    9           2 1 0                 1 1 1',/
     1,'   .........',/
     1,' Concerning (MSML(II,1,I),I=1,NREL): The numbers printed are'
     2,' such',/
     1,' that each number (e.g. 1) is equal to or lower than the'
     2,' preceding one,',/
     1,' if the set of numbers to the left is the same!',/
     1,' (MSML(II,2,I),I=1,NREL): All numbers are 1 or -1;'
     2,' if there are two',/
     1,' numbers equal to each other in (MSML(II,1,I),I=1,NREL),',/
     1,' the pair 1 -1 belongs to these!',/
     1,' If KLWERT (=2) is added to each ml number, e.g.',/
     1,'    7         2    1    5      4 4 0      1-1 1',/
     1,'    8         2   -1    3      4 4 0      1-1-1',/
     1,'    9         4    1    9      4 3 3      1 1-1',/
     1,'   10         3    3    9      4 3 2      1 1 1,',/
     1,' each number becomes a digit, and if e.g. 4 4 0 is taken as'
     2,' the number 440,',/
     1,' each of these new numbers of a given row is lower than or'
     2,' equal to the',/
     1,' number of a preceding row!',/
     1,' Twice e.g. 440 is 880, and 2*ms, if ms=1/2, i.e. 101 resp.',/
     1,' 100, can be added to get 981 resp. 980.',/
     1,' The digits 0...9 occur for d-electrons! For f-electrons there',
     1/,' are the further digits A, B, C, and D!',/
     1,' An idea, how MSML is calculated, give the following lines:',/
     1,'  7                  1-1 1 & 9 8 1 -> 8 8 0 -> 4 4 0 -> 2 2-2',/
     1,'  8                  1-1-1 & 9 8 0 -> 8 8 0 -> 4 4 0 -> 2 2-2',/
     1,'  9                  1 1-1 & 9 7 6 -> 8 6 6 -> 4 3 3 -> 2 1 1',/
     1,' 10                  1 1 1 & 9 7 5 -> 8 6 4 -> 4 3 2 -> 2 1 0',/
     1,' The first 12 are: (1-11)987;(1-1-1)986;(1-11)985;(1-1-1)984;',/
     1,' (1-11)983;(1-1-1)982;(1-11)981;(1-1-1)980;',/
     1,' (11-1)976;(111)975;(11-1)974;(111)973.'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   30 CONTINUE
      WRITE(*,2323)
      WRITE(*,730)
  730 FORMAT(/,
     1' Here is SUBROUTINE NUMERO,',/
     1,' called by ELELWW, SPORCO, CRYSTF, MAGNF,',/
     1,' which has been written to evaluate the number NR of one',/
     1,' of a maximum of ND2002 micro states of NREL electrons',/
     1,' (actually the number of states is KASSUM and in most cases',/
     1,' lower than ND2002), which are numbered consecutively and',/
     1,' stored in MSMLNW(NR,1..NREL). The micro state looked for',/
     1,' is given in MSMLNO(1..NREL).',/
     1,' NUMERO cuts the range of 1...KASSUM in half and looks,',/
     1,' where the the micro state in MSMLNO is! This half is cut',/
     1,' again in half etc., untill the NR of MSMLNO in MSMLNW was'
     2,' found!',/
     1,' One individual set of a micro-state is given as a number!:',/
     1,' This number is (ml+l)*2 for ms=-1/2 and (ml+l)*2+1 for'
     2,' ms=+1/2.',/
     1,' (This number is one(!) digit, if A, B, C, D are digits for'
     2,' f-el.!)',/
     1,' Each micro-state is in its conventional order, and this is',/
     2,' "step down", e.g. 953 for MSMLNO(1..3).',/ 
     1,' If a step-down operator works on a micro state, the number',/
     1,' defining it decreases, but its consecutive number increases.',/
     1,' Therefore NUMERO can start, instead with 1, with this first'
     2,' number,',/
     1,' given as JJJ. NUMERO RETURNs to ELELWW, SPORCO, CRYSTF, MAGNF!'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   31 CONTINUE
      WRITE(*,2323)
      WRITE(*,731)
  731 FORMAT(/,
     1' Here is SUBROUTINE ELELWW, called by TANABE,',/
     1,' to calculate the non-diagonal matrix elements',/
     1,' of interelectronic repulsion, resp. FACTORs for',/
     2,' these, omitting the Slater-Condon parameters here.',/
     1,' This routine does not run for one electron or one hole',/
     2,' in a (sub)shell!',/
     4,' ELELWW is called only once. It returns to SUBROUTINE',/
     4,' TANABE, where the results are always available.',/
     1,' The operator is a sum of two-electron operators:',/
     1,' See the formula for (ab/g_ij/cd) in Condon/Shortley,',/
     1,' resp. (ab/q/cd) Condon/Shortley p.175!',/
     1,' One individual set of a micro-state is given as a digit:',/
     1,' This digit is (ml+l)*2+ms+1/2 (A=10,B=11,C=12,D=13 are',/
     2,' digits for f-electrons).',/
     1,' The conventional order of the individual sets of a micro-',/
     2,' state is "step down", e.g. 953 (the numbering of the',/ 
     1,' electrons is always 1,2,3,...), and 953 is the label',/
     1,' of the micro-state.',/
     9,' The micro-states are ordered, too: The label of the first',/
     9,' micro-state is a greater number then that of the 2nd, etc.',/
     1,' Two individual sets a and b belong to this micro-state, i.e.',/
     1,' the micro-state is ...a...b... with a>b. a and b are digits,',/
     1,' e.g. for the micro-state before (3 electrons): 9(a=5)(b=3).',/
     3,' Non-diagonal non-zero matrix elements can exist only for all',/
     1,' those states ...c...d... with c not equal to a or b and d not',
     1/,' equal to a or b, which differ in exactly two individual sets',
     2/,' corresponding to (ab/q/cd), but msa must be equal to msc,',/
     1,' msb equal to msd, and (mla+mlb) must be equal to (mlc+mld).',/
     1,' c and d (either c>d or c<d) are therefore sets not belonging',/ 
     1,' to the state ...a...b...!',/
     1,' For each micro-state the number of micro-states, with which',/
     1,' it is connected by non-zero matrix elements, is evaluated,',/
     2,' and in addition the ordinal numbers of these micro-states',/
     2,' and all FACTORs needed later on are calculated and stored.',/
     1,' Because (mla+mlb) must be equal to (mlc+mld), the operators',/
     1,' may be regarded as step operators on ml-values:',/
     2,' a is stepped up the same number of steps as b is stepped down,'
     2,/,' or a is stepped down the same number of steps as b is stepped
     2',' up.'/,/
     1,' An outer DO-LOOP goes over the ordinal numbers of all micro-',/
     2,' states, which are in conventional order, i.e. 1th, 2nd, ...',/
     2,' micro-state.',/
     1,' For each micro-state of the outer DO-LOOP the individual sets',
     1/,' not belonging to it are determined, i.e. the number of these',
     1/,' sets and the digits, which define it, are stored.',
     1/,' If two spaces ("holes") are taken for a and b, there is one', 
     2/,' possibility to do this for two electrons, there are three',
     3/,' possibilities for three electrons, six possibilities for four'
     4,/,' electrons, etc. (i.e. NREL choose 2 possibilities for NREL',
     5/,' electrons).',/
     1,' The next DO-LOOP goes over all electrons of the micro-state,',/
     1,' i.e. over all its individual sets, and the corresponding',/
     1,' individual set is called LOCH1 and replaced by a space',/
     2,' ("LOCH"=hole).',/
     1,' The next DO-LOOP goes once more over the individual sets of',/
     2,' the micro-state, however only those with a smaller digit than',
     3/,' that of the DO-LOOP before. This set is called LOCH2 and',/
     4,' replaced by a space, too.',/
     1,' In the next DO-LOOP the first hole is filled with the 1th, the'
     1,/,' 2nd, etc. individual set not belonging to the micro-state of'
     1,/,' the outer DO-LOOP, which is called INLO1, but only if the',/
     1,' spins of INLO1 and LOCH1 are the same. (For e.g. three d-',/ 
     2,' electrons there are (10-3)=7 possibilities to do this, if',/
     3,' spin is not taken into consideration.)',/
     1,' In the next DO-LOOP the second hole is filled with the 1th,'/
     1,' the 2nd, etc. individual set not belonging to the micro-state',
     1/,' of the outer DO-LOOP, which is called INLO2, but only if the',
     1/,' spins of INLO2 and LOCH2 are the same, if INLO2 is not equal',
     1/,' to INLO1, and if (mla+mlb) is equal to (mlc+mld).',/
     1,' This micro-state, which may be not in its conventional order,',
     1/,' is used for all further calculations, but the parity of',/
     1,' permutations to get the conventional order as well as the',/
     1,' label of the ordered state are determined. JAODD becomes -1',/
     1,' for odd and 1 for even parity, the label goes into SUBROUTINE',
     1/,' NUMERO, and its ordinal number returns. It is the ordinal',/
     1,' number of a micro-state, with which the micro-state of the',/
     1,' outer DO-LOOP is connected!',/
     1,' The calculation continues only, if this ordinal number is',/
     1,' greater than that of the micro-state of the outer DO-LOOP,',/
     1,' because only the lower triangle of the Hamiltonian matrix',/
     1,' is actually computed!',/
     1,' If the calculation continues, the ml-values of LOCH1 and',/
     1,' INLO1, called LOCHM1 and INLOM1, respectively, and of LOCH2',/
     2,' and INLO2, called LOCHM2 and INLOM2, respectively, are',/
     3,' determined, and the absolute value of the difference of',/
     4,' LOCHM1 and INLOM1, called MDIF.',/
     1,' For K=2, =4, =6, if concerned, but K not lower than MDIF,',/
     2,' the FACTORs of the F''s, the Slater-Condon parameters,',/
     3,' are now calculated. They are the above JAODD times Condon-',/
     4,' Shortley coefficient cK(l-value,LOCHM1,l-value,INLOM1) times',/
     5,' Condon-Shortley coefficient cK(l-value,INLOM2,l-value,LOCHM2).'
     1,/,' For the micro-state of the outer DO-LOOP 1 is added to a',/
     1,' counter, the ordinal number of the evaluated micro-state is',/
     1,' stored, and the up to three FACTORs, which have been',/
     1,' calculated, are stored. Hint: The two terms, which have to',/
     2,' be added for parallel spins, are separately stored here!',/
     9,/
     1,' Two-electron operators for interelectronic repulsion:',/
     2,' Non-diagonal, non-zero matrix elements exist only, if',/
     3,' a step-down operator on ml-values works on one electron',/
     4,' and the corresponding step-up operator works simultanously',/
     5,' on a second electron.',/
     1,' As an example all matrix elements connected with |54> are',/
     2,' now calculated for d-electrons (l=2):',/
     1,' i) One-step operators:',/
     2,' One result is |72>, and the corresponding matrix element is',/
     3,' <72|Op1uOp1d|54> with (ab|q|cd) corresponding to mla=1,',/
     4,' mlb=-1, mlc=0, mld=0. The matrix element is the sum of two',/
     5,' terms, one with k=2 and a second one with k=4, and each term',/
     6,' is the product of a Slater-Condon parameter Fk times Condon-',/
     7,' Shortley coefficient ck(l,mla,l,mlc) times Condon-Shortley',/
     8,' coefficient ck(l,mld,l,mlb).',/
     1,' A second result is |36>, but the corresponding matrix element',
     2/,' is <63|Op1dOp1u|54> with however (ab|q|cd) corresponding to',/
     3,' mla=-1, mlb=1, mlc=0, mld=0. Each of the two terms is the',/
     6,' product of a Slater-Condon parameter Fk times Condon-',/
     7,' Shortley coefficient ck(l,mla,l,mlc) times Condon-Shortley',/
     8,' coefficient ck(l,mld,l,mlb) times (-1), because an odd number',
     9/,' of interchanges, i.e. one interchange, was needed to get the',
     1/,' conventional order.',/
     1,' ii) Two-step operators:',/
     2,' The corresponding matrix elements are <90|Op2uOp2d|54> and',/
     3,' <81|Op2dOp2u|54>. Because |54> is to the right of <72|, <63|,',
     4/,' <90| and <81|, all these matrix elements are in the upper',/
     5,' triangle of the resulting matrix, and they are actually not',/
     6,' computed therefore!',/
     1,' Step operators and parallel spins:',/
     1,' As an example all matrix elements connected with |64> are',/
     2,' now calculated for d-electrons (l=2):',/
     2,' The corresponding matrix elements are <82|Op1uOp1d|64> and',/
     3,' <82|Op2dOp2u|64> here, but these two are added to become one',/
     4,' matrix element, which actually enters the matrix. For parallel'
     5,/,' spins there are always two terms to be added!',/
     1,' A second example with f-electrons is <C2|Op2uOp2d|86>',/
     2,' and <C2|Op3dOp3u|86>, with C=12.',/
     1,' An example with three p-electrons:',/
     2,' An operator may work on the second and third electron of the',/
     3,' ket |432> to give |450>. (10|q|00) corresponds to (ab|q|cd).',
     4/,' Because the bra <450| is not in conventional order and there',
     5/,' is an odd number of interchanges needed to get it so, the',/
     6,' matrix element is minus one times F2 times c2(1,1,1,0) times',/
     7,' c2(1,0,1,1).'
     1,/)
      WRITE(*,2324)
      GOTO 9999
   32 CONTINUE
      WRITE(*,2323)
      WRITE(*,732)
  732 FORMAT(/
     1,' Here is SUBROUTINE SPORCO, called by TANABE.',/
     1,' Subroutine SPORCO calculates the non-diagonal elements',/
     1,' of the spin-orbit coupling matrix for spin-orbit coupling.',/
     1,' The operator is a sum of one-electron operators.',/
     1,' (For a one-el. operator see Condon/Shortley p.59,eq.(3)',/
     1,' (of 7**3) and/or p.221,eq.(1c).',/
     1,' See pp.169-171 for matrix components of one-el. operators!)',/
     1,' (Hint: The one-electron operator for the diagonal elements'
     1,' is (lz.sz).)',/
     1,' An outer loop goes over all micro states, an inner loop goes',/
     1,' over all electrons, and electrons labeled with odd digits are',
     1/,' ignored, because these have spin-up.',/,/ 
     2,' The one-electron operator which is used here is (l-.s+).',/
     2,' It works on a ket, and the result is a different ket times',/
     2,' a factor 1/2*SQRT((l-(ml+ms)+1/2)(l+(ml+ms)+1/2)).',/
     2,' Because it is a step-up operator for electron spin,',/
     2,' it does not work on electrons with spin up resp. the result '
     2,'is zero.',/
     2,' Only one half of the symmetric spin-orbit coupling matrix',/
     2,' will be calculated in this way, and the operator (l+.s-) for',/
     2,' the second half is not needed.'/
     3,' The operator (l-.s+) is used as one(!) operator, e.g.',/
     3,' it works on the 8-th electron of a state of 9 d-electrons',/
     3,' with label 987654320 (remember: any digit = 2*ml+4+ms+1/2)',/
     3,' with the result 987654310. The result is zero for the 9-th',/
     3,' electron, because a "negative digit" is not possible, and',/
     3,' it is zero for e.g. the 1-th electron, because the formally',/
     3,' resulting digit 8 is already present ("zero determinant").',/
     3,/
     4,' If a micro state results (the conventional order is always',/
     4,' kept here), it is stored for the micro state of the outer',/
     4,' loop (the sum of ms and ml is the same):',/
     4,' 1 is added to a counter, the above factor is calculated and',/
     4,' stored (twice of it is stored here), and the label of the',/
     4,' micro state, resulting from a CALL of subroutine NUMERO,',/
     4,' is stored. SPORCO is called only once. It returns to',/
     4,' subroutine TANABE, where the results are always available.'
     9,/)
      WRITE(*,2324)
      GOTO 9999
   33 CONTINUE
      WRITE(*,2323)
      WRITE(*,733)
  733 FORMAT(/
     1,' Here is SUBROUTINE CRYSTF, called by TANABE.',/
     1,' CRYSTF calculates the NON-DIAGONAL elements (resp. FACTORs'
     1,' for',/,' these)',
     1' of the MATRIX of the CRYSTAL-FIELD/Ligand-field OPERATOR!',/
     1,' The operator is a sum of ONE-EL. operators, and for non-'
     1,'diagonal',/
     1,' elements spin and anything else must be the same, except one',/
     1,' ml value, which is not equal to ml-dash. See the formula for',/
     1,' +-(a/f/b), EQ.(8), in Condon/Shortley!',/
     1,' (For the diagonal elements see EQ.(9)!)',/
     9,' The absolute value of the difference of ml and ml-dash',/
     9,' corresponds to a step operator working on ml-values.',/
     2,' One individual set of a micro-state is given as a digit:',/
     2,' This digit is (ml+l)*2+ms+1/2 (A=10,B=11,C=12,D=13 are',
     9/,' digits for f-electrons).',/
     2,' The conventional order of the individual sets of a micro-',/
     9,' state is "step down", e.g. 976 (the numbering of the',
     9/,' electrons is always 1,2,3,...), and 976 is the label',
     9/,' of the micro-state.',/
     9,' These micro-states are ordered, too: The label of the first',/
     9,' micro-state is a greater number then that of the 2nd, etc.',/
     2,' An outer DO-LOOP goes over the ordinal numbers of all micro-',/
     9,' states, which are in conventional order, i.e. 1th, 2nd, ...',/
     9,' micro-state.',/
     2,' For each micro-state the number of micro-states, with which',/
     2,' it is connected, is evaluated with help of step operators,'
     9,/,' and in addition the ordinal numbers of these micro-states',/
     9,' and all FACTORs needed later on are calculated and stored.',/ 
     1,/
     1,' For each micro-state of the outer DO-LOOP the individual sets',
     1/,' not belonging to it are determined, i.e. the number of these',
     1/,' sets and the digits, which define it, are stored.',/
     1,' The next DO-LOOP goes over all electrons of the micro-state,',/
     1,' i.e. over all its individual sets, and the corresponding',/
     1,' individual set is called LOCH1 and replaced by a space',/
     2,' ("LOCH"=hole).',/
     1,' In the next DO-LOOP this hole is filled with the 1th, the 2nd,'
     1,/,' etc. individual set not belonging to the micro-state of the',
     1/,' outer DO-LOOP, which is called INLO1, but only if the spins',/
     1,' of INLO1 and LOCH1 are the same.',/ 
     1,' This micro-state, which may be not in its conventional order,',
     1/,' is used for all further calculations, but the parity of',/
     1,' permutations to get the conventional order as well as the',/
     1,' label of the ordered state are determined. JAODD becomes -1',/
     1,' for odd and 1 for even parity, the label goes into SUBROUTINE',
     1/,' NUMERO, and its ordinal number returns. It is the ordinal',/
     1,' number of a micro-state, with which the micro-state of the',/
     1,' outer DO-LOOP is connected!',/
     1,' The calculation continues only, if this ordinal number is',/
     1,' greater than that of the micro-state of the outer DO-LOOP,',/
     1,' because only the lower triangle of the Hamiltonian matrix',/
     1,' is actually computed!',/
     1,' If the calculation continues, the ml-values of LOCH1 and',/
     1,' INLO1, called LOCHM1 and INLOM1, respectively, are determined'
     1,/,' and the absolute value of their difference, called NK.',/
     1,' NK is the number of steps of the step operators to be applied,'
     1,/,' and it corrsponds to the second digit of the Wybourne',/
     1,' parameters, e.g. NK=1 belongs to B21, B''21, B41, B''41, B61,',
     1/,' B''61, but NK=6 belongs to B66 and B''66 only (the first',/
     1,' digit is called K).',/
     1,' For the NK concerned, and for the micro-state of the outer',/
     1,' DO-LOOP, 1 is added to a counter, the ordinal number of the',/
     1,' evaluated micro-state is stored, and up to three FACTORs are',/
     1,' calculated and stored. The FACTORs are the above JAODD times',/
     1,' a Condon-Shortley coefficient cK(l-value,LOCHM1,l-value,INLOM1)
     1',/,' times ((-1) for NK odd). Because K may be 6, 4, 2 for NK=1,'
     1,/,' but 6 for NK=5, only one FACTOR has to be determined for',/
     1,' NK=5, but three FACTORs have to be determined for NK=1!',/
     2,/
     1,' The ligand field operator is',/
     1,' = SUM(k=0...inf)(SUM(q=-k...k)((Bkqcompl)complconj times Ckq))'
     1,/,' with Ckq = SQRT(4PI/(2k+1))Ykq,',/
     5,' (Bkqcompl)complconj = Bk-qcompl * (-1)**q, and',/
     6,' (Ckq)complconj = Ck-q * (-1)**q.',/
     1,' With Bk0=Bk0compl and Bkq=(-1)**q Re(Bkqcompl) and',/
     2,' B''kq=(-1)**q Im(Bkqcompl)',/
     2,' becomes the ligand field operator',/
     1,' = SUM(k=0...inf)(',/
     1,' Bk0Ck0 + SUM(q=1...k)(',/
     2,' Bkq((-1)**q Ckq + Ck-q)',/
     3,' +iB''kq(-(-1)**q Ckq + Ck-q))),',/
     4,' with i=SQRT(-1).'
     9,/)
      WRITE(*,2324)
      GOTO 9999
   34 CONTINUE
      WRITE(*,2323)
      WRITE(*,734)
  734 FORMAT(/,
     1' Here is SUBROUTINE MAGNF, called by TANABE.',/
     1,' Subroutine MAGNF calculates, in order to store these results',/
     1,' once and for all, NROFNR, NOFROW, and EIVSHT, to be used in',/
     1,' REDUCT to calculate FMAT, i.e. the components of the magnetic',
     1/,' moment vectors for x- and y-direction, and GMAT.',/
     1,' FMAT(,,1) and GMAT(,,1) for the z-direction are calculated in',
     1/,' REDUCT, because the magnetic moments for this direction are',/
     1,' in MQUER for each micro-state!',/
     1,' Here (only!) one-electron step-down operators, both for spin',/
     1,' and for orbital, are involved, which work on the electrons of',
     1/,' each micro-state! Into NROFNR the number of micro-states, the'
     1,/,' present micro-state is connected with, is written. For each',
     1/,' of the NROFNR micro-states its consecutive number, determined'
     1,/,' by SUBROUTINE NUMERO, is written into NOFROW, with a minus',/
     1,' sign in front of it, if spin is concerned. EIVSHT contains 0.0'
     1,/,' for spin and an especially calculated factor else. This',
     2' factor',/,' is SQRT((l+ml)*(l+1-ml))*(+-ONE), where ml is that'
     3,' of the',/,' electron the operator works on, and (+-ONE) is'
     4,' according to the',/,' "conventional order".',/
     1,' The coefficients of the step-down operator for spin are only',/
     1,' =1 and =0, 1 for ms=1/2, 0 for ms=-1/2, so that this operation'
     1,/,' gives just the sum of the states resulting when successive',/
     1,' ml+ are changed to ml- (From: Condon/Shortley p.227).',/
     1,' Step operators for orbital work not so simply as those for',/
     1,' spin (See: Condon/Shortley p.227 eq.(3))!',/
     1,' See the source code for more information!',/,' If',
     6' the program runs with the test option JTSTZX, the description',/
     6,' of the theory is very much simpler. Because actually components
     9',/,' of magnetic moment vectors of micro states for x- and y-',
     7'direction',/
     8,' are calculated here in MAGNF, the contribution of the',
     9' Hamiltonian',/,' for the magnetic field',
     9' ("Zeeman operator") is simply the sum of z-, x-,',/,' y-compo',
     1'nent of the magnetic field vector times z-, x-, y-component of',
     1/,' magnetic moment vector, respectively! This Hamiltonian is',
     1/,' applied in TANABE together with the other Hamiltonians, and',
     1/,' in this case FMAT, which is calculated in REDUCT, is diagonal'
     1,/,' for z-, x- and y-direction, and the diagonal elements are',
     1/,' the components of the magnetic moment vectors, one vector',
     1/,' for each eigenvalue.',
     2/,' If the program does not run with this test option, the',
     2/,' contributions of the Zeeman operator are the sum of z-, x-,',
     2/,' y-component of the magnetic field vector times the',
     2' z-, x-,',/,' y-component of magnetic moment vector in FMAT,',
     2' respectively.',/,' These contributions are added after the',
     2' diagonalization of',/
     2,' the firstly set up matrix, and the magnetic moments of the',/
     2,' micro states had been used to get FMAT from the eigenvectors.', 
     2/,' FMAT is not diagonal now! A further diagonalization leads to',
     2/,' new eigenvectors, and FMAT serves to analyse these',
     9/,' eigenvectors.',
     3/,' Hint: As soon as the magnetic field is involved here,',
     3/,' the results are for this special direction of the magnetic',
     3/,' field vector only!'
     1,/)
      WRITE(*,2324)
C
 9999 CONTINUE
      IF(MEHR2(MARKE).EQ.2)MEHR(MARKE)=-1
      RETURN
CCC
 8576 CALL FINISH
 9588 CALL FINISI
CEND TEXT2R
      END
      SUBROUTINE STR00(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,IN24,IN25)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      COMMON/CBWWWS/BWWWS
      DIMENSION XYZ(10,3,3),IANZ(3),BWWWS(16)
      SAVE
      DATA XYZ/90*0.0D0/
      DATA JA2,MITRUF,IANZ/0,0,0,0,0/
      CALL STR001(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,IN24,IN25,
     2XYZ,JA2,MITRUF,NSORT,IANZ,BWWWS)
      RETURN
CEND STR00
      END
      SUBROUTINE STR001(JASTRU,
     1MOROUT,KLWERT,NREL,IBWWW,BWWW,KMASKE,NGROUP,I20,IN24,IN25,
     2XYZ,JA2,MITRUF,NSORT,IANZ,BWWWS)
C**   ON FILE str00.f - DATA read in from e.g. str00.dat
C   00 <=> YEAR 2000! - MODEL OF MALTA ... 1998/(JANUARY)1999
C**   IN: MOROUT, KLWERT, NREL, (COV.F, CHARGE OF FIRST AND SECOND SORT OF
C     LIGANDS <=> BWWW(1), BWWW(2), BWWW(3)).
C**   OUT: ((MOROUT,KLWERT,NREL,)) (B2,B22,B40,B42,B43,B44,B60,B62,B63,B64,
C     B66 <=> BWWW(1:11)).
C**   IN 2003: ODD-NUMBERED VALUES TIMES -1, SEE 1712 FORMAT BELOW.
C05   IN 2005: ... WAS AN ERROR: NOW B(calc.)-VALUES = B-VALUES (SEE 1712)!
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT INTEGER (I-N)
      CHARACTER*5 QB(28),QW(26),QS(16)
      COMMON/FLAG/LMN
      CHARACTER*2 LANTHA(13),TRANS1(10),TRANS2(10)
      CHARACTER*11 URAN(3)
      CHARACTER*15 QMPC
      CHARACTER DF(2),DF12
      CHARACTER QTEXT1(60)
      PARAMETER(ZERO=0.0D0,ONE=1.0D0,TWO=2.0D0,DREI=3.0D0,HALF=0.5D0
     1,VIERTL=0.25D0,FF=219470.D0,BOHRPM=0.529177249D+2)
      DIMENSION XYZ(10,3,3),IANZ(3),ABC(3,11,3),DEF(3,16,3)
      DIMENSION BWWW(I20),ABST(10,3),QBST(10,3),
     1IBWWW(I20),KMASKE(20),ABSTMN(3),QLMFAK(3,3),ABSTB(10,3),BWWWS(16)
      DIMENSION RRT12(10,9),RRT14(10,9),RRT22(10,9),RRT24(10,9)
     1,RRLA2(13),RRLA4(13),RRLA6(13),RRU2(3),RRU4(3),RRU6(3)
     1,QLIG(3),RHO(3),BETA12(3),FAK246(3,3)
      SAVE
      DATA QB/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'B22'' ','B42'' ','B43'' ','B44'' ','B62'' ','B63'' ','B64'' '
     2,'B66'' ','     ','B21  '
     3,'B41  ','B61  ','B65  ','B21'' ','B41'' ','B61'' ','B65'' '/
C
      DATA QW/'B20  ','B22  ','B40  ','B42  ','B43  ','B44  '
     1,'B60  ','B62  ','B63  ','B64  ','B66  '
     2,'J    ','LAM  ','THET ','CHI0 ','F    ','MOLF ','MIX/C','ENTH '
     2,'ENTR '
     3,'B21  ','B41  ','B61  ','B65  ','     ','     '/
C**   (21)/21'/22'/(41)/41'/42'/43'/44'/(61)/61'/62'/63'/64'/(65)/65'/66':
      DATA QS/'    ','B21'' ','B22'' ','    ','B41'' ','B42'' '
     1,'B43'' ','B44'' ','    ','B61'' ','B62'' ','B63'' '
     2,'B64'' ','    ','B65'' ','B66'' '/
C
CJA2  DATA IANZ,ABSTMN/0,0,0,ZERO,ZERO,ZERO/
      DATA ABSTMN/ZERO,ZERO,ZERO/
CJA2  DATA ABC,DEF,XYZ/333*ZERO/
CJA2  DATA BWWWS/16*ZERO/
      DATA DF/'D','F'/
      DATA TRANS1/
     1'Sc','Ti',' V','Cr','Mn','Fe','Co','Ni','Cu','Zn'/
      DATA RRT12/
     13.0010D0,ZERO,1.3768D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,ZERO,2.4472D0,ZERO,1.2266D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,9.9462D0,ZERO,2.0702D0,1.4470D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,6.3481D0,2.8186D0,1.7808D0,1.2864D0,0.9997D0,ZERO,ZERO,ZERO
     1,ZERO
     5,ZERO,ZERO,4.5167D0,ZERO,1.5482D0,1.1500D0,0.9080D0,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,3.6643D0,2.0257D0,1.3926D0,1.0492D0,0.8371D0,ZERO
     1,ZERO
     7,ZERO,ZERO,ZERO,ZERO,2.9992D0,ZERO,1.2509D0,0.9582D0,0.7719D0,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,2.5370D0,ZERO,1.1300D0,0.8763D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.1450D0,ZERO,1.0275D0,ZERO/
      DATA RRT14/
     119.213D0,ZERO,3.5926D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,ZERO,13.171D0,ZERO,2.9055D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,281.93D0,ZERO,9.6047D0,4.2967D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,125.03D0,20.7145D0,7.2112D0,3.4457D0,1.9861D0,ZERO,ZERO,ZERO
     1,ZERO
     5,ZERO,ZERO,65.293D0,ZERO,5.5127D0,2.7894D0,1.6592D0,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,43.1345D0,10.8718D0,4.4958D0,2.3423D0,1.4230D0
     1,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,28.931D0,ZERO,3.6552D0,1.9708D0,1.2209D0,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,20.617D0,ZERO,3.0034D0,1.6623D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,14.704D0,ZERO,2.4978D0,ZERO/
      DATA TRANS2/
     1' Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd'/
      DATA RRT22/
     15.5883D0,3.8567D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,7.6007D0,4.5260D0,3.3077D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,ZERO,ZERO,3.8291D0,2.9052D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,ZERO,ZERO,3.3185D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     5,ZERO,ZERO,ZERO,3.9538D0,2.9033D0,2.3132D0,ZERO,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,ZERO,ZERO,2.6276D0,2.1171D0,ZERO,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.3736D0,1.9390D0,ZERO,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,2.1584D0,1.7820D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,1.9717D0,1.6424D0/
      DATA RRT24/
     158.9978D0,25.3281D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     2,133.9293D0,37.8608D0,18.6001D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     3,ZERO,ZERO,26.9820D0,14.3861D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     4,ZERO,ZERO,ZERO,20.2190D0,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO
     5,ZERO,ZERO,ZERO,32.9845D0,15.4096D0,9.1689D0,ZERO,ZERO,ZERO,ZERO
     6,ZERO,ZERO,ZERO,ZERO,ZERO,12.8668D0,7.7851D0,ZERO,ZERO,ZERO
     7,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,10.5999D0,6.5906D0,ZERO,ZERO
     8,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,8.8319D0,5.6099D0,ZERO
     9,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,7.4098D0,4.8032D0/
C**   DATA FOR FIRST AND SECOND TRANSITION SERIES
C     AND DATA FOR LANTHANIDES FROM:
C     A.J.FREEMAN, R.E.WATSON, HYPERFINE INTERACTIONS IN MAGNETIC
C     MATERIALS, in G.T.RADO, H.SUHL (eds.), MAGNETISM, VOL.IIA,
C     ACADEMIC PRESS, NEW YORK 1965.
      DATA LANTHA/
     1'Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb'/
C** - ALL 3+
C**   DATA FOR LANTHANIDES(3+):
C     Eu(2+) and Tm(2+):
C     RRLA2/0.938,0.728/
C     RRLA4/2.273,1.552/
C     RRLA6/11.670,7.510/
      DATA RRLA2/1.2D0,1.086D0,1.001D0,0.0D0,0.883D0,0.832D0,0.785D0
     1,0.755D0,0.726D0,0.695D0,0.666D0,0.646D0,0.613D0/
      DATA RRLA4/3.455D0,2.822D0,2.401D0,0.0D0,1.897D0,1.697D0,1.515D0
     1,1.419D0,1.322D0,1.219D0,1.126D0,1.067D0,0.960D0/
      DATA RRLA6/21.226D0,15.726D0,12.396D0,0.0D0,8.775D0,7.442D0
     1,6.281D0,5.688D0,5.102D0,4.502D0,3.978D0,3.647D0,3.104D0/
      DATA URAN/'URANIUM(5+)','URANIUM(4+)','URANIUM(3+)'/
C**   DATA FOR URANIUM:
      DATA RRU2/1.85739D0,2.07377D0,2.39241D0/
      DATA RRU4/5.99605D0,7.87311D0,1.134654D1/
      DATA RRU6/3.098195D1,5.001814D1,9.603445D1/
C**   DATA FOR ACTINIDES - (ONLY) URAN5+/4+/3+ (5f**1/5f**2/5f**3):
C     J.P. DESCLAUX AND A.J. FREEMAN: HANDBOOK ON THE PHYSICS AND
C     CHEMISTRY OF THE ACTINIDES, ELSEVIER 1984, P.24 (TABLE 4).
C     (RELATIVISTIC VALUES - 5f (NOT: 5f***))
C
      DATA KLICK,KLICKZ,KLICKB/0,0,0/
      DATA LAUF,LAUFIN,LAUF1/3*0/
C
      IF(LAUF.GT.0)GOTO 4
      IF(MITRUF.EQ.0)LAUF=1
      DO 3353 K=1,3
      DO 3352 J=1,16
      DO 3351 I=1,3
      DEF(I,J,K)=ZERO
      IF(J.LE.11)ABC(I,J,K)=ZERO
 3351 CONTINUE
 3352 CONTINUE
 3353 CONTINUE
C
      IF(JA2.GT.0)GOTO 44
C
      WRITE(11,5161)
 3333 WRITE(*,5161)
 5161 FORMAT(/,
     1' IS THE NAME OF THE NEXT FILE str00.dat IN FORMAT(5D16.8)?',
     2/,' "RETURN" OR GIVE ITS NAME!')
      IF(LMN.EQ.0)THEN
      READ(77,'(A15)',ERR=5588,END=3800)QMPC
      GOTO 4800
      ENDIF
 3800 READ(*,'(A15)',ERR=3331,END=4576)QMPC
      LMN=1
 4800 IF(QMPC.EQ.'               ')QMPC='str00.dat      '
      WRITE(7,5163)QMPC
 5163 FORMAT(A15,'  (str00)')
      WRITE(*,5316)QMPC
      WRITE(11,5316)QMPC
 5316 FORMAT(1H ,A15,'  (str00)!!!!!!!!!')
      WRITE(*,5160)BOHRPM
      WRITE(11,5160)BOHRPM
 5160 FORMAT(/,' EACH ROW OF THIS FILE (FIRST ROW MUST BE TEXT!):'
     1,/,' 5 COORD./BOHR IN FORMAT 5D16.8: FIRSTLY 10 X-COORD. OF 1 TH S
     2ORT OF LIG.,',/,' THEN 10 Y-COORD. AND 10 Z-COORD., THEN 2 ND SORT
     3 OF LIG.; BOHR/PM= ',F7.4)
      WRITE(*,5164)QMPC
      WRITE(11,5164)QMPC
 5164 FORMAT(' COORD./BOHR OF 3 SORTS OF LIGANDS ARE READ IN FROM ',A15)
      OPEN(1,ERR=3332,FILE=QMPC,STATUS='OLD')
      READ(1,63,ERR=33)(QTEXT1(I),I=1,60)
   63 FORMAT(60A1)
      WRITE(*,65)(QTEXT1(I),I=1,60)
      WRITE(11,65)(QTEXT1(I),I=1,60)
   65 FORMAT(/,1X,'HEADER:',1X,60A1)
      DO 655 K=1,3
      KK=K
      READ(1,61,END=333,ERR=33)((XYZ(I,J,K),I=1,10),J=1,3)
   61 FORMAT(5D16.8)
  655 CONTINUE
      KK=4
      GOTO 3339
  333 IF((J.NE.1.AND.J.NE.4).OR.(I.NE.1.AND.I.NE.11))THEN
      WRITE(*,3335)
      WRITE(11,3335)
 3335 FORMAT(' WARNING: THERE MAY BE AN ERROR IN DATA FILE!')
      ENDIF
      IF(KK.EQ.3)THEN
      WRITE(*,3337)
      WRITE(11,3337)
 3337 FORMAT(' WARNING: END OF FILE: ONLY 2 SORTS OF LIGANDS!')
      GOTO 3339
      ELSE IF(KK.EQ.2)THEN
      WRITE(*,3336)
      WRITE(11,3336)
 3336 FORMAT(' WARNING: END OF FILE: ONLY 1 SORT OF LIGANDS!')
      GOTO 3339
      ELSE
      WRITE(*,3330)
      WRITE(11,3330)
 3330 FORMAT(' END OF DATA FILE!')
      GOTO 3333
      ENDIF
 3339 CONTINUE
      WRITE(*,8184)
      WRITE(11,8184)
 8184 FORMAT(' THE VALUES READ IN ARE:')
      KKM1=KK-1
      WRITE(*,6161)(((XYZ(I,J,K),I=1,10),J=1,3),K=1,KKM1)
      WRITE(11,6161)(((XYZ(I,J,K),I=1,10),J=1,3),K=1,KKM1)
 6161 FORMAT(5D16.8)
      CLOSE(1)
 3338 CONTINUE
      GOTO 3334
 3331 PRINT*,' ERROR WHILE READING!'
      GOTO 3333
 3332 PRINT*,' DATA FILE NOT FOUND'
      GOTO 3333
   33 PRINT*,' ERROR IN DATA FILE!'
      GOTO 3333
 3334 CONTINUE
C
      DF12=DF(1)
      IF(KLWERT.EQ.3)DF12=DF(2)
C
      WRITE(*,3114)NREL,DF12
      WRITE(11,3114)NREL,DF12
 3114 FORMAT(' NREL ("No. OF EL.") =',I3,' (',A1,' EL.)')
C
      IF(KLWERT.LE.1)STOP 'L-VAL.'
      IF(KLWERT.EQ.2)THEN
      WRITE(11,4510)(TRANS1(I),I=1,10)
      WRITE(11,4511)(RRT12(I,NREL),I=1,10)
      WRITE(11,4512)(RRT14(I,NREL),I=1,10)
      WRITE(11,4510)(TRANS2(I),I=1,10)
      WRITE(11,4511)(RRT22(I,NREL),I=1,10)
      WRITE(11,4512)(RRT24(I,NREL),I=1,10)
 4510 FORMAT(8X,10(4X,A2,3X))
 4511 FORMAT(' <R**2>:',10(F9.4))
 4512 FORMAT(' <R**4>:',10(F9.4))
      WRITE(*,4510)(TRANS1(I),I=1,10)
      WRITE(*,4511)(RRT12(I,NREL),I=1,10)
      WRITE(*,4512)(RRT14(I,NREL),I=1,10)
      WRITE(*,4510)(TRANS2(I),I=1,10)
      WRITE(*,4511)(RRT22(I,NREL),I=1,10)
      WRITE(*,4512)(RRT24(I,NREL),I=1,10)
C
      WRITE(11,4513)
 4514 WRITE(*,4513)
 4513 FORMAT(' INPUT IN 2I1: (1 OR 2 OR 0 FOR 1TH OR 2ND OR ?TH TRANS.SE
     1R., RESP.)',/,' AND CONSEC.No.(0=>10). ?<=>2 ROWS INPUT REQUIRED')
      IF(LMN.EQ.0)THEN
      READ(77,'(2I1)',ERR=5588,END=3801)NRROW,NRCOL
      GOTO 4801
      ENDIF
 3801 READ(*,'(2I1)',ERR=4514,END=4576)NRROW,NRCOL
      LMN=1
 4801 NRCOL0=NRCOL
      IF(NRCOL.EQ.0)NRCOL=10
      WRITE(*,4515)NRROW,NRCOL
      WRITE(11,4515)NRROW,NRCOL
 4515 FORMAT(2I3,' =NRROW,NRCOL!!!!!!!!!')
      WRITE(7,4516)NRROW,NRCOL0
 4516 FORMAT(2I1,' =NRROW,NRCOL0')
C
      IF(NRROW.EQ.1)THEN
      IF(RRT12(NRCOL,NREL).EQ.ZERO.OR.RRT14(NRCOL,NREL).EQ.ZERO)
     1GOTO 4514
      R2=RRT12(NRCOL,NREL)
      R4=RRT14(NRCOL,NREL)
      ELSE IF(NRROW.EQ.2)THEN
      IF(RRT22(NRCOL,NREL).EQ.ZERO.OR.RRT24(NRCOL,NREL).EQ.ZERO)
     1GOTO 4514
      R2=RRT22(NRCOL,NREL)
      R4=RRT24(NRCOL,NREL)
      ELSE
      WRITE(11,4517)
 4518 WRITE(*,4517)
 4517 FORMAT(' INPUT IN F9.4, ONE ROW EACH, <R**2> AND <R**4>')
      IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3802)R2
      GOTO 4802
      ENDIF
 3802 READ(*,'(F9.4)',ERR=4518,END=4576)R2
      LMN=1
 4802 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3803)R4
      GOTO 4803
      ENDIF
 3803 READ(*,'(F9.4)',ERR=4518,END=4576)R4
      LMN=1
 4803 WRITE(7,4519)R2
      WRITE(7,4519)R4
 4519 FORMAT(F9.4,' =R2 OR R4')
      ENDIF
C
      WRITE(*,4520)R2,R4
      WRITE(11,4520)R2,R4
 4520 FORMAT(' R2,R4 =',2D16.8)
C
      ELSE IF(KLWERT.EQ.3)THEN
C
      WRITE(*,4521)LANTHA(NREL),RRLA2(NREL),RRLA4(NREL),RRLA6(NREL)
      WRITE(11,4521)LANTHA(NREL),RRLA2(NREL),RRLA4(NREL),RRLA6(NREL)
 4521 FORMAT('<R**2>,<R**4>,<R**6> OF ',A2,'3+',3F7.3)
      IF(NREL.LE.3)THEN
      WRITE(*,4522)URAN(NREL),RRU2(NREL),RRU4(NREL),RRU6(NREL)
      WRITE(11,4522)URAN(NREL),RRU2(NREL),RRU4(NREL),RRU6(NREL)
 4522 FORMAT('<R**2>,<R**4>,<R**6> OF ',A11,3F9.5)
      ENDIF
C
      WRITE(11,4523)
 4524 WRITE(*,4523)
 4523 FORMAT(' INPUT IN I1: 1 OR 2 OR 0 FOR LN OR U OR DIRECT INPUT, RES
     1P.',/,' 3 ROWS INPUT REQUIRED FOR "DIRECT INPUT" AND U WITH NREL >
     23!')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3804)NRROW
      GOTO 4804
      ENDIF
 3804 READ(*,'(I1)',ERR=4524,END=4576)NRROW
      LMN=1
 4804 IF(NRROW.EQ.1.AND.NREL.EQ.4)NRROW=0
      IF(NRROW.EQ.2.AND.NREL.GT.3)NRROW=0
      WRITE(*,4525)NRROW
      WRITE(11,4525)NRROW
 4525 FORMAT(I2,' =LN/U/?!!!!!!!!!')
      WRITE(7,4526)NRROW
 4526 FORMAT(I1,' =LN/U/?')
C
      IF(NRROW.EQ.1)THEN
      R2=RRLA2(NREL)
      R4=RRLA4(NREL)
      R6=RRLA6(NREL)
      ELSE IF(NRROW.EQ.2)THEN
      R2=RRU2(NREL)
      R4=RRU4(NREL)
      R6=RRU6(NREL)
      ELSE
      WRITE(11,4527)
 4528 WRITE(*,4527)
 4527 FORMAT(' INPUT IN F9.4, ONE ROW EACH, <R**2>, <R**4> AND <R**6>')
      IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3805)R2
      GOTO 4805
      ENDIF
 3805 READ(*,'(F9.4)',ERR=4528,END=4576)R2
      LMN=1
 4805 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3806)R4
      GOTO 4806
      ENDIF
 3806 READ(*,'(F9.4)',ERR=4528,END=4576)R4
      LMN=1
 4806 IF(LMN.EQ.0)THEN
      READ(77,'(F9.4)',ERR=5588,END=3807)R6
      GOTO 4807
      ENDIF
 3807 READ(*,'(F9.4)',ERR=4528,END=4576)R6
      LMN=1
 4807 WRITE(7,4529)R2
      WRITE(7,4529)R4
      WRITE(7,4529)R6
 4529 FORMAT(F9.4,' =R2, R4 OR R6')
      ENDIF
C
      WRITE(*,1277)R2,R4,R6
      WRITE(11,1277)R2,R4,R6
 1277 FORMAT(' R2,R4,R6 =',3D16.8)
C
      ENDIF
C
C**   J=1,3 <=> 3 SORTS OF LIGANDS:
      DO 234 J=1,3
      ABSTMN(J)=ZERO
C**   I=1,10 <=> 10 LIGANDS EACH SORT:
      DO 233 I=1,10
      IF(XYZ(I,1,J).EQ.ZERO.AND.XYZ(I,2,J).EQ.ZERO.AND.XYZ(I,3,J)
     1.EQ.ZERO)GOTO 234
      QBST(I,J)=XYZ(I,1,J)**2+XYZ(I,2,J)**2+XYZ(I,3,J)**2
      ABST(I,J)=DSQRT(QBST(I,J))
      ABSTB(I,J)=ABST(I,J)*BOHRPM
      ABSTMN(J)=ABSTMN(J)+ABST(I,J)
      IANZ(J)=IANZ(J)+1
  233 CONTINUE
  234 CONTINUE
      NSORT=3
      IF(IANZ(3).EQ.0)NSORT=2
      IF(IANZ(2).EQ.0.AND.IANZ(3).EQ.0)NSORT=1
C2006      IF(NSORT.EQ.3)THEN
C2006      WRITE(11,2346)
C2006 2347 WRITE(*,2346)
C2006 2346 FORMAT(' INPUT OF IBWWW(4),BWWW(4) IN I1,D12.4 IS REQUIRED HERE!')
C2006      IF(LMN.EQ.0)THEN
C2006      READ(77,'(I1,D12.4)',ERR=5588,END=2348)IBWWW(4),BWWW(4)
C2006      GOTO 2349
C2006      ENDIF
C2006 2348 READ(*,'(I1,D12.4)',ERR=2347,END=4576)IBWWW(4),BWWW(4)
C2006      LMN=1
C2006 2349 WRITE(*,'(I2,D12.4)')IBWWW(4),BWWW(4)
C2006      WRITE(11,'(I2,D12.4)')IBWWW(4),BWWW(4)
C2006      WRITE(7,2350)IBWWW(4),BWWW(4)
C2006 2350 FORMAT(I1,D12.4,' =IBWWW(4),BWWW(4)')
C2006      ENDIF
C2006      IF((NSORT.EQ.1.AND.IBWWW(3).NE.0)
C2006     1.OR.(NSORT.EQ.2.AND.IBWWW(4).NE.0))THEN
      NSOR2=NSORT+2
      DO 2006 I=NSOR2,11
      IF(IBWWW(I).NE.0)THEN
      WRITE(*,2345)
      WRITE(11,2345)
 2345 FORMAT(
     1' ATTEMPT TO FIT LIGANDS OF ..ND SORT, BUT THERE ARE NONE: STOP!')
      STOP 'IBWWW()=1'
      ENDIF
 2006 CONTINUE
      IF(IANZ(1).EQ.0.AND.IANZ(2).EQ.0.AND.IANZ(3).EQ.0)STOP 'NSORT=0'
      DO 235 J=1,NSORT
      IF(IANZ(J).NE.0)ABSTMN(J)=ABSTMN(J)/IANZ(J)
  235 CONTINUE
      FMINIM=ABSTMN(1)
      IF(ABSTMN(2).NE.ZERO)FMINIM=ABSTMN(2)
      IF(ABSTMN(3).NE.ZERO)FMINIM=ABSTMN(3)
      IF(ABSTMN(2).NE.ZERO.AND.ABSTMN(2).LT.FMINIM)FMINIM=ABSTMN(2)
      IF(ABSTMN(1).NE.ZERO.AND.ABSTMN(1).LT.FMINIM)FMINIM=ABSTMN(1)
      WRITE(*,1246)(IANZ(I),I=1,3)
      WRITE(11,1246)(IANZ(I),I=1,3)
 1246 FORMAT(' NUMBER OF LIGANDS OF EACH SORT =',3I5)
C
C**   OUTPUT OF DISTANCES OF ALL ATOMS:
      DO 1183 J=1,NSORT
      WRITE(*,1182)
      WRITE(11,1182)
      WRITE(*,'(6D16.8)')(ABST(I,J),I=1,IANZ(J))
      WRITE(11,'(6D16.8)')(ABST(I,J),I=1,IANZ(J))
 1182 FORMAT(' DISTANCES OF ATOMS IN BOHR:')
 1183 CONTINUE
C
      DO 1184 J=1,NSORT
      WRITE(*,1185)
      WRITE(11,1185)
      WRITE(*,'(6D16.8)')(ABSTB(I,J),I=1,IANZ(J))
      WRITE(11,'(6D16.8)')(ABSTB(I,J),I=1,IANZ(J))
 1185 FORMAT(' DISTANCES OF ATOMS IN PM:')
 1184 CONTINUE
C
      WRITE(*,1181)(ABSTMN(I),I=1,NSORT)
      WRITE(11,1181)(ABSTMN(I),I=1,NSORT)
 1181 FORMAT(' MEAN VALUE(S) =',3D16.8)
C
   44 CONTINUE
C
      IF(MITRUF.NE.0.AND.JA2.NE.0)THEN
C     ELSE: QBST AND ABST WERE CALC. ABOVE!
C**   J=1,3 <=> 3 SORTS OF LIGANDS:
      DO 934 J=1,NSORT
C**   I=1,10 <=> 10 LIGANDS EACH SORT:
      DO 933 I=1,IANZ(J)
      QBST(I,J)=XYZ(I,1,J)**2+XYZ(I,2,J)**2+XYZ(I,3,J)**2
      ABST(I,J)=DSQRT(QBST(I,J))
  933 CONTINUE
  934 CONTINUE
      ENDIF
C
C**   NOW CALCULATION OF STRUCTURE FACTORS:
C
C**   NOW IN PRINCIPLE THE FORMULA P.200 GRIFFITH (RESP. (2.7)P.240
C     HUTCHINGS) FOR GAMMA(Q,(4*PI/(2N+1)),(D-OF Q)**(N+1),Z(N,ALPHA=0...N))!
C**   TESSERAL HARMONICS: FOR EXAMPLE Z20 = Z(N=2,ALPHA=0) =
C     0.25*SQRT(5./PI)*((3.*Z**2-D**2)/D**2)
C**   GAMMA = (A(Q,4*PI/(2N+1)))*(NUMERICAL FACTOR OCCURING IN Z)
C**   FF = PARAMETER = 219470. = 1 HARTREE = E**2/BOHR IN CM**-1
C**   NOTATION OF STEVENS (AND ALSO IN LEA, LEASK, WOLF!):
C     CRYSTAL-FIELD PARAMETERS = A*<R**N>; ONE TERM OF THE OPERATOR =
C     B*(OP.-EQ.) = (A*<R**N>*THETA)*(OP.-EQ.) WITH THETA=ALPHA,BETA,GAMMA!
C
      DO 245 J=1,NSORT
      DO 244 I=1,IANZ(J)
      DZUBQ=QBST(I,J)
      XKOO=XYZ(I,1,J)
      XKOOQ=XKOO**2
      XKOOQQ=XKOOQ**2
      YKOO=XYZ(I,2,J)
      YKOOQ=YKOO**2
      YKOOQQ=YKOOQ**2
      ZKOO=XYZ(I,3,J)
      ZKOOQ=ZKOO**2
      ZKOOQQ=ZKOOQ**2
      DZUB=ABST(I,J)
      DZUBQQ=DZUBQ**2
      DDU=ABST(I,J)
      DD2=QBST(I,J)
      DD3=DDU*DD2
      DD5=DD2*DD3
      DD7=DD2*DD5
C**   B20:
C     "-HALF", BECAUSE THE CHARGE IS E.G. -2 FOR OXYGEN(2-)!
      ABC(J,1,1)=
     1ABC(J,1,1)-HALF*FF*R2*(DREI*ZKOOQ-DZUBQ)/(DZUBQ*DD3)
C**   B22:
      ABC(J,2,1)=
     1ABC(J,2,1)-HALF*FF*DSQRT(1.5D0)*R2*(XKOOQ-YKOOQ)/(DZUBQ*DD3)
C**   B40:
CCC      ABC(J,3,2)=
CCC     1ABC(J,3,2)
      ABCDEA=ZKOOQQ/DZUBQQ
      ABCDEA=ABCDEA*35.0D0
      ABCDEB=ZKOOQ/DZUBQ
      ABCDEB=ABCDEB*(-30.0D0)
      ABCDEF=ABCDEA+ABCDEB+DREI
      ABCDEF=ABCDEF*0.125D0
      ABCDEF=ABCDEF*R4
      ABCDEF=ABCDEF*(-FF)
      ABCDEF=ABCDEF/DD5
      ABC(J,3,2)=
     1ABC(J,3,2)+ABCDEF
C**   B42:
      ABC(J,4,2)=
     1ABC(J,4,2)-VIERTL*FF*DSQRT(2.5D0)*R4*(XKOOQ-YKOOQ)
     1*(7.D0*ZKOOQ-DZUBQ)/(DZUBQQ*DD5)
C**   B43:
      ABC(J,5,2)=
     1ABC(J,5,2)-VIERTL*FF*DSQRT(35.0D0)*R4*(XKOOQ-DREI*YKOOQ)*XKOO*ZKOO
     1/(DZUBQQ*DD5)
C**   B44:
      ABC(J,6,2)=
     1ABC(J,6,2)-(FF/16.D0)*DSQRT(70.0D0)*R4*(XKOOQQ-6.D0*XKOOQ*YKOOQ
     1+YKOOQQ)/(DZUBQQ*DD5)
      IF(KLWERT.EQ.2)GOTO 244
C**   B60:
      ABC(J,7,3)=
     1ABC(J,7,3)-(FF/16.D0)*R6*(231.D0*ZKOOQ*ZKOOQQ
     1-315.D0*ZKOOQQ*DZUBQ+105.D0*ZKOOQ*DZUBQQ-5.D0*DZUBQ*DZUBQQ)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B62:
      ABC(J,8,3)=
     1ABC(J,8,3)-(FF/32.0D0)*DSQRT(105.D0)*R6*(XKOOQ-YKOOQ)
     1*(16.D0*ZKOOQQ-16.D0*(XKOOQ+YKOOQ)*ZKOOQ+(XKOOQ+YKOOQ)**2)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B63
      ABC(J,9,3)=
     1ABC(J,9,3)-(FF/16.0D0)*DSQRT(105.D0)*R6
     1*(8.0D0*ZKOOQ-DREI*XKOOQ-DREI*YKOOQ)*(XKOOQ-DREI*YKOOQ)*XKOO*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B64:
      ABC(J,10,3)=
     1ABC(J,10,3)-DREI*(FF/16.0D0)*DSQRT(3.5D0)*R6*(11.D0*ZKOOQ-DZUBQ)
     1*(XKOOQQ-6.D0*XKOOQ*YKOOQ+YKOOQQ)/(DZUBQ*DZUBQQ*DD7)
C**   B66:
      ABC(J,11,3)=
     1ABC(J,11,3)-(FF/32.0D0)*DSQRT(231.D0)*R6
     1*(XKOOQ*XKOOQQ-15.D0*XKOOQQ*YKOOQ+15.D0*XKOOQ*YKOOQQ
     1-YKOOQ*YKOOQQ)/(DZUBQ*DZUBQQ*DD7)
  244 CONTINUE
  245 CONTINUE
C
      DO 254 J=1,NSORT
      DO 255 I=1,IANZ(J)
      DZUBQ=QBST(I,J)
      XKOO=XYZ(I,1,J)
      XKOOQ=XKOO**2
      XKOOQQ=XKOOQ**2
      YKOO=XYZ(I,2,J)
      YKOOQ=YKOO**2
      YKOOQQ=YKOOQ**2
      ZKOO=XYZ(I,3,J)
      ZKOOQ=ZKOO**2
      ZKOOQQ=ZKOOQ**2
      DZUB=ABST(I,J)
      DZUBQQ=DZUBQ**2
      DDU=ABST(I,J)
      DD2=QBST(I,J)
      DD3=DDU*DD2
      DD5=DD2*DD3
      DD7=DD2*DD5
C***  B21:
      DEF(J,1,1)=
     1DEF(J,1,1)-FF*DSQRT(1.5D0)*R2*XKOO*ZKOO/(DZUBQ*DD3)
C***  B'21:
      DEF(J,2,1)=
     1DEF(J,2,1)-FF*DSQRT(1.5D0)*R2*YKOO*ZKOO/(DZUBQ*DD3)
C**   B'22:
      DEF(J,3,1)=
     1DEF(J,3,1)-HALF*FF*DSQRT(1.5D0)*R2*TWO*XKOO*YKOO/(DZUBQ*DD3)
C***  B41:
      DEF(J,4,2)=
     1DEF(J,4,2)-VIERTL*FF*DSQRT(5.0D0)*R4*XKOO*ZKOO
     1*(7.D0*ZKOOQ-DREI*DZUBQ)/(DZUBQQ*DD5)
C***  B'41:
      DEF(J,5,2)=
     1DEF(J,5,2)-VIERTL*FF*DSQRT(5.0D0)*R4*YKOO*ZKOO
     1*(7.D0*ZKOOQ-DREI*DZUBQ)/(DZUBQQ*DD5)
C**   B'42:
      DEF(J,6,2)=
     1DEF(J,6,2)-VIERTL*FF*DSQRT(2.5D0)*R4*TWO*XKOO*YKOO
     1*(7.D0*ZKOOQ-DZUBQ)/(DZUBQQ*DD5)
C**   B'43:
      DEF(J,7,2)=
     1DEF(J,7,2)-VIERTL*FF*DSQRT(35.0D0)*R4*(DREI*XKOOQ-YKOOQ)*YKOO*ZKOO
     1/(DZUBQQ*DD5)
C**   B'44:
      DEF(J,8,2)=
     1DEF(J,8,2)-VIERTL*FF*DSQRT(70.0D0)*R4*(XKOOQ-YKOOQ)*XKOO*YKOO
     1/(DZUBQQ*DD5)
      IF(KLWERT.EQ.2)GOTO 255
C***  B61:
      DEF(J,9,3)=
     1DEF(J,9,3)-(FF/8.0D0)*DSQRT(10.5D0)*R6*XKOO
     1*(8.D0*ZKOOQQ*ZKOO-20.0D0*ZKOOQ*ZKOO*(XKOOQ+YKOOQ)+5.0D0*ZKOO
     1*(XKOOQ+YKOOQ)**2)/(DZUBQ*DZUBQQ*DD7)
C***  B'61:
      DEF(J,10,3)=
     1DEF(J,10,3)-(FF/8.0D0)*DSQRT(10.5D0)*R6*YKOO
     1*(8.D0*ZKOOQQ*ZKOO-20.0D0*ZKOOQ*ZKOO*(XKOOQ+YKOOQ)+5.0D0*ZKOO
     1*(XKOOQ+YKOOQ)**2)/(DZUBQ*DZUBQQ*DD7)
C**   B'62:
      DEF(J,11,3)=
     1DEF(J,11,3)-(FF/32.0D0)*DSQRT(105.D0)*R6*TWO*XKOO*YKOO
     1*(16.D0*ZKOOQQ-16.D0*(XKOOQ+YKOOQ)*ZKOOQ+(XKOOQ+YKOOQ)**2)
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'63
      DEF(J,12,3)=
     1DEF(J,12,3)-(FF/16.0D0)*DSQRT(105.D0)*R6
     1*(8.0D0*ZKOOQ-DREI*XKOOQ-DREI*YKOOQ)*(DREI*XKOOQ-YKOOQ)*YKOO*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'64:
      DEF(J,13,3)=
     1DEF(J,13,3)-DREI*VIERTL*FF*DSQRT(3.5D0)*R6*(11.D0*ZKOOQ-DZUBQ)
     1*(XKOOQ*XKOO*YKOO-XKOO*YKOOQ*YKOO)/(DZUBQ*DZUBQQ*DD7)
C***  B65:
      DEF(J,14,3)=
     1DEF(J,14,3)-DREI*(FF/16.0D0)*DSQRT(77.D0)*R6
     1*(XKOOQQ*XKOO-10.0D0*XKOOQ*XKOO*YKOOQ+5.0D0*XKOO*YKOOQQ)*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C***  B'65:
      DEF(J,15,3)=
     1DEF(J,15,3)-DREI*(FF/16.0D0)*DSQRT(77.D0)*R6
     1*(YKOOQQ*YKOO-10.0D0*YKOOQ*YKOO*XKOOQ+5.0D0*YKOO*XKOOQQ)*ZKOO
     1/(DZUBQ*DZUBQQ*DD7)
C**   B'66:
      DEF(J,16,3)=
     1DEF(J,16,3)-(FF/32.0D0)*DSQRT(231.D0)*R6
     1*(DREI*XKOOQ-YKOOQ)*(XKOOQ-DREI*YKOOQ)*TWO*XKOO*YKOO
     1/(DZUBQ*DZUBQQ*DD7)
  255 CONTINUE
  254 CONTINUE
C
    4 CONTINUE
C
      QLIG(1)=BWWW(2)
      QLIG(2)=ZERO
      IF(NSORT.GE.2)QLIG(2)=BWWW(3)
      QLIG(3)=ZERO
      IF(NSORT.GT.2)QLIG(3)=BWWW(4)
C**   START VALUE OF RHO:
      RHO1=BWWW(1)
      IF(LAUF1.EQ.0)THEN
      LAUF1=1
      WRITE(*,249)RHO1,QLIG(1),QLIG(2),QLIG(3)
      WRITE(11,249)RHO1,QLIG(1),QLIG(2),QLIG(3)
  249 FORMAT(' START: COV.-FAC.("RHO") AND CHARGES:',4D12.4)
      ENDIF
C
      DO 250 I=1,16
      IF(I.LE.11)BWWW(I)=ZERO
      BWWWS(I)=ZERO
  250 CONTINUE
      RHO(1)=RHO1*(FMINIM/ABSTMN(1))**3.5
      RHO(2)=ZERO
      IF(ABSTMN(2).NE.ZERO)RHO(2)=RHO1*(FMINIM/ABSTMN(2))**3.5
      RHO(3)=ZERO
      IF(ABSTMN(3).NE.ZERO)RHO(3)=RHO1*(FMINIM/ABSTMN(3))**3.5
C**   RHO's VARY FROM 0.05D0 TO 0.08D0 FOR LANTHANIDES!
C
      IF(LAUFIN.EQ.0)THEN
      LAUFIN=1
      JAPCEM=JASTRU-1
      IF(JAPCEM.NE.0)THEN
      WRITE(*,1375)
      WRITE(11,1375)
 1375 FORMAT(' "PCEM" (PointChargeElectrostaticModel) was chosen!')
      GOTO 1376
      ENDIF
C**   FOR OUTPUT ONLY:
      MINUS1=-1
      MINUS2=1
      MINUS3=1
      IF(NSORT.EQ.2)MINUS3=0
      IF(NSORT.EQ.1)THEN
      MINUS2=0
      MINUS3=0
      ENDIF
C
      WRITE(11,413)RHO1,RHO(1),RHO(2),RHO(3),MINUS1,MINUS2,MINUS3
      WRITE(*,413)RHO1,RHO(1),RHO(2),RHO(3),MINUS1,MINUS2,MINUS3
  413 FORMAT(' MODEL OF MALTA ... (SIMPLE OVERLAP MODEL ("SOM")):',/
     1,' RHO-INPUT & RHO(1TH&2ND&3RD LIG.),',/
     1,' AND "MINUS"(1TH & 2ND & 3RD SORT OF LIGANDS):'
     1,/,4D16.8,3X,3I3,/,' INPUT IN 3I1 "TIMES MINUS" YES/NO(0)!')
C
      WRITE(11,251)
 4545 WRITE(*,251)
  251 FORMAT(' "MINUS" SHOULD BE -1 FOR THE MORE COVALENT LIGAND',
     1/,' ("NORMAL" IS THE MINUS SIGN!)!:')
C
      IF(LMN.EQ.0)THEN
      READ(77,'(3I1)',ERR=5588,END=3808)MALUS1,MALUS2,MALUS3
      GOTO 4808
      ENDIF
 3808 READ(*,'(3I1)',ERR=4545,END=4576)MALUS1,MALUS2,MALUS3
      LMN=1
 4808 WRITE(*,'(3I2)')MALUS1,MALUS2,MALUS3
      WRITE(11,'(3I2)')MALUS1,MALUS2,MALUS3
      WRITE(7,414)MALUS1,MALUS2,MALUS3
  414 FORMAT(3I1,' =MALUS1,MALUS2,MALUS3')
C**   FOR OUTPUT ONLY:
      IF(MALUS1.NE.0)MINUS1=-MINUS1
      IF(MALUS2.NE.0)MINUS2=-MINUS2
      IF(MALUS3.NE.0)MINUS3=-MINUS3
      WRITE(*,4144)MINUS1,MINUS2,MINUS3
      WRITE(11,4144)MINUS1,MINUS2,MINUS3
 4144 FORMAT(' "MINUS" (1 TH & 2 ND & 3 RD SORT OF LIGANDS):',3I3)
      BETA12(1)=TWO/(ONE-RHO(1))
      IF(MALUS1.NE.0)BETA12(1)=TWO/(ONE+RHO(1))
      BETA12(2)=TWO/(ONE+RHO(2))
      IF(MALUS2.NE.0)BETA12(2)=TWO/(ONE-RHO(2))
      BETA12(3)=TWO/(ONE+RHO(3))
      IF(MALUS3.NE.0)BETA12(3)=TWO/(ONE-RHO(3))
      WRITE(*,4145)(BETA12(I),I=1,NSORT)
      WRITE(11,4145)(BETA12(I),I=1,NSORT)
 4145 FORMAT(' START: FACTOR(S) (DOUBLE)BETA:',3D12.4)
      ENDIF
C**   ENDIF BELONGS TO "IF(LAUFIN.EQ.0)THEN"
      BETA12(1)=TWO/(ONE-RHO(1))
      IF(MALUS1.NE.0)BETA12(1)=TWO/(ONE+RHO(1))
      BETA12(2)=TWO/(ONE+RHO(2))
      IF(MALUS2.NE.0)BETA12(2)=TWO/(ONE-RHO(2))
      BETA12(3)=TWO/(ONE+RHO(3))
      IF(MALUS3.NE.0)BETA12(3)=TWO/(ONE-RHO(3))
C
 1376 CONTINUE
C**   NOW CALCULATION OF B-WYBOURNE VALUES WITH CHARGES, FACTORS 
C     AND STRUCTURE FACTORS AS INPUT!:
C
      DO 137 J=1,3
      DO 136 I=1,NSORT
      FAK246(I,J)=ONE
      IF(JAPCEM.EQ.0)FAK246(I,J)=RHO(I)*BETA12(I)**(2*J+1)
      QLMFAK(I,J)=QLIG(I)*FAK246(I,J)
  136 CONTINUE
  137 CONTINUE
C
      IF(KLICK.EQ.0.AND.JAPCEM.EQ.0)THEN
      KLICK=1
      DO 130 I=1,NSORT
      WRITE(*,131)I,NSORT
      WRITE(11,131)I,NSORT
  131 FORMAT(' No. of SORT =',I2,' OF',I2,' SORTS',/
     1,' QLMFAK(J)=CHARGE*FAK246(J)')
      DO 103 J=1,3
      JM2=J*2
      WRITE(*,132)JM2,QLMFAK(I,J),QLIG(I),FAK246(I,J)
      WRITE(11,132)JM2,QLMFAK(I,J),QLIG(I),FAK246(I,J)
  103 CONTINUE
  132 FORMAT(' J,QLMFAK(J),CHARGE,FAK246(J)=',I2,3D12.4)
  130 CONTINUE
      ENDIF
C
      DO 135 K=1,3
      DO 134 J=1,11
      SUM=ZERO
      DO 133 I=1,NSORT
      SUM=SUM+QLMFAK(I,K)*ABC(I,J,K)
  133 CONTINUE
      BWWW(J)=BWWW(J)+SUM
  134 CONTINUE
  135 CONTINUE
C
      DO 1351 K=1,3
      DO 1341 J=1,16
      SUM=ZERO
      DO 1331 I=1,NSORT
      SUM=SUM+QLMFAK(I,K)*DEF(I,J,K)
 1331 CONTINUE
      BWWWS(J)=BWWWS(J)+SUM
 1341 CONTINUE
 1351 CONTINUE
C
C**   B20, B22, B40, B42, B43, B44, B60, B62, B63, B64, B66, NOW "WYBOURNE":
      IF(KLICKZ.EQ.0)THEN
      KLICKZ=1
      WRITE(*,2456)
      WRITE(11,2456)
 2456 FORMAT(' BWWW VALUES 20/22/40/42/43/44/60/62/63/64/66:')
      WRITE(*,'(4D16.8)')(BWWW(I),I=1,11)
      WRITE(11,'(4D16.8)')(BWWW(I),I=1,11)
C
      WRITE(*,1332)
      WRITE(11,1332)
 1332 FORMAT(' FURTHER B-VALUES (BWWWS, MOSTLY ONLY FOR CONTROL):',/
     1,61H 21/21'/22'/41/41'/42'/43'/44'/61/61'/62'/63'/64'/65/65'/66':)
      WRITE(*,'(4D16.8)')(BWWWS(I),I=1,16)
      WRITE(11,'(4D16.8)')(BWWWS(I),I=1,16)
C
      JABWWS=0
C     IF(MITRUF.NE.0)GOTO 539
      IF(NGROUP.EQ.20)THEN
      WRITE(11,1712)
 3514 WRITE(*,1712)
 1712 FORMAT(
     1' LIGAND FIELD PARAMETERS CALCULATED HERE ARE WYBOURNE VALUES,',
     1/,' BUT ARE NOT ROTATIONALLY INVARIANT (*(-1)**q to become so)',/,
     1' INPUT YES/NO(0): ROTATIONAL NOT INVARIANT (B-WYBOURNE)',/
     2,' VALUES => fort.9 IN A SPECIAL ORDER, AND STOP?',/
C05   3,' (ELSE: ODD-NUMBERED VALUES ARE MULTIPLIED BY -1 TO BECOME',/
     4,' (ELSE: B-WYBOURNE VALUES ARE POSSIBLY MASKED, AND',/
     5,' GO IN DIFFERENT ORDER => FORT.9, AND => CONDON.)')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3901)JABWWS
      GOTO 4901
      ENDIF
 3901 READ(*,'(I1)',ERR=3514,END=4576)JABWWS
      LMN=1
 4901 WRITE(*,'(I2)')JABWWS
      WRITE(11,'(I2)')JABWWS
      WRITE(7,4902)JABWWS
 4902 FORMAT(I1,' =JABWWS')
      ENDIF
C 539 CONTINUE
C
      ENDIF
      REWIND(9)
C
      IF(JABWWS.NE.0)THEN
      WRITE(9,1721)
 1721 FORMAT(' STR00.F!:')
      BWWW(12)=BWWWS(3)
      BWWW(13)=BWWWS(6)
      BWWW(14)=BWWWS(7)
      BWWW(15)=BWWWS(8)
      BWWW(16)=BWWWS(11)
      BWWW(17)=BWWWS(12)
      BWWW(18)=BWWWS(13)
      BWWW(19)=BWWWS(16)
      BWWW(20)=0.0D0
      BWWW(21)=BWWWS(1)
      BWWW(22)=BWWWS(4)
      BWWW(23)=BWWWS(9)
      BWWW(24)=BWWWS(14)
      BWWW(25)=BWWWS(2)
      BWWW(26)=BWWWS(5)
      BWWW(27)=BWWWS(10)
      BWWW(28)=BWWWS(15)
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QB(I),I=1,28)
C05    WRITE(9,'(I2,D16.8,2X,A5)')0,BWWWS(10),QB(27),0,BWWWS(15),QB(28)
C
      WRITE(11,1713)
      WRITE(*,1713)
 1713 FORMAT(' 28-1',
     1' BWWW (WYB.-) VALUES =>fort.9 FINISHED, STOP "fort.9" LATER ON!')
C
      ENDIF
C
      DO 2556 I=1,11
      IF(KMASKE(I).NE.0)BWWW(I)=ZERO
 2556 CONTINUE
C
C**   43/63:
C05      BWWW(5)=-BWWW(5)
C05      BWWW(9)=-BWWW(9)
C**   21/21'/(22')/41/41'/(42')/43'/(44')/61/61'/(62')/63'/(64')/65/65'/(66'):
C05      BWWWS(1)=-BWWWS(1)
C05      BWWWS(2)=-BWWWS(2)
C05      BWWWS(4)=-BWWWS(4)
C05      BWWWS(5)=-BWWWS(5)
C05      BWWWS(7)=-BWWWS(7)
C05      BWWWS(9)=-BWWWS(9)
C05      BWWWS(10)=-BWWWS(10)
C05      BWWWS(12)=-BWWWS(12)
C05      BWWWS(14)=-BWWWS(14)
C05      BWWWS(15)=-BWWWS(15)
C
      IF(NGROUP.EQ.21)THEN
      BWWW(6)=BWWW(3)*DSQRT(5.0D0/14.0D0)
      ELSE IF(NGROUP.EQ.22)THEN
C**   THE SIGN IN FRONT OF DSQRT IS MINUS! THE C3-STEP-UP OPERATOR WITH MINUS
C     SIGN IN FRONT OF IT IS USED (AS USUAL!)!
      BWWW(5)=BWWW(3)*(-DSQRT(10.0D0/7.0D0))
      ENDIF
      IF(KLWERT.EQ.3)THEN
      IF(NGROUP.EQ.21)THEN
      BWWW(10)=BWWW(7)*(-DSQRT(3.5D0))
      ELSE IF(NGROUP.EQ.22)THEN
      BWWW(9)=BWWW(7)*DSQRT(210.0D0)/24.0D0
C**   FORMULA FROM M.T. HUTCHINGS, SOLID STATE PHYSICS VOL.16(1964),227
C     ACADEMIC PRESS NEW YORK AND LONDON; FORMULA (2.15) PAGE 246;
C     (THE OPERATOR IS (Y6-3) - (Y6+3)).
      BWWW(11)=BWWW(7)*DSQRT(231.0D0)/24.0D0
      ENDIF
      ENDIF
C
      IF(IN24.GT.20)THEN
C**   (IN24.GT.20) <=> (NGROUP.EQ.20)
      BWWW(IN24-3)=BWWWS(1)
      BWWW(IN24-2)=BWWWS(4)
      BWWW(IN24-1)=BWWWS(9)
      BWWW(IN24)=BWWWS(14)
      ENDIF
C
      IF(KLICKZ.EQ.1)THEN
      KLICKZ=2
C
      IF(NGROUP.EQ.21.OR.NGROUP.EQ.22)THEN
      WRITE(*,2459)
      WRITE(11,2459)
 2459 FORMAT(' CUBIC: B4Q RE-CALCULATED (AND B6Q FOR F EL.)!')
      IF(NGROUP.EQ.22)THEN
      WRITE(*,2495)
      WRITE(11,2495)
 2495 FORMAT(' GROUP-No.=22: IF OCTAHEDRON, B43 <=> OCTAHEDRON WITH',
     1/,' ONE OF ITS CORNERS AT x>0, y=0, z>0 ("STANDARD")!')
      ENDIF
      ENDIF
C
      WRITE(*,2457)NGROUP
      WRITE(11,2457)NGROUP
 2457 FORMAT(' B-WYBOURNE VALUES AFTER MASKING <=> GROUP-No.=',I3,/
     1,' 20/22/40/42/43/44/60/62/63/64/66:')
      WRITE(*,'(4D16.8)')(BWWW(I),I=1,11)
      WRITE(11,'(4D16.8)')(BWWW(I),I=1,11)
      IF(IN24.GT.20)THEN
      WRITE(*,2475)
      WRITE(11,2475)
 2475 FORMAT(' AND FOR GROUP-No.=20:',/
     1,' 21/41/61/65/21''/22''/41''/42''/43''/44''/61''/62''/63''/64''/'
     2,'65''/66'':')
      WRITE(*,'(4(D16.8,1X,A5))')(BWWW(I),QW(I),I=21,IN24)
      WRITE(11,'(4(D16.8,1X,A5))')(BWWW(I),QW(I),I=21,IN24)
      WRITE(*,'(4(D16.8,1X,A5))')(BWWWS(I),QS(I),I=2,3)
     1,(BWWWS(I),QS(I),I=5,8)
     2,(BWWWS(I),QS(I),I=10,13),(BWWWS(I),QS(I),I=15,16)
      WRITE(11,'(4(D16.8,1X,A5))')(BWWWS(I),QS(I),I=2,3)
     1,(BWWWS(I),QS(I),I=5,8)
     2,(BWWWS(I),QS(I),I=10,13),(BWWWS(I),QS(I),I=15,16)
      ENDIF
      NSORT1=NSORT+1
      WRITE(*,2458)(IBWWW(I),I=1,NSORT1)
      WRITE(11,2458)(IBWWW(I),I=1,NSORT1)
 2458 FORMAT(
     1' COV.-FAC. & (MAX.) 3 CHARGES FITTED YES/NO(0):',4I3)
      ENDIF
C
      IF(JABWWS.NE.0)THEN
      STOP 'fort.9'
      ENDIF
C**   IF(JABWWS.EQ.0)THEN
      IF(KLICKB.EQ.0)THEN
      KLICKB=1
      WRITE(11,2460)
      WRITE(*,2460)
 2460 FORMAT(' B-WYBOURNE VALUES => FILE fort.9!')
      WRITE(9,1721)
C1721 FORMAT(' STR00.F!:')
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QW(I),I=1,20)
      IF(IN24.GT.20)THEN
C**   21/41/61/65:
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWW(I),QW(I),I=21,IN24)
C**   (21)/21'/22'/(41)/41'/42'/43'/44'/(61)/61'/62'/63'/64'/(65)/65'/66':
      WRITE(9,'(I2,D16.8,2X,A5)')(0,BWWWS(I),QS(I),I=2,3)
     1,(0,BWWWS(I),QS(I),I=5,8)
     2,(0,BWWWS(I),QS(I),I=10,13),(0,BWWWS(I),QS(I),I=15,16)
      ENDIF
C     IF(MITRUF.NE.0)GOTO 538
      WRITE(11,1711)
 3515 WRITE(*,1711)
 1711 FORMAT(
     1' INPUT YES/NO(0): STOP')
      IF(LMN.EQ.0)THEN
      READ(77,'(I1)',ERR=5588,END=3902)ISTOP9
      GOTO 4903
      ENDIF
 3902 READ(*,'(I1)',ERR=3515,END=4576)ISTOP9
      LMN=1
 4903 WRITE(*,'(I2)')ISTOP9
      WRITE(11,'(I2)')ISTOP9
      WRITE(7,4904)ISTOP9
 4904 FORMAT(I1,' =ISTOP9')
      IF(ISTOP9.NE.0)STOP 'ISTOP9'
C 538 CONTINUE
      ENDIF
C**   ENDIF
C
      RETURN
 4576 CALL FINISH
 5588 CALL FINISI
CEND STR001
      END
